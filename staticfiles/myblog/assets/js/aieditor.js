var qm = Object.defineProperty;
var Zm = (t, e, n) => e in t ? qm(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var P = (t, e, n) => (Zm(t, typeof e != "symbol" ? e + "" : e, n), n);
function Ge(t) {
  this.content = t;
}
Ge.prototype = {
  constructor: Ge,
  find: function(t) {
    for (var e = 0; e < this.content.length; e += 2)
      if (this.content[e] === t)
        return e;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(t) {
    var e = this.find(t);
    return e == -1 ? void 0 : this.content[e + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(t, e, n) {
    var r = n && n != t ? this.remove(n) : this, i = r.find(t), s = r.content.slice();
    return i == -1 ? s.push(n || t, e) : (s[i + 1] = e, n && (s[i] = n)), new Ge(s);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(t) {
    var e = this.find(t);
    if (e == -1)
      return this;
    var n = this.content.slice();
    return n.splice(e, 2), new Ge(n);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(t, e) {
    return new Ge([t, e].concat(this.remove(t).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(t, e) {
    var n = this.remove(t).content.slice();
    return n.push(t, e), new Ge(n);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(t, e, n) {
    var r = this.remove(e), i = r.content.slice(), s = r.find(t);
    return i.splice(s == -1 ? i.length : s, 0, e, n), new Ge(i);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(t) {
    for (var e = 0; e < this.content.length; e += 2)
      t(this.content[e], this.content[e + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(t) {
    return t = Ge.from(t), t.size ? new Ge(t.content.concat(this.subtract(t).content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(t) {
    return t = Ge.from(t), t.size ? new Ge(this.subtract(t).content.concat(t.content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(t) {
    var e = this;
    t = Ge.from(t);
    for (var n = 0; n < t.content.length; n += 2)
      e = e.remove(t.content[n]);
    return e;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var t = {};
    return this.forEach(function(e, n) {
      t[e] = n;
    }), t;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
Ge.from = function(t) {
  if (t instanceof Ge)
    return t;
  var e = [];
  if (t)
    for (var n in t)
      e.push(n, t[n]);
  return new Ge(e);
};
function Tp(t, e, n) {
  for (let r = 0; ; r++) {
    if (r == t.childCount || r == e.childCount)
      return t.childCount == e.childCount ? null : n;
    let i = t.child(r), s = e.child(r);
    if (i == s) {
      n += i.nodeSize;
      continue;
    }
    if (!i.sameMarkup(s))
      return n;
    if (i.isText && i.text != s.text) {
      for (let o = 0; i.text[o] == s.text[o]; o++)
        n++;
      return n;
    }
    if (i.content.size || s.content.size) {
      let o = Tp(i.content, s.content, n + 1);
      if (o != null)
        return o;
    }
    n += i.nodeSize;
  }
}
function Dp(t, e, n, r) {
  for (let i = t.childCount, s = e.childCount; ; ) {
    if (i == 0 || s == 0)
      return i == s ? null : { a: n, b: r };
    let o = t.child(--i), a = e.child(--s), l = o.nodeSize;
    if (o == a) {
      n -= l, r -= l;
      continue;
    }
    if (!o.sameMarkup(a))
      return { a: n, b: r };
    if (o.isText && o.text != a.text) {
      let u = 0, c = Math.min(o.text.length, a.text.length);
      for (; u < c && o.text[o.text.length - u - 1] == a.text[a.text.length - u - 1]; )
        u++, n--, r--;
      return { a: n, b: r };
    }
    if (o.content.size || a.content.size) {
      let u = Dp(o.content, a.content, n - 1, r - 1);
      if (u)
        return u;
    }
    n -= l, r -= l;
  }
}
class O {
  /**
  @internal
  */
  constructor(e, n) {
    if (this.content = e, this.size = n || 0, n == null)
      for (let r = 0; r < e.length; r++)
        this.size += e[r].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(e, n, r, i = 0, s) {
    for (let o = 0, a = 0; a < n; o++) {
      let l = this.content[o], u = a + l.nodeSize;
      if (u > e && r(l, i + a, s || null, o) !== !1 && l.content.size) {
        let c = a + 1;
        l.nodesBetween(Math.max(0, e - c), Math.min(l.content.size, n - c), r, i + c);
      }
      a = u;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(e) {
    this.nodesBetween(0, this.size, e);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(e, n, r, i) {
    let s = "", o = !0;
    return this.nodesBetween(e, n, (a, l) => {
      let u = a.isText ? a.text.slice(Math.max(e, l) - l, n - l) : a.isLeaf ? i ? typeof i == "function" ? i(a) : i : a.type.spec.leafText ? a.type.spec.leafText(a) : "" : "";
      a.isBlock && (a.isLeaf && u || a.isTextblock) && r && (o ? o = !1 : s += r), s += u;
    }, 0), s;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(e) {
    if (!e.size)
      return this;
    if (!this.size)
      return e;
    let n = this.lastChild, r = e.firstChild, i = this.content.slice(), s = 0;
    for (n.isText && n.sameMarkup(r) && (i[i.length - 1] = n.withText(n.text + r.text), s = 1); s < e.content.length; s++)
      i.push(e.content[s]);
    return new O(i, this.size + e.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(e, n = this.size) {
    if (e == 0 && n == this.size)
      return this;
    let r = [], i = 0;
    if (n > e)
      for (let s = 0, o = 0; o < n; s++) {
        let a = this.content[s], l = o + a.nodeSize;
        l > e && ((o < e || l > n) && (a.isText ? a = a.cut(Math.max(0, e - o), Math.min(a.text.length, n - o)) : a = a.cut(Math.max(0, e - o - 1), Math.min(a.content.size, n - o - 1))), r.push(a), i += a.nodeSize), o = l;
      }
    return new O(r, i);
  }
  /**
  @internal
  */
  cutByIndex(e, n) {
    return e == n ? O.empty : e == 0 && n == this.content.length ? this : new O(this.content.slice(e, n));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(e, n) {
    let r = this.content[e];
    if (r == n)
      return this;
    let i = this.content.slice(), s = this.size + n.nodeSize - r.nodeSize;
    return i[e] = n, new O(i, s);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(e) {
    return new O([e].concat(this.content), this.size + e.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(e) {
    return new O(this.content.concat(e), this.size + e.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(e) {
    if (this.content.length != e.content.length)
      return !1;
    for (let n = 0; n < this.content.length; n++)
      if (!this.content[n].eq(e.content[n]))
        return !1;
    return !0;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(e) {
    let n = this.content[e];
    if (!n)
      throw new RangeError("Index " + e + " out of range for " + this);
    return n;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content[e] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    for (let n = 0, r = 0; n < this.content.length; n++) {
      let i = this.content[n];
      e(i, r, n), r += i.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(e, n = 0) {
    return Tp(this, e, n);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(e, n = this.size, r = e.size) {
    return Dp(this, e, n, r);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. (Not public.)
  */
  findIndex(e, n = -1) {
    if (e == 0)
      return Ns(0, e);
    if (e == this.size)
      return Ns(this.content.length, e);
    if (e > this.size || e < 0)
      throw new RangeError(`Position ${e} outside of fragment (${this})`);
    for (let r = 0, i = 0; ; r++) {
      let s = this.child(r), o = i + s.nodeSize;
      if (o >= e)
        return o == e || n > 0 ? Ns(r + 1, o) : Ns(r, i);
      i = o;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((e) => e.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(e, n) {
    if (!n)
      return O.empty;
    if (!Array.isArray(n))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new O(n.map(e.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(e) {
    if (!e.length)
      return O.empty;
    let n, r = 0;
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      r += s.nodeSize, i && s.isText && e[i - 1].sameMarkup(s) ? (n || (n = e.slice(0, i)), n[n.length - 1] = s.withText(n[n.length - 1].text + s.text)) : n && n.push(s);
    }
    return new O(n || e, r);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(e) {
    if (!e)
      return O.empty;
    if (e instanceof O)
      return e;
    if (Array.isArray(e))
      return this.fromArray(e);
    if (e.attrs)
      return new O([e], e.nodeSize);
    throw new RangeError("Can not convert " + e + " to a Fragment" + (e.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
O.empty = new O([], 0);
const ja = { index: 0, offset: 0 };
function Ns(t, e) {
  return ja.index = t, ja.offset = e, ja;
}
function ho(t, e) {
  if (t === e)
    return !0;
  if (!(t && typeof t == "object") || !(e && typeof e == "object"))
    return !1;
  let n = Array.isArray(t);
  if (Array.isArray(e) != n)
    return !1;
  if (n) {
    if (t.length != e.length)
      return !1;
    for (let r = 0; r < t.length; r++)
      if (!ho(t[r], e[r]))
        return !1;
  } else {
    for (let r in t)
      if (!(r in e) || !ho(t[r], e[r]))
        return !1;
    for (let r in e)
      if (!(r in t))
        return !1;
  }
  return !0;
}
let ye = class jl {
  /**
  @internal
  */
  constructor(e, n) {
    this.type = e, this.attrs = n;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(e) {
    let n, r = !1;
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      if (this.eq(s))
        return e;
      if (this.type.excludes(s.type))
        n || (n = e.slice(0, i));
      else {
        if (s.type.excludes(this.type))
          return e;
        !r && s.type.rank > this.type.rank && (n || (n = e.slice(0, i)), n.push(this), r = !0), n && n.push(s);
      }
    }
    return n || (n = e.slice()), r || n.push(this), n;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(e) {
    for (let n = 0; n < e.length; n++)
      if (this.eq(e[n]))
        return e.slice(0, n).concat(e.slice(n + 1));
    return e;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(e) {
    for (let n = 0; n < e.length; n++)
      if (this.eq(e[n]))
        return !0;
    return !1;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(e) {
    return this == e || this.type == e.type && ho(this.attrs, e.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let n in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return e;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(e, n) {
    if (!n)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let r = e.marks[n.type];
    if (!r)
      throw new RangeError(`There is no mark type ${n.type} in this schema`);
    return r.create(n.attrs);
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(e, n) {
    if (e == n)
      return !0;
    if (e.length != n.length)
      return !1;
    for (let r = 0; r < e.length; r++)
      if (!e[r].eq(n[r]))
        return !1;
    return !0;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(e) {
    if (!e || Array.isArray(e) && e.length == 0)
      return jl.none;
    if (e instanceof jl)
      return [e];
    let n = e.slice();
    return n.sort((r, i) => r.type.rank - i.type.rank), n;
  }
};
ye.none = [];
class po extends Error {
}
class B {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(e, n, r) {
    this.content = e, this.openStart = n, this.openEnd = r;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(e, n) {
    let r = Np(this.content, e + this.openStart, n);
    return r && new B(r, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(e, n) {
    return new B(Op(this.content, e + this.openStart, n + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(e) {
    return this.content.eq(e.content) && this.openStart == e.openStart && this.openEnd == e.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let e = { content: this.content.toJSON() };
    return this.openStart > 0 && (e.openStart = this.openStart), this.openEnd > 0 && (e.openEnd = this.openEnd), e;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(e, n) {
    if (!n)
      return B.empty;
    let r = n.openStart || 0, i = n.openEnd || 0;
    if (typeof r != "number" || typeof i != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new B(O.fromJSON(e, n.content), r, i);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(e, n = !0) {
    let r = 0, i = 0;
    for (let s = e.firstChild; s && !s.isLeaf && (n || !s.type.spec.isolating); s = s.firstChild)
      r++;
    for (let s = e.lastChild; s && !s.isLeaf && (n || !s.type.spec.isolating); s = s.lastChild)
      i++;
    return new B(e, r, i);
  }
}
B.empty = new B(O.empty, 0, 0);
function Op(t, e, n) {
  let { index: r, offset: i } = t.findIndex(e), s = t.maybeChild(r), { index: o, offset: a } = t.findIndex(n);
  if (i == e || s.isText) {
    if (a != n && !t.child(o).isText)
      throw new RangeError("Removing non-flat range");
    return t.cut(0, e).append(t.cut(n));
  }
  if (r != o)
    throw new RangeError("Removing non-flat range");
  return t.replaceChild(r, s.copy(Op(s.content, e - i - 1, n - i - 1)));
}
function Np(t, e, n, r) {
  let { index: i, offset: s } = t.findIndex(e), o = t.maybeChild(i);
  if (s == e || o.isText)
    return r && !r.canReplace(i, i, n) ? null : t.cut(0, e).append(n).append(t.cut(e));
  let a = Np(o.content, e - s - 1, n);
  return a && t.replaceChild(i, o.copy(a));
}
function Km(t, e, n) {
  if (n.openStart > t.depth)
    throw new po("Inserted content deeper than insertion position");
  if (t.depth - n.openStart != e.depth - n.openEnd)
    throw new po("Inconsistent open depths");
  return Lp(t, e, n, 0);
}
function Lp(t, e, n, r) {
  let i = t.index(r), s = t.node(r);
  if (i == e.index(r) && r < t.depth - n.openStart) {
    let o = Lp(t, e, n, r + 1);
    return s.copy(s.content.replaceChild(i, o));
  } else if (n.content.size)
    if (!n.openStart && !n.openEnd && t.depth == r && e.depth == r) {
      let o = t.parent, a = o.content;
      return lr(o, a.cut(0, t.parentOffset).append(n.content).append(a.cut(e.parentOffset)));
    } else {
      let { start: o, end: a } = Wm(n, t);
      return lr(s, Ip(t, o, a, e, r));
    }
  else
    return lr(s, go(t, e, r));
}
function Rp(t, e) {
  if (!e.type.compatibleContent(t.type))
    throw new po("Cannot join " + e.type.name + " onto " + t.type.name);
}
function Gl(t, e, n) {
  let r = t.node(n);
  return Rp(r, e.node(n)), r;
}
function ar(t, e) {
  let n = e.length - 1;
  n >= 0 && t.isText && t.sameMarkup(e[n]) ? e[n] = t.withText(e[n].text + t.text) : e.push(t);
}
function Di(t, e, n, r) {
  let i = (e || t).node(n), s = 0, o = e ? e.index(n) : i.childCount;
  t && (s = t.index(n), t.depth > n ? s++ : t.textOffset && (ar(t.nodeAfter, r), s++));
  for (let a = s; a < o; a++)
    ar(i.child(a), r);
  e && e.depth == n && e.textOffset && ar(e.nodeBefore, r);
}
function lr(t, e) {
  return t.type.checkContent(e), t.copy(e);
}
function Ip(t, e, n, r, i) {
  let s = t.depth > i && Gl(t, e, i + 1), o = r.depth > i && Gl(n, r, i + 1), a = [];
  return Di(null, t, i, a), s && o && e.index(i) == n.index(i) ? (Rp(s, o), ar(lr(s, Ip(t, e, n, r, i + 1)), a)) : (s && ar(lr(s, go(t, e, i + 1)), a), Di(e, n, i, a), o && ar(lr(o, go(n, r, i + 1)), a)), Di(r, null, i, a), new O(a);
}
function go(t, e, n) {
  let r = [];
  if (Di(null, t, n, r), t.depth > n) {
    let i = Gl(t, e, n + 1);
    ar(lr(i, go(t, e, n + 1)), r);
  }
  return Di(e, null, n, r), new O(r);
}
function Wm(t, e) {
  let n = e.depth - t.openStart, i = e.node(n).copy(t.content);
  for (let s = n - 1; s >= 0; s--)
    i = e.node(s).copy(O.from(i));
  return {
    start: i.resolveNoCache(t.openStart + n),
    end: i.resolveNoCache(i.content.size - t.openEnd - n)
  };
}
class zi {
  /**
  @internal
  */
  constructor(e, n, r) {
    this.pos = e, this.path = n, this.parentOffset = r, this.depth = n.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(e) {
    return e == null ? this.depth : e < 0 ? this.depth + e : e;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(e) {
    return this.path[this.resolveDepth(e) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(e) {
    return this.path[this.resolveDepth(e) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(e) {
    return e = this.resolveDepth(e), this.index(e) + (e == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(e) {
    return e = this.resolveDepth(e), e == 0 ? 0 : this.path[e * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(e) {
    return e = this.resolveDepth(e), this.start(e) + this.node(e).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position before the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position after the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1] + this.path[e * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let e = this.parent, n = this.index(this.depth);
    if (n == e.childCount)
      return null;
    let r = this.pos - this.path[this.path.length - 1], i = e.child(n);
    return r ? e.child(n).cut(r) : i;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let e = this.index(this.depth), n = this.pos - this.path[this.path.length - 1];
    return n ? this.parent.child(e).cut(0, n) : e == 0 ? null : this.parent.child(e - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(e, n) {
    n = this.resolveDepth(n);
    let r = this.path[n * 3], i = n == 0 ? 0 : this.path[n * 3 - 1] + 1;
    for (let s = 0; s < e; s++)
      i += r.child(s).nodeSize;
    return i;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let e = this.parent, n = this.index();
    if (e.content.size == 0)
      return ye.none;
    if (this.textOffset)
      return e.child(n).marks;
    let r = e.maybeChild(n - 1), i = e.maybeChild(n);
    if (!r) {
      let a = r;
      r = i, i = a;
    }
    let s = r.marks;
    for (var o = 0; o < s.length; o++)
      s[o].type.spec.inclusive === !1 && (!i || !s[o].isInSet(i.marks)) && (s = s[o--].removeFromSet(s));
    return s;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross(e) {
    let n = this.parent.maybeChild(this.index());
    if (!n || !n.isInline)
      return null;
    let r = n.marks, i = e.parent.maybeChild(e.index());
    for (var s = 0; s < r.length; s++)
      r[s].type.spec.inclusive === !1 && (!i || !r[s].isInSet(i.marks)) && (r = r[s--].removeFromSet(r));
    return r;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(e) {
    for (let n = this.depth; n > 0; n--)
      if (this.start(n) <= e && this.end(n) >= e)
        return n;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(e = this, n) {
    if (e.pos < this.pos)
      return e.blockRange(this);
    for (let r = this.depth - (this.parent.inlineContent || this.pos == e.pos ? 1 : 0); r >= 0; r--)
      if (e.pos <= this.end(r) && (!n || n(this.node(r))))
        return new mo(this, e, r);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(e) {
    return this.pos - this.parentOffset == e.pos - e.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(e) {
    return e.pos > this.pos ? e : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(e) {
    return e.pos < this.pos ? e : this;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let n = 1; n <= this.depth; n++)
      e += (e ? "/" : "") + this.node(n).type.name + "_" + this.index(n - 1);
    return e + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(e, n) {
    if (!(n >= 0 && n <= e.content.size))
      throw new RangeError("Position " + n + " out of range");
    let r = [], i = 0, s = n;
    for (let o = e; ; ) {
      let { index: a, offset: l } = o.content.findIndex(s), u = s - l;
      if (r.push(o, a, i + l), !u || (o = o.child(a), o.isText))
        break;
      s = u - 1, i += l + 1;
    }
    return new zi(n, r, s);
  }
  /**
  @internal
  */
  static resolveCached(e, n) {
    for (let i = 0; i < Ga.length; i++) {
      let s = Ga[i];
      if (s.pos == n && s.doc == e)
        return s;
    }
    let r = Ga[Ja] = zi.resolve(e, n);
    return Ja = (Ja + 1) % jm, r;
  }
}
let Ga = [], Ja = 0, jm = 12;
class mo {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor(e, n, r) {
    this.$from = e, this.$to = n, this.depth = r;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const Gm = /* @__PURE__ */ Object.create(null);
let ur = class Jl {
  /**
  @internal
  */
  constructor(e, n, r, i = ye.none) {
    this.type = e, this.attrs = n, this.marks = i, this.content = r || O.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(e) {
    return this.content.child(e);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content.maybeChild(e);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    this.content.forEach(e);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(e, n, r, i = 0) {
    this.content.nodesBetween(e, n, r, i, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(e) {
    this.nodesBetween(0, this.content.size, e);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(e, n, r, i) {
    return this.content.textBetween(e, n, r, i);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(e) {
    return this == e || this.sameMarkup(e) && this.content.eq(e.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(e) {
    return this.hasMarkup(e.type, e.attrs, e.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(e, n, r) {
    return this.type == e && ho(this.attrs, n || e.defaultAttrs || Gm) && ye.sameSet(this.marks, r || ye.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(e = null) {
    return e == this.content ? this : new Jl(this.type, this.attrs, e, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(e) {
    return e == this.marks ? this : new Jl(this.type, this.attrs, this.content, e);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(e, n = this.content.size) {
    return e == 0 && n == this.content.size ? this : this.copy(this.content.cut(e, n));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(e, n = this.content.size, r = !1) {
    if (e == n)
      return B.empty;
    let i = this.resolve(e), s = this.resolve(n), o = r ? 0 : i.sharedDepth(n), a = i.start(o), u = i.node(o).content.cut(i.pos - a, s.pos - a);
    return new B(u, i.depth - o, s.depth - o);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(e, n, r) {
    return Km(this.resolve(e), this.resolve(n), r);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(e) {
    for (let n = this; ; ) {
      let { index: r, offset: i } = n.content.findIndex(e);
      if (n = n.maybeChild(r), !n)
        return null;
      if (i == e || n.isText)
        return n;
      e -= i + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(e) {
    let { index: n, offset: r } = this.content.findIndex(e);
    return { node: this.content.maybeChild(n), index: n, offset: r };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(e) {
    if (e == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: n, offset: r } = this.content.findIndex(e);
    if (r < e)
      return { node: this.content.child(n), index: n, offset: r };
    let i = this.content.child(n - 1);
    return { node: i, index: n - 1, offset: r - i.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(e) {
    return zi.resolveCached(this, e);
  }
  /**
  @internal
  */
  resolveNoCache(e) {
    return zi.resolve(this, e);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(e, n, r) {
    let i = !1;
    return n > e && this.nodesBetween(e, n, (s) => (r.isInSet(s.marks) && (i = !0), !i)), i;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let e = this.type.name;
    return this.content.size && (e += "(" + this.content.toStringInner() + ")"), Fp(this.marks, e);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(e) {
    let n = this.type.contentMatch.matchFragment(this.content, 0, e);
    if (!n)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return n;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(e, n, r = O.empty, i = 0, s = r.childCount) {
    let o = this.contentMatchAt(e).matchFragment(r, i, s), a = o && o.matchFragment(this.content, n);
    if (!a || !a.validEnd)
      return !1;
    for (let l = i; l < s; l++)
      if (!this.type.allowsMarks(r.child(l).marks))
        return !1;
    return !0;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(e, n, r, i) {
    if (i && !this.type.allowsMarks(i))
      return !1;
    let s = this.contentMatchAt(e).matchType(r), o = s && s.matchFragment(this.content, n);
    return o ? o.validEnd : !1;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(e) {
    return e.content.size ? this.canReplace(this.childCount, this.childCount, e.content) : this.type.compatibleContent(e.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise error when they do not.
  */
  check() {
    this.type.checkContent(this.content);
    let e = ye.none;
    for (let n = 0; n < this.marks.length; n++)
      e = this.marks[n].addToSet(e);
    if (!ye.sameSet(e, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((n) => n.type.name)}`);
    this.content.forEach((n) => n.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let n in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return this.content.size && (e.content = this.content.toJSON()), this.marks.length && (e.marks = this.marks.map((n) => n.toJSON())), e;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(e, n) {
    if (!n)
      throw new RangeError("Invalid input for Node.fromJSON");
    let r = null;
    if (n.marks) {
      if (!Array.isArray(n.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      r = n.marks.map(e.markFromJSON);
    }
    if (n.type == "text") {
      if (typeof n.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return e.text(n.text, r);
    }
    let i = O.fromJSON(e, n.content);
    return e.nodeType(n.type).create(n.attrs, i, r);
  }
};
ur.prototype.text = void 0;
class bo extends ur {
  /**
  @internal
  */
  constructor(e, n, r, i) {
    if (super(e, n, null, i), !r)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = r;
  }
  toString() {
    return this.type.spec.toDebugString ? this.type.spec.toDebugString(this) : Fp(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(e, n) {
    return this.text.slice(e, n);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(e) {
    return e == this.marks ? this : new bo(this.type, this.attrs, this.text, e);
  }
  withText(e) {
    return e == this.text ? this : new bo(this.type, this.attrs, e, this.marks);
  }
  cut(e = 0, n = this.text.length) {
    return e == 0 && n == this.text.length ? this : this.withText(this.text.slice(e, n));
  }
  eq(e) {
    return this.sameMarkup(e) && this.text == e.text;
  }
  toJSON() {
    let e = super.toJSON();
    return e.text = this.text, e;
  }
}
function Fp(t, e) {
  for (let n = t.length - 1; n >= 0; n--)
    e = t[n].type.name + "(" + e + ")";
  return e;
}
class gr {
  /**
  @internal
  */
  constructor(e) {
    this.validEnd = e, this.next = [], this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(e, n) {
    let r = new Jm(e, n);
    if (r.next == null)
      return gr.empty;
    let i = Hp(r);
    r.next && r.err("Unexpected trailing text");
    let s = rb(nb(i));
    return ib(s, r), s;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(e) {
    for (let n = 0; n < this.next.length; n++)
      if (this.next[n].type == e)
        return this.next[n].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(e, n = 0, r = e.childCount) {
    let i = this;
    for (let s = n; i && s < r; s++)
      i = i.matchType(e.child(s).type);
    return i;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let e = 0; e < this.next.length; e++) {
      let { type: n } = this.next[e];
      if (!(n.isText || n.hasRequiredAttrs()))
        return n;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(e) {
    for (let n = 0; n < this.next.length; n++)
      for (let r = 0; r < e.next.length; r++)
        if (this.next[n].type == e.next[r].type)
          return !0;
    return !1;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(e, n = !1, r = 0) {
    let i = [this];
    function s(o, a) {
      let l = o.matchFragment(e, r);
      if (l && (!n || l.validEnd))
        return O.from(a.map((u) => u.createAndFill()));
      for (let u = 0; u < o.next.length; u++) {
        let { type: c, next: d } = o.next[u];
        if (!(c.isText || c.hasRequiredAttrs()) && i.indexOf(d) == -1) {
          i.push(d);
          let f = s(d, a.concat(c));
          if (f)
            return f;
        }
      }
      return null;
    }
    return s(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(e) {
    for (let r = 0; r < this.wrapCache.length; r += 2)
      if (this.wrapCache[r] == e)
        return this.wrapCache[r + 1];
    let n = this.computeWrapping(e);
    return this.wrapCache.push(e, n), n;
  }
  /**
  @internal
  */
  computeWrapping(e) {
    let n = /* @__PURE__ */ Object.create(null), r = [{ match: this, type: null, via: null }];
    for (; r.length; ) {
      let i = r.shift(), s = i.match;
      if (s.matchType(e)) {
        let o = [];
        for (let a = i; a.type; a = a.via)
          o.push(a.type);
        return o.reverse();
      }
      for (let o = 0; o < s.next.length; o++) {
        let { type: a, next: l } = s.next[o];
        !a.isLeaf && !a.hasRequiredAttrs() && !(a.name in n) && (!i.type || l.validEnd) && (r.push({ match: a.contentMatch, type: a, via: i }), n[a.name] = !0);
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(e) {
    if (e >= this.next.length)
      throw new RangeError(`There's no ${e}th edge in this content match`);
    return this.next[e];
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    function n(r) {
      e.push(r);
      for (let i = 0; i < r.next.length; i++)
        e.indexOf(r.next[i].next) == -1 && n(r.next[i].next);
    }
    return n(this), e.map((r, i) => {
      let s = i + (r.validEnd ? "*" : " ") + " ";
      for (let o = 0; o < r.next.length; o++)
        s += (o ? ", " : "") + r.next[o].type.name + "->" + e.indexOf(r.next[o].next);
      return s;
    }).join(`
`);
  }
}
gr.empty = new gr(!0);
class Jm {
  constructor(e, n) {
    this.string = e, this.nodeTypes = n, this.inline = null, this.pos = 0, this.tokens = e.split(/\s*(?=\b|\W|$)/), this.tokens[this.tokens.length - 1] == "" && this.tokens.pop(), this.tokens[0] == "" && this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(e) {
    return this.next == e && (this.pos++ || !0);
  }
  err(e) {
    throw new SyntaxError(e + " (in content expression '" + this.string + "')");
  }
}
function Hp(t) {
  let e = [];
  do
    e.push(Ym(t));
  while (t.eat("|"));
  return e.length == 1 ? e[0] : { type: "choice", exprs: e };
}
function Ym(t) {
  let e = [];
  do
    e.push(Xm(t));
  while (t.next && t.next != ")" && t.next != "|");
  return e.length == 1 ? e[0] : { type: "seq", exprs: e };
}
function Xm(t) {
  let e = tb(t);
  for (; ; )
    if (t.eat("+"))
      e = { type: "plus", expr: e };
    else if (t.eat("*"))
      e = { type: "star", expr: e };
    else if (t.eat("?"))
      e = { type: "opt", expr: e };
    else if (t.eat("{"))
      e = Qm(t, e);
    else
      break;
  return e;
}
function nd(t) {
  /\D/.test(t.next) && t.err("Expected number, got '" + t.next + "'");
  let e = Number(t.next);
  return t.pos++, e;
}
function Qm(t, e) {
  let n = nd(t), r = n;
  return t.eat(",") && (t.next != "}" ? r = nd(t) : r = -1), t.eat("}") || t.err("Unclosed braced range"), { type: "range", min: n, max: r, expr: e };
}
function eb(t, e) {
  let n = t.nodeTypes, r = n[e];
  if (r)
    return [r];
  let i = [];
  for (let s in n) {
    let o = n[s];
    o.groups.indexOf(e) > -1 && i.push(o);
  }
  return i.length == 0 && t.err("No node type or group '" + e + "' found"), i;
}
function tb(t) {
  if (t.eat("(")) {
    let e = Hp(t);
    return t.eat(")") || t.err("Missing closing paren"), e;
  } else if (/\W/.test(t.next))
    t.err("Unexpected token '" + t.next + "'");
  else {
    let e = eb(t, t.next).map((n) => (t.inline == null ? t.inline = n.isInline : t.inline != n.isInline && t.err("Mixing inline and block content"), { type: "name", value: n }));
    return t.pos++, e.length == 1 ? e[0] : { type: "choice", exprs: e };
  }
}
function nb(t) {
  let e = [[]];
  return i(s(t, 0), n()), e;
  function n() {
    return e.push([]) - 1;
  }
  function r(o, a, l) {
    let u = { term: l, to: a };
    return e[o].push(u), u;
  }
  function i(o, a) {
    o.forEach((l) => l.to = a);
  }
  function s(o, a) {
    if (o.type == "choice")
      return o.exprs.reduce((l, u) => l.concat(s(u, a)), []);
    if (o.type == "seq")
      for (let l = 0; ; l++) {
        let u = s(o.exprs[l], a);
        if (l == o.exprs.length - 1)
          return u;
        i(u, a = n());
      }
    else if (o.type == "star") {
      let l = n();
      return r(a, l), i(s(o.expr, l), l), [r(l)];
    } else if (o.type == "plus") {
      let l = n();
      return i(s(o.expr, a), l), i(s(o.expr, l), l), [r(l)];
    } else {
      if (o.type == "opt")
        return [r(a)].concat(s(o.expr, a));
      if (o.type == "range") {
        let l = a;
        for (let u = 0; u < o.min; u++) {
          let c = n();
          i(s(o.expr, l), c), l = c;
        }
        if (o.max == -1)
          i(s(o.expr, l), l);
        else
          for (let u = o.min; u < o.max; u++) {
            let c = n();
            r(l, c), i(s(o.expr, l), c), l = c;
          }
        return [r(l)];
      } else {
        if (o.type == "name")
          return [r(a, void 0, o.value)];
        throw new Error("Unknown expr type");
      }
    }
  }
}
function Bp(t, e) {
  return e - t;
}
function rd(t, e) {
  let n = [];
  return r(e), n.sort(Bp);
  function r(i) {
    let s = t[i];
    if (s.length == 1 && !s[0].term)
      return r(s[0].to);
    n.push(i);
    for (let o = 0; o < s.length; o++) {
      let { term: a, to: l } = s[o];
      !a && n.indexOf(l) == -1 && r(l);
    }
  }
}
function rb(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return n(rd(t, 0));
  function n(r) {
    let i = [];
    r.forEach((o) => {
      t[o].forEach(({ term: a, to: l }) => {
        if (!a)
          return;
        let u;
        for (let c = 0; c < i.length; c++)
          i[c][0] == a && (u = i[c][1]);
        rd(t, l).forEach((c) => {
          u || i.push([a, u = []]), u.indexOf(c) == -1 && u.push(c);
        });
      });
    });
    let s = e[r.join(",")] = new gr(r.indexOf(t.length - 1) > -1);
    for (let o = 0; o < i.length; o++) {
      let a = i[o][1].sort(Bp);
      s.next.push({ type: i[o][0], next: e[a.join(",")] || n(a) });
    }
    return s;
  }
}
function ib(t, e) {
  for (let n = 0, r = [t]; n < r.length; n++) {
    let i = r[n], s = !i.validEnd, o = [];
    for (let a = 0; a < i.next.length; a++) {
      let { type: l, next: u } = i.next[a];
      o.push(l.name), s && !(l.isText || l.hasRequiredAttrs()) && (s = !1), r.indexOf(u) == -1 && r.push(u);
    }
    s && e.err("Only non-generatable nodes (" + o.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function Pp(t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let n in t) {
    let r = t[n];
    if (!r.hasDefault)
      return null;
    e[n] = r.default;
  }
  return e;
}
function $p(t, e) {
  let n = /* @__PURE__ */ Object.create(null);
  for (let r in t) {
    let i = e && e[r];
    if (i === void 0) {
      let s = t[r];
      if (s.hasDefault)
        i = s.default;
      else
        throw new RangeError("No value supplied for attribute " + r);
    }
    n[r] = i;
  }
  return n;
}
function zp(t) {
  let e = /* @__PURE__ */ Object.create(null);
  if (t)
    for (let n in t)
      e[n] = new sb(t[n]);
  return e;
}
let id = class Vp {
  /**
  @internal
  */
  constructor(e, n, r) {
    this.name = e, this.schema = n, this.spec = r, this.markSet = null, this.groups = r.group ? r.group.split(" ") : [], this.attrs = zp(r.attrs), this.defaultAttrs = Pp(this.attrs), this.contentMatch = null, this.inlineContent = null, this.isBlock = !(r.inline || e == "text"), this.isText = e == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == gr.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let e in this.attrs)
      if (this.attrs[e].isRequired)
        return !0;
    return !1;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(e) {
    return this == e || this.contentMatch.compatible(e.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(e) {
    return !e && this.defaultAttrs ? this.defaultAttrs : $p(this.attrs, e);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(e = null, n, r) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new ur(this, this.computeAttrs(e), O.from(n), ye.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(e = null, n, r) {
    return n = O.from(n), this.checkContent(n), new ur(this, this.computeAttrs(e), n, ye.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(e = null, n, r) {
    if (e = this.computeAttrs(e), n = O.from(n), n.size) {
      let o = this.contentMatch.fillBefore(n);
      if (!o)
        return null;
      n = o.append(n);
    }
    let i = this.contentMatch.matchFragment(n), s = i && i.fillBefore(O.empty, !0);
    return s ? new ur(this, e, n.append(s), ye.setFrom(r)) : null;
  }
  /**
  Returns true if the given fragment is valid content for this node
  type with the given attributes.
  */
  validContent(e) {
    let n = this.contentMatch.matchFragment(e);
    if (!n || !n.validEnd)
      return !1;
    for (let r = 0; r < e.childCount; r++)
      if (!this.allowsMarks(e.child(r).marks))
        return !1;
    return !0;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(e) {
    if (!this.validContent(e))
      throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0, 50)}`);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(e) {
    return this.markSet == null || this.markSet.indexOf(e) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(e) {
    if (this.markSet == null)
      return !0;
    for (let n = 0; n < e.length; n++)
      if (!this.allowsMarkType(e[n].type))
        return !1;
    return !0;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(e) {
    if (this.markSet == null)
      return e;
    let n;
    for (let r = 0; r < e.length; r++)
      this.allowsMarkType(e[r].type) ? n && n.push(e[r]) : n || (n = e.slice(0, r));
    return n ? n.length ? n : ye.none : e;
  }
  /**
  @internal
  */
  static compile(e, n) {
    let r = /* @__PURE__ */ Object.create(null);
    e.forEach((s, o) => r[s] = new Vp(s, n, o));
    let i = n.spec.topNode || "doc";
    if (!r[i])
      throw new RangeError("Schema is missing its top node type ('" + i + "')");
    if (!r.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let s in r.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return r;
  }
};
class sb {
  constructor(e) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(e, "default"), this.default = e.default;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class ua {
  /**
  @internal
  */
  constructor(e, n, r, i) {
    this.name = e, this.rank = n, this.schema = r, this.spec = i, this.attrs = zp(i.attrs), this.excluded = null;
    let s = Pp(this.attrs);
    this.instance = s ? new ye(this, s) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(e = null) {
    return !e && this.instance ? this.instance : new ye(this, $p(this.attrs, e));
  }
  /**
  @internal
  */
  static compile(e, n) {
    let r = /* @__PURE__ */ Object.create(null), i = 0;
    return e.forEach((s, o) => r[s] = new ua(s, i++, n, o)), r;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(e) {
    for (var n = 0; n < e.length; n++)
      e[n].type == this && (e = e.slice(0, n).concat(e.slice(n + 1)), n--);
    return e;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(e) {
    for (let n = 0; n < e.length; n++)
      if (e[n].type == this)
        return e[n];
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(e) {
    return this.excluded.indexOf(e) > -1;
  }
}
class Up {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(e) {
    this.cached = /* @__PURE__ */ Object.create(null);
    let n = this.spec = {};
    for (let i in e)
      n[i] = e[i];
    n.nodes = Ge.from(e.nodes), n.marks = Ge.from(e.marks || {}), this.nodes = id.compile(this.spec.nodes, this), this.marks = ua.compile(this.spec.marks, this);
    let r = /* @__PURE__ */ Object.create(null);
    for (let i in this.nodes) {
      if (i in this.marks)
        throw new RangeError(i + " can not be both a node and a mark");
      let s = this.nodes[i], o = s.spec.content || "", a = s.spec.marks;
      s.contentMatch = r[o] || (r[o] = gr.parse(o, this.nodes)), s.inlineContent = s.contentMatch.inlineContent, s.markSet = a == "_" ? null : a ? sd(this, a.split(" ")) : a == "" || !s.inlineContent ? [] : null;
    }
    for (let i in this.marks) {
      let s = this.marks[i], o = s.spec.excludes;
      s.excluded = o == null ? [s] : o == "" ? [] : sd(this, o.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this), this.markFromJSON = this.markFromJSON.bind(this), this.topNodeType = this.nodes[this.spec.topNode || "doc"], this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(e, n = null, r, i) {
    if (typeof e == "string")
      e = this.nodeType(e);
    else if (e instanceof id) {
      if (e.schema != this)
        throw new RangeError("Node type from different schema used (" + e.name + ")");
    } else
      throw new RangeError("Invalid node type: " + e);
    return e.createChecked(n, r, i);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(e, n) {
    let r = this.nodes.text;
    return new bo(r, r.defaultAttrs, e, ye.setFrom(n));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(e, n) {
    return typeof e == "string" && (e = this.marks[e]), e.create(n);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(e) {
    return ur.fromJSON(this, e);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(e) {
    return ye.fromJSON(this, e);
  }
  /**
  @internal
  */
  nodeType(e) {
    let n = this.nodes[e];
    if (!n)
      throw new RangeError("Unknown node type: " + e);
    return n;
  }
}
function sd(t, e) {
  let n = [];
  for (let r = 0; r < e.length; r++) {
    let i = e[r], s = t.marks[i], o = s;
    if (s)
      n.push(s);
    else
      for (let a in t.marks) {
        let l = t.marks[a];
        (i == "_" || l.spec.group && l.spec.group.split(" ").indexOf(i) > -1) && n.push(o = l);
      }
    if (!o)
      throw new SyntaxError("Unknown mark type: '" + e[r] + "'");
  }
  return n;
}
let ps = class Yl {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(e, n) {
    this.schema = e, this.rules = n, this.tags = [], this.styles = [], n.forEach((r) => {
      r.tag ? this.tags.push(r) : r.style && this.styles.push(r);
    }), this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return !1;
      let i = e.nodes[r.node];
      return i.contentMatch.matchType(i);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(e, n = {}) {
    let r = new ad(this, n, !1);
    return r.addAll(e, n.from, n.to), r.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(e, n = {}) {
    let r = new ad(this, n, !0);
    return r.addAll(e, n.from, n.to), B.maxOpen(r.finish());
  }
  /**
  @internal
  */
  matchTag(e, n, r) {
    for (let i = r ? this.tags.indexOf(r) + 1 : 0; i < this.tags.length; i++) {
      let s = this.tags[i];
      if (lb(e, s.tag) && (s.namespace === void 0 || e.namespaceURI == s.namespace) && (!s.context || n.matchesContext(s.context))) {
        if (s.getAttrs) {
          let o = s.getAttrs(e);
          if (o === !1)
            continue;
          s.attrs = o || void 0;
        }
        return s;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(e, n, r, i) {
    for (let s = i ? this.styles.indexOf(i) + 1 : 0; s < this.styles.length; s++) {
      let o = this.styles[s], a = o.style;
      if (!(a.indexOf(e) != 0 || o.context && !r.matchesContext(o.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      a.length > e.length && (a.charCodeAt(e.length) != 61 || a.slice(e.length + 1) != n))) {
        if (o.getAttrs) {
          let l = o.getAttrs(n);
          if (l === !1)
            continue;
          o.attrs = l || void 0;
        }
        return o;
      }
    }
  }
  /**
  @internal
  */
  static schemaRules(e) {
    let n = [];
    function r(i) {
      let s = i.priority == null ? 50 : i.priority, o = 0;
      for (; o < n.length; o++) {
        let a = n[o];
        if ((a.priority == null ? 50 : a.priority) < s)
          break;
      }
      n.splice(o, 0, i);
    }
    for (let i in e.marks) {
      let s = e.marks[i].spec.parseDOM;
      s && s.forEach((o) => {
        r(o = ld(o)), o.mark || o.ignore || o.clearMark || (o.mark = i);
      });
    }
    for (let i in e.nodes) {
      let s = e.nodes[i].spec.parseDOM;
      s && s.forEach((o) => {
        r(o = ld(o)), o.node || o.ignore || o.mark || (o.node = i);
      });
    }
    return n;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(e) {
    return e.cached.domParser || (e.cached.domParser = new Yl(e, Yl.schemaRules(e)));
  }
};
const qp = {
  address: !0,
  article: !0,
  aside: !0,
  blockquote: !0,
  canvas: !0,
  dd: !0,
  div: !0,
  dl: !0,
  fieldset: !0,
  figcaption: !0,
  figure: !0,
  footer: !0,
  form: !0,
  h1: !0,
  h2: !0,
  h3: !0,
  h4: !0,
  h5: !0,
  h6: !0,
  header: !0,
  hgroup: !0,
  hr: !0,
  li: !0,
  noscript: !0,
  ol: !0,
  output: !0,
  p: !0,
  pre: !0,
  section: !0,
  table: !0,
  tfoot: !0,
  ul: !0
}, ob = {
  head: !0,
  noscript: !0,
  object: !0,
  script: !0,
  style: !0,
  title: !0
}, Zp = { ol: !0, ul: !0 }, yo = 1, xo = 2, Oi = 4;
function od(t, e, n) {
  return e != null ? (e ? yo : 0) | (e === "full" ? xo : 0) : t && t.whitespace == "pre" ? yo | xo : n & ~Oi;
}
class Ls {
  constructor(e, n, r, i, s, o, a) {
    this.type = e, this.attrs = n, this.marks = r, this.pendingMarks = i, this.solid = s, this.options = a, this.content = [], this.activeMarks = ye.none, this.stashMarks = [], this.match = o || (a & Oi ? null : e.contentMatch);
  }
  findWrapping(e) {
    if (!this.match) {
      if (!this.type)
        return [];
      let n = this.type.contentMatch.fillBefore(O.from(e));
      if (n)
        this.match = this.type.contentMatch.matchFragment(n);
      else {
        let r = this.type.contentMatch, i;
        return (i = r.findWrapping(e.type)) ? (this.match = r, i) : null;
      }
    }
    return this.match.findWrapping(e.type);
  }
  finish(e) {
    if (!(this.options & yo)) {
      let r = this.content[this.content.length - 1], i;
      if (r && r.isText && (i = /[ \t\r\n\u000c]+$/.exec(r.text))) {
        let s = r;
        r.text.length == i[0].length ? this.content.pop() : this.content[this.content.length - 1] = s.withText(s.text.slice(0, s.text.length - i[0].length));
      }
    }
    let n = O.from(this.content);
    return !e && this.match && (n = n.append(this.match.fillBefore(O.empty, !0))), this.type ? this.type.create(this.attrs, n, this.marks) : n;
  }
  popFromStashMark(e) {
    for (let n = this.stashMarks.length - 1; n >= 0; n--)
      if (e.eq(this.stashMarks[n]))
        return this.stashMarks.splice(n, 1)[0];
  }
  applyPending(e) {
    for (let n = 0, r = this.pendingMarks; n < r.length; n++) {
      let i = r[n];
      (this.type ? this.type.allowsMarkType(i.type) : cb(i.type, e)) && !i.isInSet(this.activeMarks) && (this.activeMarks = i.addToSet(this.activeMarks), this.pendingMarks = i.removeFromSet(this.pendingMarks));
    }
  }
  inlineContext(e) {
    return this.type ? this.type.inlineContent : this.content.length ? this.content[0].isInline : e.parentNode && !qp.hasOwnProperty(e.parentNode.nodeName.toLowerCase());
  }
}
class ad {
  constructor(e, n, r) {
    this.parser = e, this.options = n, this.isOpen = r, this.open = 0;
    let i = n.topNode, s, o = od(null, n.preserveWhitespace, 0) | (r ? Oi : 0);
    i ? s = new Ls(i.type, i.attrs, ye.none, ye.none, !0, n.topMatch || i.type.contentMatch, o) : r ? s = new Ls(null, null, ye.none, ye.none, !0, null, o) : s = new Ls(e.schema.topNodeType, null, ye.none, ye.none, !0, null, o), this.nodes = [s], this.find = n.findPositions, this.needsBlock = !1;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(e) {
    e.nodeType == 3 ? this.addTextNode(e) : e.nodeType == 1 && this.addElement(e);
  }
  withStyleRules(e, n) {
    let r = e.getAttribute("style");
    if (!r)
      return n();
    let i = this.readStyles(ub(r));
    if (!i)
      return;
    let [s, o] = i, a = this.top;
    for (let l = 0; l < o.length; l++)
      this.removePendingMark(o[l], a);
    for (let l = 0; l < s.length; l++)
      this.addPendingMark(s[l]);
    n();
    for (let l = 0; l < s.length; l++)
      this.removePendingMark(s[l], a);
    for (let l = 0; l < o.length; l++)
      this.addPendingMark(o[l]);
  }
  addTextNode(e) {
    let n = e.nodeValue, r = this.top;
    if (r.options & xo || r.inlineContext(e) || /[^ \t\r\n\u000c]/.test(n)) {
      if (r.options & yo)
        r.options & xo ? n = n.replace(/\r\n?/g, `
`) : n = n.replace(/\r?\n|\r/g, " ");
      else if (n = n.replace(/[ \t\r\n\u000c]+/g, " "), /^[ \t\r\n\u000c]/.test(n) && this.open == this.nodes.length - 1) {
        let i = r.content[r.content.length - 1], s = e.previousSibling;
        (!i || s && s.nodeName == "BR" || i.isText && /[ \t\r\n\u000c]$/.test(i.text)) && (n = n.slice(1));
      }
      n && this.insertNode(this.parser.schema.text(n)), this.findInText(e);
    } else
      this.findInside(e);
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(e, n) {
    let r = e.nodeName.toLowerCase(), i;
    Zp.hasOwnProperty(r) && this.parser.normalizeLists && ab(e);
    let s = this.options.ruleFromNode && this.options.ruleFromNode(e) || (i = this.parser.matchTag(e, this, n));
    if (s ? s.ignore : ob.hasOwnProperty(r))
      this.findInside(e), this.ignoreFallback(e);
    else if (!s || s.skip || s.closeParent) {
      s && s.closeParent ? this.open = Math.max(0, this.open - 1) : s && s.skip.nodeType && (e = s.skip);
      let o, a = this.top, l = this.needsBlock;
      if (qp.hasOwnProperty(r))
        a.content.length && a.content[0].isInline && this.open && (this.open--, a = this.top), o = !0, a.type || (this.needsBlock = !0);
      else if (!e.firstChild) {
        this.leafFallback(e);
        return;
      }
      s && s.skip ? this.addAll(e) : this.withStyleRules(e, () => this.addAll(e)), o && this.sync(a), this.needsBlock = l;
    } else
      this.withStyleRules(e, () => {
        this.addElementByRule(e, s, s.consuming === !1 ? i : void 0);
      });
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(e) {
    e.nodeName == "BR" && this.top.type && this.top.type.inlineContent && this.addTextNode(e.ownerDocument.createTextNode(`
`));
  }
  // Called for ignored nodes
  ignoreFallback(e) {
    e.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent) && this.findPlace(this.parser.schema.text("-"));
  }
  // Run any style parser associated with the node's styles. Either
  // return an array of marks, or null to indicate some of the styles
  // had a rule with `ignore` set.
  readStyles(e) {
    let n = ye.none, r = ye.none;
    for (let i = 0; i < e.length; i += 2)
      for (let s = void 0; ; ) {
        let o = this.parser.matchStyle(e[i], e[i + 1], this, s);
        if (!o)
          break;
        if (o.ignore)
          return null;
        if (o.clearMark ? this.top.pendingMarks.concat(this.top.activeMarks).forEach((a) => {
          o.clearMark(a) && (r = a.addToSet(r));
        }) : n = this.parser.schema.marks[o.mark].create(o.attrs).addToSet(n), o.consuming === !1)
          s = o;
        else
          break;
      }
    return [n, r];
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(e, n, r) {
    let i, s, o;
    n.node ? (s = this.parser.schema.nodes[n.node], s.isLeaf ? this.insertNode(s.create(n.attrs)) || this.leafFallback(e) : i = this.enter(s, n.attrs || null, n.preserveWhitespace)) : (o = this.parser.schema.marks[n.mark].create(n.attrs), this.addPendingMark(o));
    let a = this.top;
    if (s && s.isLeaf)
      this.findInside(e);
    else if (r)
      this.addElement(e, r);
    else if (n.getContent)
      this.findInside(e), n.getContent(e, this.parser.schema).forEach((l) => this.insertNode(l));
    else {
      let l = e;
      typeof n.contentElement == "string" ? l = e.querySelector(n.contentElement) : typeof n.contentElement == "function" ? l = n.contentElement(e) : n.contentElement && (l = n.contentElement), this.findAround(e, l, !0), this.addAll(l);
    }
    i && this.sync(a) && this.open--, o && this.removePendingMark(o, a);
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(e, n, r) {
    let i = n || 0;
    for (let s = n ? e.childNodes[n] : e.firstChild, o = r == null ? null : e.childNodes[r]; s != o; s = s.nextSibling, ++i)
      this.findAtPoint(e, i), this.addDOM(s);
    this.findAtPoint(e, i);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(e) {
    let n, r;
    for (let i = this.open; i >= 0; i--) {
      let s = this.nodes[i], o = s.findWrapping(e);
      if (o && (!n || n.length > o.length) && (n = o, r = s, !o.length) || s.solid)
        break;
    }
    if (!n)
      return !1;
    this.sync(r);
    for (let i = 0; i < n.length; i++)
      this.enterInner(n[i], null, !1);
    return !0;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(e) {
    if (e.isInline && this.needsBlock && !this.top.type) {
      let n = this.textblockFromContext();
      n && this.enterInner(n);
    }
    if (this.findPlace(e)) {
      this.closeExtra();
      let n = this.top;
      n.applyPending(e.type), n.match && (n.match = n.match.matchType(e.type));
      let r = n.activeMarks;
      for (let i = 0; i < e.marks.length; i++)
        (!n.type || n.type.allowsMarkType(e.marks[i].type)) && (r = e.marks[i].addToSet(r));
      return n.content.push(e.mark(r)), !0;
    }
    return !1;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(e, n, r) {
    let i = this.findPlace(e.create(n));
    return i && this.enterInner(e, n, !0, r), i;
  }
  // Open a node of the given type
  enterInner(e, n = null, r = !1, i) {
    this.closeExtra();
    let s = this.top;
    s.applyPending(e), s.match = s.match && s.match.matchType(e);
    let o = od(e, i, s.options);
    s.options & Oi && s.content.length == 0 && (o |= Oi), this.nodes.push(new Ls(e, n, s.activeMarks, s.pendingMarks, r, null, o)), this.open++;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(e = !1) {
    let n = this.nodes.length - 1;
    if (n > this.open) {
      for (; n > this.open; n--)
        this.nodes[n - 1].content.push(this.nodes[n].finish(e));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    return this.open = 0, this.closeExtra(this.isOpen), this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(e) {
    for (let n = this.open; n >= 0; n--)
      if (this.nodes[n] == e)
        return this.open = n, !0;
    return !1;
  }
  get currentPos() {
    this.closeExtra();
    let e = 0;
    for (let n = this.open; n >= 0; n--) {
      let r = this.nodes[n].content;
      for (let i = r.length - 1; i >= 0; i--)
        e += r[i].nodeSize;
      n && e++;
    }
    return e;
  }
  findAtPoint(e, n) {
    if (this.find)
      for (let r = 0; r < this.find.length; r++)
        this.find[r].node == e && this.find[r].offset == n && (this.find[r].pos = this.currentPos);
  }
  findInside(e) {
    if (this.find)
      for (let n = 0; n < this.find.length; n++)
        this.find[n].pos == null && e.nodeType == 1 && e.contains(this.find[n].node) && (this.find[n].pos = this.currentPos);
  }
  findAround(e, n, r) {
    if (e != n && this.find)
      for (let i = 0; i < this.find.length; i++)
        this.find[i].pos == null && e.nodeType == 1 && e.contains(this.find[i].node) && n.compareDocumentPosition(this.find[i].node) & (r ? 2 : 4) && (this.find[i].pos = this.currentPos);
  }
  findInText(e) {
    if (this.find)
      for (let n = 0; n < this.find.length; n++)
        this.find[n].node == e && (this.find[n].pos = this.currentPos - (e.nodeValue.length - this.find[n].offset));
  }
  // Determines whether the given context string matches this context.
  matchesContext(e) {
    if (e.indexOf("|") > -1)
      return e.split(/\s*\|\s*/).some(this.matchesContext, this);
    let n = e.split("/"), r = this.options.context, i = !this.isOpen && (!r || r.parent.type == this.nodes[0].type), s = -(r ? r.depth + 1 : 0) + (i ? 0 : 1), o = (a, l) => {
      for (; a >= 0; a--) {
        let u = n[a];
        if (u == "") {
          if (a == n.length - 1 || a == 0)
            continue;
          for (; l >= s; l--)
            if (o(a - 1, l))
              return !0;
          return !1;
        } else {
          let c = l > 0 || l == 0 && i ? this.nodes[l].type : r && l >= s ? r.node(l - s).type : null;
          if (!c || c.name != u && c.groups.indexOf(u) == -1)
            return !1;
          l--;
        }
      }
      return !0;
    };
    return o(n.length - 1, this.open);
  }
  textblockFromContext() {
    let e = this.options.context;
    if (e)
      for (let n = e.depth; n >= 0; n--) {
        let r = e.node(n).contentMatchAt(e.indexAfter(n)).defaultType;
        if (r && r.isTextblock && r.defaultAttrs)
          return r;
      }
    for (let n in this.parser.schema.nodes) {
      let r = this.parser.schema.nodes[n];
      if (r.isTextblock && r.defaultAttrs)
        return r;
    }
  }
  addPendingMark(e) {
    let n = db(e, this.top.pendingMarks);
    n && this.top.stashMarks.push(n), this.top.pendingMarks = e.addToSet(this.top.pendingMarks);
  }
  removePendingMark(e, n) {
    for (let r = this.open; r >= 0; r--) {
      let i = this.nodes[r];
      if (i.pendingMarks.lastIndexOf(e) > -1)
        i.pendingMarks = e.removeFromSet(i.pendingMarks);
      else {
        i.activeMarks = e.removeFromSet(i.activeMarks);
        let o = i.popFromStashMark(e);
        o && i.type && i.type.allowsMarkType(o.type) && (i.activeMarks = o.addToSet(i.activeMarks));
      }
      if (i == n)
        break;
    }
  }
}
function ab(t) {
  for (let e = t.firstChild, n = null; e; e = e.nextSibling) {
    let r = e.nodeType == 1 ? e.nodeName.toLowerCase() : null;
    r && Zp.hasOwnProperty(r) && n ? (n.appendChild(e), e = n) : r == "li" ? n = e : r && (n = null);
  }
}
function lb(t, e) {
  return (t.matches || t.msMatchesSelector || t.webkitMatchesSelector || t.mozMatchesSelector).call(t, e);
}
function ub(t) {
  let e = /\s*([\w-]+)\s*:\s*([^;]+)/g, n, r = [];
  for (; n = e.exec(t); )
    r.push(n[1], n[2].trim());
  return r;
}
function ld(t) {
  let e = {};
  for (let n in t)
    e[n] = t[n];
  return e;
}
function cb(t, e) {
  let n = e.schema.nodes;
  for (let r in n) {
    let i = n[r];
    if (!i.allowsMarkType(t))
      continue;
    let s = [], o = (a) => {
      s.push(a);
      for (let l = 0; l < a.edgeCount; l++) {
        let { type: u, next: c } = a.edge(l);
        if (u == e || s.indexOf(c) < 0 && o(c))
          return !0;
      }
    };
    if (o(i.contentMatch))
      return !0;
  }
}
function db(t, e) {
  for (let n = 0; n < e.length; n++)
    if (t.eq(e[n]))
      return e[n];
}
class Yt {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(e, n) {
    this.nodes = e, this.marks = n;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(e, n = {}, r) {
    r || (r = Ya(n).createDocumentFragment());
    let i = r, s = [];
    return e.forEach((o) => {
      if (s.length || o.marks.length) {
        let a = 0, l = 0;
        for (; a < s.length && l < o.marks.length; ) {
          let u = o.marks[l];
          if (!this.marks[u.type.name]) {
            l++;
            continue;
          }
          if (!u.eq(s[a][0]) || u.type.spec.spanning === !1)
            break;
          a++, l++;
        }
        for (; a < s.length; )
          i = s.pop()[1];
        for (; l < o.marks.length; ) {
          let u = o.marks[l++], c = this.serializeMark(u, o.isInline, n);
          c && (s.push([u, i]), i.appendChild(c.dom), i = c.contentDOM || c.dom);
        }
      }
      i.appendChild(this.serializeNodeInner(o, n));
    }), r;
  }
  /**
  @internal
  */
  serializeNodeInner(e, n) {
    let { dom: r, contentDOM: i } = Yt.renderSpec(Ya(n), this.nodes[e.type.name](e));
    if (i) {
      if (e.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(e.content, n, i);
    }
    return r;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(e, n = {}) {
    let r = this.serializeNodeInner(e, n);
    for (let i = e.marks.length - 1; i >= 0; i--) {
      let s = this.serializeMark(e.marks[i], e.isInline, n);
      s && ((s.contentDOM || s.dom).appendChild(r), r = s.dom);
    }
    return r;
  }
  /**
  @internal
  */
  serializeMark(e, n, r = {}) {
    let i = this.marks[e.type.name];
    return i && Yt.renderSpec(Ya(r), i(e, n));
  }
  /**
  Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
  the spec has a hole (zero) in it, `contentDOM` will point at the
  node with the hole.
  */
  static renderSpec(e, n, r = null) {
    if (typeof n == "string")
      return { dom: e.createTextNode(n) };
    if (n.nodeType != null)
      return { dom: n };
    if (n.dom && n.dom.nodeType != null)
      return n;
    let i = n[0], s = i.indexOf(" ");
    s > 0 && (r = i.slice(0, s), i = i.slice(s + 1));
    let o, a = r ? e.createElementNS(r, i) : e.createElement(i), l = n[1], u = 1;
    if (l && typeof l == "object" && l.nodeType == null && !Array.isArray(l)) {
      u = 2;
      for (let c in l)
        if (l[c] != null) {
          let d = c.indexOf(" ");
          d > 0 ? a.setAttributeNS(c.slice(0, d), c.slice(d + 1), l[c]) : a.setAttribute(c, l[c]);
        }
    }
    for (let c = u; c < n.length; c++) {
      let d = n[c];
      if (d === 0) {
        if (c < n.length - 1 || c > u)
          throw new RangeError("Content hole must be the only child of its parent node");
        return { dom: a, contentDOM: a };
      } else {
        let { dom: f, contentDOM: h } = Yt.renderSpec(e, d, r);
        if (a.appendChild(f), h) {
          if (o)
            throw new RangeError("Multiple content holes");
          o = h;
        }
      }
    }
    return { dom: a, contentDOM: o };
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(e) {
    return e.cached.domSerializer || (e.cached.domSerializer = new Yt(this.nodesFromSchema(e), this.marksFromSchema(e)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(e) {
    let n = ud(e.nodes);
    return n.text || (n.text = (r) => r.text), n;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(e) {
    return ud(e.marks);
  }
}
function ud(t) {
  let e = {};
  for (let n in t) {
    let r = t[n].spec.toDOM;
    r && (e[n] = r);
  }
  return e;
}
function Ya(t) {
  return t.document || window.document;
}
const Kp = 65535, Wp = Math.pow(2, 16);
function fb(t, e) {
  return t + e * Wp;
}
function cd(t) {
  return t & Kp;
}
function hb(t) {
  return (t - (t & Kp)) / Wp;
}
const jp = 1, Gp = 2, io = 4, Jp = 8;
class Xl {
  /**
  @internal
  */
  constructor(e, n, r) {
    this.pos = e, this.delInfo = n, this.recover = r;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & Jp) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (jp | io)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (Gp | io)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & io) > 0;
  }
}
class vt {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(e, n = !1) {
    if (this.ranges = e, this.inverted = n, !e.length && vt.empty)
      return vt.empty;
  }
  /**
  @internal
  */
  recover(e) {
    let n = 0, r = cd(e);
    if (!this.inverted)
      for (let i = 0; i < r; i++)
        n += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
    return this.ranges[r * 3] + n + hb(e);
  }
  mapResult(e, n = 1) {
    return this._map(e, n, !1);
  }
  map(e, n = 1) {
    return this._map(e, n, !0);
  }
  /**
  @internal
  */
  _map(e, n, r) {
    let i = 0, s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? i : 0);
      if (l > e)
        break;
      let u = this.ranges[a + s], c = this.ranges[a + o], d = l + u;
      if (e <= d) {
        let f = u ? e == l ? -1 : e == d ? 1 : n : n, h = l + i + (f < 0 ? 0 : c);
        if (r)
          return h;
        let p = e == (n < 0 ? l : d) ? null : fb(a / 3, e - l), g = e == l ? Gp : e == d ? jp : io;
        return (n < 0 ? e != l : e != d) && (g |= Jp), new Xl(h, g, p);
      }
      i += c - u;
    }
    return r ? e + i : new Xl(e + i, 0, null);
  }
  /**
  @internal
  */
  touches(e, n) {
    let r = 0, i = cd(n), s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? r : 0);
      if (l > e)
        break;
      let u = this.ranges[a + s], c = l + u;
      if (e <= c && a == i * 3)
        return !0;
      r += this.ranges[a + o] - u;
    }
    return !1;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(e) {
    let n = this.inverted ? 2 : 1, r = this.inverted ? 1 : 2;
    for (let i = 0, s = 0; i < this.ranges.length; i += 3) {
      let o = this.ranges[i], a = o - (this.inverted ? s : 0), l = o + (this.inverted ? 0 : s), u = this.ranges[i + n], c = this.ranges[i + r];
      e(a, a + u, l, l + c), s += c - u;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new vt(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(e) {
    return e == 0 ? vt.empty : new vt(e < 0 ? [0, -e, 0] : [0, 0, e]);
  }
}
vt.empty = new vt([]);
class Gr {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(e = [], n, r = 0, i = e.length) {
    this.maps = e, this.mirror = n, this.from = r, this.to = i;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(e = 0, n = this.maps.length) {
    return new Gr(this.maps, this.mirror, e, n);
  }
  /**
  @internal
  */
  copy() {
    return new Gr(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(e, n) {
    this.to = this.maps.push(e), n != null && this.setMirror(this.maps.length - 1, n);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(e) {
    for (let n = 0, r = this.maps.length; n < e.maps.length; n++) {
      let i = e.getMirror(n);
      this.appendMap(e.maps[n], i != null && i < n ? r + i : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(e) {
    if (this.mirror) {
      for (let n = 0; n < this.mirror.length; n++)
        if (this.mirror[n] == e)
          return this.mirror[n + (n % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(e, n) {
    this.mirror || (this.mirror = []), this.mirror.push(e, n);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(e) {
    for (let n = e.maps.length - 1, r = this.maps.length + e.maps.length; n >= 0; n--) {
      let i = e.getMirror(n);
      this.appendMap(e.maps[n].invert(), i != null && i > n ? r - i - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let e = new Gr();
    return e.appendMappingInverted(this), e;
  }
  /**
  Map a position through this mapping.
  */
  map(e, n = 1) {
    if (this.mirror)
      return this._map(e, n, !0);
    for (let r = this.from; r < this.to; r++)
      e = this.maps[r].map(e, n);
    return e;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(e, n = 1) {
    return this._map(e, n, !1);
  }
  /**
  @internal
  */
  _map(e, n, r) {
    let i = 0;
    for (let s = this.from; s < this.to; s++) {
      let o = this.maps[s], a = o.mapResult(e, n);
      if (a.recover != null) {
        let l = this.getMirror(s);
        if (l != null && l > s && l < this.to) {
          s = l, e = this.maps[l].recover(a.recover);
          continue;
        }
      }
      i |= a.delInfo, e = a.pos;
    }
    return r ? e : new Xl(e, i, null);
  }
}
const Xa = /* @__PURE__ */ Object.create(null);
class nt {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return vt.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(e) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(e, n) {
    if (!n || !n.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let r = Xa[n.stepType];
    if (!r)
      throw new RangeError(`No step type ${n.stepType} defined`);
    return r.fromJSON(e, n);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(e, n) {
    if (e in Xa)
      throw new RangeError("Duplicate use of step JSON ID " + e);
    return Xa[e] = n, n.prototype.jsonID = e, n;
  }
}
class He {
  /**
  @internal
  */
  constructor(e, n) {
    this.doc = e, this.failed = n;
  }
  /**
  Create a successful step result.
  */
  static ok(e) {
    return new He(e, null);
  }
  /**
  Create a failed step result.
  */
  static fail(e) {
    return new He(null, e);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(e, n, r, i) {
    try {
      return He.ok(e.replace(n, r, i));
    } catch (s) {
      if (s instanceof po)
        return He.fail(s.message);
      throw s;
    }
  }
}
function $u(t, e, n) {
  let r = [];
  for (let i = 0; i < t.childCount; i++) {
    let s = t.child(i);
    s.content.size && (s = s.copy($u(s.content, e, s))), s.isInline && (s = e(s, n, i)), r.push(s);
  }
  return O.fromArray(r);
}
class Ln extends nt {
  /**
  Create a mark step.
  */
  constructor(e, n, r) {
    super(), this.from = e, this.to = n, this.mark = r;
  }
  apply(e) {
    let n = e.slice(this.from, this.to), r = e.resolve(this.from), i = r.node(r.sharedDepth(this.to)), s = new B($u(n.content, (o, a) => !o.isAtom || !a.type.allowsMarkType(this.mark.type) ? o : o.mark(this.mark.addToSet(o.marks)), i), n.openStart, n.openEnd);
    return He.fromReplace(e, this.from, this.to, s);
  }
  invert() {
    return new Xt(this.from, this.to, this.mark);
  }
  map(e) {
    let n = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return n.deleted && r.deleted || n.pos >= r.pos ? null : new Ln(n.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof Ln && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new Ln(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.from != "number" || typeof n.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new Ln(n.from, n.to, e.markFromJSON(n.mark));
  }
}
nt.jsonID("addMark", Ln);
class Xt extends nt {
  /**
  Create a mark-removing step.
  */
  constructor(e, n, r) {
    super(), this.from = e, this.to = n, this.mark = r;
  }
  apply(e) {
    let n = e.slice(this.from, this.to), r = new B($u(n.content, (i) => i.mark(this.mark.removeFromSet(i.marks)), e), n.openStart, n.openEnd);
    return He.fromReplace(e, this.from, this.to, r);
  }
  invert() {
    return new Ln(this.from, this.to, this.mark);
  }
  map(e) {
    let n = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return n.deleted && r.deleted || n.pos >= r.pos ? null : new Xt(n.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof Xt && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new Xt(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.from != "number" || typeof n.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new Xt(n.from, n.to, e.markFromJSON(n.mark));
  }
}
nt.jsonID("removeMark", Xt);
class Rn extends nt {
  /**
  Create a node mark step.
  */
  constructor(e, n) {
    super(), this.pos = e, this.mark = n;
  }
  apply(e) {
    let n = e.nodeAt(this.pos);
    if (!n)
      return He.fail("No node at mark step's position");
    let r = n.type.create(n.attrs, null, this.mark.addToSet(n.marks));
    return He.fromReplace(e, this.pos, this.pos + 1, new B(O.from(r), 0, n.isLeaf ? 0 : 1));
  }
  invert(e) {
    let n = e.nodeAt(this.pos);
    if (n) {
      let r = this.mark.addToSet(n.marks);
      if (r.length == n.marks.length) {
        for (let i = 0; i < n.marks.length; i++)
          if (!n.marks[i].isInSet(r))
            return new Rn(this.pos, n.marks[i]);
        return new Rn(this.pos, this.mark);
      }
    }
    return new ei(this.pos, this.mark);
  }
  map(e) {
    let n = e.mapResult(this.pos, 1);
    return n.deletedAfter ? null : new Rn(n.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new Rn(n.pos, e.markFromJSON(n.mark));
  }
}
nt.jsonID("addNodeMark", Rn);
class ei extends nt {
  /**
  Create a mark-removing step.
  */
  constructor(e, n) {
    super(), this.pos = e, this.mark = n;
  }
  apply(e) {
    let n = e.nodeAt(this.pos);
    if (!n)
      return He.fail("No node at mark step's position");
    let r = n.type.create(n.attrs, null, this.mark.removeFromSet(n.marks));
    return He.fromReplace(e, this.pos, this.pos + 1, new B(O.from(r), 0, n.isLeaf ? 0 : 1));
  }
  invert(e) {
    let n = e.nodeAt(this.pos);
    return !n || !this.mark.isInSet(n.marks) ? this : new Rn(this.pos, this.mark);
  }
  map(e) {
    let n = e.mapResult(this.pos, 1);
    return n.deletedAfter ? null : new ei(n.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new ei(n.pos, e.markFromJSON(n.mark));
  }
}
nt.jsonID("removeNodeMark", ei);
class ze extends nt {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(e, n, r, i = !1) {
    super(), this.from = e, this.to = n, this.slice = r, this.structure = i;
  }
  apply(e) {
    return this.structure && Ql(e, this.from, this.to) ? He.fail("Structure replace would overwrite content") : He.fromReplace(e, this.from, this.to, this.slice);
  }
  getMap() {
    return new vt([this.from, this.to - this.from, this.slice.size]);
  }
  invert(e) {
    return new ze(this.from, this.from + this.slice.size, e.slice(this.from, this.to));
  }
  map(e) {
    let n = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return n.deletedAcross && r.deletedAcross ? null : new ze(n.pos, Math.max(n.pos, r.pos), this.slice);
  }
  merge(e) {
    if (!(e instanceof ze) || e.structure || this.structure)
      return null;
    if (this.from + this.slice.size == e.from && !this.slice.openEnd && !e.slice.openStart) {
      let n = this.slice.size + e.slice.size == 0 ? B.empty : new B(this.slice.content.append(e.slice.content), this.slice.openStart, e.slice.openEnd);
      return new ze(this.from, this.to + (e.to - e.from), n, this.structure);
    } else if (e.to == this.from && !this.slice.openStart && !e.slice.openEnd) {
      let n = this.slice.size + e.slice.size == 0 ? B.empty : new B(e.slice.content.append(this.slice.content), e.slice.openStart, this.slice.openEnd);
      return new ze(e.from, this.to, n, this.structure);
    } else
      return null;
  }
  toJSON() {
    let e = { stepType: "replace", from: this.from, to: this.to };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.from != "number" || typeof n.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new ze(n.from, n.to, B.fromJSON(e, n.slice), !!n.structure);
  }
}
nt.jsonID("replace", ze);
class Ue extends nt {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(e, n, r, i, s, o, a = !1) {
    super(), this.from = e, this.to = n, this.gapFrom = r, this.gapTo = i, this.slice = s, this.insert = o, this.structure = a;
  }
  apply(e) {
    if (this.structure && (Ql(e, this.from, this.gapFrom) || Ql(e, this.gapTo, this.to)))
      return He.fail("Structure gap-replace would overwrite content");
    let n = e.slice(this.gapFrom, this.gapTo);
    if (n.openStart || n.openEnd)
      return He.fail("Gap is not a flat range");
    let r = this.slice.insertAt(this.insert, n.content);
    return r ? He.fromReplace(e, this.from, this.to, r) : He.fail("Content does not fit in gap");
  }
  getMap() {
    return new vt([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(e) {
    let n = this.gapTo - this.gapFrom;
    return new Ue(this.from, this.from + this.slice.size + n, this.from + this.insert, this.from + this.insert + n, e.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(e) {
    let n = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1), i = e.map(this.gapFrom, -1), s = e.map(this.gapTo, 1);
    return n.deletedAcross && r.deletedAcross || i < n.pos || s > r.pos ? null : new Ue(n.pos, r.pos, i, s, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let e = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.from != "number" || typeof n.to != "number" || typeof n.gapFrom != "number" || typeof n.gapTo != "number" || typeof n.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new Ue(n.from, n.to, n.gapFrom, n.gapTo, B.fromJSON(e, n.slice), n.insert, !!n.structure);
  }
}
nt.jsonID("replaceAround", Ue);
function Ql(t, e, n) {
  let r = t.resolve(e), i = n - e, s = r.depth;
  for (; i > 0 && s > 0 && r.indexAfter(s) == r.node(s).childCount; )
    s--, i--;
  if (i > 0) {
    let o = r.node(s).maybeChild(r.indexAfter(s));
    for (; i > 0; ) {
      if (!o || o.isLeaf)
        return !0;
      o = o.firstChild, i--;
    }
  }
  return !1;
}
function pb(t, e, n, r) {
  let i = [], s = [], o, a;
  t.doc.nodesBetween(e, n, (l, u, c) => {
    if (!l.isInline)
      return;
    let d = l.marks;
    if (!r.isInSet(d) && c.type.allowsMarkType(r.type)) {
      let f = Math.max(u, e), h = Math.min(u + l.nodeSize, n), p = r.addToSet(d);
      for (let g = 0; g < d.length; g++)
        d[g].isInSet(p) || (o && o.to == f && o.mark.eq(d[g]) ? o.to = h : i.push(o = new Xt(f, h, d[g])));
      a && a.to == f ? a.to = h : s.push(a = new Ln(f, h, r));
    }
  }), i.forEach((l) => t.step(l)), s.forEach((l) => t.step(l));
}
function gb(t, e, n, r) {
  let i = [], s = 0;
  t.doc.nodesBetween(e, n, (o, a) => {
    if (!o.isInline)
      return;
    s++;
    let l = null;
    if (r instanceof ua) {
      let u = o.marks, c;
      for (; c = r.isInSet(u); )
        (l || (l = [])).push(c), u = c.removeFromSet(u);
    } else
      r ? r.isInSet(o.marks) && (l = [r]) : l = o.marks;
    if (l && l.length) {
      let u = Math.min(a + o.nodeSize, n);
      for (let c = 0; c < l.length; c++) {
        let d = l[c], f;
        for (let h = 0; h < i.length; h++) {
          let p = i[h];
          p.step == s - 1 && d.eq(i[h].style) && (f = p);
        }
        f ? (f.to = u, f.step = s) : i.push({ style: d, from: Math.max(a, e), to: u, step: s });
      }
    }
  }), i.forEach((o) => t.step(new Xt(o.from, o.to, o.style)));
}
function mb(t, e, n, r = n.contentMatch) {
  let i = t.doc.nodeAt(e), s = [], o = e + 1;
  for (let a = 0; a < i.childCount; a++) {
    let l = i.child(a), u = o + l.nodeSize, c = r.matchType(l.type);
    if (!c)
      s.push(new ze(o, u, B.empty));
    else {
      r = c;
      for (let d = 0; d < l.marks.length; d++)
        n.allowsMarkType(l.marks[d].type) || t.step(new Xt(o, u, l.marks[d]));
      if (l.isText && !n.spec.code) {
        let d, f = /\r?\n|\r/g, h;
        for (; d = f.exec(l.text); )
          h || (h = new B(O.from(n.schema.text(" ", n.allowedMarks(l.marks))), 0, 0)), s.push(new ze(o + d.index, o + d.index + d[0].length, h));
      }
    }
    o = u;
  }
  if (!r.validEnd) {
    let a = r.fillBefore(O.empty, !0);
    t.replace(o, o, new B(a, 0, 0));
  }
  for (let a = s.length - 1; a >= 0; a--)
    t.step(s[a]);
}
function bb(t, e, n) {
  return (e == 0 || t.canReplace(e, t.childCount)) && (n == t.childCount || t.canReplace(0, n));
}
function gi(t) {
  let n = t.parent.content.cutByIndex(t.startIndex, t.endIndex);
  for (let r = t.depth; ; --r) {
    let i = t.$from.node(r), s = t.$from.index(r), o = t.$to.indexAfter(r);
    if (r < t.depth && i.canReplace(s, o, n))
      return r;
    if (r == 0 || i.type.spec.isolating || !bb(i, s, o))
      break;
  }
  return null;
}
function yb(t, e, n) {
  let { $from: r, $to: i, depth: s } = e, o = r.before(s + 1), a = i.after(s + 1), l = o, u = a, c = O.empty, d = 0;
  for (let p = s, g = !1; p > n; p--)
    g || r.index(p) > 0 ? (g = !0, c = O.from(r.node(p).copy(c)), d++) : l--;
  let f = O.empty, h = 0;
  for (let p = s, g = !1; p > n; p--)
    g || i.after(p + 1) < i.end(p) ? (g = !0, f = O.from(i.node(p).copy(f)), h++) : u++;
  t.step(new Ue(l, u, o, a, new B(c.append(f), d, h), c.size - d, !0));
}
function zu(t, e, n = null, r = t) {
  let i = xb(t, e), s = i && kb(r, e);
  return s ? i.map(dd).concat({ type: e, attrs: n }).concat(s.map(dd)) : null;
}
function dd(t) {
  return { type: t, attrs: null };
}
function xb(t, e) {
  let { parent: n, startIndex: r, endIndex: i } = t, s = n.contentMatchAt(r).findWrapping(e);
  if (!s)
    return null;
  let o = s.length ? s[0] : e;
  return n.canReplaceWith(r, i, o) ? s : null;
}
function kb(t, e) {
  let { parent: n, startIndex: r, endIndex: i } = t, s = n.child(r), o = e.contentMatch.findWrapping(s.type);
  if (!o)
    return null;
  let l = (o.length ? o[o.length - 1] : e).contentMatch;
  for (let u = r; l && u < i; u++)
    l = l.matchType(n.child(u).type);
  return !l || !l.validEnd ? null : o;
}
function vb(t, e, n) {
  let r = O.empty;
  for (let o = n.length - 1; o >= 0; o--) {
    if (r.size) {
      let a = n[o].type.contentMatch.matchFragment(r);
      if (!a || !a.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    r = O.from(n[o].type.create(n[o].attrs, r));
  }
  let i = e.start, s = e.end;
  t.step(new Ue(i, s, i, s, new B(r, 0, 0), n.length, !0));
}
function Eb(t, e, n, r, i) {
  if (!r.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let s = t.steps.length;
  t.doc.nodesBetween(e, n, (o, a) => {
    if (o.isTextblock && !o.hasMarkup(r, i) && Cb(t.doc, t.mapping.slice(s).map(a), r)) {
      t.clearIncompatible(t.mapping.slice(s).map(a, 1), r);
      let l = t.mapping.slice(s), u = l.map(a, 1), c = l.map(a + o.nodeSize, 1);
      return t.step(new Ue(u, c, u + 1, c - 1, new B(O.from(r.create(i, null, o.marks)), 0, 0), 1, !0)), !1;
    }
  });
}
function Cb(t, e, n) {
  let r = t.resolve(e), i = r.index();
  return r.parent.canReplaceWith(i, i + 1, n);
}
function _b(t, e, n, r, i) {
  let s = t.doc.nodeAt(e);
  if (!s)
    throw new RangeError("No node at given position");
  n || (n = s.type);
  let o = n.create(r, null, i || s.marks);
  if (s.isLeaf)
    return t.replaceWith(e, e + s.nodeSize, o);
  if (!n.validContent(s.content))
    throw new RangeError("Invalid content for node type " + n.name);
  t.step(new Ue(e, e + s.nodeSize, e + 1, e + s.nodeSize - 1, new B(O.from(o), 0, 0), 1, !0));
}
function Jr(t, e, n = 1, r) {
  let i = t.resolve(e), s = i.depth - n, o = r && r[r.length - 1] || i.parent;
  if (s < 0 || i.parent.type.spec.isolating || !i.parent.canReplace(i.index(), i.parent.childCount) || !o.type.validContent(i.parent.content.cutByIndex(i.index(), i.parent.childCount)))
    return !1;
  for (let u = i.depth - 1, c = n - 2; u > s; u--, c--) {
    let d = i.node(u), f = i.index(u);
    if (d.type.spec.isolating)
      return !1;
    let h = d.content.cutByIndex(f, d.childCount), p = r && r[c + 1];
    p && (h = h.replaceChild(0, p.type.create(p.attrs)));
    let g = r && r[c] || d;
    if (!d.canReplace(f + 1, d.childCount) || !g.type.validContent(h))
      return !1;
  }
  let a = i.indexAfter(s), l = r && r[0];
  return i.node(s).canReplaceWith(a, a, l ? l.type : i.node(s + 1).type);
}
function wb(t, e, n = 1, r) {
  let i = t.doc.resolve(e), s = O.empty, o = O.empty;
  for (let a = i.depth, l = i.depth - n, u = n - 1; a > l; a--, u--) {
    s = O.from(i.node(a).copy(s));
    let c = r && r[u];
    o = O.from(c ? c.type.create(c.attrs, o) : i.node(a).copy(o));
  }
  t.step(new ze(e, e, new B(s.append(o), n, n), !0));
}
function jn(t, e) {
  let n = t.resolve(e), r = n.index();
  return Yp(n.nodeBefore, n.nodeAfter) && n.parent.canReplace(r, r + 1);
}
function Yp(t, e) {
  return !!(t && e && !t.isLeaf && t.canAppend(e));
}
function ca(t, e, n = -1) {
  let r = t.resolve(e);
  for (let i = r.depth; ; i--) {
    let s, o, a = r.index(i);
    if (i == r.depth ? (s = r.nodeBefore, o = r.nodeAfter) : n > 0 ? (s = r.node(i + 1), a++, o = r.node(i).maybeChild(a)) : (s = r.node(i).maybeChild(a - 1), o = r.node(i + 1)), s && !s.isTextblock && Yp(s, o) && r.node(i).canReplace(a, a + 1))
      return e;
    if (i == 0)
      break;
    e = n < 0 ? r.before(i) : r.after(i);
  }
}
function Sb(t, e, n) {
  let r = new ze(e - n, e + n, B.empty, !0);
  t.step(r);
}
function Ab(t, e, n) {
  let r = t.resolve(e);
  if (r.parent.canReplaceWith(r.index(), r.index(), n))
    return e;
  if (r.parentOffset == 0)
    for (let i = r.depth - 1; i >= 0; i--) {
      let s = r.index(i);
      if (r.node(i).canReplaceWith(s, s, n))
        return r.before(i + 1);
      if (s > 0)
        return null;
    }
  if (r.parentOffset == r.parent.content.size)
    for (let i = r.depth - 1; i >= 0; i--) {
      let s = r.indexAfter(i);
      if (r.node(i).canReplaceWith(s, s, n))
        return r.after(i + 1);
      if (s < r.node(i).childCount)
        return null;
    }
  return null;
}
function Xp(t, e, n) {
  let r = t.resolve(e);
  if (!n.content.size)
    return e;
  let i = n.content;
  for (let s = 0; s < n.openStart; s++)
    i = i.firstChild.content;
  for (let s = 1; s <= (n.openStart == 0 && n.size ? 2 : 1); s++)
    for (let o = r.depth; o >= 0; o--) {
      let a = o == r.depth ? 0 : r.pos <= (r.start(o + 1) + r.end(o + 1)) / 2 ? -1 : 1, l = r.index(o) + (a > 0 ? 1 : 0), u = r.node(o), c = !1;
      if (s == 1)
        c = u.canReplace(l, l, i);
      else {
        let d = u.contentMatchAt(l).findWrapping(i.firstChild.type);
        c = d && u.canReplaceWith(l, l, d[0]);
      }
      if (c)
        return a == 0 ? r.pos : a < 0 ? r.before(o + 1) : r.after(o + 1);
    }
  return null;
}
function da(t, e, n = e, r = B.empty) {
  if (e == n && !r.size)
    return null;
  let i = t.resolve(e), s = t.resolve(n);
  return Qp(i, s, r) ? new ze(e, n, r) : new Mb(i, s, r).fit();
}
function Qp(t, e, n) {
  return !n.openStart && !n.openEnd && t.start() == e.start() && t.parent.canReplace(t.index(), e.index(), n.content);
}
class Mb {
  constructor(e, n, r) {
    this.$from = e, this.$to = n, this.unplaced = r, this.frontier = [], this.placed = O.empty;
    for (let i = 0; i <= e.depth; i++) {
      let s = e.node(i);
      this.frontier.push({
        type: s.type,
        match: s.contentMatchAt(e.indexAfter(i))
      });
    }
    for (let i = e.depth; i > 0; i--)
      this.placed = O.from(e.node(i).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    for (; this.unplaced.size; ) {
      let u = this.findFittable();
      u ? this.placeNodes(u) : this.openMore() || this.dropNode();
    }
    let e = this.mustMoveInline(), n = this.placed.size - this.depth - this.$from.depth, r = this.$from, i = this.close(e < 0 ? this.$to : r.doc.resolve(e));
    if (!i)
      return null;
    let s = this.placed, o = r.depth, a = i.depth;
    for (; o && a && s.childCount == 1; )
      s = s.firstChild.content, o--, a--;
    let l = new B(s, o, a);
    return e > -1 ? new Ue(r.pos, e, this.$to.pos, this.$to.end(), l, n) : l.size || r.pos != this.$to.pos ? new ze(r.pos, i.pos, l) : null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let e = this.unplaced.openStart;
    for (let n = this.unplaced.content, r = 0, i = this.unplaced.openEnd; r < e; r++) {
      let s = n.firstChild;
      if (n.childCount > 1 && (i = 0), s.type.spec.isolating && i <= r) {
        e = r;
        break;
      }
      n = s.content;
    }
    for (let n = 1; n <= 2; n++)
      for (let r = n == 1 ? e : this.unplaced.openStart; r >= 0; r--) {
        let i, s = null;
        r ? (s = Qa(this.unplaced.content, r - 1).firstChild, i = s.content) : i = this.unplaced.content;
        let o = i.firstChild;
        for (let a = this.depth; a >= 0; a--) {
          let { type: l, match: u } = this.frontier[a], c, d = null;
          if (n == 1 && (o ? u.matchType(o.type) || (d = u.fillBefore(O.from(o), !1)) : s && l.compatibleContent(s.type)))
            return { sliceDepth: r, frontierDepth: a, parent: s, inject: d };
          if (n == 2 && o && (c = u.findWrapping(o.type)))
            return { sliceDepth: r, frontierDepth: a, parent: s, wrap: c };
          if (s && u.matchType(s.type))
            break;
        }
      }
  }
  openMore() {
    let { content: e, openStart: n, openEnd: r } = this.unplaced, i = Qa(e, n);
    return !i.childCount || i.firstChild.isLeaf ? !1 : (this.unplaced = new B(e, n + 1, Math.max(r, i.size + n >= e.size - r ? n + 1 : 0)), !0);
  }
  dropNode() {
    let { content: e, openStart: n, openEnd: r } = this.unplaced, i = Qa(e, n);
    if (i.childCount <= 1 && n > 0) {
      let s = e.size - n <= n + i.size;
      this.unplaced = new B(Ai(e, n - 1, 1), n - 1, s ? n - 1 : r);
    } else
      this.unplaced = new B(Ai(e, n, 1), n, r);
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth: e, frontierDepth: n, parent: r, inject: i, wrap: s }) {
    for (; this.depth > n; )
      this.closeFrontierNode();
    if (s)
      for (let g = 0; g < s.length; g++)
        this.openFrontierNode(s[g]);
    let o = this.unplaced, a = r ? r.content : o.content, l = o.openStart - e, u = 0, c = [], { match: d, type: f } = this.frontier[n];
    if (i) {
      for (let g = 0; g < i.childCount; g++)
        c.push(i.child(g));
      d = d.matchFragment(i);
    }
    let h = a.size + e - (o.content.size - o.openEnd);
    for (; u < a.childCount; ) {
      let g = a.child(u), m = d.matchType(g.type);
      if (!m)
        break;
      u++, (u > 1 || l == 0 || g.content.size) && (d = m, c.push(e0(g.mark(f.allowedMarks(g.marks)), u == 1 ? l : 0, u == a.childCount ? h : -1)));
    }
    let p = u == a.childCount;
    p || (h = -1), this.placed = Mi(this.placed, n, O.from(c)), this.frontier[n].match = d, p && h < 0 && r && r.type == this.frontier[this.depth].type && this.frontier.length > 1 && this.closeFrontierNode();
    for (let g = 0, m = a; g < h; g++) {
      let y = m.lastChild;
      this.frontier.push({ type: y.type, match: y.contentMatchAt(y.childCount) }), m = y.content;
    }
    this.unplaced = p ? e == 0 ? B.empty : new B(Ai(o.content, e - 1, 1), e - 1, h < 0 ? o.openEnd : e - 1) : new B(Ai(o.content, e, u), o.openStart, o.openEnd);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let e = this.frontier[this.depth], n;
    if (!e.type.isTextblock || !el(this.$to, this.$to.depth, e.type, e.match, !1) || this.$to.depth == this.depth && (n = this.findCloseLevel(this.$to)) && n.depth == this.depth)
      return -1;
    let { depth: r } = this.$to, i = this.$to.after(r);
    for (; r > 1 && i == this.$to.end(--r); )
      ++i;
    return i;
  }
  findCloseLevel(e) {
    e:
      for (let n = Math.min(this.depth, e.depth); n >= 0; n--) {
        let { match: r, type: i } = this.frontier[n], s = n < e.depth && e.end(n + 1) == e.pos + (e.depth - (n + 1)), o = el(e, n, i, r, s);
        if (o) {
          for (let a = n - 1; a >= 0; a--) {
            let { match: l, type: u } = this.frontier[a], c = el(e, a, u, l, !0);
            if (!c || c.childCount)
              continue e;
          }
          return { depth: n, fit: o, move: s ? e.doc.resolve(e.after(n + 1)) : e };
        }
      }
  }
  close(e) {
    let n = this.findCloseLevel(e);
    if (!n)
      return null;
    for (; this.depth > n.depth; )
      this.closeFrontierNode();
    n.fit.childCount && (this.placed = Mi(this.placed, n.depth, n.fit)), e = n.move;
    for (let r = n.depth + 1; r <= e.depth; r++) {
      let i = e.node(r), s = i.type.contentMatch.fillBefore(i.content, !0, e.index(r));
      this.openFrontierNode(i.type, i.attrs, s);
    }
    return e;
  }
  openFrontierNode(e, n = null, r) {
    let i = this.frontier[this.depth];
    i.match = i.match.matchType(e), this.placed = Mi(this.placed, this.depth, O.from(e.create(n, r))), this.frontier.push({ type: e, match: e.contentMatch });
  }
  closeFrontierNode() {
    let n = this.frontier.pop().match.fillBefore(O.empty, !0);
    n.childCount && (this.placed = Mi(this.placed, this.frontier.length, n));
  }
}
function Ai(t, e, n) {
  return e == 0 ? t.cutByIndex(n, t.childCount) : t.replaceChild(0, t.firstChild.copy(Ai(t.firstChild.content, e - 1, n)));
}
function Mi(t, e, n) {
  return e == 0 ? t.append(n) : t.replaceChild(t.childCount - 1, t.lastChild.copy(Mi(t.lastChild.content, e - 1, n)));
}
function Qa(t, e) {
  for (let n = 0; n < e; n++)
    t = t.firstChild.content;
  return t;
}
function e0(t, e, n) {
  if (e <= 0)
    return t;
  let r = t.content;
  return e > 1 && (r = r.replaceChild(0, e0(r.firstChild, e - 1, r.childCount == 1 ? n - 1 : 0))), e > 0 && (r = t.type.contentMatch.fillBefore(r).append(r), n <= 0 && (r = r.append(t.type.contentMatch.matchFragment(r).fillBefore(O.empty, !0)))), t.copy(r);
}
function el(t, e, n, r, i) {
  let s = t.node(e), o = i ? t.indexAfter(e) : t.index(e);
  if (o == s.childCount && !n.compatibleContent(s.type))
    return null;
  let a = r.fillBefore(s.content, !0, o);
  return a && !Tb(n, s.content, o) ? a : null;
}
function Tb(t, e, n) {
  for (let r = n; r < e.childCount; r++)
    if (!t.allowsMarks(e.child(r).marks))
      return !0;
  return !1;
}
function Db(t) {
  return t.spec.defining || t.spec.definingForContent;
}
function Ob(t, e, n, r) {
  if (!r.size)
    return t.deleteRange(e, n);
  let i = t.doc.resolve(e), s = t.doc.resolve(n);
  if (Qp(i, s, r))
    return t.step(new ze(e, n, r));
  let o = n0(i, t.doc.resolve(n));
  o[o.length - 1] == 0 && o.pop();
  let a = -(i.depth + 1);
  o.unshift(a);
  for (let f = i.depth, h = i.pos - 1; f > 0; f--, h--) {
    let p = i.node(f).type.spec;
    if (p.defining || p.definingAsContext || p.isolating)
      break;
    o.indexOf(f) > -1 ? a = f : i.before(f) == h && o.splice(1, 0, -f);
  }
  let l = o.indexOf(a), u = [], c = r.openStart;
  for (let f = r.content, h = 0; ; h++) {
    let p = f.firstChild;
    if (u.push(p), h == r.openStart)
      break;
    f = p.content;
  }
  for (let f = c - 1; f >= 0; f--) {
    let h = u[f], p = Db(h.type);
    if (p && !h.sameMarkup(i.node(Math.abs(a) - 1)))
      c = f;
    else if (p || !h.type.isTextblock)
      break;
  }
  for (let f = r.openStart; f >= 0; f--) {
    let h = (f + c + 1) % (r.openStart + 1), p = u[h];
    if (p)
      for (let g = 0; g < o.length; g++) {
        let m = o[(g + l) % o.length], y = !0;
        m < 0 && (y = !1, m = -m);
        let x = i.node(m - 1), k = i.index(m - 1);
        if (x.canReplaceWith(k, k, p.type, p.marks))
          return t.replace(i.before(m), y ? s.after(m) : n, new B(t0(r.content, 0, r.openStart, h), h, r.openEnd));
      }
  }
  let d = t.steps.length;
  for (let f = o.length - 1; f >= 0 && (t.replace(e, n, r), !(t.steps.length > d)); f--) {
    let h = o[f];
    h < 0 || (e = i.before(h), n = s.after(h));
  }
}
function t0(t, e, n, r, i) {
  if (e < n) {
    let s = t.firstChild;
    t = t.replaceChild(0, s.copy(t0(s.content, e + 1, n, r, s)));
  }
  if (e > r) {
    let s = i.contentMatchAt(0), o = s.fillBefore(t).append(t);
    t = o.append(s.matchFragment(o).fillBefore(O.empty, !0));
  }
  return t;
}
function Nb(t, e, n, r) {
  if (!r.isInline && e == n && t.doc.resolve(e).parent.content.size) {
    let i = Ab(t.doc, e, r.type);
    i != null && (e = n = i);
  }
  t.replaceRange(e, n, new B(O.from(r), 0, 0));
}
function Lb(t, e, n) {
  let r = t.doc.resolve(e), i = t.doc.resolve(n), s = n0(r, i);
  for (let o = 0; o < s.length; o++) {
    let a = s[o], l = o == s.length - 1;
    if (l && a == 0 || r.node(a).type.contentMatch.validEnd)
      return t.delete(r.start(a), i.end(a));
    if (a > 0 && (l || r.node(a - 1).canReplace(r.index(a - 1), i.indexAfter(a - 1))))
      return t.delete(r.before(a), i.after(a));
  }
  for (let o = 1; o <= r.depth && o <= i.depth; o++)
    if (e - r.start(o) == r.depth - o && n > r.end(o) && i.end(o) - n != i.depth - o)
      return t.delete(r.before(o), n);
  t.delete(e, n);
}
function n0(t, e) {
  let n = [], r = Math.min(t.depth, e.depth);
  for (let i = r; i >= 0; i--) {
    let s = t.start(i);
    if (s < t.pos - (t.depth - i) || e.end(i) > e.pos + (e.depth - i) || t.node(i).type.spec.isolating || e.node(i).type.spec.isolating)
      break;
    (s == e.start(i) || i == t.depth && i == e.depth && t.parent.inlineContent && e.parent.inlineContent && i && e.start(i - 1) == s - 1) && n.push(i);
  }
  return n;
}
class Yr extends nt {
  /**
  Construct an attribute step.
  */
  constructor(e, n, r) {
    super(), this.pos = e, this.attr = n, this.value = r;
  }
  apply(e) {
    let n = e.nodeAt(this.pos);
    if (!n)
      return He.fail("No node at attribute step's position");
    let r = /* @__PURE__ */ Object.create(null);
    for (let s in n.attrs)
      r[s] = n.attrs[s];
    r[this.attr] = this.value;
    let i = n.type.create(r, null, n.marks);
    return He.fromReplace(e, this.pos, this.pos + 1, new B(O.from(i), 0, n.isLeaf ? 0 : 1));
  }
  getMap() {
    return vt.empty;
  }
  invert(e) {
    return new Yr(this.pos, this.attr, e.nodeAt(this.pos).attrs[this.attr]);
  }
  map(e) {
    let n = e.mapResult(this.pos, 1);
    return n.deletedAfter ? null : new Yr(n.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(e, n) {
    if (typeof n.pos != "number" || typeof n.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new Yr(n.pos, n.attr, n.value);
  }
}
nt.jsonID("attr", Yr);
class Vi extends nt {
  /**
  Construct an attribute step.
  */
  constructor(e, n) {
    super(), this.attr = e, this.value = n;
  }
  apply(e) {
    let n = /* @__PURE__ */ Object.create(null);
    for (let i in e.attrs)
      n[i] = e.attrs[i];
    n[this.attr] = this.value;
    let r = e.type.create(n, e.content, e.marks);
    return He.ok(r);
  }
  getMap() {
    return vt.empty;
  }
  invert(e) {
    return new Vi(this.attr, e.attrs[this.attr]);
  }
  map(e) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(e, n) {
    if (typeof n.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new Vi(n.attr, n.value);
  }
}
nt.jsonID("docAttr", Vi);
let ti = class extends Error {
};
ti = function t(e) {
  let n = Error.call(this, e);
  return n.__proto__ = t.prototype, n;
};
ti.prototype = Object.create(Error.prototype);
ti.prototype.constructor = ti;
ti.prototype.name = "TransformError";
class Vu {
  /**
  Create a transform that starts with the given document.
  */
  constructor(e) {
    this.doc = e, this.steps = [], this.docs = [], this.mapping = new Gr();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(e) {
    let n = this.maybeStep(e);
    if (n.failed)
      throw new ti(n.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(e) {
    let n = e.apply(this.doc);
    return n.failed || this.addStep(e, n.doc), n;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(e, n) {
    this.docs.push(this.doc), this.steps.push(e), this.mapping.appendMap(e.getMap()), this.doc = n;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(e, n = e, r = B.empty) {
    let i = da(this.doc, e, n, r);
    return i && this.step(i), this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(e, n, r) {
    return this.replace(e, n, new B(O.from(r), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(e, n) {
    return this.replace(e, n, B.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(e, n) {
    return this.replaceWith(e, e, n);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(e, n, r) {
    return Ob(this, e, n, r), this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(e, n, r) {
    return Nb(this, e, n, r), this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(e, n) {
    return Lb(this, e, n), this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(e, n) {
    return yb(this, e, n), this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(e, n = 1) {
    return Sb(this, e, n), this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(e, n) {
    return vb(this, e, n), this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(e, n = e, r, i = null) {
    return Eb(this, e, n, r, i), this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(e, n, r = null, i) {
    return _b(this, e, n, r, i), this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(e, n, r) {
    return this.step(new Yr(e, n, r)), this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(e, n) {
    return this.step(new Vi(e, n)), this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(e, n) {
    return this.step(new Rn(e, n)), this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(e, n) {
    if (!(n instanceof ye)) {
      let r = this.doc.nodeAt(e);
      if (!r)
        throw new RangeError("No node at position " + e);
      if (n = n.isInSet(r.marks), !n)
        return this;
    }
    return this.step(new ei(e, n)), this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(e, n = 1, r) {
    return wb(this, e, n, r), this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(e, n, r) {
    return pb(this, e, n, r), this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(e, n, r) {
    return gb(this, e, n, r), this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(e, n, r) {
    return mb(this, e, n, r), this;
  }
}
const tl = /* @__PURE__ */ Object.create(null);
class ne {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor(e, n, r) {
    this.$anchor = e, this.$head = n, this.ranges = r || [new r0(e.min(n), e.max(n))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let e = this.ranges;
    for (let n = 0; n < e.length; n++)
      if (e[n].$from.pos != e[n].$to.pos)
        return !1;
    return !0;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, !0);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(e, n = B.empty) {
    let r = n.content.lastChild, i = null;
    for (let a = 0; a < n.openEnd; a++)
      i = r, r = r.lastChild;
    let s = e.steps.length, o = this.ranges;
    for (let a = 0; a < o.length; a++) {
      let { $from: l, $to: u } = o[a], c = e.mapping.slice(s);
      e.replaceRange(c.map(l.pos), c.map(u.pos), a ? B.empty : n), a == 0 && pd(e, s, (r ? r.isInline : i && i.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(e, n) {
    let r = e.steps.length, i = this.ranges;
    for (let s = 0; s < i.length; s++) {
      let { $from: o, $to: a } = i[s], l = e.mapping.slice(r), u = l.map(o.pos), c = l.map(a.pos);
      s ? e.deleteRange(u, c) : (e.replaceRangeWith(u, c, n), pd(e, r, n.isInline ? -1 : 1));
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom(e, n, r = !1) {
    let i = e.parent.inlineContent ? new X(e) : Br(e.node(0), e.parent, e.pos, e.index(), n, r);
    if (i)
      return i;
    for (let s = e.depth - 1; s >= 0; s--) {
      let o = n < 0 ? Br(e.node(0), e.node(s), e.before(s + 1), e.index(s), n, r) : Br(e.node(0), e.node(s), e.after(s + 1), e.index(s) + 1, n, r);
      if (o)
        return o;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near(e, n = 1) {
    return this.findFrom(e, n) || this.findFrom(e, -n) || new Nt(e.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(e) {
    return Br(e, e, 0, 0, 1) || new Nt(e);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(e) {
    return Br(e, e, e.content.size, e.childCount, -1) || new Nt(e);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(e, n) {
    if (!n || !n.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let r = tl[n.type];
    if (!r)
      throw new RangeError(`No selection type ${n.type} defined`);
    return r.fromJSON(e, n);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(e, n) {
    if (e in tl)
      throw new RangeError("Duplicate use of selection JSON ID " + e);
    return tl[e] = n, n.prototype.jsonID = e, n;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return X.between(this.$anchor, this.$head).getBookmark();
  }
}
ne.prototype.visible = !0;
class r0 {
  /**
  Create a range.
  */
  constructor(e, n) {
    this.$from = e, this.$to = n;
  }
}
let fd = !1;
function hd(t) {
  !fd && !t.parent.inlineContent && (fd = !0, console.warn("TextSelection endpoint not pointing into a node with inline content (" + t.parent.type.name + ")"));
}
class X extends ne {
  /**
  Construct a text selection between the given points.
  */
  constructor(e, n = e) {
    hd(e), hd(n), super(e, n);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(e, n) {
    let r = e.resolve(n.map(this.head));
    if (!r.parent.inlineContent)
      return ne.near(r);
    let i = e.resolve(n.map(this.anchor));
    return new X(i.parent.inlineContent ? i : r, r);
  }
  replace(e, n = B.empty) {
    if (super.replace(e, n), n == B.empty) {
      let r = this.$from.marksAcross(this.$to);
      r && e.ensureMarks(r);
    }
  }
  eq(e) {
    return e instanceof X && e.anchor == this.anchor && e.head == this.head;
  }
  getBookmark() {
    return new fa(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.anchor != "number" || typeof n.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new X(e.resolve(n.anchor), e.resolve(n.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(e, n, r = n) {
    let i = e.resolve(n);
    return new this(i, r == n ? i : e.resolve(r));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between(e, n, r) {
    let i = e.pos - n.pos;
    if ((!r || i) && (r = i >= 0 ? 1 : -1), !n.parent.inlineContent) {
      let s = ne.findFrom(n, r, !0) || ne.findFrom(n, -r, !0);
      if (s)
        n = s.$head;
      else
        return ne.near(n, r);
    }
    return e.parent.inlineContent || (i == 0 ? e = n : (e = (ne.findFrom(e, -r, !0) || ne.findFrom(e, r, !0)).$anchor, e.pos < n.pos != i < 0 && (e = n))), new X(e, n);
  }
}
ne.jsonID("text", X);
class fa {
  constructor(e, n) {
    this.anchor = e, this.head = n;
  }
  map(e) {
    return new fa(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    return X.between(e.resolve(this.anchor), e.resolve(this.head));
  }
}
class ee extends ne {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor(e) {
    let n = e.nodeAfter, r = e.node(0).resolve(e.pos + n.nodeSize);
    super(e, r), this.node = n;
  }
  map(e, n) {
    let { deleted: r, pos: i } = n.mapResult(this.anchor), s = e.resolve(i);
    return r ? ne.near(s) : new ee(s);
  }
  content() {
    return new B(O.from(this.node), 0, 0);
  }
  eq(e) {
    return e instanceof ee && e.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new Uu(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new ee(e.resolve(n.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(e, n) {
    return new ee(e.resolve(n));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(e) {
    return !e.isText && e.type.spec.selectable !== !1;
  }
}
ee.prototype.visible = !1;
ne.jsonID("node", ee);
class Uu {
  constructor(e) {
    this.anchor = e;
  }
  map(e) {
    let { deleted: n, pos: r } = e.mapResult(this.anchor);
    return n ? new fa(r, r) : new Uu(r);
  }
  resolve(e) {
    let n = e.resolve(this.anchor), r = n.nodeAfter;
    return r && ee.isSelectable(r) ? new ee(n) : ne.near(n);
  }
}
class Nt extends ne {
  /**
  Create an all-selection over the given document.
  */
  constructor(e) {
    super(e.resolve(0), e.resolve(e.content.size));
  }
  replace(e, n = B.empty) {
    if (n == B.empty) {
      e.delete(0, e.doc.content.size);
      let r = ne.atStart(e.doc);
      r.eq(e.selection) || e.setSelection(r);
    } else
      super.replace(e, n);
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(e) {
    return new Nt(e);
  }
  map(e) {
    return new Nt(e);
  }
  eq(e) {
    return e instanceof Nt;
  }
  getBookmark() {
    return Rb;
  }
}
ne.jsonID("all", Nt);
const Rb = {
  map() {
    return this;
  },
  resolve(t) {
    return new Nt(t);
  }
};
function Br(t, e, n, r, i, s = !1) {
  if (e.inlineContent)
    return X.create(t, n);
  for (let o = r - (i > 0 ? 0 : 1); i > 0 ? o < e.childCount : o >= 0; o += i) {
    let a = e.child(o);
    if (a.isAtom) {
      if (!s && ee.isSelectable(a))
        return ee.create(t, n - (i < 0 ? a.nodeSize : 0));
    } else {
      let l = Br(t, a, n + i, i < 0 ? a.childCount : 0, i, s);
      if (l)
        return l;
    }
    n += a.nodeSize * i;
  }
  return null;
}
function pd(t, e, n) {
  let r = t.steps.length - 1;
  if (r < e)
    return;
  let i = t.steps[r];
  if (!(i instanceof ze || i instanceof Ue))
    return;
  let s = t.mapping.maps[r], o;
  s.forEach((a, l, u, c) => {
    o == null && (o = c);
  }), t.setSelection(ne.near(t.doc.resolve(o), n));
}
const gd = 1, Rs = 2, md = 4;
class Ib extends Vu {
  /**
  @internal
  */
  constructor(e) {
    super(e.doc), this.curSelectionFor = 0, this.updated = 0, this.meta = /* @__PURE__ */ Object.create(null), this.time = Date.now(), this.curSelection = e.selection, this.storedMarks = e.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    return this.curSelectionFor < this.steps.length && (this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor)), this.curSelectionFor = this.steps.length), this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(e) {
    if (e.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    return this.curSelection = e, this.curSelectionFor = this.steps.length, this.updated = (this.updated | gd) & ~Rs, this.storedMarks = null, this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & gd) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(e) {
    return this.storedMarks = e, this.updated |= Rs, this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(e) {
    return ye.sameSet(this.storedMarks || this.selection.$from.marks(), e) || this.setStoredMarks(e), this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(e) {
    return this.ensureMarks(e.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(e) {
    return this.ensureMarks(e.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & Rs) > 0;
  }
  /**
  @internal
  */
  addStep(e, n) {
    super.addStep(e, n), this.updated = this.updated & ~Rs, this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(e) {
    return this.time = e, this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(e) {
    return this.selection.replace(this, e), this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(e, n = !0) {
    let r = this.selection;
    return n && (e = e.mark(this.storedMarks || (r.empty ? r.$from.marks() : r.$from.marksAcross(r.$to) || ye.none))), r.replaceWith(this, e), this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    return this.selection.replace(this), this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(e, n, r) {
    let i = this.doc.type.schema;
    if (n == null)
      return e ? this.replaceSelectionWith(i.text(e), !0) : this.deleteSelection();
    {
      if (r == null && (r = n), r = r ?? n, !e)
        return this.deleteRange(n, r);
      let s = this.storedMarks;
      if (!s) {
        let o = this.doc.resolve(n);
        s = r == n ? o.marks() : o.marksAcross(this.doc.resolve(r));
      }
      return this.replaceRangeWith(n, r, i.text(e, s)), this.selection.empty || this.setSelection(ne.near(this.selection.$to)), this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(e, n) {
    return this.meta[typeof e == "string" ? e : e.key] = n, this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(e) {
    return this.meta[typeof e == "string" ? e : e.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let e in this.meta)
      return !1;
    return !0;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    return this.updated |= md, this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & md) > 0;
  }
}
function bd(t, e) {
  return !e || !t ? t : t.bind(e);
}
class Ti {
  constructor(e, n, r) {
    this.name = e, this.init = bd(n.init, r), this.apply = bd(n.apply, r);
  }
}
const Fb = [
  new Ti("doc", {
    init(t) {
      return t.doc || t.schema.topNodeType.createAndFill();
    },
    apply(t) {
      return t.doc;
    }
  }),
  new Ti("selection", {
    init(t, e) {
      return t.selection || ne.atStart(e.doc);
    },
    apply(t) {
      return t.selection;
    }
  }),
  new Ti("storedMarks", {
    init(t) {
      return t.storedMarks || null;
    },
    apply(t, e, n, r) {
      return r.selection.$cursor ? t.storedMarks : null;
    }
  }),
  new Ti("scrollToSelection", {
    init() {
      return 0;
    },
    apply(t, e) {
      return t.scrolledIntoView ? e + 1 : e;
    }
  })
];
class nl {
  constructor(e, n) {
    this.schema = e, this.plugins = [], this.pluginsByKey = /* @__PURE__ */ Object.create(null), this.fields = Fb.slice(), n && n.forEach((r) => {
      if (this.pluginsByKey[r.key])
        throw new RangeError("Adding different instances of a keyed plugin (" + r.key + ")");
      this.plugins.push(r), this.pluginsByKey[r.key] = r, r.spec.state && this.fields.push(new Ti(r.key, r.spec.state, r));
    });
  }
}
class qr {
  /**
  @internal
  */
  constructor(e) {
    this.config = e;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(e) {
    return this.applyTransaction(e).state;
  }
  /**
  @internal
  */
  filterTransaction(e, n = -1) {
    for (let r = 0; r < this.config.plugins.length; r++)
      if (r != n) {
        let i = this.config.plugins[r];
        if (i.spec.filterTransaction && !i.spec.filterTransaction.call(i, e, this))
          return !1;
      }
    return !0;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(e) {
    if (!this.filterTransaction(e))
      return { state: this, transactions: [] };
    let n = [e], r = this.applyInner(e), i = null;
    for (; ; ) {
      let s = !1;
      for (let o = 0; o < this.config.plugins.length; o++) {
        let a = this.config.plugins[o];
        if (a.spec.appendTransaction) {
          let l = i ? i[o].n : 0, u = i ? i[o].state : this, c = l < n.length && a.spec.appendTransaction.call(a, l ? n.slice(l) : n, u, r);
          if (c && r.filterTransaction(c, o)) {
            if (c.setMeta("appendedTransaction", e), !i) {
              i = [];
              for (let d = 0; d < this.config.plugins.length; d++)
                i.push(d < o ? { state: r, n: n.length } : { state: this, n: 0 });
            }
            n.push(c), r = r.applyInner(c), s = !0;
          }
          i && (i[o] = { state: r, n: n.length });
        }
      }
      if (!s)
        return { state: r, transactions: n };
    }
  }
  /**
  @internal
  */
  applyInner(e) {
    if (!e.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let n = new qr(this.config), r = this.config.fields;
    for (let i = 0; i < r.length; i++) {
      let s = r[i];
      n[s.name] = s.apply(e, this[s.name], this, n);
    }
    return n;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new Ib(this);
  }
  /**
  Create a new state.
  */
  static create(e) {
    let n = new nl(e.doc ? e.doc.type.schema : e.schema, e.plugins), r = new qr(n);
    for (let i = 0; i < n.fields.length; i++)
      r[n.fields[i].name] = n.fields[i].init(e, r);
    return r;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(e) {
    let n = new nl(this.schema, e.plugins), r = n.fields, i = new qr(n);
    for (let s = 0; s < r.length; s++) {
      let o = r[s].name;
      i[o] = this.hasOwnProperty(o) ? this[o] : r[s].init(e, i);
    }
    return i;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(e) {
    let n = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks && (n.storedMarks = this.storedMarks.map((r) => r.toJSON())), e && typeof e == "object")
      for (let r in e) {
        if (r == "doc" || r == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let i = e[r], s = i.spec.state;
        s && s.toJSON && (n[r] = s.toJSON.call(i, this[i.key]));
      }
    return n;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(e, n, r) {
    if (!n)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!e.schema)
      throw new RangeError("Required config field 'schema' missing");
    let i = new nl(e.schema, e.plugins), s = new qr(i);
    return i.fields.forEach((o) => {
      if (o.name == "doc")
        s.doc = ur.fromJSON(e.schema, n.doc);
      else if (o.name == "selection")
        s.selection = ne.fromJSON(s.doc, n.selection);
      else if (o.name == "storedMarks")
        n.storedMarks && (s.storedMarks = n.storedMarks.map(e.schema.markFromJSON));
      else {
        if (r)
          for (let a in r) {
            let l = r[a], u = l.spec.state;
            if (l.key == o.name && u && u.fromJSON && Object.prototype.hasOwnProperty.call(n, a)) {
              s[o.name] = u.fromJSON.call(l, e, n[a], s);
              return;
            }
          }
        s[o.name] = o.init(e, s);
      }
    }), s;
  }
}
function i0(t, e, n) {
  for (let r in t) {
    let i = t[r];
    i instanceof Function ? i = i.bind(e) : r == "handleDOMEvents" && (i = i0(i, e, {})), n[r] = i;
  }
  return n;
}
class we {
  /**
  Create a plugin.
  */
  constructor(e) {
    this.spec = e, this.props = {}, e.props && i0(e.props, this, this.props), this.key = e.key ? e.key.key : s0("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const rl = /* @__PURE__ */ Object.create(null);
function s0(t) {
  return t in rl ? t + "$" + ++rl[t] : (rl[t] = 0, t + "$");
}
class Te {
  /**
  Create a plugin key.
  */
  constructor(e = "key") {
    this.key = s0(e);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(e) {
    return e.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const Je = function(t) {
  for (var e = 0; ; e++)
    if (t = t.previousSibling, !t)
      return e;
}, Ui = function(t) {
  let e = t.assignedSlot || t.parentNode;
  return e && e.nodeType == 11 ? e.host : e;
};
let eu = null;
const bn = function(t, e, n) {
  let r = eu || (eu = document.createRange());
  return r.setEnd(t, n ?? t.nodeValue.length), r.setStart(t, e || 0), r;
}, Hb = function() {
  eu = null;
}, mr = function(t, e, n, r) {
  return n && (yd(t, e, n, r, -1) || yd(t, e, n, r, 1));
}, Bb = /^(img|br|input|textarea|hr)$/i;
function yd(t, e, n, r, i) {
  for (; ; ) {
    if (t == n && e == r)
      return !0;
    if (e == (i < 0 ? 0 : Jt(t))) {
      let s = t.parentNode;
      if (!s || s.nodeType != 1 || gs(t) || Bb.test(t.nodeName) || t.contentEditable == "false")
        return !1;
      e = Je(t) + (i < 0 ? 0 : 1), t = s;
    } else if (t.nodeType == 1) {
      if (t = t.childNodes[e + (i < 0 ? -1 : 0)], t.contentEditable == "false")
        return !1;
      e = i < 0 ? Jt(t) : 0;
    } else
      return !1;
  }
}
function Jt(t) {
  return t.nodeType == 3 ? t.nodeValue.length : t.childNodes.length;
}
function Pb(t, e) {
  for (; ; ) {
    if (t.nodeType == 3 && e)
      return t;
    if (t.nodeType == 1 && e > 0) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[e - 1], e = Jt(t);
    } else if (t.parentNode && !gs(t))
      e = Je(t), t = t.parentNode;
    else
      return null;
  }
}
function $b(t, e) {
  for (; ; ) {
    if (t.nodeType == 3 && e < t.nodeValue.length)
      return t;
    if (t.nodeType == 1 && e < t.childNodes.length) {
      if (t.contentEditable == "false")
        return null;
      t = t.childNodes[e], e = 0;
    } else if (t.parentNode && !gs(t))
      e = Je(t) + 1, t = t.parentNode;
    else
      return null;
  }
}
function zb(t, e, n) {
  for (let r = e == 0, i = e == Jt(t); r || i; ) {
    if (t == n)
      return !0;
    let s = Je(t);
    if (t = t.parentNode, !t)
      return !1;
    r = r && s == 0, i = i && s == Jt(t);
  }
}
function gs(t) {
  let e;
  for (let n = t; n && !(e = n.pmViewDesc); n = n.parentNode)
    ;
  return e && e.node && e.node.isBlock && (e.dom == t || e.contentDOM == t);
}
const ha = function(t) {
  return t.focusNode && mr(t.focusNode, t.focusOffset, t.anchorNode, t.anchorOffset);
};
function er(t, e) {
  let n = document.createEvent("Event");
  return n.initEvent("keydown", !0, !0), n.keyCode = t, n.key = n.code = e, n;
}
function Vb(t) {
  let e = t.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function Ub(t, e, n) {
  if (t.caretPositionFromPoint)
    try {
      let r = t.caretPositionFromPoint(e, n);
      if (r)
        return { node: r.offsetNode, offset: r.offset };
    } catch {
    }
  if (t.caretRangeFromPoint) {
    let r = t.caretRangeFromPoint(e, n);
    if (r)
      return { node: r.startContainer, offset: r.startOffset };
  }
}
const rn = typeof navigator < "u" ? navigator : null, xd = typeof document < "u" ? document : null, Gn = rn && rn.userAgent || "", tu = /Edge\/(\d+)/.exec(Gn), o0 = /MSIE \d/.exec(Gn), nu = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Gn), ht = !!(o0 || nu || tu), $n = o0 ? document.documentMode : nu ? +nu[1] : tu ? +tu[1] : 0, zt = !ht && /gecko\/(\d+)/i.test(Gn);
zt && +(/Firefox\/(\d+)/.exec(Gn) || [0, 0])[1];
const ru = !ht && /Chrome\/(\d+)/.exec(Gn), st = !!ru, qb = ru ? +ru[1] : 0, ot = !ht && !!rn && /Apple Computer/.test(rn.vendor), ni = ot && (/Mobile\/\w+/.test(Gn) || !!rn && rn.maxTouchPoints > 2), Dt = ni || (rn ? /Mac/.test(rn.platform) : !1), Zb = rn ? /Win/.test(rn.platform) : !1, Pt = /Android \d/.test(Gn), ms = !!xd && "webkitFontSmoothing" in xd.documentElement.style, Kb = ms ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function Wb(t) {
  let e = t.defaultView && t.defaultView.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: t.documentElement.clientWidth,
    top: 0,
    bottom: t.documentElement.clientHeight
  };
}
function hn(t, e) {
  return typeof t == "number" ? t : t[e];
}
function jb(t) {
  let e = t.getBoundingClientRect(), n = e.width / t.offsetWidth || 1, r = e.height / t.offsetHeight || 1;
  return {
    left: e.left,
    right: e.left + t.clientWidth * n,
    top: e.top,
    bottom: e.top + t.clientHeight * r
  };
}
function kd(t, e, n) {
  let r = t.someProp("scrollThreshold") || 0, i = t.someProp("scrollMargin") || 5, s = t.dom.ownerDocument;
  for (let o = n || t.dom; o; o = Ui(o)) {
    if (o.nodeType != 1)
      continue;
    let a = o, l = a == s.body, u = l ? Wb(s) : jb(a), c = 0, d = 0;
    if (e.top < u.top + hn(r, "top") ? d = -(u.top - e.top + hn(i, "top")) : e.bottom > u.bottom - hn(r, "bottom") && (d = e.bottom - e.top > u.bottom - u.top ? e.top + hn(i, "top") - u.top : e.bottom - u.bottom + hn(i, "bottom")), e.left < u.left + hn(r, "left") ? c = -(u.left - e.left + hn(i, "left")) : e.right > u.right - hn(r, "right") && (c = e.right - u.right + hn(i, "right")), c || d)
      if (l)
        s.defaultView.scrollBy(c, d);
      else {
        let f = a.scrollLeft, h = a.scrollTop;
        d && (a.scrollTop += d), c && (a.scrollLeft += c);
        let p = a.scrollLeft - f, g = a.scrollTop - h;
        e = { left: e.left - p, top: e.top - g, right: e.right - p, bottom: e.bottom - g };
      }
    if (l || /^(fixed|sticky)$/.test(getComputedStyle(o).position))
      break;
  }
}
function Gb(t) {
  let e = t.dom.getBoundingClientRect(), n = Math.max(0, e.top), r, i;
  for (let s = (e.left + e.right) / 2, o = n + 1; o < Math.min(innerHeight, e.bottom); o += 5) {
    let a = t.root.elementFromPoint(s, o);
    if (!a || a == t.dom || !t.dom.contains(a))
      continue;
    let l = a.getBoundingClientRect();
    if (l.top >= n - 20) {
      r = a, i = l.top;
      break;
    }
  }
  return { refDOM: r, refTop: i, stack: a0(t.dom) };
}
function a0(t) {
  let e = [], n = t.ownerDocument;
  for (let r = t; r && (e.push({ dom: r, top: r.scrollTop, left: r.scrollLeft }), t != n); r = Ui(r))
    ;
  return e;
}
function Jb({ refDOM: t, refTop: e, stack: n }) {
  let r = t ? t.getBoundingClientRect().top : 0;
  l0(n, r == 0 ? 0 : r - e);
}
function l0(t, e) {
  for (let n = 0; n < t.length; n++) {
    let { dom: r, top: i, left: s } = t[n];
    r.scrollTop != i + e && (r.scrollTop = i + e), r.scrollLeft != s && (r.scrollLeft = s);
  }
}
let Mr = null;
function Yb(t) {
  if (t.setActive)
    return t.setActive();
  if (Mr)
    return t.focus(Mr);
  let e = a0(t);
  t.focus(Mr == null ? {
    get preventScroll() {
      return Mr = { preventScroll: !0 }, !0;
    }
  } : void 0), Mr || (Mr = !1, l0(e, 0));
}
function u0(t, e) {
  let n, r = 2e8, i, s = 0, o = e.top, a = e.top, l, u;
  for (let c = t.firstChild, d = 0; c; c = c.nextSibling, d++) {
    let f;
    if (c.nodeType == 1)
      f = c.getClientRects();
    else if (c.nodeType == 3)
      f = bn(c).getClientRects();
    else
      continue;
    for (let h = 0; h < f.length; h++) {
      let p = f[h];
      if (p.top <= o && p.bottom >= a) {
        o = Math.max(p.bottom, o), a = Math.min(p.top, a);
        let g = p.left > e.left ? p.left - e.left : p.right < e.left ? e.left - p.right : 0;
        if (g < r) {
          n = c, r = g, i = g && n.nodeType == 3 ? {
            left: p.right < e.left ? p.right : p.left,
            top: e.top
          } : e, c.nodeType == 1 && g && (s = d + (e.left >= (p.left + p.right) / 2 ? 1 : 0));
          continue;
        }
      } else
        p.top > e.top && !l && p.left <= e.left && p.right >= e.left && (l = c, u = { left: Math.max(p.left, Math.min(p.right, e.left)), top: p.top });
      !n && (e.left >= p.right && e.top >= p.top || e.left >= p.left && e.top >= p.bottom) && (s = d + 1);
    }
  }
  return !n && l && (n = l, i = u, r = 0), n && n.nodeType == 3 ? Xb(n, i) : !n || r && n.nodeType == 1 ? { node: t, offset: s } : u0(n, i);
}
function Xb(t, e) {
  let n = t.nodeValue.length, r = document.createRange();
  for (let i = 0; i < n; i++) {
    r.setEnd(t, i + 1), r.setStart(t, i);
    let s = _n(r, 1);
    if (s.top != s.bottom && qu(e, s))
      return { node: t, offset: i + (e.left >= (s.left + s.right) / 2 ? 1 : 0) };
  }
  return { node: t, offset: 0 };
}
function qu(t, e) {
  return t.left >= e.left - 1 && t.left <= e.right + 1 && t.top >= e.top - 1 && t.top <= e.bottom + 1;
}
function Qb(t, e) {
  let n = t.parentNode;
  return n && /^li$/i.test(n.nodeName) && e.left < t.getBoundingClientRect().left ? n : t;
}
function e2(t, e, n) {
  let { node: r, offset: i } = u0(e, n), s = -1;
  if (r.nodeType == 1 && !r.firstChild) {
    let o = r.getBoundingClientRect();
    s = o.left != o.right && n.left > (o.left + o.right) / 2 ? 1 : -1;
  }
  return t.docView.posFromDOM(r, i, s);
}
function t2(t, e, n, r) {
  let i = -1;
  for (let s = e, o = !1; s != t.dom; ) {
    let a = t.docView.nearestDesc(s, !0);
    if (!a)
      return null;
    if (a.dom.nodeType == 1 && (a.node.isBlock && a.parent && !o || !a.contentDOM)) {
      let l = a.dom.getBoundingClientRect();
      if (a.node.isBlock && a.parent && !o && (o = !0, l.left > r.left || l.top > r.top ? i = a.posBefore : (l.right < r.left || l.bottom < r.top) && (i = a.posAfter)), !a.contentDOM && i < 0 && !a.node.isText)
        return (a.node.isBlock ? r.top < (l.top + l.bottom) / 2 : r.left < (l.left + l.right) / 2) ? a.posBefore : a.posAfter;
    }
    s = a.dom.parentNode;
  }
  return i > -1 ? i : t.docView.posFromDOM(e, n, -1);
}
function c0(t, e, n) {
  let r = t.childNodes.length;
  if (r && n.top < n.bottom)
    for (let i = Math.max(0, Math.min(r - 1, Math.floor(r * (e.top - n.top) / (n.bottom - n.top)) - 2)), s = i; ; ) {
      let o = t.childNodes[s];
      if (o.nodeType == 1) {
        let a = o.getClientRects();
        for (let l = 0; l < a.length; l++) {
          let u = a[l];
          if (qu(e, u))
            return c0(o, e, u);
        }
      }
      if ((s = (s + 1) % r) == i)
        break;
    }
  return t;
}
function n2(t, e) {
  let n = t.dom.ownerDocument, r, i = 0, s = Ub(n, e.left, e.top);
  s && ({ node: r, offset: i } = s);
  let o = (t.root.elementFromPoint ? t.root : n).elementFromPoint(e.left, e.top), a;
  if (!o || !t.dom.contains(o.nodeType != 1 ? o.parentNode : o)) {
    let u = t.dom.getBoundingClientRect();
    if (!qu(e, u) || (o = c0(t.dom, e, u), !o))
      return null;
  }
  if (ot)
    for (let u = o; r && u; u = Ui(u))
      u.draggable && (r = void 0);
  if (o = Qb(o, e), r) {
    if (zt && r.nodeType == 1 && (i = Math.min(i, r.childNodes.length), i < r.childNodes.length)) {
      let c = r.childNodes[i], d;
      c.nodeName == "IMG" && (d = c.getBoundingClientRect()).right <= e.left && d.bottom > e.top && i++;
    }
    let u;
    ms && i && r.nodeType == 1 && (u = r.childNodes[i - 1]).nodeType == 1 && u.contentEditable == "false" && u.getBoundingClientRect().top >= e.top && i--, r == t.dom && i == r.childNodes.length - 1 && r.lastChild.nodeType == 1 && e.top > r.lastChild.getBoundingClientRect().bottom ? a = t.state.doc.content.size : (i == 0 || r.nodeType != 1 || r.childNodes[i - 1].nodeName != "BR") && (a = t2(t, r, i, e));
  }
  a == null && (a = e2(t, o, e));
  let l = t.docView.nearestDesc(o, !0);
  return { pos: a, inside: l ? l.posAtStart - l.border : -1 };
}
function vd(t) {
  return t.top < t.bottom || t.left < t.right;
}
function _n(t, e) {
  let n = t.getClientRects();
  if (n.length) {
    let r = n[e < 0 ? 0 : n.length - 1];
    if (vd(r))
      return r;
  }
  return Array.prototype.find.call(n, vd) || t.getBoundingClientRect();
}
const r2 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function d0(t, e, n) {
  let { node: r, offset: i, atom: s } = t.docView.domFromPos(e, n < 0 ? -1 : 1), o = ms || zt;
  if (r.nodeType == 3)
    if (o && (r2.test(r.nodeValue) || (n < 0 ? !i : i == r.nodeValue.length))) {
      let l = _n(bn(r, i, i), n);
      if (zt && i && /\s/.test(r.nodeValue[i - 1]) && i < r.nodeValue.length) {
        let u = _n(bn(r, i - 1, i - 1), -1);
        if (u.top == l.top) {
          let c = _n(bn(r, i, i + 1), -1);
          if (c.top != l.top)
            return ki(c, c.left < u.left);
        }
      }
      return l;
    } else {
      let l = i, u = i, c = n < 0 ? 1 : -1;
      return n < 0 && !i ? (u++, c = -1) : n >= 0 && i == r.nodeValue.length ? (l--, c = 1) : n < 0 ? l-- : u++, ki(_n(bn(r, l, u), c), c < 0);
    }
  if (!t.state.doc.resolve(e - (s || 0)).parent.inlineContent) {
    if (s == null && i && (n < 0 || i == Jt(r))) {
      let l = r.childNodes[i - 1];
      if (l.nodeType == 1)
        return il(l.getBoundingClientRect(), !1);
    }
    if (s == null && i < Jt(r)) {
      let l = r.childNodes[i];
      if (l.nodeType == 1)
        return il(l.getBoundingClientRect(), !0);
    }
    return il(r.getBoundingClientRect(), n >= 0);
  }
  if (s == null && i && (n < 0 || i == Jt(r))) {
    let l = r.childNodes[i - 1], u = l.nodeType == 3 ? bn(l, Jt(l) - (o ? 0 : 1)) : l.nodeType == 1 && (l.nodeName != "BR" || !l.nextSibling) ? l : null;
    if (u)
      return ki(_n(u, 1), !1);
  }
  if (s == null && i < Jt(r)) {
    let l = r.childNodes[i];
    for (; l.pmViewDesc && l.pmViewDesc.ignoreForCoords; )
      l = l.nextSibling;
    let u = l ? l.nodeType == 3 ? bn(l, 0, o ? 0 : 1) : l.nodeType == 1 ? l : null : null;
    if (u)
      return ki(_n(u, -1), !0);
  }
  return ki(_n(r.nodeType == 3 ? bn(r) : r, -n), n >= 0);
}
function ki(t, e) {
  if (t.width == 0)
    return t;
  let n = e ? t.left : t.right;
  return { top: t.top, bottom: t.bottom, left: n, right: n };
}
function il(t, e) {
  if (t.height == 0)
    return t;
  let n = e ? t.top : t.bottom;
  return { top: n, bottom: n, left: t.left, right: t.right };
}
function f0(t, e, n) {
  let r = t.state, i = t.root.activeElement;
  r != e && t.updateState(e), i != t.dom && t.focus();
  try {
    return n();
  } finally {
    r != e && t.updateState(r), i != t.dom && i && i.focus();
  }
}
function i2(t, e, n) {
  let r = e.selection, i = n == "up" ? r.$from : r.$to;
  return f0(t, e, () => {
    let { node: s } = t.docView.domFromPos(i.pos, n == "up" ? -1 : 1);
    for (; ; ) {
      let a = t.docView.nearestDesc(s, !0);
      if (!a)
        break;
      if (a.node.isBlock) {
        s = a.contentDOM || a.dom;
        break;
      }
      s = a.dom.parentNode;
    }
    let o = d0(t, i.pos, 1);
    for (let a = s.firstChild; a; a = a.nextSibling) {
      let l;
      if (a.nodeType == 1)
        l = a.getClientRects();
      else if (a.nodeType == 3)
        l = bn(a, 0, a.nodeValue.length).getClientRects();
      else
        continue;
      for (let u = 0; u < l.length; u++) {
        let c = l[u];
        if (c.bottom > c.top + 1 && (n == "up" ? o.top - c.top > (c.bottom - o.top) * 2 : c.bottom - o.bottom > (o.bottom - c.top) * 2))
          return !1;
      }
    }
    return !0;
  });
}
const s2 = /[\u0590-\u08ac]/;
function o2(t, e, n) {
  let { $head: r } = e.selection;
  if (!r.parent.isTextblock)
    return !1;
  let i = r.parentOffset, s = !i, o = i == r.parent.content.size, a = t.domSelection();
  return !s2.test(r.parent.textContent) || !a.modify ? n == "left" || n == "backward" ? s : o : f0(t, e, () => {
    let { focusNode: l, focusOffset: u, anchorNode: c, anchorOffset: d } = t.domSelectionRange(), f = a.caretBidiLevel;
    a.modify("move", n, "character");
    let h = r.depth ? t.docView.domAfterPos(r.before()) : t.dom, { focusNode: p, focusOffset: g } = t.domSelectionRange(), m = p && !h.contains(p.nodeType == 1 ? p : p.parentNode) || l == p && u == g;
    try {
      a.collapse(c, d), l && (l != c || u != d) && a.extend && a.extend(l, u);
    } catch {
    }
    return f != null && (a.caretBidiLevel = f), m;
  });
}
let Ed = null, Cd = null, _d = !1;
function a2(t, e, n) {
  return Ed == e && Cd == n ? _d : (Ed = e, Cd = n, _d = n == "up" || n == "down" ? i2(t, e, n) : o2(t, e, n));
}
const Lt = 0, wd = 1, ir = 2, sn = 3;
class bs {
  constructor(e, n, r, i) {
    this.parent = e, this.children = n, this.dom = r, this.contentDOM = i, this.dirty = Lt, r.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(e) {
    return !1;
  }
  matchesMark(e) {
    return !1;
  }
  matchesNode(e, n, r) {
    return !1;
  }
  matchesHack(e) {
    return !1;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(e) {
    return !1;
  }
  // The size of the content represented by this desc.
  get size() {
    let e = 0;
    for (let n = 0; n < this.children.length; n++)
      e += this.children[n].size;
    return e;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0, this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
    for (let e = 0; e < this.children.length; e++)
      this.children[e].destroy();
  }
  posBeforeChild(e) {
    for (let n = 0, r = this.posAtStart; ; n++) {
      let i = this.children[n];
      if (i == e)
        return r;
      r += i.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(e, n, r) {
    if (this.contentDOM && this.contentDOM.contains(e.nodeType == 1 ? e : e.parentNode))
      if (r < 0) {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[n - 1];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.previousSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.previousSibling;
        return s ? this.posBeforeChild(o) + o.size : this.posAtStart;
      } else {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[n];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.nextSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.nextSibling;
        return s ? this.posBeforeChild(o) : this.posAtEnd;
      }
    let i;
    if (e == this.dom && this.contentDOM)
      i = n > Je(this.contentDOM);
    else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM))
      i = e.compareDocumentPosition(this.contentDOM) & 2;
    else if (this.dom.firstChild) {
      if (n == 0)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            i = !1;
            break;
          }
          if (s.previousSibling)
            break;
        }
      if (i == null && n == e.childNodes.length)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            i = !0;
            break;
          }
          if (s.nextSibling)
            break;
        }
    }
    return i ?? r > 0 ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(e, n = !1) {
    for (let r = !0, i = e; i; i = i.parentNode) {
      let s = this.getDesc(i), o;
      if (s && (!n || s.node))
        if (r && (o = s.nodeDOM) && !(o.nodeType == 1 ? o.contains(e.nodeType == 1 ? e : e.parentNode) : o == e))
          r = !1;
        else
          return s;
    }
  }
  getDesc(e) {
    let n = e.pmViewDesc;
    for (let r = n; r; r = r.parent)
      if (r == this)
        return n;
  }
  posFromDOM(e, n, r) {
    for (let i = e; i; i = i.parentNode) {
      let s = this.getDesc(i);
      if (s)
        return s.localPosFromDOM(e, n, r);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(e) {
    for (let n = 0, r = 0; n < this.children.length; n++) {
      let i = this.children[n], s = r + i.size;
      if (r == e && s != r) {
        for (; !i.border && i.children.length; )
          i = i.children[0];
        return i;
      }
      if (e < s)
        return i.descAt(e - r - i.border);
      r = s;
    }
  }
  domFromPos(e, n) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: e + 1 };
    let r = 0, i = 0;
    for (let s = 0; r < this.children.length; r++) {
      let o = this.children[r], a = s + o.size;
      if (a > e || o instanceof p0) {
        i = e - s;
        break;
      }
      s = a;
    }
    if (i)
      return this.children[r].domFromPos(i - this.children[r].border, n);
    for (let s; r && !(s = this.children[r - 1]).size && s instanceof h0 && s.side >= 0; r--)
      ;
    if (n <= 0) {
      let s, o = !0;
      for (; s = r ? this.children[r - 1] : null, !(!s || s.dom.parentNode == this.contentDOM); r--, o = !1)
        ;
      return s && n && o && !s.border && !s.domAtom ? s.domFromPos(s.size, n) : { node: this.contentDOM, offset: s ? Je(s.dom) + 1 : 0 };
    } else {
      let s, o = !0;
      for (; s = r < this.children.length ? this.children[r] : null, !(!s || s.dom.parentNode == this.contentDOM); r++, o = !1)
        ;
      return s && o && !s.border && !s.domAtom ? s.domFromPos(0, n) : { node: this.contentDOM, offset: s ? Je(s.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(e, n, r = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: e, to: n, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let i = -1, s = -1;
    for (let o = r, a = 0; ; a++) {
      let l = this.children[a], u = o + l.size;
      if (i == -1 && e <= u) {
        let c = o + l.border;
        if (e >= c && n <= u - l.border && l.node && l.contentDOM && this.contentDOM.contains(l.contentDOM))
          return l.parseRange(e, n, c);
        e = o;
        for (let d = a; d > 0; d--) {
          let f = this.children[d - 1];
          if (f.size && f.dom.parentNode == this.contentDOM && !f.emptyChildAt(1)) {
            i = Je(f.dom) + 1;
            break;
          }
          e -= f.size;
        }
        i == -1 && (i = 0);
      }
      if (i > -1 && (u > n || a == this.children.length - 1)) {
        n = u;
        for (let c = a + 1; c < this.children.length; c++) {
          let d = this.children[c];
          if (d.size && d.dom.parentNode == this.contentDOM && !d.emptyChildAt(-1)) {
            s = Je(d.dom);
            break;
          }
          n += d.size;
        }
        s == -1 && (s = this.contentDOM.childNodes.length);
        break;
      }
      o = u;
    }
    return { node: this.contentDOM, from: e, to: n, fromOffset: i, toOffset: s };
  }
  emptyChildAt(e) {
    if (this.border || !this.contentDOM || !this.children.length)
      return !1;
    let n = this.children[e < 0 ? 0 : this.children.length - 1];
    return n.size == 0 || n.emptyChildAt(e);
  }
  domAfterPos(e) {
    let { node: n, offset: r } = this.domFromPos(e, 0);
    if (n.nodeType != 1 || r == n.childNodes.length)
      throw new RangeError("No node after pos " + e);
    return n.childNodes[r];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(e, n, r, i = !1) {
    let s = Math.min(e, n), o = Math.max(e, n);
    for (let f = 0, h = 0; f < this.children.length; f++) {
      let p = this.children[f], g = h + p.size;
      if (s > h && o < g)
        return p.setSelection(e - h - p.border, n - h - p.border, r, i);
      h = g;
    }
    let a = this.domFromPos(e, e ? -1 : 1), l = n == e ? a : this.domFromPos(n, n ? -1 : 1), u = r.getSelection(), c = !1;
    if ((zt || ot) && e == n) {
      let { node: f, offset: h } = a;
      if (f.nodeType == 3) {
        if (c = !!(h && f.nodeValue[h - 1] == `
`), c && h == f.nodeValue.length)
          for (let p = f, g; p; p = p.parentNode) {
            if (g = p.nextSibling) {
              g.nodeName == "BR" && (a = l = { node: g.parentNode, offset: Je(g) + 1 });
              break;
            }
            let m = p.pmViewDesc;
            if (m && m.node && m.node.isBlock)
              break;
          }
      } else {
        let p = f.childNodes[h - 1];
        c = p && (p.nodeName == "BR" || p.contentEditable == "false");
      }
    }
    if (zt && u.focusNode && u.focusNode != l.node && u.focusNode.nodeType == 1) {
      let f = u.focusNode.childNodes[u.focusOffset];
      f && f.contentEditable == "false" && (i = !0);
    }
    if (!(i || c && ot) && mr(a.node, a.offset, u.anchorNode, u.anchorOffset) && mr(l.node, l.offset, u.focusNode, u.focusOffset))
      return;
    let d = !1;
    if ((u.extend || e == n) && !c) {
      u.collapse(a.node, a.offset);
      try {
        e != n && u.extend(l.node, l.offset), d = !0;
      } catch {
      }
    }
    if (!d) {
      if (e > n) {
        let h = a;
        a = l, l = h;
      }
      let f = document.createRange();
      f.setEnd(l.node, l.offset), f.setStart(a.node, a.offset), u.removeAllRanges(), u.addRange(f);
    }
  }
  ignoreMutation(e) {
    return !this.contentDOM && e.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(e, n) {
    for (let r = 0, i = 0; i < this.children.length; i++) {
      let s = this.children[i], o = r + s.size;
      if (r == o ? e <= o && n >= r : e < o && n > r) {
        let a = r + s.border, l = o - s.border;
        if (e >= a && n <= l) {
          this.dirty = e == r || n == o ? ir : wd, e == a && n == l && (s.contentLost || s.dom.parentNode != this.contentDOM) ? s.dirty = sn : s.markDirty(e - a, n - a);
          return;
        } else
          s.dirty = s.dom == s.contentDOM && s.dom.parentNode == this.contentDOM && !s.children.length ? ir : sn;
      }
      r = o;
    }
    this.dirty = ir;
  }
  markParentsDirty() {
    let e = 1;
    for (let n = this.parent; n; n = n.parent, e++) {
      let r = e == 1 ? ir : wd;
      n.dirty < r && (n.dirty = r);
    }
  }
  get domAtom() {
    return !1;
  }
  get ignoreForCoords() {
    return !1;
  }
  isText(e) {
    return !1;
  }
}
class h0 extends bs {
  constructor(e, n, r, i) {
    let s, o = n.type.toDOM;
    if (typeof o == "function" && (o = o(r, () => {
      if (!s)
        return i;
      if (s.parent)
        return s.parent.posBeforeChild(s);
    })), !n.type.spec.raw) {
      if (o.nodeType != 1) {
        let a = document.createElement("span");
        a.appendChild(o), o = a;
      }
      o.contentEditable = "false", o.classList.add("ProseMirror-widget");
    }
    super(e, [], o, null), this.widget = n, this.widget = n, s = this;
  }
  matchesWidget(e) {
    return this.dirty == Lt && e.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: !0 };
  }
  stopEvent(e) {
    let n = this.widget.spec.stopEvent;
    return n ? n(e) : !1;
  }
  ignoreMutation(e) {
    return e.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom), super.destroy();
  }
  get domAtom() {
    return !0;
  }
  get side() {
    return this.widget.type.side;
  }
}
class l2 extends bs {
  constructor(e, n, r, i) {
    super(e, [], n, null), this.textDOM = r, this.text = i;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(e, n) {
    return e != this.textDOM ? this.posAtStart + (n ? this.size : 0) : this.posAtStart + n;
  }
  domFromPos(e) {
    return { node: this.textDOM, offset: e };
  }
  ignoreMutation(e) {
    return e.type === "characterData" && e.target.nodeValue == e.oldValue;
  }
}
class br extends bs {
  constructor(e, n, r, i) {
    super(e, [], r, i), this.mark = n;
  }
  static create(e, n, r, i) {
    let s = i.nodeViews[n.type.name], o = s && s(n, i, r);
    return (!o || !o.dom) && (o = Yt.renderSpec(document, n.type.spec.toDOM(n, r))), new br(e, n, o.dom, o.contentDOM || o.dom);
  }
  parseRule() {
    return this.dirty & sn || this.mark.type.spec.reparseInView ? null : { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(e) {
    return this.dirty != sn && this.mark.eq(e);
  }
  markDirty(e, n) {
    if (super.markDirty(e, n), this.dirty != Lt) {
      let r = this.parent;
      for (; !r.node; )
        r = r.parent;
      r.dirty < this.dirty && (r.dirty = this.dirty), this.dirty = Lt;
    }
  }
  slice(e, n, r) {
    let i = br.create(this.parent, this.mark, !0, r), s = this.children, o = this.size;
    n < o && (s = ou(s, n, o, r)), e > 0 && (s = ou(s, 0, e, r));
    for (let a = 0; a < s.length; a++)
      s[a].parent = i;
    return i.children = s, i;
  }
}
class zn extends bs {
  constructor(e, n, r, i, s, o, a, l, u) {
    super(e, [], s, o), this.node = n, this.outerDeco = r, this.innerDeco = i, this.nodeDOM = a;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(e, n, r, i, s, o) {
    let a = s.nodeViews[n.type.name], l, u = a && a(n, s, () => {
      if (!l)
        return o;
      if (l.parent)
        return l.parent.posBeforeChild(l);
    }, r, i), c = u && u.dom, d = u && u.contentDOM;
    if (n.isText) {
      if (!c)
        c = document.createTextNode(n.text);
      else if (c.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else
      c || ({ dom: c, contentDOM: d } = Yt.renderSpec(document, n.type.spec.toDOM(n)));
    !d && !n.isText && c.nodeName != "BR" && (c.hasAttribute("contenteditable") || (c.contentEditable = "false"), n.type.spec.draggable && (c.draggable = !0));
    let f = c;
    return c = b0(c, r, n), u ? l = new u2(e, n, r, i, c, d || null, f, u, s, o + 1) : n.isText ? new pa(e, n, r, i, c, f, s) : new zn(e, n, r, i, c, d || null, f, s, o + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let e = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre" && (e.preserveWhitespace = "full"), !this.contentDOM)
      e.getContent = () => this.node.content;
    else if (!this.contentLost)
      e.contentElement = this.contentDOM;
    else {
      for (let n = this.children.length - 1; n >= 0; n--) {
        let r = this.children[n];
        if (this.dom.contains(r.dom.parentNode)) {
          e.contentElement = r.dom.parentNode;
          break;
        }
      }
      e.contentElement || (e.getContent = () => O.empty);
    }
    return e;
  }
  matchesNode(e, n, r) {
    return this.dirty == Lt && e.eq(this.node) && su(n, this.outerDeco) && r.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(e, n) {
    let r = this.node.inlineContent, i = n, s = e.composing ? this.localCompositionInfo(e, n) : null, o = s && s.pos > -1 ? s : null, a = s && s.pos < 0, l = new d2(this, o && o.node, e);
    p2(this.node, this.innerDeco, (u, c, d) => {
      u.spec.marks ? l.syncToMarks(u.spec.marks, r, e) : u.type.side >= 0 && !d && l.syncToMarks(c == this.node.childCount ? ye.none : this.node.child(c).marks, r, e), l.placeWidget(u, e, i);
    }, (u, c, d, f) => {
      l.syncToMarks(u.marks, r, e);
      let h;
      l.findNodeMatch(u, c, d, f) || a && e.state.selection.from > i && e.state.selection.to < i + u.nodeSize && (h = l.findIndexWithChild(s.node)) > -1 && l.updateNodeAt(u, c, d, h, e) || l.updateNextNode(u, c, d, e, f, i) || l.addNode(u, c, d, e, i), i += u.nodeSize;
    }), l.syncToMarks([], r, e), this.node.isTextblock && l.addTextblockHacks(), l.destroyRest(), (l.changed || this.dirty == ir) && (o && this.protectLocalComposition(e, o), g0(this.contentDOM, this.children, e), ni && g2(this.dom));
  }
  localCompositionInfo(e, n) {
    let { from: r, to: i } = e.state.selection;
    if (!(e.state.selection instanceof X) || r < n || i > n + this.node.content.size)
      return null;
    let s = e.input.compositionNode;
    if (!s || !this.dom.contains(s.parentNode))
      return null;
    if (this.node.inlineContent) {
      let o = s.nodeValue, a = m2(this.node.content, o, r - n, i - n);
      return a < 0 ? null : { node: s, pos: a, text: o };
    } else
      return { node: s, pos: -1, text: "" };
  }
  protectLocalComposition(e, { node: n, pos: r, text: i }) {
    if (this.getDesc(n))
      return;
    let s = n;
    for (; s.parentNode != this.contentDOM; s = s.parentNode) {
      for (; s.previousSibling; )
        s.parentNode.removeChild(s.previousSibling);
      for (; s.nextSibling; )
        s.parentNode.removeChild(s.nextSibling);
      s.pmViewDesc && (s.pmViewDesc = void 0);
    }
    let o = new l2(this, s, n, i);
    e.input.compositionNodes.push(o), this.children = ou(this.children, r, r + i.length, e, o);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(e, n, r, i) {
    return this.dirty == sn || !e.sameMarkup(this.node) ? !1 : (this.updateInner(e, n, r, i), !0);
  }
  updateInner(e, n, r, i) {
    this.updateOuterDeco(n), this.node = e, this.innerDeco = r, this.contentDOM && this.updateChildren(i, this.posAtStart), this.dirty = Lt;
  }
  updateOuterDeco(e) {
    if (su(e, this.outerDeco))
      return;
    let n = this.nodeDOM.nodeType != 1, r = this.dom;
    this.dom = m0(this.dom, this.nodeDOM, iu(this.outerDeco, this.node, n), iu(e, this.node, n)), this.dom != r && (r.pmViewDesc = void 0, this.dom.pmViewDesc = this), this.outerDeco = e;
  }
  // Mark this node as being the selected node.
  selectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.add("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && (this.dom.draggable = !0);
  }
  // Remove selected node marking from this node.
  deselectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.remove("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && this.dom.removeAttribute("draggable");
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function Sd(t, e, n, r, i) {
  b0(r, e, t);
  let s = new zn(void 0, t, e, n, r, r, r, i, 0);
  return s.contentDOM && s.updateChildren(i, 0), s;
}
class pa extends zn {
  constructor(e, n, r, i, s, o, a) {
    super(e, n, r, i, s, null, o, a, 0);
  }
  parseRule() {
    let e = this.nodeDOM.parentNode;
    for (; e && e != this.dom && !e.pmIsDeco; )
      e = e.parentNode;
    return { skip: e || !0 };
  }
  update(e, n, r, i) {
    return this.dirty == sn || this.dirty != Lt && !this.inParent() || !e.sameMarkup(this.node) ? !1 : (this.updateOuterDeco(n), (this.dirty != Lt || e.text != this.node.text) && e.text != this.nodeDOM.nodeValue && (this.nodeDOM.nodeValue = e.text, i.trackWrites == this.nodeDOM && (i.trackWrites = null)), this.node = e, this.dirty = Lt, !0);
  }
  inParent() {
    let e = this.parent.contentDOM;
    for (let n = this.nodeDOM; n; n = n.parentNode)
      if (n == e)
        return !0;
    return !1;
  }
  domFromPos(e) {
    return { node: this.nodeDOM, offset: e };
  }
  localPosFromDOM(e, n, r) {
    return e == this.nodeDOM ? this.posAtStart + Math.min(n, this.node.text.length) : super.localPosFromDOM(e, n, r);
  }
  ignoreMutation(e) {
    return e.type != "characterData" && e.type != "selection";
  }
  slice(e, n, r) {
    let i = this.node.cut(e, n), s = document.createTextNode(i.text);
    return new pa(this.parent, i, this.outerDeco, this.innerDeco, s, s, r);
  }
  markDirty(e, n) {
    super.markDirty(e, n), this.dom != this.nodeDOM && (e == 0 || n == this.nodeDOM.nodeValue.length) && (this.dirty = sn);
  }
  get domAtom() {
    return !1;
  }
  isText(e) {
    return this.node.text == e;
  }
}
class p0 extends bs {
  parseRule() {
    return { ignore: !0 };
  }
  matchesHack(e) {
    return this.dirty == Lt && this.dom.nodeName == e;
  }
  get domAtom() {
    return !0;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class u2 extends zn {
  constructor(e, n, r, i, s, o, a, l, u, c) {
    super(e, n, r, i, s, o, a, u, c), this.spec = l;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(e, n, r, i) {
    if (this.dirty == sn)
      return !1;
    if (this.spec.update) {
      let s = this.spec.update(e, n, r);
      return s && this.updateInner(e, n, r, i), s;
    } else
      return !this.contentDOM && !e.isLeaf ? !1 : super.update(e, n, r, i);
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(e, n, r, i) {
    this.spec.setSelection ? this.spec.setSelection(e, n, r) : super.setSelection(e, n, r, i);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
  stopEvent(e) {
    return this.spec.stopEvent ? this.spec.stopEvent(e) : !1;
  }
  ignoreMutation(e) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(e) : super.ignoreMutation(e);
  }
}
function g0(t, e, n) {
  let r = t.firstChild, i = !1;
  for (let s = 0; s < e.length; s++) {
    let o = e[s], a = o.dom;
    if (a.parentNode == t) {
      for (; a != r; )
        r = Ad(r), i = !0;
      r = r.nextSibling;
    } else
      i = !0, t.insertBefore(a, r);
    if (o instanceof br) {
      let l = r ? r.previousSibling : t.lastChild;
      g0(o.contentDOM, o.children, n), r = l ? l.nextSibling : t.firstChild;
    }
  }
  for (; r; )
    r = Ad(r), i = !0;
  i && n.trackWrites == t && (n.trackWrites = null);
}
const Ni = function(t) {
  t && (this.nodeName = t);
};
Ni.prototype = /* @__PURE__ */ Object.create(null);
const sr = [new Ni()];
function iu(t, e, n) {
  if (t.length == 0)
    return sr;
  let r = n ? sr[0] : new Ni(), i = [r];
  for (let s = 0; s < t.length; s++) {
    let o = t[s].type.attrs;
    if (o) {
      o.nodeName && i.push(r = new Ni(o.nodeName));
      for (let a in o) {
        let l = o[a];
        l != null && (n && i.length == 1 && i.push(r = new Ni(e.isInline ? "span" : "div")), a == "class" ? r.class = (r.class ? r.class + " " : "") + l : a == "style" ? r.style = (r.style ? r.style + ";" : "") + l : a != "nodeName" && (r[a] = l));
      }
    }
  }
  return i;
}
function m0(t, e, n, r) {
  if (n == sr && r == sr)
    return e;
  let i = e;
  for (let s = 0; s < r.length; s++) {
    let o = r[s], a = n[s];
    if (s) {
      let l;
      a && a.nodeName == o.nodeName && i != t && (l = i.parentNode) && l.nodeName.toLowerCase() == o.nodeName || (l = document.createElement(o.nodeName), l.pmIsDeco = !0, l.appendChild(i), a = sr[0]), i = l;
    }
    c2(i, a || sr[0], o);
  }
  return i;
}
function c2(t, e, n) {
  for (let r in e)
    r != "class" && r != "style" && r != "nodeName" && !(r in n) && t.removeAttribute(r);
  for (let r in n)
    r != "class" && r != "style" && r != "nodeName" && n[r] != e[r] && t.setAttribute(r, n[r]);
  if (e.class != n.class) {
    let r = e.class ? e.class.split(" ").filter(Boolean) : [], i = n.class ? n.class.split(" ").filter(Boolean) : [];
    for (let s = 0; s < r.length; s++)
      i.indexOf(r[s]) == -1 && t.classList.remove(r[s]);
    for (let s = 0; s < i.length; s++)
      r.indexOf(i[s]) == -1 && t.classList.add(i[s]);
    t.classList.length == 0 && t.removeAttribute("class");
  }
  if (e.style != n.style) {
    if (e.style) {
      let r = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, i;
      for (; i = r.exec(e.style); )
        t.style.removeProperty(i[1]);
    }
    n.style && (t.style.cssText += n.style);
  }
}
function b0(t, e, n) {
  return m0(t, t, sr, iu(e, n, t.nodeType != 1));
}
function su(t, e) {
  if (t.length != e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (!t[n].type.eq(e[n].type))
      return !1;
  return !0;
}
function Ad(t) {
  let e = t.nextSibling;
  return t.parentNode.removeChild(t), e;
}
class d2 {
  constructor(e, n, r) {
    this.lock = n, this.view = r, this.index = 0, this.stack = [], this.changed = !1, this.top = e, this.preMatch = f2(e.node.content, e);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(e, n) {
    if (e != n) {
      for (let r = e; r < n; r++)
        this.top.children[r].destroy();
      this.top.children.splice(e, n - e), this.changed = !0;
    }
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(e, n, r) {
    let i = 0, s = this.stack.length >> 1, o = Math.min(s, e.length);
    for (; i < o && (i == s - 1 ? this.top : this.stack[i + 1 << 1]).matchesMark(e[i]) && e[i].type.spec.spanning !== !1; )
      i++;
    for (; i < s; )
      this.destroyRest(), this.top.dirty = Lt, this.index = this.stack.pop(), this.top = this.stack.pop(), s--;
    for (; s < e.length; ) {
      this.stack.push(this.top, this.index + 1);
      let a = -1;
      for (let l = this.index; l < Math.min(this.index + 3, this.top.children.length); l++) {
        let u = this.top.children[l];
        if (u.matchesMark(e[s]) && !this.isLocked(u.dom)) {
          a = l;
          break;
        }
      }
      if (a > -1)
        a > this.index && (this.changed = !0, this.destroyBetween(this.index, a)), this.top = this.top.children[this.index];
      else {
        let l = br.create(this.top, e[s], n, r);
        this.top.children.splice(this.index, 0, l), this.top = l, this.changed = !0;
      }
      this.index = 0, s++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(e, n, r, i) {
    let s = -1, o;
    if (i >= this.preMatch.index && (o = this.preMatch.matches[i - this.preMatch.index]).parent == this.top && o.matchesNode(e, n, r))
      s = this.top.children.indexOf(o, this.index);
    else
      for (let a = this.index, l = Math.min(this.top.children.length, a + 5); a < l; a++) {
        let u = this.top.children[a];
        if (u.matchesNode(e, n, r) && !this.preMatch.matched.has(u)) {
          s = a;
          break;
        }
      }
    return s < 0 ? !1 : (this.destroyBetween(this.index, s), this.index++, !0);
  }
  updateNodeAt(e, n, r, i, s) {
    let o = this.top.children[i];
    return o.dirty == sn && o.dom == o.contentDOM && (o.dirty = ir), o.update(e, n, r, s) ? (this.destroyBetween(this.index, i), this.index++, !0) : !1;
  }
  findIndexWithChild(e) {
    for (; ; ) {
      let n = e.parentNode;
      if (!n)
        return -1;
      if (n == this.top.contentDOM) {
        let r = e.pmViewDesc;
        if (r) {
          for (let i = this.index; i < this.top.children.length; i++)
            if (this.top.children[i] == r)
              return i;
        }
        return -1;
      }
      e = n;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(e, n, r, i, s, o) {
    for (let a = this.index; a < this.top.children.length; a++) {
      let l = this.top.children[a];
      if (l instanceof zn) {
        let u = this.preMatch.matched.get(l);
        if (u != null && u != s)
          return !1;
        let c = l.dom, d, f = this.isLocked(c) && !(e.isText && l.node && l.node.isText && l.nodeDOM.nodeValue == e.text && l.dirty != sn && su(n, l.outerDeco));
        if (!f && l.update(e, n, r, i))
          return this.destroyBetween(this.index, a), l.dom != c && (this.changed = !0), this.index++, !0;
        if (!f && (d = this.recreateWrapper(l, e, n, r, i, o)))
          return this.top.children[this.index] = d, d.contentDOM && (d.dirty = ir, d.updateChildren(i, o + 1), d.dirty = Lt), this.changed = !0, this.index++, !0;
        break;
      }
    }
    return !1;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(e, n, r, i, s, o) {
    if (e.dirty || n.isAtom || !e.children.length || !e.node.content.eq(n.content))
      return null;
    let a = zn.create(this.top, n, r, i, s, o);
    if (a.contentDOM) {
      a.children = e.children, e.children = [];
      for (let l of a.children)
        l.parent = a;
    }
    return e.destroy(), a;
  }
  // Insert the node as a newly created node desc.
  addNode(e, n, r, i, s) {
    let o = zn.create(this.top, e, n, r, i, s);
    o.contentDOM && o.updateChildren(i, s + 1), this.top.children.splice(this.index++, 0, o), this.changed = !0;
  }
  placeWidget(e, n, r) {
    let i = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (i && i.matchesWidget(e) && (e == i.widget || !i.widget.type.toDOM.parentNode))
      this.index++;
    else {
      let s = new h0(this.top, e, n, r);
      this.top.children.splice(this.index++, 0, s), this.changed = !0;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let e = this.top.children[this.index - 1], n = this.top;
    for (; e instanceof br; )
      n = e, e = n.children[n.children.length - 1];
    (!e || // Empty textblock
    !(e instanceof pa) || /\n$/.test(e.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(e.node.text)) && ((ot || st) && e && e.dom.contentEditable == "false" && this.addHackNode("IMG", n), this.addHackNode("BR", this.top));
  }
  addHackNode(e, n) {
    if (n == this.top && this.index < n.children.length && n.children[this.index].matchesHack(e))
      this.index++;
    else {
      let r = document.createElement(e);
      e == "IMG" && (r.className = "ProseMirror-separator", r.alt = ""), e == "BR" && (r.className = "ProseMirror-trailingBreak");
      let i = new p0(this.top, [], r, null);
      n != this.top ? n.children.push(i) : n.children.splice(this.index++, 0, i), this.changed = !0;
    }
  }
  isLocked(e) {
    return this.lock && (e == this.lock || e.nodeType == 1 && e.contains(this.lock.parentNode));
  }
}
function f2(t, e) {
  let n = e, r = n.children.length, i = t.childCount, s = /* @__PURE__ */ new Map(), o = [];
  e:
    for (; i > 0; ) {
      let a;
      for (; ; )
        if (r) {
          let u = n.children[r - 1];
          if (u instanceof br)
            n = u, r = u.children.length;
          else {
            a = u, r--;
            break;
          }
        } else {
          if (n == e)
            break e;
          r = n.parent.children.indexOf(n), n = n.parent;
        }
      let l = a.node;
      if (l) {
        if (l != t.child(i - 1))
          break;
        --i, s.set(a, i), o.push(a);
      }
    }
  return { index: i, matched: s, matches: o.reverse() };
}
function h2(t, e) {
  return t.type.side - e.type.side;
}
function p2(t, e, n, r) {
  let i = e.locals(t), s = 0;
  if (i.length == 0) {
    for (let u = 0; u < t.childCount; u++) {
      let c = t.child(u);
      r(c, i, e.forChild(s, c), u), s += c.nodeSize;
    }
    return;
  }
  let o = 0, a = [], l = null;
  for (let u = 0; ; ) {
    let c, d;
    for (; o < i.length && i[o].to == s; ) {
      let m = i[o++];
      m.widget && (c ? (d || (d = [c])).push(m) : c = m);
    }
    if (c)
      if (d) {
        d.sort(h2);
        for (let m = 0; m < d.length; m++)
          n(d[m], u, !!l);
      } else
        n(c, u, !!l);
    let f, h;
    if (l)
      h = -1, f = l, l = null;
    else if (u < t.childCount)
      h = u, f = t.child(u++);
    else
      break;
    for (let m = 0; m < a.length; m++)
      a[m].to <= s && a.splice(m--, 1);
    for (; o < i.length && i[o].from <= s && i[o].to > s; )
      a.push(i[o++]);
    let p = s + f.nodeSize;
    if (f.isText) {
      let m = p;
      o < i.length && i[o].from < m && (m = i[o].from);
      for (let y = 0; y < a.length; y++)
        a[y].to < m && (m = a[y].to);
      m < p && (l = f.cut(m - s), f = f.cut(0, m - s), p = m, h = -1);
    } else
      for (; o < i.length && i[o].to < p; )
        o++;
    let g = f.isInline && !f.isLeaf ? a.filter((m) => !m.inline) : a.slice();
    r(f, g, e.forChild(s, f), h), s = p;
  }
}
function g2(t) {
  if (t.nodeName == "UL" || t.nodeName == "OL") {
    let e = t.style.cssText;
    t.style.cssText = e + "; list-style: square !important", window.getComputedStyle(t).listStyle, t.style.cssText = e;
  }
}
function m2(t, e, n, r) {
  for (let i = 0, s = 0; i < t.childCount && s <= r; ) {
    let o = t.child(i++), a = s;
    if (s += o.nodeSize, !o.isText)
      continue;
    let l = o.text;
    for (; i < t.childCount; ) {
      let u = t.child(i++);
      if (s += u.nodeSize, !u.isText)
        break;
      l += u.text;
    }
    if (s >= n) {
      if (s >= r && l.slice(r - e.length - a, r - a) == e)
        return r - e.length;
      let u = a < r ? l.lastIndexOf(e, r - a - 1) : -1;
      if (u >= 0 && u + e.length + a >= n)
        return a + u;
      if (n == r && l.length >= r + e.length - a && l.slice(r - a, r - a + e.length) == e)
        return r;
    }
  }
  return -1;
}
function ou(t, e, n, r, i) {
  let s = [];
  for (let o = 0, a = 0; o < t.length; o++) {
    let l = t[o], u = a, c = a += l.size;
    u >= n || c <= e ? s.push(l) : (u < e && s.push(l.slice(0, e - u, r)), i && (s.push(i), i = void 0), c > n && s.push(l.slice(n - u, l.size, r)));
  }
  return s;
}
function Zu(t, e = null) {
  let n = t.domSelectionRange(), r = t.state.doc;
  if (!n.focusNode)
    return null;
  let i = t.docView.nearestDesc(n.focusNode), s = i && i.size == 0, o = t.docView.posFromDOM(n.focusNode, n.focusOffset, 1);
  if (o < 0)
    return null;
  let a = r.resolve(o), l, u;
  if (ha(n)) {
    for (l = a; i && !i.node; )
      i = i.parent;
    let c = i.node;
    if (i && c.isAtom && ee.isSelectable(c) && i.parent && !(c.isInline && zb(n.focusNode, n.focusOffset, i.dom))) {
      let d = i.posBefore;
      u = new ee(o == d ? a : r.resolve(d));
    }
  } else {
    let c = t.docView.posFromDOM(n.anchorNode, n.anchorOffset, 1);
    if (c < 0)
      return null;
    l = r.resolve(c);
  }
  if (!u) {
    let c = e == "pointer" || t.state.selection.head < a.pos && !s ? 1 : -1;
    u = Ku(t, l, a, c);
  }
  return u;
}
function y0(t) {
  return t.editable ? t.hasFocus() : k0(t) && document.activeElement && document.activeElement.contains(t.dom);
}
function kn(t, e = !1) {
  let n = t.state.selection;
  if (x0(t, n), !!y0(t)) {
    if (!e && t.input.mouseDown && t.input.mouseDown.allowDefault && st) {
      let r = t.domSelectionRange(), i = t.domObserver.currentSelection;
      if (r.anchorNode && i.anchorNode && mr(r.anchorNode, r.anchorOffset, i.anchorNode, i.anchorOffset)) {
        t.input.mouseDown.delayedSelectionSync = !0, t.domObserver.setCurSelection();
        return;
      }
    }
    if (t.domObserver.disconnectSelection(), t.cursorWrapper)
      y2(t);
    else {
      let { anchor: r, head: i } = n, s, o;
      Md && !(n instanceof X) && (n.$from.parent.inlineContent || (s = Td(t, n.from)), !n.empty && !n.$from.parent.inlineContent && (o = Td(t, n.to))), t.docView.setSelection(r, i, t.root, e), Md && (s && Dd(s), o && Dd(o)), n.visible ? t.dom.classList.remove("ProseMirror-hideselection") : (t.dom.classList.add("ProseMirror-hideselection"), "onselectionchange" in document && b2(t));
    }
    t.domObserver.setCurSelection(), t.domObserver.connectSelection();
  }
}
const Md = ot || st && qb < 63;
function Td(t, e) {
  let { node: n, offset: r } = t.docView.domFromPos(e, 0), i = r < n.childNodes.length ? n.childNodes[r] : null, s = r ? n.childNodes[r - 1] : null;
  if (ot && i && i.contentEditable == "false")
    return sl(i);
  if ((!i || i.contentEditable == "false") && (!s || s.contentEditable == "false")) {
    if (i)
      return sl(i);
    if (s)
      return sl(s);
  }
}
function sl(t) {
  return t.contentEditable = "true", ot && t.draggable && (t.draggable = !1, t.wasDraggable = !0), t;
}
function Dd(t) {
  t.contentEditable = "false", t.wasDraggable && (t.draggable = !0, t.wasDraggable = null);
}
function b2(t) {
  let e = t.dom.ownerDocument;
  e.removeEventListener("selectionchange", t.input.hideSelectionGuard);
  let n = t.domSelectionRange(), r = n.anchorNode, i = n.anchorOffset;
  e.addEventListener("selectionchange", t.input.hideSelectionGuard = () => {
    (n.anchorNode != r || n.anchorOffset != i) && (e.removeEventListener("selectionchange", t.input.hideSelectionGuard), setTimeout(() => {
      (!y0(t) || t.state.selection.visible) && t.dom.classList.remove("ProseMirror-hideselection");
    }, 20));
  });
}
function y2(t) {
  let e = t.domSelection(), n = document.createRange(), r = t.cursorWrapper.dom, i = r.nodeName == "IMG";
  i ? n.setEnd(r.parentNode, Je(r) + 1) : n.setEnd(r, 0), n.collapse(!1), e.removeAllRanges(), e.addRange(n), !i && !t.state.selection.visible && ht && $n <= 11 && (r.disabled = !0, r.disabled = !1);
}
function x0(t, e) {
  if (e instanceof ee) {
    let n = t.docView.descAt(e.from);
    n != t.lastSelectedViewDesc && (Od(t), n && n.selectNode(), t.lastSelectedViewDesc = n);
  } else
    Od(t);
}
function Od(t) {
  t.lastSelectedViewDesc && (t.lastSelectedViewDesc.parent && t.lastSelectedViewDesc.deselectNode(), t.lastSelectedViewDesc = void 0);
}
function Ku(t, e, n, r) {
  return t.someProp("createSelectionBetween", (i) => i(t, e, n)) || X.between(e, n, r);
}
function Nd(t) {
  return t.editable && !t.hasFocus() ? !1 : k0(t);
}
function k0(t) {
  let e = t.domSelectionRange();
  if (!e.anchorNode)
    return !1;
  try {
    return t.dom.contains(e.anchorNode.nodeType == 3 ? e.anchorNode.parentNode : e.anchorNode) && (t.editable || t.dom.contains(e.focusNode.nodeType == 3 ? e.focusNode.parentNode : e.focusNode));
  } catch {
    return !1;
  }
}
function x2(t) {
  let e = t.docView.domFromPos(t.state.selection.anchor, 0), n = t.domSelectionRange();
  return mr(e.node, e.offset, n.anchorNode, n.anchorOffset);
}
function au(t, e) {
  let { $anchor: n, $head: r } = t.selection, i = e > 0 ? n.max(r) : n.min(r), s = i.parent.inlineContent ? i.depth ? t.doc.resolve(e > 0 ? i.after() : i.before()) : null : i;
  return s && ne.findFrom(s, e);
}
function wn(t, e) {
  return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()), !0;
}
function Ld(t, e, n) {
  let r = t.state.selection;
  if (r instanceof X)
    if (n.indexOf("s") > -1) {
      let { $head: i } = r, s = i.textOffset ? null : e < 0 ? i.nodeBefore : i.nodeAfter;
      if (!s || s.isText || !s.isLeaf)
        return !1;
      let o = t.state.doc.resolve(i.pos + s.nodeSize * (e < 0 ? -1 : 1));
      return wn(t, new X(r.$anchor, o));
    } else if (r.empty) {
      if (t.endOfTextblock(e > 0 ? "forward" : "backward")) {
        let i = au(t.state, e);
        return i && i instanceof ee ? wn(t, i) : !1;
      } else if (!(Dt && n.indexOf("m") > -1)) {
        let i = r.$head, s = i.textOffset ? null : e < 0 ? i.nodeBefore : i.nodeAfter, o;
        if (!s || s.isText)
          return !1;
        let a = e < 0 ? i.pos - s.nodeSize : i.pos;
        return s.isAtom || (o = t.docView.descAt(a)) && !o.contentDOM ? ee.isSelectable(s) ? wn(t, new ee(e < 0 ? t.state.doc.resolve(i.pos - s.nodeSize) : i)) : ms ? wn(t, new X(t.state.doc.resolve(e < 0 ? a : a + s.nodeSize))) : !1 : !1;
      }
    } else
      return !1;
  else {
    if (r instanceof ee && r.node.isInline)
      return wn(t, new X(e > 0 ? r.$to : r.$from));
    {
      let i = au(t.state, e);
      return i ? wn(t, i) : !1;
    }
  }
}
function ko(t) {
  return t.nodeType == 3 ? t.nodeValue.length : t.childNodes.length;
}
function Li(t, e) {
  let n = t.pmViewDesc;
  return n && n.size == 0 && (e < 0 || t.nextSibling || t.nodeName != "BR");
}
function Tr(t, e) {
  return e < 0 ? k2(t) : v2(t);
}
function k2(t) {
  let e = t.domSelectionRange(), n = e.focusNode, r = e.focusOffset;
  if (!n)
    return;
  let i, s, o = !1;
  for (zt && n.nodeType == 1 && r < ko(n) && Li(n.childNodes[r], -1) && (o = !0); ; )
    if (r > 0) {
      if (n.nodeType != 1)
        break;
      {
        let a = n.childNodes[r - 1];
        if (Li(a, -1))
          i = n, s = --r;
        else if (a.nodeType == 3)
          n = a, r = n.nodeValue.length;
        else
          break;
      }
    } else {
      if (v0(n))
        break;
      {
        let a = n.previousSibling;
        for (; a && Li(a, -1); )
          i = n.parentNode, s = Je(a), a = a.previousSibling;
        if (a)
          n = a, r = ko(n);
        else {
          if (n = n.parentNode, n == t.dom)
            break;
          r = 0;
        }
      }
    }
  o ? lu(t, n, r) : i && lu(t, i, s);
}
function v2(t) {
  let e = t.domSelectionRange(), n = e.focusNode, r = e.focusOffset;
  if (!n)
    return;
  let i = ko(n), s, o;
  for (; ; )
    if (r < i) {
      if (n.nodeType != 1)
        break;
      let a = n.childNodes[r];
      if (Li(a, 1))
        s = n, o = ++r;
      else
        break;
    } else {
      if (v0(n))
        break;
      {
        let a = n.nextSibling;
        for (; a && Li(a, 1); )
          s = a.parentNode, o = Je(a) + 1, a = a.nextSibling;
        if (a)
          n = a, r = 0, i = ko(n);
        else {
          if (n = n.parentNode, n == t.dom)
            break;
          r = i = 0;
        }
      }
    }
  s && lu(t, s, o);
}
function v0(t) {
  let e = t.pmViewDesc;
  return e && e.node && e.node.isBlock;
}
function E2(t, e) {
  for (; t && e == t.childNodes.length && !gs(t); )
    e = Je(t) + 1, t = t.parentNode;
  for (; t && e < t.childNodes.length; ) {
    let n = t.childNodes[e];
    if (n.nodeType == 3)
      return n;
    if (n.nodeType == 1 && n.contentEditable == "false")
      break;
    t = n, e = 0;
  }
}
function C2(t, e) {
  for (; t && !e && !gs(t); )
    e = Je(t), t = t.parentNode;
  for (; t && e; ) {
    let n = t.childNodes[e - 1];
    if (n.nodeType == 3)
      return n;
    if (n.nodeType == 1 && n.contentEditable == "false")
      break;
    t = n, e = t.childNodes.length;
  }
}
function lu(t, e, n) {
  if (e.nodeType != 3) {
    let s, o;
    (o = E2(e, n)) ? (e = o, n = 0) : (s = C2(e, n)) && (e = s, n = s.nodeValue.length);
  }
  let r = t.domSelection();
  if (ha(r)) {
    let s = document.createRange();
    s.setEnd(e, n), s.setStart(e, n), r.removeAllRanges(), r.addRange(s);
  } else
    r.extend && r.extend(e, n);
  t.domObserver.setCurSelection();
  let { state: i } = t;
  setTimeout(() => {
    t.state == i && kn(t);
  }, 50);
}
function Rd(t, e) {
  let n = t.state.doc.resolve(e);
  if (!(st || Zb) && n.parent.inlineContent) {
    let i = t.coordsAtPos(e);
    if (e > n.start()) {
      let s = t.coordsAtPos(e - 1), o = (s.top + s.bottom) / 2;
      if (o > i.top && o < i.bottom && Math.abs(s.left - i.left) > 1)
        return s.left < i.left ? "ltr" : "rtl";
    }
    if (e < n.end()) {
      let s = t.coordsAtPos(e + 1), o = (s.top + s.bottom) / 2;
      if (o > i.top && o < i.bottom && Math.abs(s.left - i.left) > 1)
        return s.left > i.left ? "ltr" : "rtl";
    }
  }
  return getComputedStyle(t.dom).direction == "rtl" ? "rtl" : "ltr";
}
function Id(t, e, n) {
  let r = t.state.selection;
  if (r instanceof X && !r.empty || n.indexOf("s") > -1 || Dt && n.indexOf("m") > -1)
    return !1;
  let { $from: i, $to: s } = r;
  if (!i.parent.inlineContent || t.endOfTextblock(e < 0 ? "up" : "down")) {
    let o = au(t.state, e);
    if (o && o instanceof ee)
      return wn(t, o);
  }
  if (!i.parent.inlineContent) {
    let o = e < 0 ? i : s, a = r instanceof Nt ? ne.near(o, e) : ne.findFrom(o, e);
    return a ? wn(t, a) : !1;
  }
  return !1;
}
function Fd(t, e) {
  if (!(t.state.selection instanceof X))
    return !0;
  let { $head: n, $anchor: r, empty: i } = t.state.selection;
  if (!n.sameParent(r))
    return !0;
  if (!i)
    return !1;
  if (t.endOfTextblock(e > 0 ? "forward" : "backward"))
    return !0;
  let s = !n.textOffset && (e < 0 ? n.nodeBefore : n.nodeAfter);
  if (s && !s.isText) {
    let o = t.state.tr;
    return e < 0 ? o.delete(n.pos - s.nodeSize, n.pos) : o.delete(n.pos, n.pos + s.nodeSize), t.dispatch(o), !0;
  }
  return !1;
}
function Hd(t, e, n) {
  t.domObserver.stop(), e.contentEditable = n, t.domObserver.start();
}
function _2(t) {
  if (!ot || t.state.selection.$head.parentOffset > 0)
    return !1;
  let { focusNode: e, focusOffset: n } = t.domSelectionRange();
  if (e && e.nodeType == 1 && n == 0 && e.firstChild && e.firstChild.contentEditable == "false") {
    let r = e.firstChild;
    Hd(t, r, "true"), setTimeout(() => Hd(t, r, "false"), 20);
  }
  return !1;
}
function w2(t) {
  let e = "";
  return t.ctrlKey && (e += "c"), t.metaKey && (e += "m"), t.altKey && (e += "a"), t.shiftKey && (e += "s"), e;
}
function S2(t, e) {
  let n = e.keyCode, r = w2(e);
  if (n == 8 || Dt && n == 72 && r == "c")
    return Fd(t, -1) || Tr(t, -1);
  if (n == 46 && !e.shiftKey || Dt && n == 68 && r == "c")
    return Fd(t, 1) || Tr(t, 1);
  if (n == 13 || n == 27)
    return !0;
  if (n == 37 || Dt && n == 66 && r == "c") {
    let i = n == 37 ? Rd(t, t.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return Ld(t, i, r) || Tr(t, i);
  } else if (n == 39 || Dt && n == 70 && r == "c") {
    let i = n == 39 ? Rd(t, t.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return Ld(t, i, r) || Tr(t, i);
  } else {
    if (n == 38 || Dt && n == 80 && r == "c")
      return Id(t, -1, r) || Tr(t, -1);
    if (n == 40 || Dt && n == 78 && r == "c")
      return _2(t) || Id(t, 1, r) || Tr(t, 1);
    if (r == (Dt ? "m" : "c") && (n == 66 || n == 73 || n == 89 || n == 90))
      return !0;
  }
  return !1;
}
function E0(t, e) {
  t.someProp("transformCopied", (h) => {
    e = h(e, t);
  });
  let n = [], { content: r, openStart: i, openEnd: s } = e;
  for (; i > 1 && s > 1 && r.childCount == 1 && r.firstChild.childCount == 1; ) {
    i--, s--;
    let h = r.firstChild;
    n.push(h.type.name, h.attrs != h.type.defaultAttrs ? h.attrs : null), r = h.content;
  }
  let o = t.someProp("clipboardSerializer") || Yt.fromSchema(t.state.schema), a = M0(), l = a.createElement("div");
  l.appendChild(o.serializeFragment(r, { document: a }));
  let u = l.firstChild, c, d = 0;
  for (; u && u.nodeType == 1 && (c = A0[u.nodeName.toLowerCase()]); ) {
    for (let h = c.length - 1; h >= 0; h--) {
      let p = a.createElement(c[h]);
      for (; l.firstChild; )
        p.appendChild(l.firstChild);
      l.appendChild(p), d++;
    }
    u = l.firstChild;
  }
  u && u.nodeType == 1 && u.setAttribute("data-pm-slice", `${i} ${s}${d ? ` -${d}` : ""} ${JSON.stringify(n)}`);
  let f = t.someProp("clipboardTextSerializer", (h) => h(e, t)) || e.content.textBetween(0, e.content.size, `

`);
  return { dom: l, text: f };
}
function C0(t, e, n, r, i) {
  let s = i.parent.type.spec.code, o, a;
  if (!n && !e)
    return null;
  let l = e && (r || s || !n);
  if (l) {
    if (t.someProp("transformPastedText", (f) => {
      e = f(e, s || r, t);
    }), s)
      return e ? new B(O.from(t.state.schema.text(e.replace(/\r\n?/g, `
`))), 0, 0) : B.empty;
    let d = t.someProp("clipboardTextParser", (f) => f(e, i, r, t));
    if (d)
      a = d;
    else {
      let f = i.marks(), { schema: h } = t.state, p = Yt.fromSchema(h);
      o = document.createElement("div"), e.split(/(?:\r\n?|\n)+/).forEach((g) => {
        let m = o.appendChild(document.createElement("p"));
        g && m.appendChild(p.serializeNode(h.text(g, f)));
      });
    }
  } else
    t.someProp("transformPastedHTML", (d) => {
      n = d(n, t);
    }), o = T2(n), ms && D2(o);
  let u = o && o.querySelector("[data-pm-slice]"), c = u && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(u.getAttribute("data-pm-slice") || "");
  if (c && c[3])
    for (let d = +c[3]; d > 0; d--) {
      let f = o.firstChild;
      for (; f && f.nodeType != 1; )
        f = f.nextSibling;
      if (!f)
        break;
      o = f;
    }
  if (a || (a = (t.someProp("clipboardParser") || t.someProp("domParser") || ps.fromSchema(t.state.schema)).parseSlice(o, {
    preserveWhitespace: !!(l || c),
    context: i,
    ruleFromNode(f) {
      return f.nodeName == "BR" && !f.nextSibling && f.parentNode && !A2.test(f.parentNode.nodeName) ? { ignore: !0 } : null;
    }
  })), c)
    a = O2(Bd(a, +c[1], +c[2]), c[4]);
  else if (a = B.maxOpen(M2(a.content, i), !0), a.openStart || a.openEnd) {
    let d = 0, f = 0;
    for (let h = a.content.firstChild; d < a.openStart && !h.type.spec.isolating; d++, h = h.firstChild)
      ;
    for (let h = a.content.lastChild; f < a.openEnd && !h.type.spec.isolating; f++, h = h.lastChild)
      ;
    a = Bd(a, d, f);
  }
  return t.someProp("transformPasted", (d) => {
    a = d(a, t);
  }), a;
}
const A2 = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function M2(t, e) {
  if (t.childCount < 2)
    return t;
  for (let n = e.depth; n >= 0; n--) {
    let i = e.node(n).contentMatchAt(e.index(n)), s, o = [];
    if (t.forEach((a) => {
      if (!o)
        return;
      let l = i.findWrapping(a.type), u;
      if (!l)
        return o = null;
      if (u = o.length && s.length && w0(l, s, a, o[o.length - 1], 0))
        o[o.length - 1] = u;
      else {
        o.length && (o[o.length - 1] = S0(o[o.length - 1], s.length));
        let c = _0(a, l);
        o.push(c), i = i.matchType(c.type), s = l;
      }
    }), o)
      return O.from(o);
  }
  return t;
}
function _0(t, e, n = 0) {
  for (let r = e.length - 1; r >= n; r--)
    t = e[r].create(null, O.from(t));
  return t;
}
function w0(t, e, n, r, i) {
  if (i < t.length && i < e.length && t[i] == e[i]) {
    let s = w0(t, e, n, r.lastChild, i + 1);
    if (s)
      return r.copy(r.content.replaceChild(r.childCount - 1, s));
    if (r.contentMatchAt(r.childCount).matchType(i == t.length - 1 ? n.type : t[i + 1]))
      return r.copy(r.content.append(O.from(_0(n, t, i + 1))));
  }
}
function S0(t, e) {
  if (e == 0)
    return t;
  let n = t.content.replaceChild(t.childCount - 1, S0(t.lastChild, e - 1)), r = t.contentMatchAt(t.childCount).fillBefore(O.empty, !0);
  return t.copy(n.append(r));
}
function uu(t, e, n, r, i, s) {
  let o = e < 0 ? t.firstChild : t.lastChild, a = o.content;
  return t.childCount > 1 && (s = 0), i < r - 1 && (a = uu(a, e, n, r, i + 1, s)), i >= n && (a = e < 0 ? o.contentMatchAt(0).fillBefore(a, s <= i).append(a) : a.append(o.contentMatchAt(o.childCount).fillBefore(O.empty, !0))), t.replaceChild(e < 0 ? 0 : t.childCount - 1, o.copy(a));
}
function Bd(t, e, n) {
  return e < t.openStart && (t = new B(uu(t.content, -1, e, t.openStart, 0, t.openEnd), e, t.openEnd)), n < t.openEnd && (t = new B(uu(t.content, 1, n, t.openEnd, 0, 0), t.openStart, n)), t;
}
const A0 = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let Pd = null;
function M0() {
  return Pd || (Pd = document.implementation.createHTMLDocument("title"));
}
function T2(t) {
  let e = /^(\s*<meta [^>]*>)*/.exec(t);
  e && (t = t.slice(e[0].length));
  let n = M0().createElement("div"), r = /<([a-z][^>\s]+)/i.exec(t), i;
  if ((i = r && A0[r[1].toLowerCase()]) && (t = i.map((s) => "<" + s + ">").join("") + t + i.map((s) => "</" + s + ">").reverse().join("")), n.innerHTML = t, i)
    for (let s = 0; s < i.length; s++)
      n = n.querySelector(i[s]) || n;
  return n;
}
function D2(t) {
  let e = t.querySelectorAll(st ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let n = 0; n < e.length; n++) {
    let r = e[n];
    r.childNodes.length == 1 && r.textContent == " " && r.parentNode && r.parentNode.replaceChild(t.ownerDocument.createTextNode(" "), r);
  }
}
function O2(t, e) {
  if (!t.size)
    return t;
  let n = t.content.firstChild.type.schema, r;
  try {
    r = JSON.parse(e);
  } catch {
    return t;
  }
  let { content: i, openStart: s, openEnd: o } = t;
  for (let a = r.length - 2; a >= 0; a -= 2) {
    let l = n.nodes[r[a]];
    if (!l || l.hasRequiredAttrs())
      break;
    i = O.from(l.create(r[a + 1], i)), s++, o++;
  }
  return new B(i, s, o);
}
const at = {}, lt = {}, N2 = { touchstart: !0, touchmove: !0 };
class L2 {
  constructor() {
    this.shiftKey = !1, this.mouseDown = null, this.lastKeyCode = null, this.lastKeyCodeTime = 0, this.lastClick = { time: 0, x: 0, y: 0, type: "" }, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastIOSEnter = 0, this.lastIOSEnterFallbackTimeout = -1, this.lastFocus = 0, this.lastTouch = 0, this.lastAndroidDelete = 0, this.composing = !1, this.compositionNode = null, this.composingTimeout = -1, this.compositionNodes = [], this.compositionEndedAt = -2e8, this.compositionID = 1, this.compositionPendingChanges = 0, this.domChangeCount = 0, this.eventHandlers = /* @__PURE__ */ Object.create(null), this.hideSelectionGuard = null;
  }
}
function R2(t) {
  for (let e in at) {
    let n = at[e];
    t.dom.addEventListener(e, t.input.eventHandlers[e] = (r) => {
      F2(t, r) && !Wu(t, r) && (t.editable || !(r.type in lt)) && n(t, r);
    }, N2[e] ? { passive: !0 } : void 0);
  }
  ot && t.dom.addEventListener("input", () => null), cu(t);
}
function In(t, e) {
  t.input.lastSelectionOrigin = e, t.input.lastSelectionTime = Date.now();
}
function I2(t) {
  t.domObserver.stop();
  for (let e in t.input.eventHandlers)
    t.dom.removeEventListener(e, t.input.eventHandlers[e]);
  clearTimeout(t.input.composingTimeout), clearTimeout(t.input.lastIOSEnterFallbackTimeout);
}
function cu(t) {
  t.someProp("handleDOMEvents", (e) => {
    for (let n in e)
      t.input.eventHandlers[n] || t.dom.addEventListener(n, t.input.eventHandlers[n] = (r) => Wu(t, r));
  });
}
function Wu(t, e) {
  return t.someProp("handleDOMEvents", (n) => {
    let r = n[e.type];
    return r ? r(t, e) || e.defaultPrevented : !1;
  });
}
function F2(t, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let n = e.target; n != t.dom; n = n.parentNode)
    if (!n || n.nodeType == 11 || n.pmViewDesc && n.pmViewDesc.stopEvent(e))
      return !1;
  return !0;
}
function H2(t, e) {
  !Wu(t, e) && at[e.type] && (t.editable || !(e.type in lt)) && at[e.type](t, e);
}
lt.keydown = (t, e) => {
  let n = e;
  if (t.input.shiftKey = n.keyCode == 16 || n.shiftKey, !D0(t, n) && (t.input.lastKeyCode = n.keyCode, t.input.lastKeyCodeTime = Date.now(), !(Pt && st && n.keyCode == 13)))
    if (n.keyCode != 229 && t.domObserver.forceFlush(), ni && n.keyCode == 13 && !n.ctrlKey && !n.altKey && !n.metaKey) {
      let r = Date.now();
      t.input.lastIOSEnter = r, t.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        t.input.lastIOSEnter == r && (t.someProp("handleKeyDown", (i) => i(t, er(13, "Enter"))), t.input.lastIOSEnter = 0);
      }, 200);
    } else
      t.someProp("handleKeyDown", (r) => r(t, n)) || S2(t, n) ? n.preventDefault() : In(t, "key");
};
lt.keyup = (t, e) => {
  e.keyCode == 16 && (t.input.shiftKey = !1);
};
lt.keypress = (t, e) => {
  let n = e;
  if (D0(t, n) || !n.charCode || n.ctrlKey && !n.altKey || Dt && n.metaKey)
    return;
  if (t.someProp("handleKeyPress", (i) => i(t, n))) {
    n.preventDefault();
    return;
  }
  let r = t.state.selection;
  if (!(r instanceof X) || !r.$from.sameParent(r.$to)) {
    let i = String.fromCharCode(n.charCode);
    !/[\r\n]/.test(i) && !t.someProp("handleTextInput", (s) => s(t, r.$from.pos, r.$to.pos, i)) && t.dispatch(t.state.tr.insertText(i).scrollIntoView()), n.preventDefault();
  }
};
function ga(t) {
  return { left: t.clientX, top: t.clientY };
}
function B2(t, e) {
  let n = e.x - t.clientX, r = e.y - t.clientY;
  return n * n + r * r < 100;
}
function ju(t, e, n, r, i) {
  if (r == -1)
    return !1;
  let s = t.state.doc.resolve(r);
  for (let o = s.depth + 1; o > 0; o--)
    if (t.someProp(e, (a) => o > s.depth ? a(t, n, s.nodeAfter, s.before(o), i, !0) : a(t, n, s.node(o), s.before(o), i, !1)))
      return !0;
  return !1;
}
function Xr(t, e, n) {
  t.focused || t.focus();
  let r = t.state.tr.setSelection(e);
  n == "pointer" && r.setMeta("pointer", !0), t.dispatch(r);
}
function P2(t, e) {
  if (e == -1)
    return !1;
  let n = t.state.doc.resolve(e), r = n.nodeAfter;
  return r && r.isAtom && ee.isSelectable(r) ? (Xr(t, new ee(n), "pointer"), !0) : !1;
}
function $2(t, e) {
  if (e == -1)
    return !1;
  let n = t.state.selection, r, i;
  n instanceof ee && (r = n.node);
  let s = t.state.doc.resolve(e);
  for (let o = s.depth + 1; o > 0; o--) {
    let a = o > s.depth ? s.nodeAfter : s.node(o);
    if (ee.isSelectable(a)) {
      r && n.$from.depth > 0 && o >= n.$from.depth && s.before(n.$from.depth + 1) == n.$from.pos ? i = s.before(n.$from.depth) : i = s.before(o);
      break;
    }
  }
  return i != null ? (Xr(t, ee.create(t.state.doc, i), "pointer"), !0) : !1;
}
function z2(t, e, n, r, i) {
  return ju(t, "handleClickOn", e, n, r) || t.someProp("handleClick", (s) => s(t, e, r)) || (i ? $2(t, n) : P2(t, n));
}
function V2(t, e, n, r) {
  return ju(t, "handleDoubleClickOn", e, n, r) || t.someProp("handleDoubleClick", (i) => i(t, e, r));
}
function U2(t, e, n, r) {
  return ju(t, "handleTripleClickOn", e, n, r) || t.someProp("handleTripleClick", (i) => i(t, e, r)) || q2(t, n, r);
}
function q2(t, e, n) {
  if (n.button != 0)
    return !1;
  let r = t.state.doc;
  if (e == -1)
    return r.inlineContent ? (Xr(t, X.create(r, 0, r.content.size), "pointer"), !0) : !1;
  let i = r.resolve(e);
  for (let s = i.depth + 1; s > 0; s--) {
    let o = s > i.depth ? i.nodeAfter : i.node(s), a = i.before(s);
    if (o.inlineContent)
      Xr(t, X.create(r, a + 1, a + 1 + o.content.size), "pointer");
    else if (ee.isSelectable(o))
      Xr(t, ee.create(r, a), "pointer");
    else
      continue;
    return !0;
  }
}
function Gu(t) {
  return vo(t);
}
const T0 = Dt ? "metaKey" : "ctrlKey";
at.mousedown = (t, e) => {
  let n = e;
  t.input.shiftKey = n.shiftKey;
  let r = Gu(t), i = Date.now(), s = "singleClick";
  i - t.input.lastClick.time < 500 && B2(n, t.input.lastClick) && !n[T0] && (t.input.lastClick.type == "singleClick" ? s = "doubleClick" : t.input.lastClick.type == "doubleClick" && (s = "tripleClick")), t.input.lastClick = { time: i, x: n.clientX, y: n.clientY, type: s };
  let o = t.posAtCoords(ga(n));
  o && (s == "singleClick" ? (t.input.mouseDown && t.input.mouseDown.done(), t.input.mouseDown = new Z2(t, o, n, !!r)) : (s == "doubleClick" ? V2 : U2)(t, o.pos, o.inside, n) ? n.preventDefault() : In(t, "pointer"));
};
class Z2 {
  constructor(e, n, r, i) {
    this.view = e, this.pos = n, this.event = r, this.flushed = i, this.delayedSelectionSync = !1, this.mightDrag = null, this.startDoc = e.state.doc, this.selectNode = !!r[T0], this.allowDefault = r.shiftKey;
    let s, o;
    if (n.inside > -1)
      s = e.state.doc.nodeAt(n.inside), o = n.inside;
    else {
      let c = e.state.doc.resolve(n.pos);
      s = c.parent, o = c.depth ? c.before() : 0;
    }
    const a = i ? null : r.target, l = a ? e.docView.nearestDesc(a, !0) : null;
    this.target = l ? l.dom : null;
    let { selection: u } = e.state;
    (r.button == 0 && s.type.spec.draggable && s.type.spec.selectable !== !1 || u instanceof ee && u.from <= o && u.to > o) && (this.mightDrag = {
      node: s,
      pos: o,
      addAttr: !!(this.target && !this.target.draggable),
      setUneditable: !!(this.target && zt && !this.target.hasAttribute("contentEditable"))
    }), this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable) && (this.view.domObserver.stop(), this.mightDrag.addAttr && (this.target.draggable = !0), this.mightDrag.setUneditable && setTimeout(() => {
      this.view.input.mouseDown == this && this.target.setAttribute("contentEditable", "false");
    }, 20), this.view.domObserver.start()), e.root.addEventListener("mouseup", this.up = this.up.bind(this)), e.root.addEventListener("mousemove", this.move = this.move.bind(this)), In(e, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up), this.view.root.removeEventListener("mousemove", this.move), this.mightDrag && this.target && (this.view.domObserver.stop(), this.mightDrag.addAttr && this.target.removeAttribute("draggable"), this.mightDrag.setUneditable && this.target.removeAttribute("contentEditable"), this.view.domObserver.start()), this.delayedSelectionSync && setTimeout(() => kn(this.view)), this.view.input.mouseDown = null;
  }
  up(e) {
    if (this.done(), !this.view.dom.contains(e.target))
      return;
    let n = this.pos;
    this.view.state.doc != this.startDoc && (n = this.view.posAtCoords(ga(e))), this.updateAllowDefault(e), this.allowDefault || !n ? In(this.view, "pointer") : z2(this.view, n.pos, n.inside, e, this.selectNode) ? e.preventDefault() : e.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    ot && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    st && !this.view.state.selection.visible && Math.min(Math.abs(n.pos - this.view.state.selection.from), Math.abs(n.pos - this.view.state.selection.to)) <= 2) ? (Xr(this.view, ne.near(this.view.state.doc.resolve(n.pos)), "pointer"), e.preventDefault()) : In(this.view, "pointer");
  }
  move(e) {
    this.updateAllowDefault(e), In(this.view, "pointer"), e.buttons == 0 && this.done();
  }
  updateAllowDefault(e) {
    !this.allowDefault && (Math.abs(this.event.x - e.clientX) > 4 || Math.abs(this.event.y - e.clientY) > 4) && (this.allowDefault = !0);
  }
}
at.touchstart = (t) => {
  t.input.lastTouch = Date.now(), Gu(t), In(t, "pointer");
};
at.touchmove = (t) => {
  t.input.lastTouch = Date.now(), In(t, "pointer");
};
at.contextmenu = (t) => Gu(t);
function D0(t, e) {
  return t.composing ? !0 : ot && Math.abs(e.timeStamp - t.input.compositionEndedAt) < 500 ? (t.input.compositionEndedAt = -2e8, !0) : !1;
}
const K2 = Pt ? 5e3 : -1;
lt.compositionstart = lt.compositionupdate = (t) => {
  if (!t.composing) {
    t.domObserver.flush();
    let { state: e } = t, n = e.selection.$from;
    if (e.selection.empty && (e.storedMarks || !n.textOffset && n.parentOffset && n.nodeBefore.marks.some((r) => r.type.spec.inclusive === !1)))
      t.markCursor = t.state.storedMarks || n.marks(), vo(t, !0), t.markCursor = null;
    else if (vo(t), zt && e.selection.empty && n.parentOffset && !n.textOffset && n.nodeBefore.marks.length) {
      let r = t.domSelectionRange();
      for (let i = r.focusNode, s = r.focusOffset; i && i.nodeType == 1 && s != 0; ) {
        let o = s < 0 ? i.lastChild : i.childNodes[s - 1];
        if (!o)
          break;
        if (o.nodeType == 3) {
          t.domSelection().collapse(o, o.nodeValue.length);
          break;
        } else
          i = o, s = -1;
      }
    }
    t.input.composing = !0;
  }
  O0(t, K2);
};
lt.compositionend = (t, e) => {
  t.composing && (t.input.composing = !1, t.input.compositionEndedAt = e.timeStamp, t.input.compositionPendingChanges = t.domObserver.pendingRecords().length ? t.input.compositionID : 0, t.input.compositionNode = null, t.input.compositionPendingChanges && Promise.resolve().then(() => t.domObserver.flush()), t.input.compositionID++, O0(t, 20));
};
function O0(t, e) {
  clearTimeout(t.input.composingTimeout), e > -1 && (t.input.composingTimeout = setTimeout(() => vo(t), e));
}
function N0(t) {
  for (t.composing && (t.input.composing = !1, t.input.compositionEndedAt = j2()); t.input.compositionNodes.length > 0; )
    t.input.compositionNodes.pop().markParentsDirty();
}
function W2(t) {
  let e = t.domSelectionRange();
  if (!e.focusNode)
    return null;
  let n = Pb(e.focusNode, e.focusOffset), r = $b(e.focusNode, e.focusOffset);
  if (n && r && n != r) {
    let i = r.pmViewDesc;
    if (!i || !i.isText(r.nodeValue))
      return r;
    if (t.input.compositionNode == r) {
      let s = n.pmViewDesc;
      if (!(!s || !s.isText(n.nodeValue)))
        return r;
    }
  }
  return n;
}
function j2() {
  let t = document.createEvent("Event");
  return t.initEvent("event", !0, !0), t.timeStamp;
}
function vo(t, e = !1) {
  if (!(Pt && t.domObserver.flushingSoon >= 0)) {
    if (t.domObserver.forceFlush(), N0(t), e || t.docView && t.docView.dirty) {
      let n = Zu(t);
      return n && !n.eq(t.state.selection) ? t.dispatch(t.state.tr.setSelection(n)) : t.updateState(t.state), !0;
    }
    return !1;
  }
}
function G2(t, e) {
  if (!t.dom.parentNode)
    return;
  let n = t.dom.parentNode.appendChild(document.createElement("div"));
  n.appendChild(e), n.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let r = getSelection(), i = document.createRange();
  i.selectNodeContents(e), t.dom.blur(), r.removeAllRanges(), r.addRange(i), setTimeout(() => {
    n.parentNode && n.parentNode.removeChild(n), t.focus();
  }, 50);
}
const qi = ht && $n < 15 || ni && Kb < 604;
at.copy = lt.cut = (t, e) => {
  let n = e, r = t.state.selection, i = n.type == "cut";
  if (r.empty)
    return;
  let s = qi ? null : n.clipboardData, o = r.content(), { dom: a, text: l } = E0(t, o);
  s ? (n.preventDefault(), s.clearData(), s.setData("text/html", a.innerHTML), s.setData("text/plain", l)) : G2(t, a), i && t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function J2(t) {
  return t.openStart == 0 && t.openEnd == 0 && t.content.childCount == 1 ? t.content.firstChild : null;
}
function Y2(t, e) {
  if (!t.dom.parentNode)
    return;
  let n = t.input.shiftKey || t.state.selection.$from.parent.type.spec.code, r = t.dom.parentNode.appendChild(document.createElement(n ? "textarea" : "div"));
  n || (r.contentEditable = "true"), r.style.cssText = "position: fixed; left: -10000px; top: 10px", r.focus();
  let i = t.input.shiftKey && t.input.lastKeyCode != 45;
  setTimeout(() => {
    t.focus(), r.parentNode && r.parentNode.removeChild(r), n ? Zi(t, r.value, null, i, e) : Zi(t, r.textContent, r.innerHTML, i, e);
  }, 50);
}
function Zi(t, e, n, r, i) {
  let s = C0(t, e, n, r, t.state.selection.$from);
  if (t.someProp("handlePaste", (l) => l(t, i, s || B.empty)))
    return !0;
  if (!s)
    return !1;
  let o = J2(s), a = o ? t.state.tr.replaceSelectionWith(o, r) : t.state.tr.replaceSelection(s);
  return t.dispatch(a.scrollIntoView().setMeta("paste", !0).setMeta("uiEvent", "paste")), !0;
}
function L0(t) {
  let e = t.getData("text/plain") || t.getData("Text");
  if (e)
    return e;
  let n = t.getData("text/uri-list");
  return n ? n.replace(/\r?\n/g, " ") : "";
}
lt.paste = (t, e) => {
  let n = e;
  if (t.composing && !Pt)
    return;
  let r = qi ? null : n.clipboardData, i = t.input.shiftKey && t.input.lastKeyCode != 45;
  r && Zi(t, L0(r), r.getData("text/html"), i, n) ? n.preventDefault() : Y2(t, n);
};
class R0 {
  constructor(e, n, r) {
    this.slice = e, this.move = n, this.node = r;
  }
}
const I0 = Dt ? "altKey" : "ctrlKey";
at.dragstart = (t, e) => {
  let n = e, r = t.input.mouseDown;
  if (r && r.done(), !n.dataTransfer)
    return;
  let i = t.state.selection, s = i.empty ? null : t.posAtCoords(ga(n)), o;
  if (!(s && s.pos >= i.from && s.pos <= (i instanceof ee ? i.to - 1 : i.to))) {
    if (r && r.mightDrag)
      o = ee.create(t.state.doc, r.mightDrag.pos);
    else if (n.target && n.target.nodeType == 1) {
      let c = t.docView.nearestDesc(n.target, !0);
      c && c.node.type.spec.draggable && c != t.docView && (o = ee.create(t.state.doc, c.posBefore));
    }
  }
  let a = (o || t.state.selection).content(), { dom: l, text: u } = E0(t, a);
  n.dataTransfer.clearData(), n.dataTransfer.setData(qi ? "Text" : "text/html", l.innerHTML), n.dataTransfer.effectAllowed = "copyMove", qi || n.dataTransfer.setData("text/plain", u), t.dragging = new R0(a, !n[I0], o);
};
at.dragend = (t) => {
  let e = t.dragging;
  window.setTimeout(() => {
    t.dragging == e && (t.dragging = null);
  }, 50);
};
lt.dragover = lt.dragenter = (t, e) => e.preventDefault();
lt.drop = (t, e) => {
  let n = e, r = t.dragging;
  if (t.dragging = null, !n.dataTransfer)
    return;
  let i = t.posAtCoords(ga(n));
  if (!i)
    return;
  let s = t.state.doc.resolve(i.pos), o = r && r.slice;
  o ? t.someProp("transformPasted", (p) => {
    o = p(o, t);
  }) : o = C0(t, L0(n.dataTransfer), qi ? null : n.dataTransfer.getData("text/html"), !1, s);
  let a = !!(r && !n[I0]);
  if (t.someProp("handleDrop", (p) => p(t, n, o || B.empty, a))) {
    n.preventDefault();
    return;
  }
  if (!o)
    return;
  n.preventDefault();
  let l = o ? Xp(t.state.doc, s.pos, o) : s.pos;
  l == null && (l = s.pos);
  let u = t.state.tr;
  if (a) {
    let { node: p } = r;
    p ? p.replace(u) : u.deleteSelection();
  }
  let c = u.mapping.map(l), d = o.openStart == 0 && o.openEnd == 0 && o.content.childCount == 1, f = u.doc;
  if (d ? u.replaceRangeWith(c, c, o.content.firstChild) : u.replaceRange(c, c, o), u.doc.eq(f))
    return;
  let h = u.doc.resolve(c);
  if (d && ee.isSelectable(o.content.firstChild) && h.nodeAfter && h.nodeAfter.sameMarkup(o.content.firstChild))
    u.setSelection(new ee(h));
  else {
    let p = u.mapping.map(l);
    u.mapping.maps[u.mapping.maps.length - 1].forEach((g, m, y, x) => p = x), u.setSelection(Ku(t, h, u.doc.resolve(p)));
  }
  t.focus(), t.dispatch(u.setMeta("uiEvent", "drop"));
};
at.focus = (t) => {
  t.input.lastFocus = Date.now(), t.focused || (t.domObserver.stop(), t.dom.classList.add("ProseMirror-focused"), t.domObserver.start(), t.focused = !0, setTimeout(() => {
    t.docView && t.hasFocus() && !t.domObserver.currentSelection.eq(t.domSelectionRange()) && kn(t);
  }, 20));
};
at.blur = (t, e) => {
  let n = e;
  t.focused && (t.domObserver.stop(), t.dom.classList.remove("ProseMirror-focused"), t.domObserver.start(), n.relatedTarget && t.dom.contains(n.relatedTarget) && t.domObserver.currentSelection.clear(), t.focused = !1);
};
at.beforeinput = (t, e) => {
  if (st && Pt && e.inputType == "deleteContentBackward") {
    t.domObserver.flushSoon();
    let { domChangeCount: r } = t.input;
    setTimeout(() => {
      if (t.input.domChangeCount != r || (t.dom.blur(), t.focus(), t.someProp("handleKeyDown", (s) => s(t, er(8, "Backspace")))))
        return;
      let { $cursor: i } = t.state.selection;
      i && i.pos > 0 && t.dispatch(t.state.tr.delete(i.pos - 1, i.pos).scrollIntoView());
    }, 50);
  }
};
for (let t in lt)
  at[t] = lt[t];
function Ki(t, e) {
  if (t == e)
    return !0;
  for (let n in t)
    if (t[n] !== e[n])
      return !1;
  for (let n in e)
    if (!(n in t))
      return !1;
  return !0;
}
class Eo {
  constructor(e, n) {
    this.toDOM = e, this.spec = n || cr, this.side = this.spec.side || 0;
  }
  map(e, n, r, i) {
    let { pos: s, deleted: o } = e.mapResult(n.from + i, this.side < 0 ? -1 : 1);
    return o ? null : new Be(s - r, s - r, this);
  }
  valid() {
    return !0;
  }
  eq(e) {
    return this == e || e instanceof Eo && (this.spec.key && this.spec.key == e.spec.key || this.toDOM == e.toDOM && Ki(this.spec, e.spec));
  }
  destroy(e) {
    this.spec.destroy && this.spec.destroy(e);
  }
}
class Vn {
  constructor(e, n) {
    this.attrs = e, this.spec = n || cr;
  }
  map(e, n, r, i) {
    let s = e.map(n.from + i, this.spec.inclusiveStart ? -1 : 1) - r, o = e.map(n.to + i, this.spec.inclusiveEnd ? 1 : -1) - r;
    return s >= o ? null : new Be(s, o, this);
  }
  valid(e, n) {
    return n.from < n.to;
  }
  eq(e) {
    return this == e || e instanceof Vn && Ki(this.attrs, e.attrs) && Ki(this.spec, e.spec);
  }
  static is(e) {
    return e.type instanceof Vn;
  }
  destroy() {
  }
}
class Ju {
  constructor(e, n) {
    this.attrs = e, this.spec = n || cr;
  }
  map(e, n, r, i) {
    let s = e.mapResult(n.from + i, 1);
    if (s.deleted)
      return null;
    let o = e.mapResult(n.to + i, -1);
    return o.deleted || o.pos <= s.pos ? null : new Be(s.pos - r, o.pos - r, this);
  }
  valid(e, n) {
    let { index: r, offset: i } = e.content.findIndex(n.from), s;
    return i == n.from && !(s = e.child(r)).isText && i + s.nodeSize == n.to;
  }
  eq(e) {
    return this == e || e instanceof Ju && Ki(this.attrs, e.attrs) && Ki(this.spec, e.spec);
  }
  destroy() {
  }
}
class Be {
  /**
  @internal
  */
  constructor(e, n, r) {
    this.from = e, this.to = n, this.type = r;
  }
  /**
  @internal
  */
  copy(e, n) {
    return new Be(e, n, this.type);
  }
  /**
  @internal
  */
  eq(e, n = 0) {
    return this.type.eq(e.type) && this.from + n == e.from && this.to + n == e.to;
  }
  /**
  @internal
  */
  map(e, n, r) {
    return this.type.map(e, this, n, r);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(e, n, r) {
    return new Be(e, e, new Eo(n, r));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(e, n, r, i) {
    return new Be(e, n, new Vn(r, i));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(e, n, r, i) {
    return new Be(e, n, new Ju(r, i));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof Vn;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof Eo;
  }
}
const Pr = [], cr = {};
class ve {
  /**
  @internal
  */
  constructor(e, n) {
    this.local = e.length ? e : Pr, this.children = n.length ? n : Pr;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(e, n) {
    return n.length ? Co(n, e, 0, cr) : et;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(e, n, r) {
    let i = [];
    return this.findInner(e ?? 0, n ?? 1e9, i, 0, r), i;
  }
  findInner(e, n, r, i, s) {
    for (let o = 0; o < this.local.length; o++) {
      let a = this.local[o];
      a.from <= n && a.to >= e && (!s || s(a.spec)) && r.push(a.copy(a.from + i, a.to + i));
    }
    for (let o = 0; o < this.children.length; o += 3)
      if (this.children[o] < n && this.children[o + 1] > e) {
        let a = this.children[o] + 1;
        this.children[o + 2].findInner(e - a, n - a, r, i + a, s);
      }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(e, n, r) {
    return this == et || e.maps.length == 0 ? this : this.mapInner(e, n, 0, 0, r || cr);
  }
  /**
  @internal
  */
  mapInner(e, n, r, i, s) {
    let o;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a].map(e, r, i);
      l && l.type.valid(n, l) ? (o || (o = [])).push(l) : s.onRemove && s.onRemove(this.local[a].spec);
    }
    return this.children.length ? X2(this.children, o || [], e, n, r, i, s) : o ? new ve(o.sort(dr), Pr) : et;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(e, n) {
    return n.length ? this == et ? ve.create(e, n) : this.addInner(e, n, 0) : this;
  }
  addInner(e, n, r) {
    let i, s = 0;
    e.forEach((a, l) => {
      let u = l + r, c;
      if (c = H0(n, a, u)) {
        for (i || (i = this.children.slice()); s < i.length && i[s] < l; )
          s += 3;
        i[s] == l ? i[s + 2] = i[s + 2].addInner(a, c, u + 1) : i.splice(s, 0, l, l + a.nodeSize, Co(c, a, u + 1, cr)), s += 3;
      }
    });
    let o = F0(s ? B0(n) : n, -r);
    for (let a = 0; a < o.length; a++)
      o[a].type.valid(e, o[a]) || o.splice(a--, 1);
    return new ve(o.length ? this.local.concat(o).sort(dr) : this.local, i || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(e) {
    return e.length == 0 || this == et ? this : this.removeInner(e, 0);
  }
  removeInner(e, n) {
    let r = this.children, i = this.local;
    for (let s = 0; s < r.length; s += 3) {
      let o, a = r[s] + n, l = r[s + 1] + n;
      for (let c = 0, d; c < e.length; c++)
        (d = e[c]) && d.from > a && d.to < l && (e[c] = null, (o || (o = [])).push(d));
      if (!o)
        continue;
      r == this.children && (r = this.children.slice());
      let u = r[s + 2].removeInner(o, a + 1);
      u != et ? r[s + 2] = u : (r.splice(s, 3), s -= 3);
    }
    if (i.length) {
      for (let s = 0, o; s < e.length; s++)
        if (o = e[s])
          for (let a = 0; a < i.length; a++)
            i[a].eq(o, n) && (i == this.local && (i = this.local.slice()), i.splice(a--, 1));
    }
    return r == this.children && i == this.local ? this : i.length || r.length ? new ve(i, r) : et;
  }
  forChild(e, n) {
    if (this == et)
      return this;
    if (n.isLeaf)
      return ve.empty;
    let r, i;
    for (let a = 0; a < this.children.length; a += 3)
      if (this.children[a] >= e) {
        this.children[a] == e && (r = this.children[a + 2]);
        break;
      }
    let s = e + 1, o = s + n.content.size;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a];
      if (l.from < o && l.to > s && l.type instanceof Vn) {
        let u = Math.max(s, l.from) - s, c = Math.min(o, l.to) - s;
        u < c && (i || (i = [])).push(l.copy(u, c));
      }
    }
    if (i) {
      let a = new ve(i.sort(dr), Pr);
      return r ? new Tn([a, r]) : a;
    }
    return r || et;
  }
  /**
  @internal
  */
  eq(e) {
    if (this == e)
      return !0;
    if (!(e instanceof ve) || this.local.length != e.local.length || this.children.length != e.children.length)
      return !1;
    for (let n = 0; n < this.local.length; n++)
      if (!this.local[n].eq(e.local[n]))
        return !1;
    for (let n = 0; n < this.children.length; n += 3)
      if (this.children[n] != e.children[n] || this.children[n + 1] != e.children[n + 1] || !this.children[n + 2].eq(e.children[n + 2]))
        return !1;
    return !0;
  }
  /**
  @internal
  */
  locals(e) {
    return Yu(this.localsInner(e));
  }
  /**
  @internal
  */
  localsInner(e) {
    if (this == et)
      return Pr;
    if (e.inlineContent || !this.local.some(Vn.is))
      return this.local;
    let n = [];
    for (let r = 0; r < this.local.length; r++)
      this.local[r].type instanceof Vn || n.push(this.local[r]);
    return n;
  }
}
ve.empty = new ve([], []);
ve.removeOverlap = Yu;
const et = ve.empty;
class Tn {
  constructor(e) {
    this.members = e;
  }
  map(e, n) {
    const r = this.members.map((i) => i.map(e, n, cr));
    return Tn.from(r);
  }
  forChild(e, n) {
    if (n.isLeaf)
      return ve.empty;
    let r = [];
    for (let i = 0; i < this.members.length; i++) {
      let s = this.members[i].forChild(e, n);
      s != et && (s instanceof Tn ? r = r.concat(s.members) : r.push(s));
    }
    return Tn.from(r);
  }
  eq(e) {
    if (!(e instanceof Tn) || e.members.length != this.members.length)
      return !1;
    for (let n = 0; n < this.members.length; n++)
      if (!this.members[n].eq(e.members[n]))
        return !1;
    return !0;
  }
  locals(e) {
    let n, r = !0;
    for (let i = 0; i < this.members.length; i++) {
      let s = this.members[i].localsInner(e);
      if (s.length)
        if (!n)
          n = s;
        else {
          r && (n = n.slice(), r = !1);
          for (let o = 0; o < s.length; o++)
            n.push(s[o]);
        }
    }
    return n ? Yu(r ? n : n.sort(dr)) : Pr;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(e) {
    switch (e.length) {
      case 0:
        return et;
      case 1:
        return e[0];
      default:
        return new Tn(e.every((n) => n instanceof ve) ? e : e.reduce((n, r) => n.concat(r instanceof ve ? r : r.members), []));
    }
  }
}
function X2(t, e, n, r, i, s, o) {
  let a = t.slice();
  for (let u = 0, c = s; u < n.maps.length; u++) {
    let d = 0;
    n.maps[u].forEach((f, h, p, g) => {
      let m = g - p - (h - f);
      for (let y = 0; y < a.length; y += 3) {
        let x = a[y + 1];
        if (x < 0 || f > x + c - d)
          continue;
        let k = a[y] + c - d;
        h >= k ? a[y + 1] = f <= k ? -2 : -1 : f >= c && m && (a[y] += m, a[y + 1] += m);
      }
      d += m;
    }), c = n.maps[u].map(c, -1);
  }
  let l = !1;
  for (let u = 0; u < a.length; u += 3)
    if (a[u + 1] < 0) {
      if (a[u + 1] == -2) {
        l = !0, a[u + 1] = -1;
        continue;
      }
      let c = n.map(t[u] + s), d = c - i;
      if (d < 0 || d >= r.content.size) {
        l = !0;
        continue;
      }
      let f = n.map(t[u + 1] + s, -1), h = f - i, { index: p, offset: g } = r.content.findIndex(d), m = r.maybeChild(p);
      if (m && g == d && g + m.nodeSize == h) {
        let y = a[u + 2].mapInner(n, m, c + 1, t[u] + s + 1, o);
        y != et ? (a[u] = d, a[u + 1] = h, a[u + 2] = y) : (a[u + 1] = -2, l = !0);
      } else
        l = !0;
    }
  if (l) {
    let u = Q2(a, t, e, n, i, s, o), c = Co(u, r, 0, o);
    e = c.local;
    for (let d = 0; d < a.length; d += 3)
      a[d + 1] < 0 && (a.splice(d, 3), d -= 3);
    for (let d = 0, f = 0; d < c.children.length; d += 3) {
      let h = c.children[d];
      for (; f < a.length && a[f] < h; )
        f += 3;
      a.splice(f, 0, c.children[d], c.children[d + 1], c.children[d + 2]);
    }
  }
  return new ve(e.sort(dr), a);
}
function F0(t, e) {
  if (!e || !t.length)
    return t;
  let n = [];
  for (let r = 0; r < t.length; r++) {
    let i = t[r];
    n.push(new Be(i.from + e, i.to + e, i.type));
  }
  return n;
}
function Q2(t, e, n, r, i, s, o) {
  function a(l, u) {
    for (let c = 0; c < l.local.length; c++) {
      let d = l.local[c].map(r, i, u);
      d ? n.push(d) : o.onRemove && o.onRemove(l.local[c].spec);
    }
    for (let c = 0; c < l.children.length; c += 3)
      a(l.children[c + 2], l.children[c] + u + 1);
  }
  for (let l = 0; l < t.length; l += 3)
    t[l + 1] == -1 && a(t[l + 2], e[l] + s + 1);
  return n;
}
function H0(t, e, n) {
  if (e.isLeaf)
    return null;
  let r = n + e.nodeSize, i = null;
  for (let s = 0, o; s < t.length; s++)
    (o = t[s]) && o.from > n && o.to < r && ((i || (i = [])).push(o), t[s] = null);
  return i;
}
function B0(t) {
  let e = [];
  for (let n = 0; n < t.length; n++)
    t[n] != null && e.push(t[n]);
  return e;
}
function Co(t, e, n, r) {
  let i = [], s = !1;
  e.forEach((a, l) => {
    let u = H0(t, a, l + n);
    if (u) {
      s = !0;
      let c = Co(u, a, n + l + 1, r);
      c != et && i.push(l, l + a.nodeSize, c);
    }
  });
  let o = F0(s ? B0(t) : t, -n).sort(dr);
  for (let a = 0; a < o.length; a++)
    o[a].type.valid(e, o[a]) || (r.onRemove && r.onRemove(o[a].spec), o.splice(a--, 1));
  return o.length || i.length ? new ve(o, i) : et;
}
function dr(t, e) {
  return t.from - e.from || t.to - e.to;
}
function Yu(t) {
  let e = t;
  for (let n = 0; n < e.length - 1; n++) {
    let r = e[n];
    if (r.from != r.to)
      for (let i = n + 1; i < e.length; i++) {
        let s = e[i];
        if (s.from == r.from) {
          s.to != r.to && (e == t && (e = t.slice()), e[i] = s.copy(s.from, r.to), $d(e, i + 1, s.copy(r.to, s.to)));
          continue;
        } else {
          s.from < r.to && (e == t && (e = t.slice()), e[n] = r.copy(r.from, s.from), $d(e, i, r.copy(s.from, r.to)));
          break;
        }
      }
  }
  return e;
}
function $d(t, e, n) {
  for (; e < t.length && dr(n, t[e]) > 0; )
    e++;
  t.splice(e, 0, n);
}
function ol(t) {
  let e = [];
  return t.someProp("decorations", (n) => {
    let r = n(t.state);
    r && r != et && e.push(r);
  }), t.cursorWrapper && e.push(ve.create(t.state.doc, [t.cursorWrapper.deco])), Tn.from(e);
}
const ey = {
  childList: !0,
  characterData: !0,
  characterDataOldValue: !0,
  attributes: !0,
  attributeOldValue: !0,
  subtree: !0
}, ty = ht && $n <= 11;
class ny {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  set(e) {
    this.anchorNode = e.anchorNode, this.anchorOffset = e.anchorOffset, this.focusNode = e.focusNode, this.focusOffset = e.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(e) {
    return e.anchorNode == this.anchorNode && e.anchorOffset == this.anchorOffset && e.focusNode == this.focusNode && e.focusOffset == this.focusOffset;
  }
}
class ry {
  constructor(e, n) {
    this.view = e, this.handleDOMChange = n, this.queue = [], this.flushingSoon = -1, this.observer = null, this.currentSelection = new ny(), this.onCharData = null, this.suppressingSelectionUpdates = !1, this.observer = window.MutationObserver && new window.MutationObserver((r) => {
      for (let i = 0; i < r.length; i++)
        this.queue.push(r[i]);
      ht && $n <= 11 && r.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), ty && (this.onCharData = (r) => {
      this.queue.push({ target: r.target, type: "characterData", oldValue: r.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    this.flushingSoon < 0 && (this.flushingSoon = window.setTimeout(() => {
      this.flushingSoon = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.flushingSoon > -1 && (window.clearTimeout(this.flushingSoon), this.flushingSoon = -1, this.flush());
  }
  start() {
    this.observer && (this.observer.takeRecords(), this.observer.observe(this.view.dom, ey)), this.onCharData && this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let e = this.observer.takeRecords();
      if (e.length) {
        for (let n = 0; n < e.length; n++)
          this.queue.push(e[n]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    this.onCharData && this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData), this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = !0, setTimeout(() => this.suppressingSelectionUpdates = !1, 50);
  }
  onSelectionChange() {
    if (Nd(this.view)) {
      if (this.suppressingSelectionUpdates)
        return kn(this.view);
      if (ht && $n <= 11 && !this.view.state.selection.empty) {
        let e = this.view.domSelectionRange();
        if (e.focusNode && mr(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(e) {
    if (!e.focusNode)
      return !0;
    let n = /* @__PURE__ */ new Set(), r;
    for (let s = e.focusNode; s; s = Ui(s))
      n.add(s);
    for (let s = e.anchorNode; s; s = Ui(s))
      if (n.has(s)) {
        r = s;
        break;
      }
    let i = r && this.view.docView.nearestDesc(r);
    if (i && i.ignoreMutation({
      type: "selection",
      target: r.nodeType == 3 ? r.parentNode : r
    }))
      return this.setCurSelection(), !0;
  }
  pendingRecords() {
    if (this.observer)
      for (let e of this.observer.takeRecords())
        this.queue.push(e);
    return this.queue;
  }
  flush() {
    let { view: e } = this;
    if (!e.docView || this.flushingSoon > -1)
      return;
    let n = this.pendingRecords();
    n.length && (this.queue = []);
    let r = e.domSelectionRange(), i = !this.suppressingSelectionUpdates && !this.currentSelection.eq(r) && Nd(e) && !this.ignoreSelectionChange(r), s = -1, o = -1, a = !1, l = [];
    if (e.editable)
      for (let c = 0; c < n.length; c++) {
        let d = this.registerMutation(n[c], l);
        d && (s = s < 0 ? d.from : Math.min(d.from, s), o = o < 0 ? d.to : Math.max(d.to, o), d.typeOver && (a = !0));
      }
    if (zt && l.length > 1) {
      let c = l.filter((d) => d.nodeName == "BR");
      if (c.length == 2) {
        let d = c[0], f = c[1];
        d.parentNode && d.parentNode.parentNode == f.parentNode ? f.remove() : d.remove();
      }
    }
    let u = null;
    s < 0 && i && e.input.lastFocus > Date.now() - 200 && Math.max(e.input.lastTouch, e.input.lastClick.time) < Date.now() - 300 && ha(r) && (u = Zu(e)) && u.eq(ne.near(e.state.doc.resolve(0), 1)) ? (e.input.lastFocus = 0, kn(e), this.currentSelection.set(r), e.scrollToSelection()) : (s > -1 || i) && (s > -1 && (e.docView.markDirty(s, o), iy(e)), this.handleDOMChange(s, o, a, l), e.docView && e.docView.dirty ? e.updateState(e.state) : this.currentSelection.eq(r) || kn(e), this.currentSelection.set(r));
  }
  registerMutation(e, n) {
    if (n.indexOf(e.target) > -1)
      return null;
    let r = this.view.docView.nearestDesc(e.target);
    if (e.type == "attributes" && (r == this.view.docView || e.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    e.attributeName == "style" && !e.oldValue && !e.target.getAttribute("style")) || !r || r.ignoreMutation(e))
      return null;
    if (e.type == "childList") {
      for (let c = 0; c < e.addedNodes.length; c++)
        n.push(e.addedNodes[c]);
      if (r.contentDOM && r.contentDOM != r.dom && !r.contentDOM.contains(e.target))
        return { from: r.posBefore, to: r.posAfter };
      let i = e.previousSibling, s = e.nextSibling;
      if (ht && $n <= 11 && e.addedNodes.length)
        for (let c = 0; c < e.addedNodes.length; c++) {
          let { previousSibling: d, nextSibling: f } = e.addedNodes[c];
          (!d || Array.prototype.indexOf.call(e.addedNodes, d) < 0) && (i = d), (!f || Array.prototype.indexOf.call(e.addedNodes, f) < 0) && (s = f);
        }
      let o = i && i.parentNode == e.target ? Je(i) + 1 : 0, a = r.localPosFromDOM(e.target, o, -1), l = s && s.parentNode == e.target ? Je(s) : e.target.childNodes.length, u = r.localPosFromDOM(e.target, l, 1);
      return { from: a, to: u };
    } else
      return e.type == "attributes" ? { from: r.posAtStart - r.border, to: r.posAtEnd + r.border } : {
        from: r.posAtStart,
        to: r.posAtEnd,
        // An event was generated for a text change that didn't change
        // any text. Mark the dom change to fall back to assuming the
        // selection was typed over with an identical value if it can't
        // find another change.
        typeOver: e.target.nodeValue == e.oldValue
      };
  }
}
let zd = /* @__PURE__ */ new WeakMap(), Vd = !1;
function iy(t) {
  if (!zd.has(t) && (zd.set(t, null), ["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(t.dom).whiteSpace) !== -1)) {
    if (t.requiresGeckoHackNode = zt, Vd)
      return;
    console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."), Vd = !0;
  }
}
function sy(t) {
  let e;
  function n(l) {
    l.preventDefault(), l.stopImmediatePropagation(), e = l.getTargetRanges()[0];
  }
  t.dom.addEventListener("beforeinput", n, !0), document.execCommand("indent"), t.dom.removeEventListener("beforeinput", n, !0);
  let r = e.startContainer, i = e.startOffset, s = e.endContainer, o = e.endOffset, a = t.domAtPos(t.state.selection.anchor);
  return mr(a.node, a.offset, s, o) && ([r, i, s, o] = [s, o, r, i]), { anchorNode: r, anchorOffset: i, focusNode: s, focusOffset: o };
}
function oy(t, e, n) {
  let { node: r, fromOffset: i, toOffset: s, from: o, to: a } = t.docView.parseRange(e, n), l = t.domSelectionRange(), u, c = l.anchorNode;
  if (c && t.dom.contains(c.nodeType == 1 ? c : c.parentNode) && (u = [{ node: c, offset: l.anchorOffset }], ha(l) || u.push({ node: l.focusNode, offset: l.focusOffset })), st && t.input.lastKeyCode === 8)
    for (let m = s; m > i; m--) {
      let y = r.childNodes[m - 1], x = y.pmViewDesc;
      if (y.nodeName == "BR" && !x) {
        s = m;
        break;
      }
      if (!x || x.size)
        break;
    }
  let d = t.state.doc, f = t.someProp("domParser") || ps.fromSchema(t.state.schema), h = d.resolve(o), p = null, g = f.parse(r, {
    topNode: h.parent,
    topMatch: h.parent.contentMatchAt(h.index()),
    topOpen: !0,
    from: i,
    to: s,
    preserveWhitespace: h.parent.type.whitespace == "pre" ? "full" : !0,
    findPositions: u,
    ruleFromNode: ay,
    context: h
  });
  if (u && u[0].pos != null) {
    let m = u[0].pos, y = u[1] && u[1].pos;
    y == null && (y = m), p = { anchor: m + o, head: y + o };
  }
  return { doc: g, sel: p, from: o, to: a };
}
function ay(t) {
  let e = t.pmViewDesc;
  if (e)
    return e.parseRule();
  if (t.nodeName == "BR" && t.parentNode) {
    if (ot && /^(ul|ol)$/i.test(t.parentNode.nodeName)) {
      let n = document.createElement("div");
      return n.appendChild(document.createElement("li")), { skip: n };
    } else if (t.parentNode.lastChild == t || ot && /^(tr|table)$/i.test(t.parentNode.nodeName))
      return { ignore: !0 };
  } else if (t.nodeName == "IMG" && t.getAttribute("mark-placeholder"))
    return { ignore: !0 };
  return null;
}
const ly = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function uy(t, e, n, r, i) {
  let s = t.input.compositionPendingChanges || (t.composing ? t.input.compositionID : 0);
  if (t.input.compositionPendingChanges = 0, e < 0) {
    let w = t.input.lastSelectionTime > Date.now() - 50 ? t.input.lastSelectionOrigin : null, N = Zu(t, w);
    if (N && !t.state.selection.eq(N)) {
      if (st && Pt && t.input.lastKeyCode === 13 && Date.now() - 100 < t.input.lastKeyCodeTime && t.someProp("handleKeyDown", (K) => K(t, er(13, "Enter"))))
        return;
      let $ = t.state.tr.setSelection(N);
      w == "pointer" ? $.setMeta("pointer", !0) : w == "key" && $.scrollIntoView(), s && $.setMeta("composition", s), t.dispatch($);
    }
    return;
  }
  let o = t.state.doc.resolve(e), a = o.sharedDepth(n);
  e = o.before(a + 1), n = t.state.doc.resolve(n).after(a + 1);
  let l = t.state.selection, u = oy(t, e, n), c = t.state.doc, d = c.slice(u.from, u.to), f, h;
  t.input.lastKeyCode === 8 && Date.now() - 100 < t.input.lastKeyCodeTime ? (f = t.state.selection.to, h = "end") : (f = t.state.selection.from, h = "start"), t.input.lastKeyCode = null;
  let p = fy(d.content, u.doc.content, u.from, f, h);
  if ((ni && t.input.lastIOSEnter > Date.now() - 225 || Pt) && i.some((w) => w.nodeType == 1 && !ly.test(w.nodeName)) && (!p || p.endA >= p.endB) && t.someProp("handleKeyDown", (w) => w(t, er(13, "Enter")))) {
    t.input.lastIOSEnter = 0;
    return;
  }
  if (!p)
    if (r && l instanceof X && !l.empty && l.$head.sameParent(l.$anchor) && !t.composing && !(u.sel && u.sel.anchor != u.sel.head))
      p = { start: l.from, endA: l.to, endB: l.to };
    else {
      if (u.sel) {
        let w = Ud(t, t.state.doc, u.sel);
        if (w && !w.eq(t.state.selection)) {
          let N = t.state.tr.setSelection(w);
          s && N.setMeta("composition", s), t.dispatch(N);
        }
      }
      return;
    }
  t.input.domChangeCount++, t.state.selection.from < t.state.selection.to && p.start == p.endB && t.state.selection instanceof X && (p.start > t.state.selection.from && p.start <= t.state.selection.from + 2 && t.state.selection.from >= u.from ? p.start = t.state.selection.from : p.endA < t.state.selection.to && p.endA >= t.state.selection.to - 2 && t.state.selection.to <= u.to && (p.endB += t.state.selection.to - p.endA, p.endA = t.state.selection.to)), ht && $n <= 11 && p.endB == p.start + 1 && p.endA == p.start && p.start > u.from && u.doc.textBetween(p.start - u.from - 1, p.start - u.from + 1) == "  " && (p.start--, p.endA--, p.endB--);
  let g = u.doc.resolveNoCache(p.start - u.from), m = u.doc.resolveNoCache(p.endB - u.from), y = c.resolve(p.start), x = g.sameParent(m) && g.parent.inlineContent && y.end() >= p.endA, k;
  if ((ni && t.input.lastIOSEnter > Date.now() - 225 && (!x || i.some((w) => w.nodeName == "DIV" || w.nodeName == "P")) || !x && g.pos < u.doc.content.size && !g.sameParent(m) && (k = ne.findFrom(u.doc.resolve(g.pos + 1), 1, !0)) && k.head == m.pos) && t.someProp("handleKeyDown", (w) => w(t, er(13, "Enter")))) {
    t.input.lastIOSEnter = 0;
    return;
  }
  if (t.state.selection.anchor > p.start && dy(c, p.start, p.endA, g, m) && t.someProp("handleKeyDown", (w) => w(t, er(8, "Backspace")))) {
    Pt && st && t.domObserver.suppressSelectionUpdates();
    return;
  }
  st && Pt && p.endB == p.start && (t.input.lastAndroidDelete = Date.now()), Pt && !x && g.start() != m.start() && m.parentOffset == 0 && g.depth == m.depth && u.sel && u.sel.anchor == u.sel.head && u.sel.head == p.endA && (p.endB -= 2, m = u.doc.resolveNoCache(p.endB - u.from), setTimeout(() => {
    t.someProp("handleKeyDown", function(w) {
      return w(t, er(13, "Enter"));
    });
  }, 20));
  let b = p.start, E = p.endA, v, _, T;
  if (x) {
    if (g.pos == m.pos)
      ht && $n <= 11 && g.parentOffset == 0 && (t.domObserver.suppressSelectionUpdates(), setTimeout(() => kn(t), 20)), v = t.state.tr.delete(b, E), _ = c.resolve(p.start).marksAcross(c.resolve(p.endA));
    else if (
      // Adding or removing a mark
      p.endA == p.endB && (T = cy(g.parent.content.cut(g.parentOffset, m.parentOffset), y.parent.content.cut(y.parentOffset, p.endA - y.start())))
    )
      v = t.state.tr, T.type == "add" ? v.addMark(b, E, T.mark) : v.removeMark(b, E, T.mark);
    else if (g.parent.child(g.index()).isText && g.index() == m.index() - (m.textOffset ? 0 : 1)) {
      let w = g.parent.textBetween(g.parentOffset, m.parentOffset);
      if (t.someProp("handleTextInput", (N) => N(t, b, E, w)))
        return;
      v = t.state.tr.insertText(w, b, E);
    }
  }
  if (v || (v = t.state.tr.replace(b, E, u.doc.slice(p.start - u.from, p.endB - u.from))), u.sel) {
    let w = Ud(t, v.doc, u.sel);
    w && !(st && Pt && t.composing && w.empty && (p.start != p.endB || t.input.lastAndroidDelete < Date.now() - 100) && (w.head == b || w.head == v.mapping.map(E) - 1) || ht && w.empty && w.head == b) && v.setSelection(w);
  }
  _ && v.ensureMarks(_), s && v.setMeta("composition", s), t.dispatch(v.scrollIntoView());
}
function Ud(t, e, n) {
  return Math.max(n.anchor, n.head) > e.content.size ? null : Ku(t, e.resolve(n.anchor), e.resolve(n.head));
}
function cy(t, e) {
  let n = t.firstChild.marks, r = e.firstChild.marks, i = n, s = r, o, a, l;
  for (let c = 0; c < r.length; c++)
    i = r[c].removeFromSet(i);
  for (let c = 0; c < n.length; c++)
    s = n[c].removeFromSet(s);
  if (i.length == 1 && s.length == 0)
    a = i[0], o = "add", l = (c) => c.mark(a.addToSet(c.marks));
  else if (i.length == 0 && s.length == 1)
    a = s[0], o = "remove", l = (c) => c.mark(a.removeFromSet(c.marks));
  else
    return null;
  let u = [];
  for (let c = 0; c < e.childCount; c++)
    u.push(l(e.child(c)));
  if (O.from(u).eq(t))
    return { mark: a, type: o };
}
function dy(t, e, n, r, i) {
  if (
    // The content must have shrunk
    n - e <= i.pos - r.pos || // newEnd must point directly at or after the end of the block that newStart points into
    al(r, !0, !1) < i.pos
  )
    return !1;
  let s = t.resolve(e);
  if (!r.parent.isTextblock) {
    let a = s.nodeAfter;
    return a != null && n == e + a.nodeSize;
  }
  if (s.parentOffset < s.parent.content.size || !s.parent.isTextblock)
    return !1;
  let o = t.resolve(al(s, !0, !0));
  return !o.parent.isTextblock || o.pos > n || al(o, !0, !1) < n ? !1 : r.parent.content.cut(r.parentOffset).eq(o.parent.content);
}
function al(t, e, n) {
  let r = t.depth, i = e ? t.end() : t.pos;
  for (; r > 0 && (e || t.indexAfter(r) == t.node(r).childCount); )
    r--, i++, e = !1;
  if (n) {
    let s = t.node(r).maybeChild(t.indexAfter(r));
    for (; s && !s.isLeaf; )
      s = s.firstChild, i++;
  }
  return i;
}
function fy(t, e, n, r, i) {
  let s = t.findDiffStart(e, n);
  if (s == null)
    return null;
  let { a: o, b: a } = t.findDiffEnd(e, n + t.size, n + e.size);
  if (i == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    r -= o + l - s;
  }
  if (o < s && t.size < e.size) {
    let l = r <= s && r >= o ? s - r : 0;
    s -= l, s && s < e.size && qd(e.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), a = s + (a - o), o = s;
  } else if (a < s) {
    let l = r <= s && r >= a ? s - r : 0;
    s -= l, s && s < t.size && qd(t.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), o = s + (o - a), a = s;
  }
  return { start: s, endA: o, endB: a };
}
function qd(t) {
  if (t.length != 2)
    return !1;
  let e = t.charCodeAt(0), n = t.charCodeAt(1);
  return e >= 56320 && e <= 57343 && n >= 55296 && n <= 56319;
}
class hy {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(e, n) {
    this._root = null, this.focused = !1, this.trackWrites = null, this.mounted = !1, this.markCursor = null, this.cursorWrapper = null, this.lastSelectedViewDesc = void 0, this.input = new L2(), this.prevDirectPlugins = [], this.pluginViews = [], this.requiresGeckoHackNode = !1, this.dragging = null, this._props = n, this.state = n.state, this.directPlugins = n.plugins || [], this.directPlugins.forEach(Gd), this.dispatch = this.dispatch.bind(this), this.dom = e && e.mount || document.createElement("div"), e && (e.appendChild ? e.appendChild(this.dom) : typeof e == "function" ? e(this.dom) : e.mount && (this.mounted = !0)), this.editable = Wd(this), Kd(this), this.nodeViews = jd(this), this.docView = Sd(this.state.doc, Zd(this), ol(this), this.dom, this), this.domObserver = new ry(this, (r, i, s, o) => uy(this, r, i, s, o)), this.domObserver.start(), R2(this), this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let e = this._props;
      this._props = {};
      for (let n in e)
        this._props[n] = e[n];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(e) {
    e.handleDOMEvents != this._props.handleDOMEvents && cu(this);
    let n = this._props;
    this._props = e, e.plugins && (e.plugins.forEach(Gd), this.directPlugins = e.plugins), this.updateStateInner(e.state, n);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(e) {
    let n = {};
    for (let r in this._props)
      n[r] = this._props[r];
    n.state = this.state;
    for (let r in e)
      n[r] = e[r];
    this.update(n);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(e) {
    this.updateStateInner(e, this._props);
  }
  updateStateInner(e, n) {
    var r;
    let i = this.state, s = !1, o = !1;
    e.storedMarks && this.composing && (N0(this), o = !0), this.state = e;
    let a = i.plugins != e.plugins || this._props.plugins != n.plugins;
    if (a || this._props.plugins != n.plugins || this._props.nodeViews != n.nodeViews) {
      let h = jd(this);
      gy(h, this.nodeViews) && (this.nodeViews = h, s = !0);
    }
    (a || n.handleDOMEvents != this._props.handleDOMEvents) && cu(this), this.editable = Wd(this), Kd(this);
    let l = ol(this), u = Zd(this), c = i.plugins != e.plugins && !i.doc.eq(e.doc) ? "reset" : e.scrollToSelection > i.scrollToSelection ? "to selection" : "preserve", d = s || !this.docView.matchesNode(e.doc, u, l);
    (d || !e.selection.eq(i.selection)) && (o = !0);
    let f = c == "preserve" && o && this.dom.style.overflowAnchor == null && Gb(this);
    if (o) {
      this.domObserver.stop();
      let h = d && (ht || st) && !this.composing && !i.selection.empty && !e.selection.empty && py(i.selection, e.selection);
      if (d) {
        let p = st ? this.trackWrites = this.domSelectionRange().focusNode : null;
        this.composing && (this.input.compositionNode = W2(this)), (s || !this.docView.update(e.doc, u, l, this)) && (this.docView.updateOuterDeco(u), this.docView.destroy(), this.docView = Sd(e.doc, u, l, this.dom, this)), p && !this.trackWrites && (h = !0);
      }
      h || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && x2(this)) ? kn(this, h) : (x0(this, e.selection), this.domObserver.setCurSelection()), this.domObserver.start();
    }
    this.updatePluginViews(i), !((r = this.dragging) === null || r === void 0) && r.node && !i.doc.eq(e.doc) && this.updateDraggedNode(this.dragging, i), c == "reset" ? this.dom.scrollTop = 0 : c == "to selection" ? this.scrollToSelection() : f && Jb(f);
  }
  /**
  @internal
  */
  scrollToSelection() {
    let e = this.domSelectionRange().focusNode;
    if (!this.someProp("handleScrollToSelection", (n) => n(this)))
      if (this.state.selection instanceof ee) {
        let n = this.docView.domAfterPos(this.state.selection.from);
        n.nodeType == 1 && kd(this, n.getBoundingClientRect(), e);
      } else
        kd(this, this.coordsAtPos(this.state.selection.head, 1), e);
  }
  destroyPluginViews() {
    let e;
    for (; e = this.pluginViews.pop(); )
      e.destroy && e.destroy();
  }
  updatePluginViews(e) {
    if (!e || e.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins, this.destroyPluginViews();
      for (let n = 0; n < this.directPlugins.length; n++) {
        let r = this.directPlugins[n];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
      for (let n = 0; n < this.state.plugins.length; n++) {
        let r = this.state.plugins[n];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
    } else
      for (let n = 0; n < this.pluginViews.length; n++) {
        let r = this.pluginViews[n];
        r.update && r.update(this, e);
      }
  }
  updateDraggedNode(e, n) {
    let r = e.node, i = -1;
    if (this.state.doc.nodeAt(r.from) == r.node)
      i = r.from;
    else {
      let s = r.from + (this.state.doc.content.size - n.doc.content.size);
      (s > 0 && this.state.doc.nodeAt(s)) == r.node && (i = s);
    }
    this.dragging = new R0(e.slice, e.move, i < 0 ? void 0 : ee.create(this.state.doc, i));
  }
  someProp(e, n) {
    let r = this._props && this._props[e], i;
    if (r != null && (i = n ? n(r) : r))
      return i;
    for (let o = 0; o < this.directPlugins.length; o++) {
      let a = this.directPlugins[o].props[e];
      if (a != null && (i = n ? n(a) : a))
        return i;
    }
    let s = this.state.plugins;
    if (s)
      for (let o = 0; o < s.length; o++) {
        let a = s[o].props[e];
        if (a != null && (i = n ? n(a) : a))
          return i;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (ht) {
      let e = this.root.activeElement;
      if (e == this.dom)
        return !0;
      if (!e || !this.dom.contains(e))
        return !1;
      for (; e && this.dom != e && this.dom.contains(e); ) {
        if (e.contentEditable == "false")
          return !1;
        e = e.parentElement;
      }
      return !0;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop(), this.editable && Yb(this.dom), kn(this), this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let e = this._root;
    if (e == null) {
      for (let n = this.dom.parentNode; n; n = n.parentNode)
        if (n.nodeType == 9 || n.nodeType == 11 && n.host)
          return n.getSelection || (Object.getPrototypeOf(n).getSelection = () => n.ownerDocument.getSelection()), this._root = n;
    }
    return e || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(e) {
    return n2(this, e);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(e, n = 1) {
    return d0(this, e, n);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(e, n = 0) {
    return this.docView.domFromPos(e, n);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(e) {
    let n = this.docView.descAt(e);
    return n ? n.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(e, n, r = -1) {
    let i = this.docView.posFromDOM(e, n, r);
    if (i == null)
      throw new RangeError("DOM position not inside the editor");
    return i;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(e, n) {
    return a2(this, n || this.state, e);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(e, n) {
    return Zi(this, "", e, !1, n || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(e, n) {
    return Zi(this, e, null, !0, n || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    this.docView && (I2(this), this.destroyPluginViews(), this.mounted ? (this.docView.update(this.state.doc, [], ol(this), this), this.dom.textContent = "") : this.dom.parentNode && this.dom.parentNode.removeChild(this.dom), this.docView.destroy(), this.docView = null, Hb());
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(e) {
    return H2(this, e);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(e) {
    let n = this._props.dispatchTransaction;
    n ? n.call(this, e) : this.updateState(this.state.apply(e));
  }
  /**
  @internal
  */
  domSelectionRange() {
    return ot && this.root.nodeType === 11 && Vb(this.dom.ownerDocument) == this.dom ? sy(this) : this.domSelection();
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function Zd(t) {
  let e = /* @__PURE__ */ Object.create(null);
  return e.class = "ProseMirror", e.contenteditable = String(t.editable), t.someProp("attributes", (n) => {
    if (typeof n == "function" && (n = n(t.state)), n)
      for (let r in n)
        r == "class" ? e.class += " " + n[r] : r == "style" ? e.style = (e.style ? e.style + ";" : "") + n[r] : !e[r] && r != "contenteditable" && r != "nodeName" && (e[r] = String(n[r]));
  }), e.translate || (e.translate = "no"), [Be.node(0, t.state.doc.content.size, e)];
}
function Kd(t) {
  if (t.markCursor) {
    let e = document.createElement("img");
    e.className = "ProseMirror-separator", e.setAttribute("mark-placeholder", "true"), e.setAttribute("alt", ""), t.cursorWrapper = { dom: e, deco: Be.widget(t.state.selection.head, e, { raw: !0, marks: t.markCursor }) };
  } else
    t.cursorWrapper = null;
}
function Wd(t) {
  return !t.someProp("editable", (e) => e(t.state) === !1);
}
function py(t, e) {
  let n = Math.min(t.$anchor.sharedDepth(t.head), e.$anchor.sharedDepth(e.head));
  return t.$anchor.start(n) != e.$anchor.start(n);
}
function jd(t) {
  let e = /* @__PURE__ */ Object.create(null);
  function n(r) {
    for (let i in r)
      Object.prototype.hasOwnProperty.call(e, i) || (e[i] = r[i]);
  }
  return t.someProp("nodeViews", n), t.someProp("markViews", n), e;
}
function gy(t, e) {
  let n = 0, r = 0;
  for (let i in t) {
    if (t[i] != e[i])
      return !0;
    n++;
  }
  for (let i in e)
    r++;
  return n != r;
}
function Gd(t) {
  if (t.spec.state || t.spec.filterTransaction || t.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var qn = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, _o = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, my = typeof navigator < "u" && /Mac/.test(navigator.platform), by = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Ye = 0; Ye < 10; Ye++)
  qn[48 + Ye] = qn[96 + Ye] = String(Ye);
for (var Ye = 1; Ye <= 24; Ye++)
  qn[Ye + 111] = "F" + Ye;
for (var Ye = 65; Ye <= 90; Ye++)
  qn[Ye] = String.fromCharCode(Ye + 32), _o[Ye] = String.fromCharCode(Ye);
for (var ll in qn)
  _o.hasOwnProperty(ll) || (_o[ll] = qn[ll]);
function yy(t) {
  var e = my && t.metaKey && t.shiftKey && !t.ctrlKey && !t.altKey || by && t.shiftKey && t.key && t.key.length == 1 || t.key == "Unidentified", n = !e && t.key || (t.shiftKey ? _o : qn)[t.keyCode] || t.key || "Unidentified";
  return n == "Esc" && (n = "Escape"), n == "Del" && (n = "Delete"), n == "Left" && (n = "ArrowLeft"), n == "Up" && (n = "ArrowUp"), n == "Right" && (n = "ArrowRight"), n == "Down" && (n = "ArrowDown"), n;
}
const xy = typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : !1;
function ky(t) {
  let e = t.split(/-(?!$)/), n = e[e.length - 1];
  n == "Space" && (n = " ");
  let r, i, s, o;
  for (let a = 0; a < e.length - 1; a++) {
    let l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      i = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      xy ? o = !0 : i = !0;
    else
      throw new Error("Unrecognized modifier name: " + l);
  }
  return r && (n = "Alt-" + n), i && (n = "Ctrl-" + n), o && (n = "Meta-" + n), s && (n = "Shift-" + n), n;
}
function vy(t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let n in t)
    e[ky(n)] = t[n];
  return e;
}
function ul(t, e, n = !0) {
  return e.altKey && (t = "Alt-" + t), e.ctrlKey && (t = "Ctrl-" + t), e.metaKey && (t = "Meta-" + t), n && e.shiftKey && (t = "Shift-" + t), t;
}
function Ey(t) {
  return new we({ props: { handleKeyDown: Xu(t) } });
}
function Xu(t) {
  let e = vy(t);
  return function(n, r) {
    let i = yy(r), s, o = e[ul(i, r)];
    if (o && o(n.state, n.dispatch, n))
      return !0;
    if (i.length == 1 && i != " ") {
      if (r.shiftKey) {
        let a = e[ul(i, r, !1)];
        if (a && a(n.state, n.dispatch, n))
          return !0;
      }
      if ((r.shiftKey || r.altKey || r.metaKey || i.charCodeAt(0) > 127) && (s = qn[r.keyCode]) && s != i) {
        let a = e[ul(s, r)];
        if (a && a(n.state, n.dispatch, n))
          return !0;
      }
    }
    return !1;
  };
}
const Cy = (t, e) => t.selection.empty ? !1 : (e && e(t.tr.deleteSelection().scrollIntoView()), !0);
function P0(t, e) {
  let { $cursor: n } = t.selection;
  return !n || (e ? !e.endOfTextblock("backward", t) : n.parentOffset > 0) ? null : n;
}
const _y = (t, e, n) => {
  let r = P0(t, n);
  if (!r)
    return !1;
  let i = Qu(r);
  if (!i) {
    let o = r.blockRange(), a = o && gi(o);
    return a == null ? !1 : (e && e(t.tr.lift(o, a).scrollIntoView()), !0);
  }
  let s = i.nodeBefore;
  if (!s.type.spec.isolating && U0(t, i, e))
    return !0;
  if (r.parent.content.size == 0 && (ri(s, "end") || ee.isSelectable(s))) {
    let o = da(t.doc, r.before(), r.after(), B.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = t.tr.step(o);
        a.setSelection(ri(s, "end") ? ne.findFrom(a.doc.resolve(a.mapping.map(i.pos, -1)), -1) : ee.create(a.doc, i.pos - s.nodeSize)), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && i.depth == r.depth - 1 ? (e && e(t.tr.delete(i.pos - s.nodeSize, i.pos).scrollIntoView()), !0) : !1;
}, wy = (t, e, n) => {
  let r = P0(t, n);
  if (!r)
    return !1;
  let i = Qu(r);
  return i ? $0(t, i, e) : !1;
}, Sy = (t, e, n) => {
  let r = z0(t, n);
  if (!r)
    return !1;
  let i = ec(r);
  return i ? $0(t, i, e) : !1;
};
function $0(t, e, n) {
  let r = e.nodeBefore, i = r, s = e.pos - 1;
  for (; !i.isTextblock; s--) {
    if (i.type.spec.isolating)
      return !1;
    let c = i.lastChild;
    if (!c)
      return !1;
    i = c;
  }
  let o = e.nodeAfter, a = o, l = e.pos + 1;
  for (; !a.isTextblock; l++) {
    if (a.type.spec.isolating)
      return !1;
    let c = a.firstChild;
    if (!c)
      return !1;
    a = c;
  }
  let u = da(t.doc, s, l, B.empty);
  if (!u || u.from != s || u instanceof ze && u.slice.size >= l - s)
    return !1;
  if (n) {
    let c = t.tr.step(u);
    c.setSelection(X.create(c.doc, s)), n(c.scrollIntoView());
  }
  return !0;
}
function ri(t, e, n = !1) {
  for (let r = t; r; r = e == "start" ? r.firstChild : r.lastChild) {
    if (r.isTextblock)
      return !0;
    if (n && r.childCount != 1)
      return !1;
  }
  return !1;
}
const Ay = (t, e, n) => {
  let { $head: r, empty: i } = t.selection, s = r;
  if (!i)
    return !1;
  if (r.parent.isTextblock) {
    if (n ? !n.endOfTextblock("backward", t) : r.parentOffset > 0)
      return !1;
    s = Qu(r);
  }
  let o = s && s.nodeBefore;
  return !o || !ee.isSelectable(o) ? !1 : (e && e(t.tr.setSelection(ee.create(t.doc, s.pos - o.nodeSize)).scrollIntoView()), !0);
};
function Qu(t) {
  if (!t.parent.type.spec.isolating)
    for (let e = t.depth - 1; e >= 0; e--) {
      if (t.index(e) > 0)
        return t.doc.resolve(t.before(e + 1));
      if (t.node(e).type.spec.isolating)
        break;
    }
  return null;
}
function z0(t, e) {
  let { $cursor: n } = t.selection;
  return !n || (e ? !e.endOfTextblock("forward", t) : n.parentOffset < n.parent.content.size) ? null : n;
}
const My = (t, e, n) => {
  let r = z0(t, n);
  if (!r)
    return !1;
  let i = ec(r);
  if (!i)
    return !1;
  let s = i.nodeAfter;
  if (U0(t, i, e))
    return !0;
  if (r.parent.content.size == 0 && (ri(s, "start") || ee.isSelectable(s))) {
    let o = da(t.doc, r.before(), r.after(), B.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = t.tr.step(o);
        a.setSelection(ri(s, "start") ? ne.findFrom(a.doc.resolve(a.mapping.map(i.pos)), 1) : ee.create(a.doc, a.mapping.map(i.pos))), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && i.depth == r.depth - 1 ? (e && e(t.tr.delete(i.pos, i.pos + s.nodeSize).scrollIntoView()), !0) : !1;
}, Ty = (t, e, n) => {
  let { $head: r, empty: i } = t.selection, s = r;
  if (!i)
    return !1;
  if (r.parent.isTextblock) {
    if (n ? !n.endOfTextblock("forward", t) : r.parentOffset < r.parent.content.size)
      return !1;
    s = ec(r);
  }
  let o = s && s.nodeAfter;
  return !o || !ee.isSelectable(o) ? !1 : (e && e(t.tr.setSelection(ee.create(t.doc, s.pos)).scrollIntoView()), !0);
};
function ec(t) {
  if (!t.parent.type.spec.isolating)
    for (let e = t.depth - 1; e >= 0; e--) {
      let n = t.node(e);
      if (t.index(e) + 1 < n.childCount)
        return t.doc.resolve(t.after(e + 1));
      if (n.type.spec.isolating)
        break;
    }
  return null;
}
const Dy = (t, e) => {
  let n = t.selection, r = n instanceof ee, i;
  if (r) {
    if (n.node.isTextblock || !jn(t.doc, n.from))
      return !1;
    i = n.from;
  } else if (i = ca(t.doc, n.from, -1), i == null)
    return !1;
  if (e) {
    let s = t.tr.join(i);
    r && s.setSelection(ee.create(s.doc, i - t.doc.resolve(i).nodeBefore.nodeSize)), e(s.scrollIntoView());
  }
  return !0;
}, Oy = (t, e) => {
  let n = t.selection, r;
  if (n instanceof ee) {
    if (n.node.isTextblock || !jn(t.doc, n.to))
      return !1;
    r = n.to;
  } else if (r = ca(t.doc, n.to, 1), r == null)
    return !1;
  return e && e(t.tr.join(r).scrollIntoView()), !0;
}, Ny = (t, e) => {
  let { $from: n, $to: r } = t.selection, i = n.blockRange(r), s = i && gi(i);
  return s == null ? !1 : (e && e(t.tr.lift(i, s).scrollIntoView()), !0);
}, Ly = (t, e) => {
  let { $head: n, $anchor: r } = t.selection;
  return !n.parent.type.spec.code || !n.sameParent(r) ? !1 : (e && e(t.tr.insertText(`
`).scrollIntoView()), !0);
};
function V0(t) {
  for (let e = 0; e < t.edgeCount; e++) {
    let { type: n } = t.edge(e);
    if (n.isTextblock && !n.hasRequiredAttrs())
      return n;
  }
  return null;
}
const Ry = (t, e) => {
  let { $head: n, $anchor: r } = t.selection;
  if (!n.parent.type.spec.code || !n.sameParent(r))
    return !1;
  let i = n.node(-1), s = n.indexAfter(-1), o = V0(i.contentMatchAt(s));
  if (!o || !i.canReplaceWith(s, s, o))
    return !1;
  if (e) {
    let a = n.after(), l = t.tr.replaceWith(a, a, o.createAndFill());
    l.setSelection(ne.near(l.doc.resolve(a), 1)), e(l.scrollIntoView());
  }
  return !0;
}, Iy = (t, e) => {
  let n = t.selection, { $from: r, $to: i } = n;
  if (n instanceof Nt || r.parent.inlineContent || i.parent.inlineContent)
    return !1;
  let s = V0(i.parent.contentMatchAt(i.indexAfter()));
  if (!s || !s.isTextblock)
    return !1;
  if (e) {
    let o = (!r.parentOffset && i.index() < i.parent.childCount ? r : i).pos, a = t.tr.insert(o, s.createAndFill());
    a.setSelection(X.create(a.doc, o + 1)), e(a.scrollIntoView());
  }
  return !0;
}, Fy = (t, e) => {
  let { $cursor: n } = t.selection;
  if (!n || n.parent.content.size)
    return !1;
  if (n.depth > 1 && n.after() != n.end(-1)) {
    let s = n.before();
    if (Jr(t.doc, s))
      return e && e(t.tr.split(s).scrollIntoView()), !0;
  }
  let r = n.blockRange(), i = r && gi(r);
  return i == null ? !1 : (e && e(t.tr.lift(r, i).scrollIntoView()), !0);
}, Hy = (t, e) => {
  let { $from: n, to: r } = t.selection, i, s = n.sharedDepth(r);
  return s == 0 ? !1 : (i = n.before(s), e && e(t.tr.setSelection(ee.create(t.doc, i))), !0);
};
function By(t, e, n) {
  let r = e.nodeBefore, i = e.nodeAfter, s = e.index();
  return !r || !i || !r.type.compatibleContent(i.type) ? !1 : !r.content.size && e.parent.canReplace(s - 1, s) ? (n && n(t.tr.delete(e.pos - r.nodeSize, e.pos).scrollIntoView()), !0) : !e.parent.canReplace(s, s + 1) || !(i.isTextblock || jn(t.doc, e.pos)) ? !1 : (n && n(t.tr.clearIncompatible(e.pos, r.type, r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()), !0);
}
function U0(t, e, n) {
  let r = e.nodeBefore, i = e.nodeAfter, s, o;
  if (r.type.spec.isolating || i.type.spec.isolating)
    return !1;
  if (By(t, e, n))
    return !0;
  let a = e.parent.canReplace(e.index(), e.index() + 1);
  if (a && (s = (o = r.contentMatchAt(r.childCount)).findWrapping(i.type)) && o.matchType(s[0] || i.type).validEnd) {
    if (n) {
      let d = e.pos + i.nodeSize, f = O.empty;
      for (let g = s.length - 1; g >= 0; g--)
        f = O.from(s[g].create(null, f));
      f = O.from(r.copy(f));
      let h = t.tr.step(new Ue(e.pos - 1, d, e.pos, d, new B(f, 1, 0), s.length, !0)), p = d + 2 * s.length;
      jn(h.doc, p) && h.join(p), n(h.scrollIntoView());
    }
    return !0;
  }
  let l = ne.findFrom(e, 1), u = l && l.$from.blockRange(l.$to), c = u && gi(u);
  if (c != null && c >= e.depth)
    return n && n(t.tr.lift(u, c).scrollIntoView()), !0;
  if (a && ri(i, "start", !0) && ri(r, "end")) {
    let d = r, f = [];
    for (; f.push(d), !d.isTextblock; )
      d = d.lastChild;
    let h = i, p = 1;
    for (; !h.isTextblock; h = h.firstChild)
      p++;
    if (d.canReplace(d.childCount, d.childCount, h.content)) {
      if (n) {
        let g = O.empty;
        for (let y = f.length - 1; y >= 0; y--)
          g = O.from(f[y].copy(g));
        let m = t.tr.step(new Ue(e.pos - f.length, e.pos + i.nodeSize, e.pos + p, e.pos + i.nodeSize - p, new B(g, f.length, 0), 0, !0));
        n(m.scrollIntoView());
      }
      return !0;
    }
  }
  return !1;
}
function q0(t) {
  return function(e, n) {
    let r = e.selection, i = t < 0 ? r.$from : r.$to, s = i.depth;
    for (; i.node(s).isInline; ) {
      if (!s)
        return !1;
      s--;
    }
    return i.node(s).isTextblock ? (n && n(e.tr.setSelection(X.create(e.doc, t < 0 ? i.start(s) : i.end(s)))), !0) : !1;
  };
}
const Py = q0(-1), $y = q0(1);
function zy(t, e = null) {
  return function(n, r) {
    let { $from: i, $to: s } = n.selection, o = i.blockRange(s), a = o && zu(o, t, e);
    return a ? (r && r(n.tr.wrap(o, a).scrollIntoView()), !0) : !1;
  };
}
function Jd(t, e = null) {
  return function(n, r) {
    let i = !1;
    for (let s = 0; s < n.selection.ranges.length && !i; s++) {
      let { $from: { pos: o }, $to: { pos: a } } = n.selection.ranges[s];
      n.doc.nodesBetween(o, a, (l, u) => {
        if (i)
          return !1;
        if (!(!l.isTextblock || l.hasMarkup(t, e)))
          if (l.type == t)
            i = !0;
          else {
            let c = n.doc.resolve(u), d = c.index();
            i = c.parent.canReplaceWith(d, d + 1, t);
          }
      });
    }
    if (!i)
      return !1;
    if (r) {
      let s = n.tr;
      for (let o = 0; o < n.selection.ranges.length; o++) {
        let { $from: { pos: a }, $to: { pos: l } } = n.selection.ranges[o];
        s.setBlockType(a, l, t, e);
      }
      r(s.scrollIntoView());
    }
    return !0;
  };
}
typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os < "u" && os.platform && os.platform() == "darwin";
function Vy(t, e = null) {
  return function(n, r) {
    let { $from: i, $to: s } = n.selection, o = i.blockRange(s), a = !1, l = o;
    if (!o)
      return !1;
    if (o.depth >= 2 && i.node(o.depth - 1).type.compatibleContent(t) && o.startIndex == 0) {
      if (i.index(o.depth - 1) == 0)
        return !1;
      let c = n.doc.resolve(o.start - 2);
      l = new mo(c, c, o.depth), o.endIndex < o.parent.childCount && (o = new mo(i, n.doc.resolve(s.end(o.depth)), o.depth)), a = !0;
    }
    let u = zu(l, t, e, o);
    return u ? (r && r(Uy(n.tr, o, u, a, t).scrollIntoView()), !0) : !1;
  };
}
function Uy(t, e, n, r, i) {
  let s = O.empty;
  for (let c = n.length - 1; c >= 0; c--)
    s = O.from(n[c].type.create(n[c].attrs, s));
  t.step(new Ue(e.start - (r ? 2 : 0), e.end, e.start, e.end, new B(s, 0, 0), n.length, !0));
  let o = 0;
  for (let c = 0; c < n.length; c++)
    n[c].type == i && (o = c + 1);
  let a = n.length - o, l = e.start + n.length - (r ? 2 : 0), u = e.parent;
  for (let c = e.startIndex, d = e.endIndex, f = !0; c < d; c++, f = !1)
    !f && Jr(t.doc, l, a) && (t.split(l, a), l += 2 * a), l += u.child(c).nodeSize;
  return t;
}
function qy(t) {
  return function(e, n) {
    let { $from: r, $to: i } = e.selection, s = r.blockRange(i, (o) => o.childCount > 0 && o.firstChild.type == t);
    return s ? n ? r.node(s.depth - 1).type == t ? Zy(e, n, t, s) : Ky(e, n, s) : !0 : !1;
  };
}
function Zy(t, e, n, r) {
  let i = t.tr, s = r.end, o = r.$to.end(r.depth);
  s < o && (i.step(new Ue(s - 1, o, s, o, new B(O.from(n.create(null, r.parent.copy())), 1, 0), 1, !0)), r = new mo(i.doc.resolve(r.$from.pos), i.doc.resolve(o), r.depth));
  const a = gi(r);
  if (a == null)
    return !1;
  i.lift(r, a);
  let l = i.mapping.map(s, -1) - 1;
  return jn(i.doc, l) && i.join(l), e(i.scrollIntoView()), !0;
}
function Ky(t, e, n) {
  let r = t.tr, i = n.parent;
  for (let h = n.end, p = n.endIndex - 1, g = n.startIndex; p > g; p--)
    h -= i.child(p).nodeSize, r.delete(h - 1, h + 1);
  let s = r.doc.resolve(n.start), o = s.nodeAfter;
  if (r.mapping.map(n.end) != n.start + s.nodeAfter.nodeSize)
    return !1;
  let a = n.startIndex == 0, l = n.endIndex == i.childCount, u = s.node(-1), c = s.index(-1);
  if (!u.canReplace(c + (a ? 0 : 1), c + 1, o.content.append(l ? O.empty : O.from(i))))
    return !1;
  let d = s.pos, f = d + o.nodeSize;
  return r.step(new Ue(d - (a ? 1 : 0), f + (l ? 1 : 0), d + 1, f - 1, new B((a ? O.empty : O.from(i.copy(O.empty))).append(l ? O.empty : O.from(i.copy(O.empty))), a ? 0 : 1, l ? 0 : 1), a ? 0 : 1)), e(r.scrollIntoView()), !0;
}
function Wy(t) {
  return function(e, n) {
    let { $from: r, $to: i } = e.selection, s = r.blockRange(i, (u) => u.childCount > 0 && u.firstChild.type == t);
    if (!s)
      return !1;
    let o = s.startIndex;
    if (o == 0)
      return !1;
    let a = s.parent, l = a.child(o - 1);
    if (l.type != t)
      return !1;
    if (n) {
      let u = l.lastChild && l.lastChild.type == a.type, c = O.from(u ? t.create() : null), d = new B(O.from(t.create(null, O.from(a.type.create(null, c)))), u ? 3 : 1, 0), f = s.start, h = s.end;
      n(e.tr.step(new Ue(f - (u ? 3 : 1), h, f, h, d, 1, !0)).scrollIntoView());
    }
    return !0;
  };
}
function ma(t) {
  const { state: e, transaction: n } = t;
  let { selection: r } = n, { doc: i } = n, { storedMarks: s } = n;
  return {
    ...e,
    apply: e.apply.bind(e),
    applyTransaction: e.applyTransaction.bind(e),
    plugins: e.plugins,
    schema: e.schema,
    reconfigure: e.reconfigure.bind(e),
    toJSON: e.toJSON.bind(e),
    get storedMarks() {
      return s;
    },
    get selection() {
      return r;
    },
    get doc() {
      return i;
    },
    get tr() {
      return r = n.selection, i = n.doc, s = n.storedMarks, n;
    }
  };
}
class ba {
  constructor(e) {
    this.editor = e.editor, this.rawCommands = this.editor.extensionManager.commands, this.customState = e.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands: e, editor: n, state: r } = this, { view: i } = n, { tr: s } = r, o = this.buildProps(s);
    return Object.fromEntries(Object.entries(e).map(([a, l]) => [a, (...c) => {
      const d = l(...c)(o);
      return !s.getMeta("preventDispatch") && !this.hasCustomState && i.dispatch(s), d;
    }]));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(e, n = !0) {
    const { rawCommands: r, editor: i, state: s } = this, { view: o } = i, a = [], l = !!e, u = e || s.tr, c = () => (!l && n && !u.getMeta("preventDispatch") && !this.hasCustomState && o.dispatch(u), a.every((f) => f === !0)), d = {
      ...Object.fromEntries(Object.entries(r).map(([f, h]) => [f, (...g) => {
        const m = this.buildProps(u, n), y = h(...g)(m);
        return a.push(y), d;
      }])),
      run: c
    };
    return d;
  }
  createCan(e) {
    const { rawCommands: n, state: r } = this, i = !1, s = e || r.tr, o = this.buildProps(s, i);
    return {
      ...Object.fromEntries(Object.entries(n).map(([l, u]) => [l, (...c) => u(...c)({ ...o, dispatch: void 0 })])),
      chain: () => this.createChain(s, i)
    };
  }
  buildProps(e, n = !0) {
    const { rawCommands: r, editor: i, state: s } = this, { view: o } = i, a = {
      tr: e,
      editor: i,
      view: o,
      state: ma({
        state: s,
        transaction: e
      }),
      dispatch: n ? () => {
      } : void 0,
      chain: () => this.createChain(e, n),
      can: () => this.createCan(e),
      get commands() {
        return Object.fromEntries(Object.entries(r).map(([l, u]) => [l, (...c) => u(...c)(a)]));
      }
    };
    return a;
  }
}
let jy = class {
  constructor() {
    this.callbacks = {};
  }
  on(e, n) {
    return this.callbacks[e] || (this.callbacks[e] = []), this.callbacks[e].push(n), this;
  }
  emit(e, ...n) {
    const r = this.callbacks[e];
    return r && r.forEach((i) => i.apply(this, n)), this;
  }
  off(e, n) {
    const r = this.callbacks[e];
    return r && (n ? this.callbacks[e] = r.filter((i) => i !== n) : delete this.callbacks[e]), this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
};
function Z(t, e, n) {
  return t.config[e] === void 0 && t.parent ? Z(t.parent, e, n) : typeof t.config[e] == "function" ? t.config[e].bind({
    ...n,
    parent: t.parent ? Z(t.parent, e, n) : null
  }) : t.config[e];
}
function ya(t) {
  const e = t.filter((i) => i.type === "extension"), n = t.filter((i) => i.type === "node"), r = t.filter((i) => i.type === "mark");
  return {
    baseExtensions: e,
    nodeExtensions: n,
    markExtensions: r
  };
}
function Z0(t) {
  const e = [], { nodeExtensions: n, markExtensions: r } = ya(t), i = [...n, ...r], s = {
    default: null,
    rendered: !0,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: !0,
    isRequired: !1
  };
  return t.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = Z(o, "addGlobalAttributes", a);
    if (!l)
      return;
    l().forEach((c) => {
      c.types.forEach((d) => {
        Object.entries(c.attributes).forEach(([f, h]) => {
          e.push({
            type: d,
            name: f,
            attribute: {
              ...s,
              ...h
            }
          });
        });
      });
    });
  }), i.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = Z(o, "addAttributes", a);
    if (!l)
      return;
    const u = l();
    Object.entries(u).forEach(([c, d]) => {
      const f = {
        ...s,
        ...d
      };
      typeof (f == null ? void 0 : f.default) == "function" && (f.default = f.default()), f != null && f.isRequired && (f == null ? void 0 : f.default) === void 0 && delete f.default, e.push({
        type: o.name,
        name: c,
        attribute: f
      });
    });
  }), e;
}
function Ze(t, e) {
  if (typeof t == "string") {
    if (!e.nodes[t])
      throw Error(`There is no node type named '${t}'. Maybe you forgot to add the extension?`);
    return e.nodes[t];
  }
  return t;
}
function le(...t) {
  return t.filter((e) => !!e).reduce((e, n) => {
    const r = { ...e };
    return Object.entries(n).forEach(([i, s]) => {
      if (!r[i]) {
        r[i] = s;
        return;
      }
      if (i === "class") {
        const a = s ? s.split(" ") : [], l = r[i] ? r[i].split(" ") : [], u = a.filter((c) => !l.includes(c));
        r[i] = [...l, ...u].join(" ");
      } else
        i === "style" ? r[i] = [r[i], s].join("; ") : r[i] = s;
    }), r;
  }, {});
}
function du(t, e) {
  return e.filter((n) => n.attribute.rendered).map((n) => n.attribute.renderHTML ? n.attribute.renderHTML(t.attrs) || {} : {
    [n.name]: t.attrs[n.name]
  }).reduce((n, r) => le(n, r), {});
}
function K0(t) {
  return typeof t == "function";
}
function oe(t, e = void 0, ...n) {
  return K0(t) ? e ? t.bind(e)(...n) : t(...n) : t;
}
function Gy(t = {}) {
  return Object.keys(t).length === 0 && t.constructor === Object;
}
function Jy(t) {
  return typeof t != "string" ? t : t.match(/^[+-]?(?:\d*\.)?\d+$/) ? Number(t) : t === "true" ? !0 : t === "false" ? !1 : t;
}
function Yd(t, e) {
  return t.style ? t : {
    ...t,
    getAttrs: (n) => {
      const r = t.getAttrs ? t.getAttrs(n) : t.attrs;
      if (r === !1)
        return !1;
      const i = e.reduce((s, o) => {
        const a = o.attribute.parseHTML ? o.attribute.parseHTML(n) : Jy(n.getAttribute(o.name));
        return a == null ? s : {
          ...s,
          [o.name]: a
        };
      }, {});
      return { ...r, ...i };
    }
  };
}
function Xd(t) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(t).filter(([e, n]) => e === "attrs" && Gy(n) ? !1 : n != null)
  );
}
function Yy(t, e) {
  var n;
  const r = Z0(t), { nodeExtensions: i, markExtensions: s } = ya(t), o = (n = i.find((u) => Z(u, "topNode"))) === null || n === void 0 ? void 0 : n.name, a = Object.fromEntries(i.map((u) => {
    const c = r.filter((y) => y.type === u.name), d = {
      name: u.name,
      options: u.options,
      storage: u.storage,
      editor: e
    }, f = t.reduce((y, x) => {
      const k = Z(x, "extendNodeSchema", d);
      return {
        ...y,
        ...k ? k(u) : {}
      };
    }, {}), h = Xd({
      ...f,
      content: oe(Z(u, "content", d)),
      marks: oe(Z(u, "marks", d)),
      group: oe(Z(u, "group", d)),
      inline: oe(Z(u, "inline", d)),
      atom: oe(Z(u, "atom", d)),
      selectable: oe(Z(u, "selectable", d)),
      draggable: oe(Z(u, "draggable", d)),
      code: oe(Z(u, "code", d)),
      defining: oe(Z(u, "defining", d)),
      isolating: oe(Z(u, "isolating", d)),
      attrs: Object.fromEntries(c.map((y) => {
        var x;
        return [y.name, { default: (x = y == null ? void 0 : y.attribute) === null || x === void 0 ? void 0 : x.default }];
      }))
    }), p = oe(Z(u, "parseHTML", d));
    p && (h.parseDOM = p.map((y) => Yd(y, c)));
    const g = Z(u, "renderHTML", d);
    g && (h.toDOM = (y) => g({
      node: y,
      HTMLAttributes: du(y, c)
    }));
    const m = Z(u, "renderText", d);
    return m && (h.toText = m), [u.name, h];
  })), l = Object.fromEntries(s.map((u) => {
    const c = r.filter((m) => m.type === u.name), d = {
      name: u.name,
      options: u.options,
      storage: u.storage,
      editor: e
    }, f = t.reduce((m, y) => {
      const x = Z(y, "extendMarkSchema", d);
      return {
        ...m,
        ...x ? x(u) : {}
      };
    }, {}), h = Xd({
      ...f,
      inclusive: oe(Z(u, "inclusive", d)),
      excludes: oe(Z(u, "excludes", d)),
      group: oe(Z(u, "group", d)),
      spanning: oe(Z(u, "spanning", d)),
      code: oe(Z(u, "code", d)),
      attrs: Object.fromEntries(c.map((m) => {
        var y;
        return [m.name, { default: (y = m == null ? void 0 : m.attribute) === null || y === void 0 ? void 0 : y.default }];
      }))
    }), p = oe(Z(u, "parseHTML", d));
    p && (h.parseDOM = p.map((m) => Yd(m, c)));
    const g = Z(u, "renderHTML", d);
    return g && (h.toDOM = (m) => g({
      mark: m,
      HTMLAttributes: du(m, c)
    })), [u.name, h];
  }));
  return new Up({
    topNode: o,
    nodes: a,
    marks: l
  });
}
function cl(t, e) {
  return e.nodes[t] || e.marks[t] || null;
}
function Qd(t, e) {
  return Array.isArray(e) ? e.some((n) => (typeof n == "string" ? n : n.name) === t.name) : e;
}
const Xy = (t, e = 500) => {
  let n = "";
  const r = t.parentOffset;
  return t.parent.nodesBetween(Math.max(0, r - e), r, (i, s, o, a) => {
    var l, u;
    const c = ((u = (l = i.type.spec).toText) === null || u === void 0 ? void 0 : u.call(l, {
      node: i,
      pos: s,
      parent: o,
      index: a
    })) || i.textContent || "%leaf%";
    n += c.slice(0, Math.max(0, r - s));
  }), n;
};
function tc(t) {
  return Object.prototype.toString.call(t) === "[object RegExp]";
}
class ys {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const Qy = (t, e) => {
  if (tc(e))
    return e.exec(t);
  const n = e(t);
  if (!n)
    return null;
  const r = [n.text];
  return r.index = n.index, r.input = t, r.data = n.data, n.replaceWith && (n.text.includes(n.replaceWith) || console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'), r.push(n.replaceWith)), r;
};
function Is(t) {
  var e;
  const { editor: n, from: r, to: i, text: s, rules: o, plugin: a } = t, { view: l } = n;
  if (l.composing)
    return !1;
  const u = l.state.doc.resolve(r);
  if (
    // check for code node
    u.parent.type.spec.code || !((e = u.nodeBefore || u.nodeAfter) === null || e === void 0) && e.marks.find((f) => f.type.spec.code)
  )
    return !1;
  let c = !1;
  const d = Xy(u) + s;
  return o.forEach((f) => {
    if (c)
      return;
    const h = Qy(d, f.find);
    if (!h)
      return;
    const p = l.state.tr, g = ma({
      state: l.state,
      transaction: p
    }), m = {
      from: r - (h[0].length - s.length),
      to: i
    }, { commands: y, chain: x, can: k } = new ba({
      editor: n,
      state: g
    });
    f.handler({
      state: g,
      range: m,
      match: h,
      commands: y,
      chain: x,
      can: k
    }) === null || !p.steps.length || (p.setMeta(a, {
      transform: p,
      from: r,
      to: i,
      text: s
    }), l.dispatch(p), c = !0);
  }), c;
}
function ex(t) {
  const { editor: e, rules: n } = t, r = new we({
    state: {
      init() {
        return null;
      },
      apply(i, s) {
        const o = i.getMeta(r);
        if (o)
          return o;
        const a = i.getMeta("applyInputRules");
        return !!a && setTimeout(() => {
          const { from: u, text: c } = a, d = u + c.length;
          Is({
            editor: e,
            from: u,
            to: d,
            text: c,
            rules: n,
            plugin: r
          });
        }), i.selectionSet || i.docChanged ? null : s;
      }
    },
    props: {
      handleTextInput(i, s, o, a) {
        return Is({
          editor: e,
          from: s,
          to: o,
          text: a,
          rules: n,
          plugin: r
        });
      },
      handleDOMEvents: {
        compositionend: (i) => (setTimeout(() => {
          const { $cursor: s } = i.state.selection;
          s && Is({
            editor: e,
            from: s.pos,
            to: s.pos,
            text: "",
            rules: n,
            plugin: r
          });
        }), !1)
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(i, s) {
        if (s.key !== "Enter")
          return !1;
        const { $cursor: o } = i.state.selection;
        return o ? Is({
          editor: e,
          from: o.pos,
          to: o.pos,
          text: `
`,
          rules: n,
          plugin: r
        }) : !1;
      }
    },
    // @ts-ignore
    isInputRules: !0
  });
  return r;
}
function tx(t) {
  return typeof t == "number";
}
class nx {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const rx = (t, e, n) => {
  if (tc(e))
    return [...t.matchAll(e)];
  const r = e(t, n);
  return r ? r.map((i) => {
    const s = [i.text];
    return s.index = i.index, s.input = t, s.data = i.data, i.replaceWith && (i.text.includes(i.replaceWith) || console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'), s.push(i.replaceWith)), s;
  }) : [];
};
function ix(t) {
  const { editor: e, state: n, from: r, to: i, rule: s, pasteEvent: o, dropEvent: a } = t, { commands: l, chain: u, can: c } = new ba({
    editor: e,
    state: n
  }), d = [];
  return n.doc.nodesBetween(r, i, (h, p) => {
    if (!h.isTextblock || h.type.spec.code)
      return;
    const g = Math.max(r, p), m = Math.min(i, p + h.content.size), y = h.textBetween(g - p, m - p, void 0, "￼");
    rx(y, s.find, o).forEach((k) => {
      if (k.index === void 0)
        return;
      const b = g + k.index + 1, E = b + k[0].length, v = {
        from: n.tr.mapping.map(b),
        to: n.tr.mapping.map(E)
      }, _ = s.handler({
        state: n,
        range: v,
        match: k,
        commands: l,
        chain: u,
        can: c,
        pasteEvent: o,
        dropEvent: a
      });
      d.push(_);
    });
  }), d.every((h) => h !== null);
}
const sx = (t) => {
  var e;
  const n = new ClipboardEvent("paste", {
    clipboardData: new DataTransfer()
  });
  return (e = n.clipboardData) === null || e === void 0 || e.setData("text/html", t), n;
};
function ox(t) {
  const { editor: e, rules: n } = t;
  let r = null, i = !1, s = !1, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
  const l = ({ state: c, from: d, to: f, rule: h, pasteEvt: p }) => {
    const g = c.tr, m = ma({
      state: c,
      transaction: g
    });
    if (!(!ix({
      editor: e,
      state: m,
      from: Math.max(d - 1, 0),
      to: f.b - 1,
      rule: h,
      pasteEvent: p,
      dropEvent: a
    }) || !g.steps.length))
      return a = typeof DragEvent < "u" ? new DragEvent("drop") : null, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, g;
  };
  return n.map((c) => new we({
    // we register a global drag handler to track the current drag source element
    view(d) {
      const f = (h) => {
        var p;
        r = !((p = d.dom.parentElement) === null || p === void 0) && p.contains(h.target) ? d.dom.parentElement : null;
      };
      return window.addEventListener("dragstart", f), {
        destroy() {
          window.removeEventListener("dragstart", f);
        }
      };
    },
    props: {
      handleDOMEvents: {
        drop: (d, f) => (s = r === d.dom.parentElement, a = f, !1),
        paste: (d, f) => {
          var h;
          const p = (h = f.clipboardData) === null || h === void 0 ? void 0 : h.getData("text/html");
          return o = f, i = !!(p != null && p.includes("data-pm-slice")), !1;
        }
      }
    },
    appendTransaction: (d, f, h) => {
      const p = d[0], g = p.getMeta("uiEvent") === "paste" && !i, m = p.getMeta("uiEvent") === "drop" && !s, y = p.getMeta("applyPasteRules"), x = !!y;
      if (!g && !m && !x)
        return;
      if (x) {
        const { from: E, text: v } = y, _ = E + v.length, T = sx(v);
        return l({
          rule: c,
          state: h,
          from: E,
          to: { b: _ },
          pasteEvt: T
        });
      }
      const k = f.doc.content.findDiffStart(h.doc.content), b = f.doc.content.findDiffEnd(h.doc.content);
      if (!(!tx(k) || !b || k === b.b))
        return l({
          rule: c,
          state: h,
          from: k,
          to: b,
          pasteEvt: o
        });
    }
  }));
}
function ax(t) {
  const e = t.filter((n, r) => t.indexOf(n) !== r);
  return [...new Set(e)];
}
class Zr {
  constructor(e, n) {
    this.splittableMarks = [], this.editor = n, this.extensions = Zr.resolve(e), this.schema = Yy(this.extensions, n), this.setupExtensions();
  }
  /**
   * Returns a flattened and sorted extension list while
   * also checking for duplicated extensions and warns the user.
   * @param extensions An array of Tiptap extensions
   * @returns An flattened and sorted array of Tiptap extensions
   */
  static resolve(e) {
    const n = Zr.sort(Zr.flatten(e)), r = ax(n.map((i) => i.name));
    return r.length && console.warn(`[tiptap warn]: Duplicate extension names found: [${r.map((i) => `'${i}'`).join(", ")}]. This can lead to issues.`), n;
  }
  /**
   * Create a flattened array of extensions by traversing the `addExtensions` field.
   * @param extensions An array of Tiptap extensions
   * @returns A flattened array of Tiptap extensions
   */
  static flatten(e) {
    return e.map((n) => {
      const r = {
        name: n.name,
        options: n.options,
        storage: n.storage
      }, i = Z(n, "addExtensions", r);
      return i ? [n, ...this.flatten(i())] : n;
    }).flat(10);
  }
  /**
   * Sort extensions by priority.
   * @param extensions An array of Tiptap extensions
   * @returns A sorted array of Tiptap extensions by priority
   */
  static sort(e) {
    return e.sort((r, i) => {
      const s = Z(r, "priority") || 100, o = Z(i, "priority") || 100;
      return s > o ? -1 : s < o ? 1 : 0;
    });
  }
  /**
   * Get all commands from the extensions.
   * @returns An object with all commands where the key is the command name and the value is the command function
   */
  get commands() {
    return this.extensions.reduce((e, n) => {
      const r = {
        name: n.name,
        options: n.options,
        storage: n.storage,
        editor: this.editor,
        type: cl(n.name, this.schema)
      }, i = Z(n, "addCommands", r);
      return i ? {
        ...e,
        ...i()
      } : e;
    }, {});
  }
  /**
   * Get all registered Prosemirror plugins from the extensions.
   * @returns An array of Prosemirror plugins
   */
  get plugins() {
    const { editor: e } = this, n = Zr.sort([...this.extensions].reverse()), r = [], i = [], s = n.map((o) => {
      const a = {
        name: o.name,
        options: o.options,
        storage: o.storage,
        editor: e,
        type: cl(o.name, this.schema)
      }, l = [], u = Z(o, "addKeyboardShortcuts", a);
      let c = {};
      if (o.type === "mark" && o.config.exitable && (c.ArrowRight = () => Ie.handleExit({ editor: e, mark: o })), u) {
        const g = Object.fromEntries(Object.entries(u()).map(([m, y]) => [m, () => y({ editor: e })]));
        c = { ...c, ...g };
      }
      const d = Ey(c);
      l.push(d);
      const f = Z(o, "addInputRules", a);
      Qd(o, e.options.enableInputRules) && f && r.push(...f());
      const h = Z(o, "addPasteRules", a);
      Qd(o, e.options.enablePasteRules) && h && i.push(...h());
      const p = Z(o, "addProseMirrorPlugins", a);
      if (p) {
        const g = p();
        l.push(...g);
      }
      return l;
    }).flat();
    return [
      ex({
        editor: e,
        rules: r
      }),
      ...ox({
        editor: e,
        rules: i
      }),
      ...s
    ];
  }
  /**
   * Get all attributes from the extensions.
   * @returns An array of attributes
   */
  get attributes() {
    return Z0(this.extensions);
  }
  /**
   * Get all node views from the extensions.
   * @returns An object with all node views where the key is the node name and the value is the node view function
   */
  get nodeViews() {
    const { editor: e } = this, { nodeExtensions: n } = ya(this.extensions);
    return Object.fromEntries(n.filter((r) => !!Z(r, "addNodeView")).map((r) => {
      const i = this.attributes.filter((l) => l.type === r.name), s = {
        name: r.name,
        options: r.options,
        storage: r.storage,
        editor: e,
        type: Ze(r.name, this.schema)
      }, o = Z(r, "addNodeView", s);
      if (!o)
        return [];
      const a = (l, u, c, d) => {
        const f = du(l, i);
        return o()({
          editor: e,
          node: l,
          getPos: c,
          decorations: d,
          HTMLAttributes: f,
          extension: r
        });
      };
      return [r.name, a];
    }));
  }
  /**
   * Go through all extensions, create extension storages & setup marks
   * & bind editor event listener.
   */
  setupExtensions() {
    this.extensions.forEach((e) => {
      var n;
      this.editor.extensionStorage[e.name] = e.storage;
      const r = {
        name: e.name,
        options: e.options,
        storage: e.storage,
        editor: this.editor,
        type: cl(e.name, this.schema)
      };
      e.type === "mark" && (!((n = oe(Z(e, "keepOnSplit", r))) !== null && n !== void 0) || n) && this.splittableMarks.push(e.name);
      const i = Z(e, "onBeforeCreate", r), s = Z(e, "onCreate", r), o = Z(e, "onUpdate", r), a = Z(e, "onSelectionUpdate", r), l = Z(e, "onTransaction", r), u = Z(e, "onFocus", r), c = Z(e, "onBlur", r), d = Z(e, "onDestroy", r);
      i && this.editor.on("beforeCreate", i), s && this.editor.on("create", s), o && this.editor.on("update", o), a && this.editor.on("selectionUpdate", a), l && this.editor.on("transaction", l), u && this.editor.on("focus", u), c && this.editor.on("blur", c), d && this.editor.on("destroy", d);
    });
  }
}
function lx(t) {
  return Object.prototype.toString.call(t).slice(8, -1);
}
function dl(t) {
  return lx(t) !== "Object" ? !1 : t.constructor === Object && Object.getPrototypeOf(t) === Object.prototype;
}
function xa(t, e) {
  const n = { ...t };
  return dl(t) && dl(e) && Object.keys(e).forEach((r) => {
    dl(e[r]) ? r in t ? n[r] = xa(t[r], e[r]) : Object.assign(n, { [r]: e[r] }) : Object.assign(n, { [r]: e[r] });
  }), n;
}
class xe {
  constructor(e = {}) {
    this.type = "extension", this.name = "extension", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = oe(Z(this, "addOptions", {
      name: this.name
    }))), this.storage = oe(Z(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new xe(e);
  }
  configure(e = {}) {
    const n = this.extend();
    return n.parent = this.parent, n.options = xa(this.options, e), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
  extend(e = {}) {
    const n = new xe({ ...this.config, ...e });
    return n.parent = this, this.child = n, n.name = e.name ? e.name : n.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${n.name}".`), n.options = oe(Z(n, "addOptions", {
      name: n.name
    })), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
}
function ka(t, e, n) {
  const { from: r, to: i } = e, { blockSeparator: s = `

`, textSerializers: o = {} } = n || {};
  let a = "";
  return t.nodesBetween(r, i, (l, u, c, d) => {
    var f;
    l.isBlock && u > r && (a += s);
    const h = o == null ? void 0 : o[l.type.name];
    if (h)
      return c && (a += h({
        node: l,
        pos: u,
        parent: c,
        index: d,
        range: e
      })), !1;
    l.isText && (a += (f = l == null ? void 0 : l.text) === null || f === void 0 ? void 0 : f.slice(Math.max(r, u) - u, i - u));
  }), a;
}
function W0(t) {
  return Object.fromEntries(Object.entries(t.nodes).filter(([, e]) => e.spec.toText).map(([e, n]) => [e, n.spec.toText]));
}
const j0 = xe.create({
  name: "clipboardTextSerializer",
  addOptions() {
    return {
      blockSeparator: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor: t } = this, { state: e, schema: n } = t, { doc: r, selection: i } = e, { ranges: s } = i, o = Math.min(...s.map((c) => c.$from.pos)), a = Math.max(...s.map((c) => c.$to.pos)), l = W0(n);
            return ka(r, { from: o, to: a }, {
              ...this.options.blockSeparator !== void 0 ? { blockSeparator: this.options.blockSeparator } : {},
              textSerializers: l
            });
          }
        }
      })
    ];
  }
}), ux = () => ({ editor: t, view: e }) => (requestAnimationFrame(() => {
  var n;
  t.isDestroyed || (e.dom.blur(), (n = window == null ? void 0 : window.getSelection()) === null || n === void 0 || n.removeAllRanges());
}), !0), cx = (t = !1) => ({ commands: e }) => e.setContent("", t), dx = () => ({ state: t, tr: e, dispatch: n }) => {
  const { selection: r } = e, { ranges: i } = r;
  return n && i.forEach(({ $from: s, $to: o }) => {
    t.doc.nodesBetween(s.pos, o.pos, (a, l) => {
      if (a.type.isText)
        return;
      const { doc: u, mapping: c } = e, d = u.resolve(c.map(l)), f = u.resolve(c.map(l + a.nodeSize)), h = d.blockRange(f);
      if (!h)
        return;
      const p = gi(h);
      if (a.type.isTextblock) {
        const { defaultType: g } = d.parent.contentMatchAt(d.index());
        e.setNodeMarkup(h.start, g);
      }
      (p || p === 0) && e.lift(h, p);
    });
  }), !0;
}, fx = (t) => (e) => t(e), hx = () => ({ state: t, dispatch: e }) => Iy(t, e), px = (t, e) => ({ editor: n, tr: r }) => {
  const { state: i } = n, s = i.doc.slice(t.from, t.to);
  r.deleteRange(t.from, t.to);
  const o = r.mapping.map(e);
  return r.insert(o, s.content), r.setSelection(new X(r.doc.resolve(o - 1))), !0;
}, gx = () => ({ tr: t, dispatch: e }) => {
  const { selection: n } = t, r = n.$anchor.node();
  if (r.content.size > 0)
    return !1;
  const i = t.selection.$anchor;
  for (let s = i.depth; s > 0; s -= 1)
    if (i.node(s).type === r.type) {
      if (e) {
        const a = i.before(s), l = i.after(s);
        t.delete(a, l).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, mx = (t) => ({ tr: e, state: n, dispatch: r }) => {
  const i = Ze(t, n.schema), s = e.selection.$anchor;
  for (let o = s.depth; o > 0; o -= 1)
    if (s.node(o).type === i) {
      if (r) {
        const l = s.before(o), u = s.after(o);
        e.delete(l, u).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, bx = (t) => ({ tr: e, dispatch: n }) => {
  const { from: r, to: i } = t;
  return n && e.delete(r, i), !0;
}, yx = () => ({ state: t, dispatch: e }) => Cy(t, e), xx = () => ({ commands: t }) => t.keyboardShortcut("Enter"), kx = () => ({ state: t, dispatch: e }) => Ry(t, e);
function ii(t, e, n = { strict: !0 }) {
  const r = Object.keys(e);
  return r.length ? r.every((i) => n.strict ? e[i] === t[i] : tc(e[i]) ? e[i].test(t[i]) : e[i] === t[i]) : !0;
}
function fu(t, e, n = {}) {
  return t.find((r) => r.type === e && ii(r.attrs, n));
}
function vx(t, e, n = {}) {
  return !!fu(t, e, n);
}
function nc(t, e, n = {}) {
  if (!t || !e)
    return;
  let r = t.parent.childAfter(t.parentOffset);
  if (t.parentOffset === r.offset && r.offset !== 0 && (r = t.parent.childBefore(t.parentOffset)), !r.node)
    return;
  const i = fu([...r.node.marks], e, n);
  if (!i)
    return;
  let s = r.index, o = t.start() + r.offset, a = s + 1, l = o + r.node.nodeSize;
  for (fu([...r.node.marks], e, n); s > 0 && i.isInSet(t.parent.child(s - 1).marks); )
    s -= 1, o -= t.parent.child(s).nodeSize;
  for (; a < t.parent.childCount && vx([...t.parent.child(a).marks], e, n); )
    l += t.parent.child(a).nodeSize, a += 1;
  return {
    from: o,
    to: l
  };
}
function En(t, e) {
  if (typeof t == "string") {
    if (!e.marks[t])
      throw Error(`There is no mark type named '${t}'. Maybe you forgot to add the extension?`);
    return e.marks[t];
  }
  return t;
}
const Ex = (t, e = {}) => ({ tr: n, state: r, dispatch: i }) => {
  const s = En(t, r.schema), { doc: o, selection: a } = n, { $from: l, from: u, to: c } = a;
  if (i) {
    const d = nc(l, s, e);
    if (d && d.from <= u && d.to >= c) {
      const f = X.create(o, d.from, d.to);
      n.setSelection(f);
    }
  }
  return !0;
}, Cx = (t) => (e) => {
  const n = typeof t == "function" ? t(e) : t;
  for (let r = 0; r < n.length; r += 1)
    if (n[r](e))
      return !0;
  return !1;
};
function rc(t) {
  return t instanceof X;
}
function xn(t = 0, e = 0, n = 0) {
  return Math.min(Math.max(t, e), n);
}
function G0(t, e = null) {
  if (!e)
    return null;
  const n = ne.atStart(t), r = ne.atEnd(t);
  if (e === "start" || e === !0)
    return n;
  if (e === "end")
    return r;
  const i = n.from, s = r.to;
  return e === "all" ? X.create(t, xn(0, i, s), xn(t.content.size, i, s)) : X.create(t, xn(e, i, s), xn(e, i, s));
}
function ic() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const _x = (t = null, e = {}) => ({ editor: n, view: r, tr: i, dispatch: s }) => {
  e = {
    scrollIntoView: !0,
    ...e
  };
  const o = () => {
    ic() && r.dom.focus(), requestAnimationFrame(() => {
      n.isDestroyed || (r.focus(), e != null && e.scrollIntoView && n.commands.scrollIntoView());
    });
  };
  if (r.hasFocus() && t === null || t === !1)
    return !0;
  if (s && t === null && !rc(n.state.selection))
    return o(), !0;
  const a = G0(i.doc, t) || n.state.selection, l = n.state.selection.eq(a);
  return s && (l || i.setSelection(a), l && i.storedMarks && i.setStoredMarks(i.storedMarks), o()), !0;
}, wx = (t, e) => (n) => t.every((r, i) => e(r, { ...n, index: i })), Sx = (t, e) => ({ tr: n, commands: r }) => r.insertContentAt({ from: n.selection.from, to: n.selection.to }, t, e), J0 = (t) => {
  const e = t.childNodes;
  for (let n = e.length - 1; n >= 0; n -= 1) {
    const r = e[n];
    r.nodeType === 3 && r.nodeValue && /^(\n\s\s|\n)$/.test(r.nodeValue) ? t.removeChild(r) : r.nodeType === 1 && J0(r);
  }
  return t;
};
function ef(t) {
  const e = `<body>${t}</body>`, n = new window.DOMParser().parseFromString(e, "text/html").body;
  return J0(n);
}
function wo(t, e, n) {
  n = {
    slice: !0,
    parseOptions: {},
    ...n
  };
  const r = typeof t == "object" && t !== null, i = typeof t == "string";
  if (r)
    try {
      return Array.isArray(t) && t.length > 0 ? O.fromArray(t.map((o) => e.nodeFromJSON(o))) : e.nodeFromJSON(t);
    } catch (s) {
      return console.warn("[tiptap warn]: Invalid content.", "Passed value:", t, "Error:", s), wo("", e, n);
    }
  if (i) {
    const s = ps.fromSchema(e);
    return n.slice ? s.parseSlice(ef(t), n.parseOptions).content : s.parse(ef(t), n.parseOptions);
  }
  return wo("", e, n);
}
function Ax(t, e, n) {
  const r = t.steps.length - 1;
  if (r < e)
    return;
  const i = t.steps[r];
  if (!(i instanceof ze || i instanceof Ue))
    return;
  const s = t.mapping.maps[r];
  let o = 0;
  s.forEach((a, l, u, c) => {
    o === 0 && (o = c);
  }), t.setSelection(ne.near(t.doc.resolve(o), n));
}
const Mx = (t) => t.toString().startsWith("<"), Tx = (t, e, n) => ({ tr: r, dispatch: i, editor: s }) => {
  if (i) {
    n = {
      parseOptions: {},
      updateSelection: !0,
      applyInputRules: !1,
      applyPasteRules: !1,
      ...n
    };
    const o = wo(e, s.schema, {
      parseOptions: {
        preserveWhitespace: "full",
        ...n.parseOptions
      }
    });
    if (o.toString() === "<>")
      return !0;
    let { from: a, to: l } = typeof t == "number" ? { from: t, to: t } : { from: t.from, to: t.to }, u = !0, c = !0;
    if ((Mx(o) ? o : [o]).forEach((h) => {
      h.check(), u = u ? h.isText && h.marks.length === 0 : !1, c = c ? h.isBlock : !1;
    }), a === l && c) {
      const { parent: h } = r.doc.resolve(a);
      h.isTextblock && !h.type.spec.code && !h.childCount && (a -= 1, l += 1);
    }
    let f;
    u ? (Array.isArray(e) ? f = e.map((h) => h.text || "").join("") : typeof e == "object" && e && e.text ? f = e.text : f = e, r.insertText(f, a, l)) : (f = o, r.replaceWith(a, l, f)), n.updateSelection && Ax(r, r.steps.length - 1, -1), n.applyInputRules && r.setMeta("applyInputRules", { from: a, text: f }), n.applyPasteRules && r.setMeta("applyPasteRules", { from: a, text: f });
  }
  return !0;
}, Dx = () => ({ state: t, dispatch: e }) => Dy(t, e), Ox = () => ({ state: t, dispatch: e }) => Oy(t, e), Nx = () => ({ state: t, dispatch: e }) => _y(t, e), Lx = () => ({ state: t, dispatch: e }) => My(t, e), Rx = () => ({ tr: t, state: e, dispatch: n }) => {
  try {
    const r = ca(e.doc, e.selection.$from.pos, -1);
    return r == null ? !1 : (t.join(r, 2), n && n(t), !0);
  } catch {
    return !1;
  }
}, Ix = () => ({ state: t, dispatch: e, tr: n }) => {
  try {
    const r = ca(t.doc, t.selection.$from.pos, 1);
    return r == null ? !1 : (n.join(r, 2), e && e(n), !0);
  } catch {
    return !1;
  }
}, Fx = () => ({ state: t, dispatch: e }) => wy(t, e), Hx = () => ({ state: t, dispatch: e }) => Sy(t, e);
function Y0() {
  return typeof navigator < "u" ? /Mac/.test(navigator.platform) : !1;
}
function Bx(t) {
  const e = t.split(/-(?!$)/);
  let n = e[e.length - 1];
  n === "Space" && (n = " ");
  let r, i, s, o;
  for (let a = 0; a < e.length - 1; a += 1) {
    const l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      i = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      ic() || Y0() ? o = !0 : i = !0;
    else
      throw new Error(`Unrecognized modifier name: ${l}`);
  }
  return r && (n = `Alt-${n}`), i && (n = `Ctrl-${n}`), o && (n = `Meta-${n}`), s && (n = `Shift-${n}`), n;
}
const Px = (t) => ({ editor: e, view: n, tr: r, dispatch: i }) => {
  const s = Bx(t).split(/-(?!$)/), o = s.find((u) => !["Alt", "Ctrl", "Meta", "Shift"].includes(u)), a = new KeyboardEvent("keydown", {
    key: o === "Space" ? " " : o,
    altKey: s.includes("Alt"),
    ctrlKey: s.includes("Ctrl"),
    metaKey: s.includes("Meta"),
    shiftKey: s.includes("Shift"),
    bubbles: !0,
    cancelable: !0
  }), l = e.captureTransaction(() => {
    n.someProp("handleKeyDown", (u) => u(n, a));
  });
  return l == null || l.steps.forEach((u) => {
    const c = u.map(r.mapping);
    c && i && r.maybeStep(c);
  }), !0;
};
function yr(t, e, n = {}) {
  const { from: r, to: i, empty: s } = t.selection, o = e ? Ze(e, t.schema) : null, a = [];
  t.doc.nodesBetween(r, i, (d, f) => {
    if (d.isText)
      return;
    const h = Math.max(r, f), p = Math.min(i, f + d.nodeSize);
    a.push({
      node: d,
      from: h,
      to: p
    });
  });
  const l = i - r, u = a.filter((d) => o ? o.name === d.node.type.name : !0).filter((d) => ii(d.node.attrs, n, { strict: !1 }));
  return s ? !!u.length : u.reduce((d, f) => d + f.to - f.from, 0) >= l;
}
const $x = (t, e = {}) => ({ state: n, dispatch: r }) => {
  const i = Ze(t, n.schema);
  return yr(n, i, e) ? Ny(n, r) : !1;
}, zx = () => ({ state: t, dispatch: e }) => Fy(t, e), Vx = (t) => ({ state: e, dispatch: n }) => {
  const r = Ze(t, e.schema);
  return qy(r)(e, n);
}, Ux = () => ({ state: t, dispatch: e }) => Ly(t, e);
function va(t, e) {
  return e.nodes[t] ? "node" : e.marks[t] ? "mark" : null;
}
function tf(t, e) {
  const n = typeof e == "string" ? [e] : e;
  return Object.keys(t).reduce((r, i) => (n.includes(i) || (r[i] = t[i]), r), {});
}
const qx = (t, e) => ({ tr: n, state: r, dispatch: i }) => {
  let s = null, o = null;
  const a = va(typeof t == "string" ? t : t.name, r.schema);
  return a ? (a === "node" && (s = Ze(t, r.schema)), a === "mark" && (o = En(t, r.schema)), i && n.selection.ranges.forEach((l) => {
    r.doc.nodesBetween(l.$from.pos, l.$to.pos, (u, c) => {
      s && s === u.type && n.setNodeMarkup(c, void 0, tf(u.attrs, e)), o && u.marks.length && u.marks.forEach((d) => {
        o === d.type && n.addMark(c, c + u.nodeSize, o.create(tf(d.attrs, e)));
      });
    });
  }), !0) : !1;
}, Zx = () => ({ tr: t, dispatch: e }) => (e && t.scrollIntoView(), !0), Kx = () => ({ tr: t, commands: e }) => e.setTextSelection({
  from: 0,
  to: t.doc.content.size
}), Wx = () => ({ state: t, dispatch: e }) => Ay(t, e), jx = () => ({ state: t, dispatch: e }) => Ty(t, e), Gx = () => ({ state: t, dispatch: e }) => Hy(t, e), Jx = () => ({ state: t, dispatch: e }) => $y(t, e), Yx = () => ({ state: t, dispatch: e }) => Py(t, e);
function X0(t, e, n = {}) {
  return wo(t, e, { slice: !1, parseOptions: n });
}
const Xx = (t, e = !1, n = {}) => ({ tr: r, editor: i, dispatch: s }) => {
  const { doc: o } = r, a = X0(t, i.schema, n);
  return s && r.replaceWith(0, o.content.size, a).setMeta("preventUpdate", !e), !0;
};
function xs(t, e) {
  const n = En(e, t.schema), { from: r, to: i, empty: s } = t.selection, o = [];
  s ? (t.storedMarks && o.push(...t.storedMarks), o.push(...t.selection.$head.marks())) : t.doc.nodesBetween(r, i, (l) => {
    o.push(...l.marks);
  });
  const a = o.find((l) => l.type.name === n.name);
  return a ? { ...a.attrs } : {};
}
function Qx(t, e) {
  const n = new Vu(t);
  return e.forEach((r) => {
    r.steps.forEach((i) => {
      n.step(i);
    });
  }), n;
}
function e3(t) {
  for (let e = 0; e < t.edgeCount; e += 1) {
    const { type: n } = t.edge(e);
    if (n.isTextblock && !n.hasRequiredAttrs())
      return n;
  }
  return null;
}
function hu(t, e) {
  const n = [];
  return t.descendants((r, i) => {
    e(r) && n.push({
      node: r,
      pos: i
    });
  }), n;
}
function t3(t, e, n) {
  const r = [];
  return t.nodesBetween(e.from, e.to, (i, s) => {
    n(i) && r.push({
      node: i,
      pos: s
    });
  }), r;
}
function Q0(t, e) {
  for (let n = t.depth; n > 0; n -= 1) {
    const r = t.node(n);
    if (e(r))
      return {
        pos: n > 0 ? t.before(n) : 0,
        start: t.start(n),
        depth: n,
        node: r
      };
  }
}
function Ea(t) {
  return (e) => Q0(e.$from, t);
}
function sc(t, e) {
  const n = Yt.fromSchema(e).serializeFragment(t), i = document.implementation.createHTMLDocument().createElement("div");
  return i.appendChild(n), i.innerHTML;
}
function n3(t, e) {
  const n = {
    from: 0,
    to: t.content.size
  };
  return ka(t, n, e);
}
function r3(t, e) {
  const n = Ze(e, t.schema), { from: r, to: i } = t.selection, s = [];
  t.doc.nodesBetween(r, i, (a) => {
    s.push(a);
  });
  const o = s.reverse().find((a) => a.type.name === n.name);
  return o ? { ...o.attrs } : {};
}
function e1(t, e) {
  const n = va(typeof e == "string" ? e : e.name, t.schema);
  return n === "node" ? r3(t, e) : n === "mark" ? xs(t, e) : {};
}
function i3(t, e = JSON.stringify) {
  const n = {};
  return t.filter((r) => {
    const i = e(r);
    return Object.prototype.hasOwnProperty.call(n, i) ? !1 : n[i] = !0;
  });
}
function s3(t) {
  const e = i3(t);
  return e.length === 1 ? e : e.filter((n, r) => !e.filter((s, o) => o !== r).some((s) => n.oldRange.from >= s.oldRange.from && n.oldRange.to <= s.oldRange.to && n.newRange.from >= s.newRange.from && n.newRange.to <= s.newRange.to));
}
function o3(t) {
  const { mapping: e, steps: n } = t, r = [];
  return e.maps.forEach((i, s) => {
    const o = [];
    if (i.ranges.length)
      i.forEach((a, l) => {
        o.push({ from: a, to: l });
      });
    else {
      const { from: a, to: l } = n[s];
      if (a === void 0 || l === void 0)
        return;
      o.push({ from: a, to: l });
    }
    o.forEach(({ from: a, to: l }) => {
      const u = e.slice(s).map(a, -1), c = e.slice(s).map(l), d = e.invert().map(u, -1), f = e.invert().map(c);
      r.push({
        oldRange: {
          from: d,
          to: f
        },
        newRange: {
          from: u,
          to: c
        }
      });
    });
  }), s3(r);
}
function oc(t, e, n) {
  const r = [];
  return t === e ? n.resolve(t).marks().forEach((i) => {
    const s = n.resolve(t - 1), o = nc(s, i.type);
    o && r.push({
      mark: i,
      ...o
    });
  }) : n.nodesBetween(t, e, (i, s) => {
    !i || (i == null ? void 0 : i.nodeSize) === void 0 || r.push(...i.marks.map((o) => ({
      from: s,
      to: s + i.nodeSize,
      mark: o
    })));
  }), r;
}
function so(t, e, n) {
  return Object.fromEntries(Object.entries(n).filter(([r]) => {
    const i = t.find((s) => s.type === e && s.name === r);
    return i ? i.attribute.keepOnSplit : !1;
  }));
}
function pu(t, e, n = {}) {
  const { empty: r, ranges: i } = t.selection, s = e ? En(e, t.schema) : null;
  if (r)
    return !!(t.storedMarks || t.selection.$from.marks()).filter((d) => s ? s.name === d.type.name : !0).find((d) => ii(d.attrs, n, { strict: !1 }));
  let o = 0;
  const a = [];
  if (i.forEach(({ $from: d, $to: f }) => {
    const h = d.pos, p = f.pos;
    t.doc.nodesBetween(h, p, (g, m) => {
      if (!g.isText && !g.marks.length)
        return;
      const y = Math.max(h, m), x = Math.min(p, m + g.nodeSize), k = x - y;
      o += k, a.push(...g.marks.map((b) => ({
        mark: b,
        from: y,
        to: x
      })));
    });
  }), o === 0)
    return !1;
  const l = a.filter((d) => s ? s.name === d.mark.type.name : !0).filter((d) => ii(d.mark.attrs, n, { strict: !1 })).reduce((d, f) => d + f.to - f.from, 0), u = a.filter((d) => s ? d.mark.type !== s && d.mark.type.excludes(s) : !0).reduce((d, f) => d + f.to - f.from, 0);
  return (l > 0 ? l + u : l) >= o;
}
function a3(t, e, n = {}) {
  if (!e)
    return yr(t, null, n) || pu(t, null, n);
  const r = va(e, t.schema);
  return r === "node" ? yr(t, e, n) : r === "mark" ? pu(t, e, n) : !1;
}
function nf(t, e) {
  const { nodeExtensions: n } = ya(e), r = n.find((o) => o.name === t);
  if (!r)
    return !1;
  const i = {
    name: r.name,
    options: r.options,
    storage: r.storage
  }, s = oe(Z(r, "group", i));
  return typeof s != "string" ? !1 : s.split(" ").includes("list");
}
function l3(t) {
  var e;
  const n = (e = t.type.createAndFill()) === null || e === void 0 ? void 0 : e.toJSON(), r = t.toJSON();
  return JSON.stringify(n) === JSON.stringify(r);
}
function t1(t) {
  return t instanceof ee;
}
function ks(t, e, n) {
  const i = t.state.doc.content.size, s = xn(e, 0, i), o = xn(n, 0, i), a = t.coordsAtPos(s), l = t.coordsAtPos(o, -1), u = Math.min(a.top, l.top), c = Math.max(a.bottom, l.bottom), d = Math.min(a.left, l.left), f = Math.max(a.right, l.right), h = f - d, p = c - u, y = {
    top: u,
    bottom: c,
    left: d,
    right: f,
    width: h,
    height: p,
    x: d,
    y: u
  };
  return {
    ...y,
    toJSON: () => y
  };
}
function u3(t, e, n) {
  var r;
  const { selection: i } = e;
  let s = null;
  if (rc(i) && (s = i.$cursor), s) {
    const a = (r = t.storedMarks) !== null && r !== void 0 ? r : s.marks();
    return !!n.isInSet(a) || !a.some((l) => l.type.excludes(n));
  }
  const { ranges: o } = i;
  return o.some(({ $from: a, $to: l }) => {
    let u = a.depth === 0 ? t.doc.inlineContent && t.doc.type.allowsMarkType(n) : !1;
    return t.doc.nodesBetween(a.pos, l.pos, (c, d, f) => {
      if (u)
        return !1;
      if (c.isInline) {
        const h = !f || f.type.allowsMarkType(n), p = !!n.isInSet(c.marks) || !c.marks.some((g) => g.type.excludes(n));
        u = h && p;
      }
      return !u;
    }), u;
  });
}
const c3 = (t, e = {}) => ({ tr: n, state: r, dispatch: i }) => {
  const { selection: s } = n, { empty: o, ranges: a } = s, l = En(t, r.schema);
  if (i)
    if (o) {
      const u = xs(r, l);
      n.addStoredMark(l.create({
        ...u,
        ...e
      }));
    } else
      a.forEach((u) => {
        const c = u.$from.pos, d = u.$to.pos;
        r.doc.nodesBetween(c, d, (f, h) => {
          const p = Math.max(h, c), g = Math.min(h + f.nodeSize, d);
          f.marks.find((y) => y.type === l) ? f.marks.forEach((y) => {
            l === y.type && n.addMark(p, g, l.create({
              ...y.attrs,
              ...e
            }));
          }) : n.addMark(p, g, l.create(e));
        });
      });
  return u3(r, n, l);
}, d3 = (t, e) => ({ tr: n }) => (n.setMeta(t, e), !0), f3 = (t, e = {}) => ({ state: n, dispatch: r, chain: i }) => {
  const s = Ze(t, n.schema);
  return s.isTextblock ? i().command(({ commands: o }) => Jd(s, e)(n) ? !0 : o.clearNodes()).command(({ state: o }) => Jd(s, e)(o, r)).run() : (console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'), !1);
}, h3 = (t) => ({ tr: e, dispatch: n }) => {
  if (n) {
    const { doc: r } = e, i = xn(t, 0, r.content.size), s = ee.create(r, i);
    e.setSelection(s);
  }
  return !0;
}, p3 = (t) => ({ tr: e, dispatch: n }) => {
  if (n) {
    const { doc: r } = e, { from: i, to: s } = typeof t == "number" ? { from: t, to: t } : t, o = X.atStart(r).from, a = X.atEnd(r).to, l = xn(i, o, a), u = xn(s, o, a), c = X.create(r, l, u);
    e.setSelection(c);
  }
  return !0;
}, g3 = (t) => ({ state: e, dispatch: n }) => {
  const r = Ze(t, e.schema);
  return Wy(r)(e, n);
};
function rf(t, e) {
  const n = t.storedMarks || t.selection.$to.parentOffset && t.selection.$from.marks();
  if (n) {
    const r = n.filter((i) => e == null ? void 0 : e.includes(i.type.name));
    t.tr.ensureMarks(r);
  }
}
const m3 = ({ keepMarks: t = !0 } = {}) => ({ tr: e, state: n, dispatch: r, editor: i }) => {
  const { selection: s, doc: o } = e, { $from: a, $to: l } = s, u = i.extensionManager.attributes, c = so(u, a.node().type.name, a.node().attrs);
  if (s instanceof ee && s.node.isBlock)
    return !a.parentOffset || !Jr(o, a.pos) ? !1 : (r && (t && rf(n, i.extensionManager.splittableMarks), e.split(a.pos).scrollIntoView()), !0);
  if (!a.parent.isBlock)
    return !1;
  if (r) {
    const d = l.parentOffset === l.parent.content.size;
    s instanceof X && e.deleteSelection();
    const f = a.depth === 0 ? void 0 : e3(a.node(-1).contentMatchAt(a.indexAfter(-1)));
    let h = d && f ? [
      {
        type: f,
        attrs: c
      }
    ] : void 0, p = Jr(e.doc, e.mapping.map(a.pos), 1, h);
    if (!h && !p && Jr(e.doc, e.mapping.map(a.pos), 1, f ? [{ type: f }] : void 0) && (p = !0, h = f ? [
      {
        type: f,
        attrs: c
      }
    ] : void 0), p && (e.split(e.mapping.map(a.pos), 1, h), f && !d && !a.parentOffset && a.parent.type !== f)) {
      const g = e.mapping.map(a.before()), m = e.doc.resolve(g);
      a.node(-1).canReplaceWith(m.index(), m.index() + 1, f) && e.setNodeMarkup(e.mapping.map(a.before()), f);
    }
    t && rf(n, i.extensionManager.splittableMarks), e.scrollIntoView();
  }
  return !0;
}, b3 = (t) => ({ tr: e, state: n, dispatch: r, editor: i }) => {
  var s;
  const o = Ze(t, n.schema), { $from: a, $to: l } = n.selection, u = n.selection.node;
  if (u && u.isBlock || a.depth < 2 || !a.sameParent(l))
    return !1;
  const c = a.node(-1);
  if (c.type !== o)
    return !1;
  const d = i.extensionManager.attributes;
  if (a.parent.content.size === 0 && a.node(-1).childCount === a.indexAfter(-1)) {
    if (a.depth === 2 || a.node(-3).type !== o || a.index(-2) !== a.node(-2).childCount - 1)
      return !1;
    if (r) {
      let m = O.empty;
      const y = a.index(-1) ? 1 : a.index(-2) ? 2 : 3;
      for (let _ = a.depth - y; _ >= a.depth - 3; _ -= 1)
        m = O.from(a.node(_).copy(m));
      const x = a.indexAfter(-1) < a.node(-2).childCount ? 1 : a.indexAfter(-2) < a.node(-3).childCount ? 2 : 3, k = so(d, a.node().type.name, a.node().attrs), b = ((s = o.contentMatch.defaultType) === null || s === void 0 ? void 0 : s.createAndFill(k)) || void 0;
      m = m.append(O.from(o.createAndFill(null, b) || void 0));
      const E = a.before(a.depth - (y - 1));
      e.replace(E, a.after(-x), new B(m, 4 - y, 0));
      let v = -1;
      e.doc.nodesBetween(E, e.doc.content.size, (_, T) => {
        if (v > -1)
          return !1;
        _.isTextblock && _.content.size === 0 && (v = T + 1);
      }), v > -1 && e.setSelection(X.near(e.doc.resolve(v))), e.scrollIntoView();
    }
    return !0;
  }
  const f = l.pos === a.end() ? c.contentMatchAt(0).defaultType : null, h = so(d, c.type.name, c.attrs), p = so(d, a.node().type.name, a.node().attrs);
  e.delete(a.pos, l.pos);
  const g = f ? [
    { type: o, attrs: h },
    { type: f, attrs: p }
  ] : [{ type: o, attrs: h }];
  if (!Jr(e.doc, a.pos, 2))
    return !1;
  if (r) {
    const { selection: m, storedMarks: y } = n, { splittableMarks: x } = i.extensionManager, k = y || m.$to.parentOffset && m.$from.marks();
    if (e.split(a.pos, 2, g).scrollIntoView(), !k || !r)
      return !0;
    const b = k.filter((E) => x.includes(E.type.name));
    e.ensureMarks(b);
  }
  return !0;
}, fl = (t, e) => {
  const n = Ea((o) => o.type === e)(t.selection);
  if (!n)
    return !0;
  const r = t.doc.resolve(Math.max(0, n.pos - 1)).before(n.depth);
  if (r === void 0)
    return !0;
  const i = t.doc.nodeAt(r);
  return n.node.type === (i == null ? void 0 : i.type) && jn(t.doc, n.pos) && t.join(n.pos), !0;
}, hl = (t, e) => {
  const n = Ea((o) => o.type === e)(t.selection);
  if (!n)
    return !0;
  const r = t.doc.resolve(n.start).after(n.depth);
  if (r === void 0)
    return !0;
  const i = t.doc.nodeAt(r);
  return n.node.type === (i == null ? void 0 : i.type) && jn(t.doc, r) && t.join(r), !0;
}, y3 = (t, e, n, r = {}) => ({ editor: i, tr: s, state: o, dispatch: a, chain: l, commands: u, can: c }) => {
  const { extensions: d, splittableMarks: f } = i.extensionManager, h = Ze(t, o.schema), p = Ze(e, o.schema), { selection: g, storedMarks: m } = o, { $from: y, $to: x } = g, k = y.blockRange(x), b = m || g.$to.parentOffset && g.$from.marks();
  if (!k)
    return !1;
  const E = Ea((v) => nf(v.type.name, d))(g);
  if (k.depth >= 1 && E && k.depth - E.depth <= 1) {
    if (E.node.type === h)
      return u.liftListItem(p);
    if (nf(E.node.type.name, d) && h.validContent(E.node.content) && a)
      return l().command(() => (s.setNodeMarkup(E.pos, h), !0)).command(() => fl(s, h)).command(() => hl(s, h)).run();
  }
  return !n || !b || !a ? l().command(() => c().wrapInList(h, r) ? !0 : u.clearNodes()).wrapInList(h, r).command(() => fl(s, h)).command(() => hl(s, h)).run() : l().command(() => {
    const v = c().wrapInList(h, r), _ = b.filter((T) => f.includes(T.type.name));
    return s.ensureMarks(_), v ? !0 : u.clearNodes();
  }).wrapInList(h, r).command(() => fl(s, h)).command(() => hl(s, h)).run();
}, x3 = (t, e = {}, n = {}) => ({ state: r, commands: i }) => {
  const { extendEmptyMarkRange: s = !1 } = n, o = En(t, r.schema);
  return pu(r, o, e) ? i.unsetMark(o, { extendEmptyMarkRange: s }) : i.setMark(o, e);
}, k3 = (t, e, n = {}) => ({ state: r, commands: i }) => {
  const s = Ze(t, r.schema), o = Ze(e, r.schema);
  return yr(r, s, n) ? i.setNode(o) : i.setNode(s, n);
}, v3 = (t, e = {}) => ({ state: n, commands: r }) => {
  const i = Ze(t, n.schema);
  return yr(n, i, e) ? r.lift(i) : r.wrapIn(i, e);
}, E3 = () => ({ state: t, dispatch: e }) => {
  const n = t.plugins;
  for (let r = 0; r < n.length; r += 1) {
    const i = n[r];
    let s;
    if (i.spec.isInputRules && (s = i.getState(t))) {
      if (e) {
        const o = t.tr, a = s.transform;
        for (let l = a.steps.length - 1; l >= 0; l -= 1)
          o.step(a.steps[l].invert(a.docs[l]));
        if (s.text) {
          const l = o.doc.resolve(s.from).marks();
          o.replaceWith(s.from, s.to, t.schema.text(s.text, l));
        } else
          o.delete(s.from, s.to);
      }
      return !0;
    }
  }
  return !1;
}, C3 = () => ({ tr: t, dispatch: e }) => {
  const { selection: n } = t, { empty: r, ranges: i } = n;
  return r || e && i.forEach((s) => {
    t.removeMark(s.$from.pos, s.$to.pos);
  }), !0;
}, _3 = (t, e = {}) => ({ tr: n, state: r, dispatch: i }) => {
  var s;
  const { extendEmptyMarkRange: o = !1 } = e, { selection: a } = n, l = En(t, r.schema), { $from: u, empty: c, ranges: d } = a;
  if (!i)
    return !0;
  if (c && o) {
    let { from: f, to: h } = a;
    const p = (s = u.marks().find((m) => m.type === l)) === null || s === void 0 ? void 0 : s.attrs, g = nc(u, l, p);
    g && (f = g.from, h = g.to), n.removeMark(f, h, l);
  } else
    d.forEach((f) => {
      n.removeMark(f.$from.pos, f.$to.pos, l);
    });
  return n.removeStoredMark(l), !0;
}, w3 = (t, e = {}) => ({ tr: n, state: r, dispatch: i }) => {
  let s = null, o = null;
  const a = va(typeof t == "string" ? t : t.name, r.schema);
  return a ? (a === "node" && (s = Ze(t, r.schema)), a === "mark" && (o = En(t, r.schema)), i && n.selection.ranges.forEach((l) => {
    const u = l.$from.pos, c = l.$to.pos;
    r.doc.nodesBetween(u, c, (d, f) => {
      s && s === d.type && n.setNodeMarkup(f, void 0, {
        ...d.attrs,
        ...e
      }), o && d.marks.length && d.marks.forEach((h) => {
        if (o === h.type) {
          const p = Math.max(f, u), g = Math.min(f + d.nodeSize, c);
          n.addMark(p, g, o.create({
            ...h.attrs,
            ...e
          }));
        }
      });
    });
  }), !0) : !1;
}, S3 = (t, e = {}) => ({ state: n, dispatch: r }) => {
  const i = Ze(t, n.schema);
  return zy(i, e)(n, r);
}, A3 = (t, e = {}) => ({ state: n, dispatch: r }) => {
  const i = Ze(t, n.schema);
  return Vy(i, e)(n, r);
};
var M3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  blur: ux,
  clearContent: cx,
  clearNodes: dx,
  command: fx,
  createParagraphNear: hx,
  cut: px,
  deleteCurrentNode: gx,
  deleteNode: mx,
  deleteRange: bx,
  deleteSelection: yx,
  enter: xx,
  exitCode: kx,
  extendMarkRange: Ex,
  first: Cx,
  focus: _x,
  forEach: wx,
  insertContent: Sx,
  insertContentAt: Tx,
  joinUp: Dx,
  joinDown: Ox,
  joinBackward: Nx,
  joinForward: Lx,
  joinItemBackward: Rx,
  joinItemForward: Ix,
  joinTextblockBackward: Fx,
  joinTextblockForward: Hx,
  keyboardShortcut: Px,
  lift: $x,
  liftEmptyBlock: zx,
  liftListItem: Vx,
  newlineInCode: Ux,
  resetAttributes: qx,
  scrollIntoView: Zx,
  selectAll: Kx,
  selectNodeBackward: Wx,
  selectNodeForward: jx,
  selectParentNode: Gx,
  selectTextblockEnd: Jx,
  selectTextblockStart: Yx,
  setContent: Xx,
  setMark: c3,
  setMeta: d3,
  setNode: f3,
  setNodeSelection: h3,
  setTextSelection: p3,
  sinkListItem: g3,
  splitBlock: m3,
  splitListItem: b3,
  toggleList: y3,
  toggleMark: x3,
  toggleNode: k3,
  toggleWrap: v3,
  undoInputRule: E3,
  unsetAllMarks: C3,
  unsetMark: _3,
  updateAttributes: w3,
  wrapIn: S3,
  wrapInList: A3
});
const n1 = xe.create({
  name: "commands",
  addCommands() {
    return {
      ...M3
    };
  }
}), r1 = xe.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
}), i1 = xe.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor: t } = this;
    return [
      new we({
        key: new Te("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (e, n) => {
              t.isFocused = !0;
              const r = t.state.tr.setMeta("focus", { event: n }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            },
            blur: (e, n) => {
              t.isFocused = !1;
              const r = t.state.tr.setMeta("blur", { event: n }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            }
          }
        }
      })
    ];
  }
}), s1 = xe.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const t = () => this.editor.commands.first(({ commands: o }) => [
      () => o.undoInputRule(),
      // maybe convert first text block node to default node
      () => o.command(({ tr: a }) => {
        const { selection: l, doc: u } = a, { empty: c, $anchor: d } = l, { pos: f, parent: h } = d, p = d.parent.isTextblock && f > 0 ? a.doc.resolve(f - 1) : d, g = p.parent.type.spec.isolating, m = d.pos - d.parentOffset, y = g && p.parent.childCount === 1 ? m === d.pos : ne.atStart(u).from === f;
        return !c || !h.type.isTextblock || h.textContent.length || !y || y && d.parent.type.name === "paragraph" ? !1 : o.clearNodes();
      }),
      () => o.deleteSelection(),
      () => o.joinBackward(),
      () => o.selectNodeBackward()
    ]), e = () => this.editor.commands.first(({ commands: o }) => [
      () => o.deleteSelection(),
      () => o.deleteCurrentNode(),
      () => o.joinForward(),
      () => o.selectNodeForward()
    ]), r = {
      Enter: () => this.editor.commands.first(({ commands: o }) => [
        () => o.newlineInCode(),
        () => o.createParagraphNear(),
        () => o.liftEmptyBlock(),
        () => o.splitBlock()
      ]),
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: t,
      "Mod-Backspace": t,
      "Shift-Backspace": t,
      Delete: e,
      "Mod-Delete": e,
      "Mod-a": () => this.editor.commands.selectAll()
    }, i = {
      ...r
    }, s = {
      ...r,
      "Ctrl-h": t,
      "Alt-Backspace": t,
      "Ctrl-d": e,
      "Ctrl-Alt-Backspace": e,
      "Alt-Delete": e,
      "Alt-d": e,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    return ic() || Y0() ? s : i;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new we({
        key: new Te("clearDocument"),
        appendTransaction: (t, e, n) => {
          if (!(t.some((p) => p.docChanged) && !e.doc.eq(n.doc)))
            return;
          const { empty: i, from: s, to: o } = e.selection, a = ne.atStart(e.doc).from, l = ne.atEnd(e.doc).to;
          if (i || !(s === a && o === l) || !(n.doc.textBetween(0, n.doc.content.size, " ", " ").length === 0))
            return;
          const d = n.tr, f = ma({
            state: n,
            transaction: d
          }), { commands: h } = new ba({
            editor: this.editor,
            state: f
          });
          if (h.clearNodes(), !!d.steps.length)
            return d;
        }
      })
    ];
  }
}), o1 = xe.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("tabindex"),
        props: {
          attributes: this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
var T3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ClipboardTextSerializer: j0,
  Commands: n1,
  Editable: r1,
  FocusEvents: i1,
  Keymap: s1,
  Tabindex: o1
});
class tr {
  constructor(e, n, r = !1, i = null) {
    this.currentNode = null, this.actualDepth = null, this.isBlock = r, this.resolvedPos = e, this.editor = n, this.currentNode = i;
  }
  get name() {
    return this.node.type.name;
  }
  get node() {
    return this.currentNode || this.resolvedPos.node();
  }
  get element() {
    return this.editor.view.domAtPos(this.pos).node;
  }
  get depth() {
    var e;
    return (e = this.actualDepth) !== null && e !== void 0 ? e : this.resolvedPos.depth;
  }
  get pos() {
    return this.resolvedPos.pos;
  }
  get content() {
    return this.node.content;
  }
  set content(e) {
    let n = this.from, r = this.to;
    if (this.isBlock) {
      if (this.content.size === 0) {
        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);
        return;
      }
      n = this.from + 1, r = this.to - 1;
    }
    this.editor.commands.insertContentAt({ from: n, to: r }, e);
  }
  get attributes() {
    return this.node.attrs;
  }
  get textContent() {
    return this.node.textContent;
  }
  get size() {
    return this.node.nodeSize;
  }
  get from() {
    return this.isBlock ? this.pos : this.resolvedPos.start(this.resolvedPos.depth);
  }
  get range() {
    return {
      from: this.from,
      to: this.to
    };
  }
  get to() {
    return this.isBlock ? this.pos + this.size : this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);
  }
  get parent() {
    if (this.depth === 0)
      return null;
    const e = this.resolvedPos.start(this.resolvedPos.depth - 1), n = this.resolvedPos.doc.resolve(e);
    return new tr(n, this.editor);
  }
  get before() {
    let e = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.from - 3)), new tr(e, this.editor);
  }
  get after() {
    let e = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.to + 3)), new tr(e, this.editor);
  }
  get children() {
    const e = [];
    return this.node.content.forEach((n, r) => {
      const i = n.isBlock && !n.isTextblock, s = this.pos + r + 1, o = this.resolvedPos.doc.resolve(s);
      if (!i && o.depth <= this.depth)
        return;
      const a = new tr(o, this.editor, i, i ? n : null);
      i && (a.actualDepth = this.depth + 1), e.push(new tr(o, this.editor, i, i ? n : null));
    }), e;
  }
  get firstChild() {
    return this.children[0] || null;
  }
  get lastChild() {
    const e = this.children;
    return e[e.length - 1] || null;
  }
  closest(e, n = {}) {
    let r = null, i = this.parent;
    for (; i && !r; ) {
      if (i.node.type.name === e)
        if (Object.keys(n).length > 0) {
          const s = i.node.attrs, o = Object.keys(n);
          for (let a = 0; a < o.length; a += 1) {
            const l = o[a];
            if (s[l] !== n[l])
              break;
          }
        } else
          r = i;
      i = i.parent;
    }
    return r;
  }
  querySelector(e, n = {}) {
    return this.querySelectorAll(e, n, !0)[0] || null;
  }
  querySelectorAll(e, n = {}, r = !1) {
    let i = [];
    if (!this.children || this.children.length === 0)
      return i;
    const s = Object.keys(n);
    return this.children.forEach((o) => {
      r && i.length > 0 || (o.node.type.name === e && s.every((l) => n[l] === o.node.attrs[l]) && i.push(o), !(r && i.length > 0) && (i = i.concat(o.querySelectorAll(e, n, r))));
    }), i;
  }
  setAttribute(e) {
    const n = this.editor.state.selection;
    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, e).setTextSelection(n.from).run();
  }
}
const D3 = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function O3(t, e, n) {
  const r = document.querySelector(`style[data-tiptap-style${n ? `-${n}` : ""}]`);
  if (r !== null)
    return r;
  const i = document.createElement("style");
  return e && i.setAttribute("nonce", e), i.setAttribute(`data-tiptap-style${n ? `-${n}` : ""}`, ""), i.innerHTML = t, document.getElementsByTagName("head")[0].appendChild(i), i;
}
class N3 extends jy {
  constructor(e = {}) {
    super(), this.isFocused = !1, this.extensionStorage = {}, this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: !0,
      injectNonce: void 0,
      extensions: [],
      autofocus: !1,
      editable: !0,
      editorProps: {},
      parseOptions: {},
      coreExtensionOptions: {},
      enableInputRules: !0,
      enablePasteRules: !0,
      enableCoreExtensions: !0,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null
    }, this.isCapturingTransaction = !1, this.capturedTransaction = null, this.setOptions(e), this.createExtensionManager(), this.createCommandManager(), this.createSchema(), this.on("beforeCreate", this.options.onBeforeCreate), this.emit("beforeCreate", { editor: this }), this.createView(), this.injectCSS(), this.on("create", this.options.onCreate), this.on("update", this.options.onUpdate), this.on("selectionUpdate", this.options.onSelectionUpdate), this.on("transaction", this.options.onTransaction), this.on("focus", this.options.onFocus), this.on("blur", this.options.onBlur), this.on("destroy", this.options.onDestroy), window.setTimeout(() => {
      this.isDestroyed || (this.commands.focus(this.options.autofocus), this.emit("create", { editor: this }));
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    this.options.injectCSS && document && (this.css = O3(D3, this.options.injectNonce));
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(e = {}) {
    this.options = {
      ...this.options,
      ...e
    }, !(!this.view || !this.state || this.isDestroyed) && (this.options.editorProps && this.view.setProps(this.options.editorProps), this.view.updateState(this.state));
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(e, n = !0) {
    this.setOptions({ editable: e }), n && this.emit("update", { editor: this, transaction: this.state.tr });
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   */
  registerPlugin(e, n) {
    const r = K0(n) ? n(e, [...this.state.plugins]) : [...this.state.plugins, e], i = this.state.reconfigure({ plugins: r });
    this.view.updateState(i);
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKey The plugins name
   */
  unregisterPlugin(e) {
    if (this.isDestroyed)
      return;
    const n = typeof e == "string" ? `${e}$` : e.key, r = this.state.reconfigure({
      // @ts-ignore
      plugins: this.state.plugins.filter((i) => !i.key.startsWith(n))
    });
    this.view.updateState(r);
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    var e, n;
    const i = [...this.options.enableCoreExtensions ? [
      r1,
      j0.configure({
        blockSeparator: (n = (e = this.options.coreExtensionOptions) === null || e === void 0 ? void 0 : e.clipboardTextSerializer) === null || n === void 0 ? void 0 : n.blockSeparator
      }),
      n1,
      i1,
      s1,
      o1
    ] : [], ...this.options.extensions].filter((s) => ["extension", "node", "mark"].includes(s == null ? void 0 : s.type));
    this.extensionManager = new Zr(i, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new ba({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    const e = X0(this.options.content, this.schema, this.options.parseOptions), n = G0(e, this.options.autofocus);
    this.view = new hy(this.options.element, {
      ...this.options.editorProps,
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: qr.create({
        doc: e,
        selection: n || void 0
      })
    });
    const r = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(r), this.createNodeViews(), this.prependClass();
    const i = this.view.dom;
    i.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(e) {
    this.isCapturingTransaction = !0, e(), this.isCapturingTransaction = !1;
    const n = this.capturedTransaction;
    return this.capturedTransaction = null, n;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(e) {
    if (this.view.isDestroyed)
      return;
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = e;
        return;
      }
      e.steps.forEach((o) => {
        var a;
        return (a = this.capturedTransaction) === null || a === void 0 ? void 0 : a.step(o);
      });
      return;
    }
    const n = this.state.apply(e), r = !this.state.selection.eq(n.selection);
    this.view.updateState(n), this.emit("transaction", {
      editor: this,
      transaction: e
    }), r && this.emit("selectionUpdate", {
      editor: this,
      transaction: e
    });
    const i = e.getMeta("focus"), s = e.getMeta("blur");
    i && this.emit("focus", {
      editor: this,
      event: i.event,
      transaction: e
    }), s && this.emit("blur", {
      editor: this,
      event: s.event,
      transaction: e
    }), !(!e.docChanged || e.getMeta("preventUpdate")) && this.emit("update", {
      editor: this,
      transaction: e
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(e) {
    return e1(this.state, e);
  }
  isActive(e, n) {
    const r = typeof e == "string" ? e : null, i = typeof e == "string" ? n : e;
    return a3(this.state, r, i);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return sc(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(e) {
    const { blockSeparator: n = `

`, textSerializers: r = {} } = e || {};
    return n3(this.state.doc, {
      blockSeparator: n,
      textSerializers: {
        ...W0(this.schema),
        ...r
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return l3(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'), this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy"), this.view && this.view.destroy(), this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var e;
    return !(!((e = this.view) === null || e === void 0) && e.docView);
  }
  $node(e, n) {
    var r;
    return ((r = this.$doc) === null || r === void 0 ? void 0 : r.querySelector(e, n)) || null;
  }
  $nodes(e, n) {
    var r;
    return ((r = this.$doc) === null || r === void 0 ? void 0 : r.querySelectorAll(e, n)) || null;
  }
  $pos(e) {
    const n = this.state.doc.resolve(e);
    return new tr(n, this);
  }
  get $doc() {
    return this.$pos(0);
  }
}
function xr(t) {
  return new ys({
    find: t.find,
    handler: ({ state: e, range: n, match: r }) => {
      const i = oe(t.getAttributes, void 0, r);
      if (i === !1 || i === null)
        return null;
      const { tr: s } = e, o = r[r.length - 1], a = r[0];
      if (o) {
        const l = a.search(/\S/), u = n.from + a.indexOf(o), c = u + o.length;
        if (oc(n.from, n.to, e.doc).filter((h) => h.mark.type.excluded.find((g) => g === t.type && g !== h.mark.type)).filter((h) => h.to > u).length)
          return null;
        c < n.to && s.delete(c, n.to), u > n.from && s.delete(n.from + l, u);
        const f = n.from + l + o.length;
        s.addMark(n.from + l, f, t.type.create(i || {})), s.removeStoredMark(t.type);
      }
    }
  });
}
function ac(t) {
  return new ys({
    find: t.find,
    handler: ({ state: e, range: n, match: r }) => {
      const i = oe(t.getAttributes, void 0, r) || {}, { tr: s } = e, o = n.from;
      let a = n.to;
      const l = t.type.create(i);
      if (r[1]) {
        const u = r[0].lastIndexOf(r[1]);
        let c = o + u;
        c > a ? c = a : a = c + r[1].length;
        const d = r[0][r[0].length - 1];
        s.insertText(d, o + r[0].length - 1), s.replaceWith(c, a, l);
      } else
        r[0] && s.insert(o - 1, t.type.create(i)).delete(s.mapping.map(o), s.mapping.map(a));
      s.scrollIntoView();
    }
  });
}
function gu(t) {
  return new ys({
    find: t.find,
    handler: ({ state: e, range: n, match: r }) => {
      const i = e.doc.resolve(n.from), s = oe(t.getAttributes, void 0, r) || {};
      if (!i.node(-1).canReplaceWith(i.index(-1), i.indexAfter(-1), t.type))
        return null;
      e.tr.delete(n.from, n.to).setBlockType(n.from, n.from, t.type, s);
    }
  });
}
function kr(t) {
  return new ys({
    find: t.find,
    handler: ({ state: e, range: n, match: r, chain: i }) => {
      const s = oe(t.getAttributes, void 0, r) || {}, o = e.tr.delete(n.from, n.to), l = o.doc.resolve(n.from).blockRange(), u = l && zu(l, t.type, s);
      if (!u)
        return null;
      if (o.wrap(l, u), t.keepMarks && t.editor) {
        const { selection: d, storedMarks: f } = e, { splittableMarks: h } = t.editor.extensionManager, p = f || d.$to.parentOffset && d.$from.marks();
        if (p) {
          const g = p.filter((m) => h.includes(m.type.name));
          o.ensureMarks(g);
        }
      }
      if (t.keepAttributes) {
        const d = t.type.name === "bulletList" || t.type.name === "orderedList" ? "listItem" : "taskList";
        i().updateAttributes(d, s).run();
      }
      const c = o.doc.resolve(n.from - 1).nodeBefore;
      c && c.type === t.type && jn(o.doc, n.from - 1) && (!t.joinPredicate || t.joinPredicate(r, c)) && o.join(n.from - 1);
    }
  });
}
class Ie {
  constructor(e = {}) {
    this.type = "mark", this.name = "mark", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = oe(Z(this, "addOptions", {
      name: this.name
    }))), this.storage = oe(Z(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new Ie(e);
  }
  configure(e = {}) {
    const n = this.extend();
    return n.options = xa(this.options, e), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
  extend(e = {}) {
    const n = new Ie({ ...this.config, ...e });
    return n.parent = this, this.child = n, n.name = e.name ? e.name : n.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${n.name}".`), n.options = oe(Z(n, "addOptions", {
      name: n.name
    })), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
  static handleExit({ editor: e, mark: n }) {
    const { tr: r } = e.state, i = e.state.selection.$from;
    if (i.pos === i.end()) {
      const o = i.marks();
      if (!!!o.find((u) => (u == null ? void 0 : u.type.name) === n.name))
        return !1;
      const l = o.find((u) => (u == null ? void 0 : u.type.name) === n.name);
      return l && r.removeStoredMark(l), r.insertText(" ", i.pos), e.view.dispatch(r), !0;
    }
    return !1;
  }
}
let ue = class mu {
  constructor(e = {}) {
    this.type = "node", this.name = "node", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = oe(Z(this, "addOptions", {
      name: this.name
    }))), this.storage = oe(Z(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new mu(e);
  }
  configure(e = {}) {
    const n = this.extend();
    return n.options = xa(this.options, e), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
  extend(e = {}) {
    const n = new mu({ ...this.config, ...e });
    return n.parent = this, this.child = n, n.name = e.name ? e.name : n.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${n.name}".`), n.options = oe(Z(n, "addOptions", {
      name: n.name
    })), n.storage = oe(Z(n, "addStorage", {
      name: n.name,
      options: n.options
    })), n;
  }
};
function Zn(t) {
  return new nx({
    find: t.find,
    handler: ({ state: e, range: n, match: r, pasteEvent: i }) => {
      const s = oe(t.getAttributes, void 0, r, i);
      if (s === !1 || s === null)
        return null;
      const { tr: o } = e, a = r[r.length - 1], l = r[0];
      let u = n.to;
      if (a) {
        const c = l.search(/\S/), d = n.from + l.indexOf(a), f = d + a.length;
        if (oc(n.from, n.to, e.doc).filter((p) => p.mark.type.excluded.find((m) => m === t.type && m !== p.mark.type)).filter((p) => p.to > d).length)
          return null;
        f < n.to && o.delete(f, n.to), d > n.from && o.delete(n.from + c, d), u = n.from + c + a.length, o.addMark(n.from + c, u, t.type.create(s || {})), o.removeStoredMark(t.type);
      }
    }
  });
}
function L3(t) {
  return t.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
class ge extends HTMLElement {
  constructor() {
    super();
    P(this, "template", "");
    P(this, "editor");
    P(this, "options");
  }
  registerClickListener() {
    this.addEventListener("click", () => {
      var r;
      const n = (r = this.editor) == null ? void 0 : r.chain();
      this.onClick(n), n == null || n.run();
    });
  }
  connectedCallback() {
    this.innerHTML = this.template;
  }
  // @ts-ignore
  onClick(n) {
  }
  onCreate(n, r) {
    this.editor = n.editor, this.options = r;
  }
  onTransaction(n) {
    const r = this.querySelector("div");
    r && (this.onActive(n.editor) ? r.classList.add("active") : r.classList.remove("active"));
  }
  // @ts-ignore
  onActive(n) {
    return !1;
  }
}
class a1 extends ge {
  constructor() {
    super(), this.template = `
        <div style="height: 16px">
            <svg style="width: 15px;height: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.82843 6.99955L8.36396 9.53509L6.94975 10.9493L2 5.99955L6.94975 1.0498L8.36396 2.46402L5.82843 4.99955H13C17.4183 4.99955 21 8.58127 21 12.9996C21 17.4178 17.4183 20.9996 13 20.9996H4V18.9996H13C16.3137 18.9996 19 16.3133 19 12.9996C19 9.68584 16.3137 6.99955 13 6.99955H5.82843Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.undo();
  }
}
class R3 extends ge {
  constructor() {
    super(), this.template = `
         <div style="height: 16px">
            <svg style="width: 15px;height: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.1716 6.99955H11C7.68629 6.99955 5 9.68584 5 12.9996C5 16.3133 7.68629 18.9996 11 18.9996H20V20.9996H11C6.58172 20.9996 3 17.4178 3 12.9996C3 8.58127 6.58172 4.99955 11 4.99955H18.1716L15.636 2.46402L17.0503 1.0498L22 5.99955L17.0503 10.9493L15.636 9.53509L18.1716 6.99955Z"></path></svg>
         </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.redo();
  }
}
var pt = "top", It = "bottom", Ft = "right", gt = "left", lc = "auto", vs = [pt, It, Ft, gt], si = "start", Wi = "end", I3 = "clippingParents", l1 = "viewport", vi = "popper", F3 = "reference", sf = /* @__PURE__ */ vs.reduce(function(t, e) {
  return t.concat([e + "-" + si, e + "-" + Wi]);
}, []), u1 = /* @__PURE__ */ [].concat(vs, [lc]).reduce(function(t, e) {
  return t.concat([e, e + "-" + si, e + "-" + Wi]);
}, []), H3 = "beforeRead", B3 = "read", P3 = "afterRead", $3 = "beforeMain", z3 = "main", V3 = "afterMain", U3 = "beforeWrite", q3 = "write", Z3 = "afterWrite", K3 = [H3, B3, P3, $3, z3, V3, U3, q3, Z3];
function on(t) {
  return t ? (t.nodeName || "").toLowerCase() : null;
}
function Ct(t) {
  if (t == null)
    return window;
  if (t.toString() !== "[object Window]") {
    var e = t.ownerDocument;
    return e && e.defaultView || window;
  }
  return t;
}
function vr(t) {
  var e = Ct(t).Element;
  return t instanceof e || t instanceof Element;
}
function Rt(t) {
  var e = Ct(t).HTMLElement;
  return t instanceof e || t instanceof HTMLElement;
}
function uc(t) {
  if (typeof ShadowRoot > "u")
    return !1;
  var e = Ct(t).ShadowRoot;
  return t instanceof e || t instanceof ShadowRoot;
}
function W3(t) {
  var e = t.state;
  Object.keys(e.elements).forEach(function(n) {
    var r = e.styles[n] || {}, i = e.attributes[n] || {}, s = e.elements[n];
    !Rt(s) || !on(s) || (Object.assign(s.style, r), Object.keys(i).forEach(function(o) {
      var a = i[o];
      a === !1 ? s.removeAttribute(o) : s.setAttribute(o, a === !0 ? "" : a);
    }));
  });
}
function j3(t) {
  var e = t.state, n = {
    popper: {
      position: e.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(e.elements.popper.style, n.popper), e.styles = n, e.elements.arrow && Object.assign(e.elements.arrow.style, n.arrow), function() {
    Object.keys(e.elements).forEach(function(r) {
      var i = e.elements[r], s = e.attributes[r] || {}, o = Object.keys(e.styles.hasOwnProperty(r) ? e.styles[r] : n[r]), a = o.reduce(function(l, u) {
        return l[u] = "", l;
      }, {});
      !Rt(i) || !on(i) || (Object.assign(i.style, a), Object.keys(s).forEach(function(l) {
        i.removeAttribute(l);
      }));
    });
  };
}
const c1 = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: W3,
  effect: j3,
  requires: ["computeStyles"]
};
function nn(t) {
  return t.split("-")[0];
}
var fr = Math.max, So = Math.min, oi = Math.round;
function bu() {
  var t = navigator.userAgentData;
  return t != null && t.brands && Array.isArray(t.brands) ? t.brands.map(function(e) {
    return e.brand + "/" + e.version;
  }).join(" ") : navigator.userAgent;
}
function d1() {
  return !/^((?!chrome|android).)*safari/i.test(bu());
}
function ai(t, e, n) {
  e === void 0 && (e = !1), n === void 0 && (n = !1);
  var r = t.getBoundingClientRect(), i = 1, s = 1;
  e && Rt(t) && (i = t.offsetWidth > 0 && oi(r.width) / t.offsetWidth || 1, s = t.offsetHeight > 0 && oi(r.height) / t.offsetHeight || 1);
  var o = vr(t) ? Ct(t) : window, a = o.visualViewport, l = !d1() && n, u = (r.left + (l && a ? a.offsetLeft : 0)) / i, c = (r.top + (l && a ? a.offsetTop : 0)) / s, d = r.width / i, f = r.height / s;
  return {
    width: d,
    height: f,
    top: c,
    right: u + d,
    bottom: c + f,
    left: u,
    x: u,
    y: c
  };
}
function cc(t) {
  var e = ai(t), n = t.offsetWidth, r = t.offsetHeight;
  return Math.abs(e.width - n) <= 1 && (n = e.width), Math.abs(e.height - r) <= 1 && (r = e.height), {
    x: t.offsetLeft,
    y: t.offsetTop,
    width: n,
    height: r
  };
}
function f1(t, e) {
  var n = e.getRootNode && e.getRootNode();
  if (t.contains(e))
    return !0;
  if (n && uc(n)) {
    var r = e;
    do {
      if (r && t.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
function vn(t) {
  return Ct(t).getComputedStyle(t);
}
function G3(t) {
  return ["table", "td", "th"].indexOf(on(t)) >= 0;
}
function Jn(t) {
  return ((vr(t) ? t.ownerDocument : (
    // $FlowFixMe[prop-missing]
    t.document
  )) || window.document).documentElement;
}
function Ca(t) {
  return on(t) === "html" ? t : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    t.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    t.parentNode || // DOM Element detected
    (uc(t) ? t.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Jn(t)
  );
}
function of(t) {
  return !Rt(t) || // https://github.com/popperjs/popper-core/issues/837
  vn(t).position === "fixed" ? null : t.offsetParent;
}
function J3(t) {
  var e = /firefox/i.test(bu()), n = /Trident/i.test(bu());
  if (n && Rt(t)) {
    var r = vn(t);
    if (r.position === "fixed")
      return null;
  }
  var i = Ca(t);
  for (uc(i) && (i = i.host); Rt(i) && ["html", "body"].indexOf(on(i)) < 0; ) {
    var s = vn(i);
    if (s.transform !== "none" || s.perspective !== "none" || s.contain === "paint" || ["transform", "perspective"].indexOf(s.willChange) !== -1 || e && s.willChange === "filter" || e && s.filter && s.filter !== "none")
      return i;
    i = i.parentNode;
  }
  return null;
}
function Es(t) {
  for (var e = Ct(t), n = of(t); n && G3(n) && vn(n).position === "static"; )
    n = of(n);
  return n && (on(n) === "html" || on(n) === "body" && vn(n).position === "static") ? e : n || J3(t) || e;
}
function dc(t) {
  return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
}
function Ri(t, e, n) {
  return fr(t, So(e, n));
}
function Y3(t, e, n) {
  var r = Ri(t, e, n);
  return r > n ? n : r;
}
function h1() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function p1(t) {
  return Object.assign({}, h1(), t);
}
function g1(t, e) {
  return e.reduce(function(n, r) {
    return n[r] = t, n;
  }, {});
}
var X3 = function(e, n) {
  return e = typeof e == "function" ? e(Object.assign({}, n.rects, {
    placement: n.placement
  })) : e, p1(typeof e != "number" ? e : g1(e, vs));
};
function Q3(t) {
  var e, n = t.state, r = t.name, i = t.options, s = n.elements.arrow, o = n.modifiersData.popperOffsets, a = nn(n.placement), l = dc(a), u = [gt, Ft].indexOf(a) >= 0, c = u ? "height" : "width";
  if (!(!s || !o)) {
    var d = X3(i.padding, n), f = cc(s), h = l === "y" ? pt : gt, p = l === "y" ? It : Ft, g = n.rects.reference[c] + n.rects.reference[l] - o[l] - n.rects.popper[c], m = o[l] - n.rects.reference[l], y = Es(s), x = y ? l === "y" ? y.clientHeight || 0 : y.clientWidth || 0 : 0, k = g / 2 - m / 2, b = d[h], E = x - f[c] - d[p], v = x / 2 - f[c] / 2 + k, _ = Ri(b, v, E), T = l;
    n.modifiersData[r] = (e = {}, e[T] = _, e.centerOffset = _ - v, e);
  }
}
function ek(t) {
  var e = t.state, n = t.options, r = n.element, i = r === void 0 ? "[data-popper-arrow]" : r;
  i != null && (typeof i == "string" && (i = e.elements.popper.querySelector(i), !i) || f1(e.elements.popper, i) && (e.elements.arrow = i));
}
const tk = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: Q3,
  effect: ek,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function li(t) {
  return t.split("-")[1];
}
var nk = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function rk(t, e) {
  var n = t.x, r = t.y, i = e.devicePixelRatio || 1;
  return {
    x: oi(n * i) / i || 0,
    y: oi(r * i) / i || 0
  };
}
function af(t) {
  var e, n = t.popper, r = t.popperRect, i = t.placement, s = t.variation, o = t.offsets, a = t.position, l = t.gpuAcceleration, u = t.adaptive, c = t.roundOffsets, d = t.isFixed, f = o.x, h = f === void 0 ? 0 : f, p = o.y, g = p === void 0 ? 0 : p, m = typeof c == "function" ? c({
    x: h,
    y: g
  }) : {
    x: h,
    y: g
  };
  h = m.x, g = m.y;
  var y = o.hasOwnProperty("x"), x = o.hasOwnProperty("y"), k = gt, b = pt, E = window;
  if (u) {
    var v = Es(n), _ = "clientHeight", T = "clientWidth";
    if (v === Ct(n) && (v = Jn(n), vn(v).position !== "static" && a === "absolute" && (_ = "scrollHeight", T = "scrollWidth")), v = v, i === pt || (i === gt || i === Ft) && s === Wi) {
      b = It;
      var w = d && v === E && E.visualViewport ? E.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        v[_]
      );
      g -= w - r.height, g *= l ? 1 : -1;
    }
    if (i === gt || (i === pt || i === It) && s === Wi) {
      k = Ft;
      var N = d && v === E && E.visualViewport ? E.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        v[T]
      );
      h -= N - r.width, h *= l ? 1 : -1;
    }
  }
  var $ = Object.assign({
    position: a
  }, u && nk), K = c === !0 ? rk({
    x: h,
    y: g
  }, Ct(n)) : {
    x: h,
    y: g
  };
  if (h = K.x, g = K.y, l) {
    var U;
    return Object.assign({}, $, (U = {}, U[b] = x ? "0" : "", U[k] = y ? "0" : "", U.transform = (E.devicePixelRatio || 1) <= 1 ? "translate(" + h + "px, " + g + "px)" : "translate3d(" + h + "px, " + g + "px, 0)", U));
  }
  return Object.assign({}, $, (e = {}, e[b] = x ? g + "px" : "", e[k] = y ? h + "px" : "", e.transform = "", e));
}
function ik(t) {
  var e = t.state, n = t.options, r = n.gpuAcceleration, i = r === void 0 ? !0 : r, s = n.adaptive, o = s === void 0 ? !0 : s, a = n.roundOffsets, l = a === void 0 ? !0 : a, u = {
    placement: nn(e.placement),
    variation: li(e.placement),
    popper: e.elements.popper,
    popperRect: e.rects.popper,
    gpuAcceleration: i,
    isFixed: e.options.strategy === "fixed"
  };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, af(Object.assign({}, u, {
    offsets: e.modifiersData.popperOffsets,
    position: e.options.strategy,
    adaptive: o,
    roundOffsets: l
  })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, af(Object.assign({}, u, {
    offsets: e.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: l
  })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-placement": e.placement
  });
}
const sk = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: ik,
  data: {}
};
var Fs = {
  passive: !0
};
function ok(t) {
  var e = t.state, n = t.instance, r = t.options, i = r.scroll, s = i === void 0 ? !0 : i, o = r.resize, a = o === void 0 ? !0 : o, l = Ct(e.elements.popper), u = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return s && u.forEach(function(c) {
    c.addEventListener("scroll", n.update, Fs);
  }), a && l.addEventListener("resize", n.update, Fs), function() {
    s && u.forEach(function(c) {
      c.removeEventListener("scroll", n.update, Fs);
    }), a && l.removeEventListener("resize", n.update, Fs);
  };
}
const ak = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: ok,
  data: {}
};
var lk = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function oo(t) {
  return t.replace(/left|right|bottom|top/g, function(e) {
    return lk[e];
  });
}
var uk = {
  start: "end",
  end: "start"
};
function lf(t) {
  return t.replace(/start|end/g, function(e) {
    return uk[e];
  });
}
function fc(t) {
  var e = Ct(t), n = e.pageXOffset, r = e.pageYOffset;
  return {
    scrollLeft: n,
    scrollTop: r
  };
}
function hc(t) {
  return ai(Jn(t)).left + fc(t).scrollLeft;
}
function ck(t, e) {
  var n = Ct(t), r = Jn(t), i = n.visualViewport, s = r.clientWidth, o = r.clientHeight, a = 0, l = 0;
  if (i) {
    s = i.width, o = i.height;
    var u = d1();
    (u || !u && e === "fixed") && (a = i.offsetLeft, l = i.offsetTop);
  }
  return {
    width: s,
    height: o,
    x: a + hc(t),
    y: l
  };
}
function dk(t) {
  var e, n = Jn(t), r = fc(t), i = (e = t.ownerDocument) == null ? void 0 : e.body, s = fr(n.scrollWidth, n.clientWidth, i ? i.scrollWidth : 0, i ? i.clientWidth : 0), o = fr(n.scrollHeight, n.clientHeight, i ? i.scrollHeight : 0, i ? i.clientHeight : 0), a = -r.scrollLeft + hc(t), l = -r.scrollTop;
  return vn(i || n).direction === "rtl" && (a += fr(n.clientWidth, i ? i.clientWidth : 0) - s), {
    width: s,
    height: o,
    x: a,
    y: l
  };
}
function pc(t) {
  var e = vn(t), n = e.overflow, r = e.overflowX, i = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + i + r);
}
function m1(t) {
  return ["html", "body", "#document"].indexOf(on(t)) >= 0 ? t.ownerDocument.body : Rt(t) && pc(t) ? t : m1(Ca(t));
}
function Ii(t, e) {
  var n;
  e === void 0 && (e = []);
  var r = m1(t), i = r === ((n = t.ownerDocument) == null ? void 0 : n.body), s = Ct(r), o = i ? [s].concat(s.visualViewport || [], pc(r) ? r : []) : r, a = e.concat(o);
  return i ? a : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    a.concat(Ii(Ca(o)))
  );
}
function yu(t) {
  return Object.assign({}, t, {
    left: t.x,
    top: t.y,
    right: t.x + t.width,
    bottom: t.y + t.height
  });
}
function fk(t, e) {
  var n = ai(t, !1, e === "fixed");
  return n.top = n.top + t.clientTop, n.left = n.left + t.clientLeft, n.bottom = n.top + t.clientHeight, n.right = n.left + t.clientWidth, n.width = t.clientWidth, n.height = t.clientHeight, n.x = n.left, n.y = n.top, n;
}
function uf(t, e, n) {
  return e === l1 ? yu(ck(t, n)) : vr(e) ? fk(e, n) : yu(dk(Jn(t)));
}
function hk(t) {
  var e = Ii(Ca(t)), n = ["absolute", "fixed"].indexOf(vn(t).position) >= 0, r = n && Rt(t) ? Es(t) : t;
  return vr(r) ? e.filter(function(i) {
    return vr(i) && f1(i, r) && on(i) !== "body";
  }) : [];
}
function pk(t, e, n, r) {
  var i = e === "clippingParents" ? hk(t) : [].concat(e), s = [].concat(i, [n]), o = s[0], a = s.reduce(function(l, u) {
    var c = uf(t, u, r);
    return l.top = fr(c.top, l.top), l.right = So(c.right, l.right), l.bottom = So(c.bottom, l.bottom), l.left = fr(c.left, l.left), l;
  }, uf(t, o, r));
  return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;
}
function b1(t) {
  var e = t.reference, n = t.element, r = t.placement, i = r ? nn(r) : null, s = r ? li(r) : null, o = e.x + e.width / 2 - n.width / 2, a = e.y + e.height / 2 - n.height / 2, l;
  switch (i) {
    case pt:
      l = {
        x: o,
        y: e.y - n.height
      };
      break;
    case It:
      l = {
        x: o,
        y: e.y + e.height
      };
      break;
    case Ft:
      l = {
        x: e.x + e.width,
        y: a
      };
      break;
    case gt:
      l = {
        x: e.x - n.width,
        y: a
      };
      break;
    default:
      l = {
        x: e.x,
        y: e.y
      };
  }
  var u = i ? dc(i) : null;
  if (u != null) {
    var c = u === "y" ? "height" : "width";
    switch (s) {
      case si:
        l[u] = l[u] - (e[c] / 2 - n[c] / 2);
        break;
      case Wi:
        l[u] = l[u] + (e[c] / 2 - n[c] / 2);
        break;
    }
  }
  return l;
}
function ji(t, e) {
  e === void 0 && (e = {});
  var n = e, r = n.placement, i = r === void 0 ? t.placement : r, s = n.strategy, o = s === void 0 ? t.strategy : s, a = n.boundary, l = a === void 0 ? I3 : a, u = n.rootBoundary, c = u === void 0 ? l1 : u, d = n.elementContext, f = d === void 0 ? vi : d, h = n.altBoundary, p = h === void 0 ? !1 : h, g = n.padding, m = g === void 0 ? 0 : g, y = p1(typeof m != "number" ? m : g1(m, vs)), x = f === vi ? F3 : vi, k = t.rects.popper, b = t.elements[p ? x : f], E = pk(vr(b) ? b : b.contextElement || Jn(t.elements.popper), l, c, o), v = ai(t.elements.reference), _ = b1({
    reference: v,
    element: k,
    strategy: "absolute",
    placement: i
  }), T = yu(Object.assign({}, k, _)), w = f === vi ? T : v, N = {
    top: E.top - w.top + y.top,
    bottom: w.bottom - E.bottom + y.bottom,
    left: E.left - w.left + y.left,
    right: w.right - E.right + y.right
  }, $ = t.modifiersData.offset;
  if (f === vi && $) {
    var K = $[i];
    Object.keys(N).forEach(function(U) {
      var W = [Ft, It].indexOf(U) >= 0 ? 1 : -1, z = [pt, It].indexOf(U) >= 0 ? "y" : "x";
      N[U] += K[z] * W;
    });
  }
  return N;
}
function gk(t, e) {
  e === void 0 && (e = {});
  var n = e, r = n.placement, i = n.boundary, s = n.rootBoundary, o = n.padding, a = n.flipVariations, l = n.allowedAutoPlacements, u = l === void 0 ? u1 : l, c = li(r), d = c ? a ? sf : sf.filter(function(p) {
    return li(p) === c;
  }) : vs, f = d.filter(function(p) {
    return u.indexOf(p) >= 0;
  });
  f.length === 0 && (f = d);
  var h = f.reduce(function(p, g) {
    return p[g] = ji(t, {
      placement: g,
      boundary: i,
      rootBoundary: s,
      padding: o
    })[nn(g)], p;
  }, {});
  return Object.keys(h).sort(function(p, g) {
    return h[p] - h[g];
  });
}
function mk(t) {
  if (nn(t) === lc)
    return [];
  var e = oo(t);
  return [lf(t), e, lf(e)];
}
function bk(t) {
  var e = t.state, n = t.options, r = t.name;
  if (!e.modifiersData[r]._skip) {
    for (var i = n.mainAxis, s = i === void 0 ? !0 : i, o = n.altAxis, a = o === void 0 ? !0 : o, l = n.fallbackPlacements, u = n.padding, c = n.boundary, d = n.rootBoundary, f = n.altBoundary, h = n.flipVariations, p = h === void 0 ? !0 : h, g = n.allowedAutoPlacements, m = e.options.placement, y = nn(m), x = y === m, k = l || (x || !p ? [oo(m)] : mk(m)), b = [m].concat(k).reduce(function(ke, fe) {
      return ke.concat(nn(fe) === lc ? gk(e, {
        placement: fe,
        boundary: c,
        rootBoundary: d,
        padding: u,
        flipVariations: p,
        allowedAutoPlacements: g
      }) : fe);
    }, []), E = e.rects.reference, v = e.rects.popper, _ = /* @__PURE__ */ new Map(), T = !0, w = b[0], N = 0; N < b.length; N++) {
      var $ = b[N], K = nn($), U = li($) === si, W = [pt, It].indexOf(K) >= 0, z = W ? "width" : "height", A = ji(e, {
        placement: $,
        boundary: c,
        rootBoundary: d,
        altBoundary: f,
        padding: u
      }), C = W ? U ? Ft : gt : U ? It : pt;
      E[z] > v[z] && (C = oo(C));
      var S = oo(C), L = [];
      if (s && L.push(A[K] <= 0), a && L.push(A[C] <= 0, A[S] <= 0), L.every(function(ke) {
        return ke;
      })) {
        w = $, T = !1;
        break;
      }
      _.set($, L);
    }
    if (T)
      for (var F = p ? 3 : 1, j = function(fe) {
        var Se = b.find(function(ut) {
          var We = _.get(ut);
          if (We)
            return We.slice(0, fe).every(function(yt) {
              return yt;
            });
        });
        if (Se)
          return w = Se, "break";
      }, Q = F; Q > 0; Q--) {
        var pe = j(Q);
        if (pe === "break")
          break;
      }
    e.placement !== w && (e.modifiersData[r]._skip = !0, e.placement = w, e.reset = !0);
  }
}
const yk = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: bk,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function cf(t, e, n) {
  return n === void 0 && (n = {
    x: 0,
    y: 0
  }), {
    top: t.top - e.height - n.y,
    right: t.right - e.width + n.x,
    bottom: t.bottom - e.height + n.y,
    left: t.left - e.width - n.x
  };
}
function df(t) {
  return [pt, Ft, It, gt].some(function(e) {
    return t[e] >= 0;
  });
}
function xk(t) {
  var e = t.state, n = t.name, r = e.rects.reference, i = e.rects.popper, s = e.modifiersData.preventOverflow, o = ji(e, {
    elementContext: "reference"
  }), a = ji(e, {
    altBoundary: !0
  }), l = cf(o, r), u = cf(a, i, s), c = df(l), d = df(u);
  e.modifiersData[n] = {
    referenceClippingOffsets: l,
    popperEscapeOffsets: u,
    isReferenceHidden: c,
    hasPopperEscaped: d
  }, e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-reference-hidden": c,
    "data-popper-escaped": d
  });
}
const kk = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: xk
};
function vk(t, e, n) {
  var r = nn(t), i = [gt, pt].indexOf(r) >= 0 ? -1 : 1, s = typeof n == "function" ? n(Object.assign({}, e, {
    placement: t
  })) : n, o = s[0], a = s[1];
  return o = o || 0, a = (a || 0) * i, [gt, Ft].indexOf(r) >= 0 ? {
    x: a,
    y: o
  } : {
    x: o,
    y: a
  };
}
function Ek(t) {
  var e = t.state, n = t.options, r = t.name, i = n.offset, s = i === void 0 ? [0, 0] : i, o = u1.reduce(function(c, d) {
    return c[d] = vk(d, e.rects, s), c;
  }, {}), a = o[e.placement], l = a.x, u = a.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += u), e.modifiersData[r] = o;
}
const Ck = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: Ek
};
function _k(t) {
  var e = t.state, n = t.name;
  e.modifiersData[n] = b1({
    reference: e.rects.reference,
    element: e.rects.popper,
    strategy: "absolute",
    placement: e.placement
  });
}
const wk = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: _k,
  data: {}
};
function Sk(t) {
  return t === "x" ? "y" : "x";
}
function Ak(t) {
  var e = t.state, n = t.options, r = t.name, i = n.mainAxis, s = i === void 0 ? !0 : i, o = n.altAxis, a = o === void 0 ? !1 : o, l = n.boundary, u = n.rootBoundary, c = n.altBoundary, d = n.padding, f = n.tether, h = f === void 0 ? !0 : f, p = n.tetherOffset, g = p === void 0 ? 0 : p, m = ji(e, {
    boundary: l,
    rootBoundary: u,
    padding: d,
    altBoundary: c
  }), y = nn(e.placement), x = li(e.placement), k = !x, b = dc(y), E = Sk(b), v = e.modifiersData.popperOffsets, _ = e.rects.reference, T = e.rects.popper, w = typeof g == "function" ? g(Object.assign({}, e.rects, {
    placement: e.placement
  })) : g, N = typeof w == "number" ? {
    mainAxis: w,
    altAxis: w
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, w), $ = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, K = {
    x: 0,
    y: 0
  };
  if (v) {
    if (s) {
      var U, W = b === "y" ? pt : gt, z = b === "y" ? It : Ft, A = b === "y" ? "height" : "width", C = v[b], S = C + m[W], L = C - m[z], F = h ? -T[A] / 2 : 0, j = x === si ? _[A] : T[A], Q = x === si ? -T[A] : -_[A], pe = e.elements.arrow, ke = h && pe ? cc(pe) : {
        width: 0,
        height: 0
      }, fe = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : h1(), Se = fe[W], ut = fe[z], We = Ri(0, _[A], ke[A]), yt = k ? _[A] / 2 - F - We - Se - N.mainAxis : j - We - Se - N.mainAxis, ct = k ? -_[A] / 2 + F + We + ut + N.mainAxis : Q + We + ut + N.mainAxis, At = e.elements.arrow && Es(e.elements.arrow), xt = At ? b === "y" ? At.clientTop || 0 : At.clientLeft || 0 : 0, he = (U = $ == null ? void 0 : $[b]) != null ? U : 0, De = C + yt - he - xt, rt = C + ct - he, Le = Ri(h ? So(S, De) : S, C, h ? fr(L, rt) : L);
      v[b] = Le, K[b] = Le - C;
    }
    if (a) {
      var te, Bt = b === "x" ? pt : gt, V = b === "x" ? It : Ft, de = v[E], be = E === "y" ? "height" : "width", ce = de + m[Bt], Qe = de - m[V], je = [pt, gt].indexOf(y) !== -1, H = (te = $ == null ? void 0 : $[E]) != null ? te : 0, q = je ? ce : de - _[be] - T[be] - H + N.altAxis, D = je ? de + _[be] + T[be] - H - N.altAxis : Qe, R = h && je ? Y3(q, de, D) : Ri(h ? q : ce, de, h ? D : Qe);
      v[E] = R, K[E] = R - de;
    }
    e.modifiersData[r] = K;
  }
}
const Mk = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: Ak,
  requiresIfExists: ["offset"]
};
function Tk(t) {
  return {
    scrollLeft: t.scrollLeft,
    scrollTop: t.scrollTop
  };
}
function Dk(t) {
  return t === Ct(t) || !Rt(t) ? fc(t) : Tk(t);
}
function Ok(t) {
  var e = t.getBoundingClientRect(), n = oi(e.width) / t.offsetWidth || 1, r = oi(e.height) / t.offsetHeight || 1;
  return n !== 1 || r !== 1;
}
function Nk(t, e, n) {
  n === void 0 && (n = !1);
  var r = Rt(e), i = Rt(e) && Ok(e), s = Jn(e), o = ai(t, i, n), a = {
    scrollLeft: 0,
    scrollTop: 0
  }, l = {
    x: 0,
    y: 0
  };
  return (r || !r && !n) && ((on(e) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  pc(s)) && (a = Dk(e)), Rt(e) ? (l = ai(e, !0), l.x += e.clientLeft, l.y += e.clientTop) : s && (l.x = hc(s))), {
    x: o.left + a.scrollLeft - l.x,
    y: o.top + a.scrollTop - l.y,
    width: o.width,
    height: o.height
  };
}
function Lk(t) {
  var e = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  t.forEach(function(s) {
    e.set(s.name, s);
  });
  function i(s) {
    n.add(s.name);
    var o = [].concat(s.requires || [], s.requiresIfExists || []);
    o.forEach(function(a) {
      if (!n.has(a)) {
        var l = e.get(a);
        l && i(l);
      }
    }), r.push(s);
  }
  return t.forEach(function(s) {
    n.has(s.name) || i(s);
  }), r;
}
function Rk(t) {
  var e = Lk(t);
  return K3.reduce(function(n, r) {
    return n.concat(e.filter(function(i) {
      return i.phase === r;
    }));
  }, []);
}
function Ik(t) {
  var e;
  return function() {
    return e || (e = new Promise(function(n) {
      Promise.resolve().then(function() {
        e = void 0, n(t());
      });
    })), e;
  };
}
function Fk(t) {
  var e = t.reduce(function(n, r) {
    var i = n[r.name];
    return n[r.name] = i ? Object.assign({}, i, r, {
      options: Object.assign({}, i.options, r.options),
      data: Object.assign({}, i.data, r.data)
    }) : r, n;
  }, {});
  return Object.keys(e).map(function(n) {
    return e[n];
  });
}
var ff = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function hf() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
    e[n] = arguments[n];
  return !e.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function Hk(t) {
  t === void 0 && (t = {});
  var e = t, n = e.defaultModifiers, r = n === void 0 ? [] : n, i = e.defaultOptions, s = i === void 0 ? ff : i;
  return function(a, l, u) {
    u === void 0 && (u = s);
    var c = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, ff, s),
      modifiersData: {},
      elements: {
        reference: a,
        popper: l
      },
      attributes: {},
      styles: {}
    }, d = [], f = !1, h = {
      state: c,
      setOptions: function(y) {
        var x = typeof y == "function" ? y(c.options) : y;
        g(), c.options = Object.assign({}, s, c.options, x), c.scrollParents = {
          reference: vr(a) ? Ii(a) : a.contextElement ? Ii(a.contextElement) : [],
          popper: Ii(l)
        };
        var k = Rk(Fk([].concat(r, c.options.modifiers)));
        return c.orderedModifiers = k.filter(function(b) {
          return b.enabled;
        }), p(), h.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!f) {
          var y = c.elements, x = y.reference, k = y.popper;
          if (hf(x, k)) {
            c.rects = {
              reference: Nk(x, Es(k), c.options.strategy === "fixed"),
              popper: cc(k)
            }, c.reset = !1, c.placement = c.options.placement, c.orderedModifiers.forEach(function(N) {
              return c.modifiersData[N.name] = Object.assign({}, N.data);
            });
            for (var b = 0; b < c.orderedModifiers.length; b++) {
              if (c.reset === !0) {
                c.reset = !1, b = -1;
                continue;
              }
              var E = c.orderedModifiers[b], v = E.fn, _ = E.options, T = _ === void 0 ? {} : _, w = E.name;
              typeof v == "function" && (c = v({
                state: c,
                options: T,
                name: w,
                instance: h
              }) || c);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: Ik(function() {
        return new Promise(function(m) {
          h.forceUpdate(), m(c);
        });
      }),
      destroy: function() {
        g(), f = !0;
      }
    };
    if (!hf(a, l))
      return h;
    h.setOptions(u).then(function(m) {
      !f && u.onFirstUpdate && u.onFirstUpdate(m);
    });
    function p() {
      c.orderedModifiers.forEach(function(m) {
        var y = m.name, x = m.options, k = x === void 0 ? {} : x, b = m.effect;
        if (typeof b == "function") {
          var E = b({
            state: c,
            name: y,
            instance: h,
            options: k
          }), v = function() {
          };
          d.push(E || v);
        }
      });
    }
    function g() {
      d.forEach(function(m) {
        return m();
      }), d = [];
    }
    return h;
  };
}
var Bk = [ak, wk, sk, c1, Ck, yk, Mk, tk, kk], Pk = /* @__PURE__ */ Hk({
  defaultModifiers: Bk
}), $k = "tippy-box", y1 = "tippy-content", zk = "tippy-backdrop", x1 = "tippy-arrow", k1 = "tippy-svg-arrow", Qn = {
  passive: !0,
  capture: !0
}, v1 = function() {
  return document.body;
};
function Vk(t, e) {
  return {}.hasOwnProperty.call(t, e);
}
function pl(t, e, n) {
  if (Array.isArray(t)) {
    var r = t[e];
    return r ?? (Array.isArray(n) ? n[e] : n);
  }
  return t;
}
function gc(t, e) {
  var n = {}.toString.call(t);
  return n.indexOf("[object") === 0 && n.indexOf(e + "]") > -1;
}
function E1(t, e) {
  return typeof t == "function" ? t.apply(void 0, e) : t;
}
function pf(t, e) {
  if (e === 0)
    return t;
  var n;
  return function(r) {
    clearTimeout(n), n = setTimeout(function() {
      t(r);
    }, e);
  };
}
function Uk(t, e) {
  var n = Object.assign({}, t);
  return e.forEach(function(r) {
    delete n[r];
  }), n;
}
function qk(t) {
  return t.split(/\s+/).filter(Boolean);
}
function $r(t) {
  return [].concat(t);
}
function gf(t, e) {
  t.indexOf(e) === -1 && t.push(e);
}
function Zk(t) {
  return t.filter(function(e, n) {
    return t.indexOf(e) === n;
  });
}
function Kk(t) {
  return t.split("-")[0];
}
function Ao(t) {
  return [].slice.call(t);
}
function mf(t) {
  return Object.keys(t).reduce(function(e, n) {
    return t[n] !== void 0 && (e[n] = t[n]), e;
  }, {});
}
function Fi() {
  return document.createElement("div");
}
function Gi(t) {
  return ["Element", "Fragment"].some(function(e) {
    return gc(t, e);
  });
}
function Wk(t) {
  return gc(t, "NodeList");
}
function jk(t) {
  return gc(t, "MouseEvent");
}
function Gk(t) {
  return !!(t && t._tippy && t._tippy.reference === t);
}
function Jk(t) {
  return Gi(t) ? [t] : Wk(t) ? Ao(t) : Array.isArray(t) ? t : Ao(document.querySelectorAll(t));
}
function gl(t, e) {
  t.forEach(function(n) {
    n && (n.style.transitionDuration = e + "ms");
  });
}
function bf(t, e) {
  t.forEach(function(n) {
    n && n.setAttribute("data-state", e);
  });
}
function Yk(t) {
  var e, n = $r(t), r = n[0];
  return r != null && (e = r.ownerDocument) != null && e.body ? r.ownerDocument : document;
}
function Xk(t, e) {
  var n = e.clientX, r = e.clientY;
  return t.every(function(i) {
    var s = i.popperRect, o = i.popperState, a = i.props, l = a.interactiveBorder, u = Kk(o.placement), c = o.modifiersData.offset;
    if (!c)
      return !0;
    var d = u === "bottom" ? c.top.y : 0, f = u === "top" ? c.bottom.y : 0, h = u === "right" ? c.left.x : 0, p = u === "left" ? c.right.x : 0, g = s.top - r + d > l, m = r - s.bottom - f > l, y = s.left - n + h > l, x = n - s.right - p > l;
    return g || m || y || x;
  });
}
function ml(t, e, n) {
  var r = e + "EventListener";
  ["transitionend", "webkitTransitionEnd"].forEach(function(i) {
    t[r](i, n);
  });
}
function yf(t, e) {
  for (var n = e; n; ) {
    var r;
    if (t.contains(n))
      return !0;
    n = n.getRootNode == null || (r = n.getRootNode()) == null ? void 0 : r.host;
  }
  return !1;
}
var Gt = {
  isTouch: !1
}, xf = 0;
function Qk() {
  Gt.isTouch || (Gt.isTouch = !0, window.performance && document.addEventListener("mousemove", C1));
}
function C1() {
  var t = performance.now();
  t - xf < 20 && (Gt.isTouch = !1, document.removeEventListener("mousemove", C1)), xf = t;
}
function ev() {
  var t = document.activeElement;
  if (Gk(t)) {
    var e = t._tippy;
    t.blur && !e.state.isVisible && t.blur();
  }
}
function tv() {
  document.addEventListener("touchstart", Qk, Qn), window.addEventListener("blur", ev);
}
var nv = typeof window < "u" && typeof document < "u", rv = nv ? (
  // @ts-ignore
  !!window.msCrypto
) : !1;
function Dr(t) {
  var e = t === "destroy" ? "n already-" : " ";
  return [t + "() was called on a" + e + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
}
function kf(t) {
  var e = /[ \t]{2,}/g, n = /^[ \t]*/gm;
  return t.replace(e, " ").replace(n, "").trim();
}
function iv(t) {
  return kf(`
  %ctippy.js

  %c` + kf(t) + `

  %c👷‍ This is a development-only message. It will be removed in production.
  `);
}
function _1(t) {
  return [
    iv(t),
    // title
    "color: #00C584; font-size: 1.3em; font-weight: bold;",
    // message
    "line-height: 1.5",
    // footer
    "color: #a6a095;"
  ];
}
var Ji;
({}).NODE_ENV !== "production" && sv();
function sv() {
  Ji = /* @__PURE__ */ new Set();
}
function yn(t, e) {
  if (t && !Ji.has(e)) {
    var n;
    Ji.add(e), (n = console).warn.apply(n, _1(e));
  }
}
function xu(t, e) {
  if (t && !Ji.has(e)) {
    var n;
    Ji.add(e), (n = console).error.apply(n, _1(e));
  }
}
function ov(t) {
  var e = !t, n = Object.prototype.toString.call(t) === "[object Object]" && !t.addEventListener;
  xu(e, ["tippy() was passed", "`" + String(t) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" ")), xu(n, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
}
var w1 = {
  animateFill: !1,
  followCursor: !1,
  inlinePositioning: !1,
  sticky: !1
}, av = {
  allowHTML: !1,
  animation: "fade",
  arrow: !0,
  content: "",
  inertia: !1,
  maxWidth: 350,
  role: "tooltip",
  theme: "",
  zIndex: 9999
}, Et = Object.assign({
  appendTo: v1,
  aria: {
    content: "auto",
    expanded: "auto"
  },
  delay: 0,
  duration: [300, 250],
  getReferenceClientRect: null,
  hideOnClick: !0,
  ignoreAttributes: !1,
  interactive: !1,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  moveTransition: "",
  offset: [0, 10],
  onAfterUpdate: function() {
  },
  onBeforeUpdate: function() {
  },
  onCreate: function() {
  },
  onDestroy: function() {
  },
  onHidden: function() {
  },
  onHide: function() {
  },
  onMount: function() {
  },
  onShow: function() {
  },
  onShown: function() {
  },
  onTrigger: function() {
  },
  onUntrigger: function() {
  },
  onClickOutside: function() {
  },
  placement: "top",
  plugins: [],
  popperOptions: {},
  render: null,
  showOnCreate: !1,
  touch: !0,
  trigger: "mouseenter focus",
  triggerTarget: null
}, w1, av), lv = Object.keys(Et), uv = function(e) {
  ({}).NODE_ENV !== "production" && A1(e, []);
  var n = Object.keys(e);
  n.forEach(function(r) {
    Et[r] = e[r];
  });
};
function S1(t) {
  var e = t.plugins || [], n = e.reduce(function(r, i) {
    var s = i.name, o = i.defaultValue;
    if (s) {
      var a;
      r[s] = t[s] !== void 0 ? t[s] : (a = Et[s]) != null ? a : o;
    }
    return r;
  }, {});
  return Object.assign({}, t, n);
}
function cv(t, e) {
  var n = e ? Object.keys(S1(Object.assign({}, Et, {
    plugins: e
  }))) : lv, r = n.reduce(function(i, s) {
    var o = (t.getAttribute("data-tippy-" + s) || "").trim();
    if (!o)
      return i;
    if (s === "content")
      i[s] = o;
    else
      try {
        i[s] = JSON.parse(o);
      } catch {
        i[s] = o;
      }
    return i;
  }, {});
  return r;
}
function vf(t, e) {
  var n = Object.assign({}, e, {
    content: E1(e.content, [t])
  }, e.ignoreAttributes ? {} : cv(t, e.plugins));
  return n.aria = Object.assign({}, Et.aria, n.aria), n.aria = {
    expanded: n.aria.expanded === "auto" ? e.interactive : n.aria.expanded,
    content: n.aria.content === "auto" ? e.interactive ? null : "describedby" : n.aria.content
  }, n;
}
function A1(t, e) {
  t === void 0 && (t = {}), e === void 0 && (e = []);
  var n = Object.keys(t);
  n.forEach(function(r) {
    var i = Uk(Et, Object.keys(w1)), s = !Vk(i, r);
    s && (s = e.filter(function(o) {
      return o.name === r;
    }).length === 0), yn(s, ["`" + r + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", `

`, `All props: https://atomiks.github.io/tippyjs/v6/all-props/
`, "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
  });
}
var dv = function() {
  return "innerHTML";
};
function ku(t, e) {
  t[dv()] = e;
}
function Ef(t) {
  var e = Fi();
  return t === !0 ? e.className = x1 : (e.className = k1, Gi(t) ? e.appendChild(t) : ku(e, t)), e;
}
function Cf(t, e) {
  Gi(e.content) ? (ku(t, ""), t.appendChild(e.content)) : typeof e.content != "function" && (e.allowHTML ? ku(t, e.content) : t.textContent = e.content);
}
function vu(t) {
  var e = t.firstElementChild, n = Ao(e.children);
  return {
    box: e,
    content: n.find(function(r) {
      return r.classList.contains(y1);
    }),
    arrow: n.find(function(r) {
      return r.classList.contains(x1) || r.classList.contains(k1);
    }),
    backdrop: n.find(function(r) {
      return r.classList.contains(zk);
    })
  };
}
function M1(t) {
  var e = Fi(), n = Fi();
  n.className = $k, n.setAttribute("data-state", "hidden"), n.setAttribute("tabindex", "-1");
  var r = Fi();
  r.className = y1, r.setAttribute("data-state", "hidden"), Cf(r, t.props), e.appendChild(n), n.appendChild(r), i(t.props, t.props);
  function i(s, o) {
    var a = vu(e), l = a.box, u = a.content, c = a.arrow;
    o.theme ? l.setAttribute("data-theme", o.theme) : l.removeAttribute("data-theme"), typeof o.animation == "string" ? l.setAttribute("data-animation", o.animation) : l.removeAttribute("data-animation"), o.inertia ? l.setAttribute("data-inertia", "") : l.removeAttribute("data-inertia"), l.style.maxWidth = typeof o.maxWidth == "number" ? o.maxWidth + "px" : o.maxWidth, o.role ? l.setAttribute("role", o.role) : l.removeAttribute("role"), (s.content !== o.content || s.allowHTML !== o.allowHTML) && Cf(u, t.props), o.arrow ? c ? s.arrow !== o.arrow && (l.removeChild(c), l.appendChild(Ef(o.arrow))) : l.appendChild(Ef(o.arrow)) : c && l.removeChild(c);
  }
  return {
    popper: e,
    onUpdate: i
  };
}
M1.$$tippy = !0;
var fv = 1, Hs = [], bl = [];
function hv(t, e) {
  var n = vf(t, Object.assign({}, Et, S1(mf(e)))), r, i, s, o = !1, a = !1, l = !1, u = !1, c, d, f, h = [], p = pf(De, n.interactiveDebounce), g, m = fv++, y = null, x = Zk(n.plugins), k = {
    // Is the instance currently enabled?
    isEnabled: !0,
    // Is the tippy currently showing and not transitioning out?
    isVisible: !1,
    // Has the instance been destroyed?
    isDestroyed: !1,
    // Is the tippy currently mounted to the DOM?
    isMounted: !1,
    // Has the tippy finished transitioning in?
    isShown: !1
  }, b = {
    // properties
    id: m,
    reference: t,
    popper: Fi(),
    popperInstance: y,
    props: n,
    state: k,
    plugins: x,
    // methods
    clearDelayTimeouts: q,
    setProps: D,
    setContent: R,
    show: J,
    hide: ae,
    hideWithInteractivity: Fe,
    enable: je,
    disable: H,
    unmount: kt,
    destroy: Za
  };
  if (!n.render)
    return {}.NODE_ENV !== "production" && xu(!0, "render() function has not been supplied."), b;
  var E = n.render(b), v = E.popper, _ = E.onUpdate;
  v.setAttribute("data-tippy-root", ""), v.id = "tippy-" + b.id, b.popper = v, t._tippy = b, v._tippy = b;
  var T = x.map(function(M) {
    return M.fn(b);
  }), w = t.hasAttribute("aria-expanded");
  return At(), F(), C(), S("onCreate", [b]), n.showOnCreate && ce(), v.addEventListener("mouseenter", function() {
    b.props.interactive && b.state.isVisible && b.clearDelayTimeouts();
  }), v.addEventListener("mouseleave", function() {
    b.props.interactive && b.props.trigger.indexOf("mouseenter") >= 0 && W().addEventListener("mousemove", p);
  }), b;
  function N() {
    var M = b.props.touch;
    return Array.isArray(M) ? M : [M, 0];
  }
  function $() {
    return N()[0] === "hold";
  }
  function K() {
    var M;
    return !!((M = b.props.render) != null && M.$$tippy);
  }
  function U() {
    return g || t;
  }
  function W() {
    var M = U().parentNode;
    return M ? Yk(M) : document;
  }
  function z() {
    return vu(v);
  }
  function A(M) {
    return b.state.isMounted && !b.state.isVisible || Gt.isTouch || c && c.type === "focus" ? 0 : pl(b.props.delay, M ? 0 : 1, Et.delay);
  }
  function C(M) {
    M === void 0 && (M = !1), v.style.pointerEvents = b.props.interactive && !M ? "" : "none", v.style.zIndex = "" + b.props.zIndex;
  }
  function S(M, G, ie) {
    if (ie === void 0 && (ie = !0), T.forEach(function(me) {
      me[M] && me[M].apply(me, G);
    }), ie) {
      var Ee;
      (Ee = b.props)[M].apply(Ee, G);
    }
  }
  function L() {
    var M = b.props.aria;
    if (M.content) {
      var G = "aria-" + M.content, ie = v.id, Ee = $r(b.props.triggerTarget || t);
      Ee.forEach(function(me) {
        var it = me.getAttribute(G);
        if (b.state.isVisible)
          me.setAttribute(G, it ? it + " " + ie : ie);
        else {
          var Mt = it && it.replace(ie, "").trim();
          Mt ? me.setAttribute(G, Mt) : me.removeAttribute(G);
        }
      });
    }
  }
  function F() {
    if (!(w || !b.props.aria.expanded)) {
      var M = $r(b.props.triggerTarget || t);
      M.forEach(function(G) {
        b.props.interactive ? G.setAttribute("aria-expanded", b.state.isVisible && G === U() ? "true" : "false") : G.removeAttribute("aria-expanded");
      });
    }
  }
  function j() {
    W().removeEventListener("mousemove", p), Hs = Hs.filter(function(M) {
      return M !== p;
    });
  }
  function Q(M) {
    if (!(Gt.isTouch && (l || M.type === "mousedown"))) {
      var G = M.composedPath && M.composedPath()[0] || M.target;
      if (!(b.props.interactive && yf(v, G))) {
        if ($r(b.props.triggerTarget || t).some(function(ie) {
          return yf(ie, G);
        })) {
          if (Gt.isTouch || b.state.isVisible && b.props.trigger.indexOf("click") >= 0)
            return;
        } else
          S("onClickOutside", [b, M]);
        b.props.hideOnClick === !0 && (b.clearDelayTimeouts(), b.hide(), a = !0, setTimeout(function() {
          a = !1;
        }), b.state.isMounted || Se());
      }
    }
  }
  function pe() {
    l = !0;
  }
  function ke() {
    l = !1;
  }
  function fe() {
    var M = W();
    M.addEventListener("mousedown", Q, !0), M.addEventListener("touchend", Q, Qn), M.addEventListener("touchstart", ke, Qn), M.addEventListener("touchmove", pe, Qn);
  }
  function Se() {
    var M = W();
    M.removeEventListener("mousedown", Q, !0), M.removeEventListener("touchend", Q, Qn), M.removeEventListener("touchstart", ke, Qn), M.removeEventListener("touchmove", pe, Qn);
  }
  function ut(M, G) {
    yt(M, function() {
      !b.state.isVisible && v.parentNode && v.parentNode.contains(v) && G();
    });
  }
  function We(M, G) {
    yt(M, G);
  }
  function yt(M, G) {
    var ie = z().box;
    function Ee(me) {
      me.target === ie && (ml(ie, "remove", Ee), G());
    }
    if (M === 0)
      return G();
    ml(ie, "remove", d), ml(ie, "add", Ee), d = Ee;
  }
  function ct(M, G, ie) {
    ie === void 0 && (ie = !1);
    var Ee = $r(b.props.triggerTarget || t);
    Ee.forEach(function(me) {
      me.addEventListener(M, G, ie), h.push({
        node: me,
        eventType: M,
        handler: G,
        options: ie
      });
    });
  }
  function At() {
    $() && (ct("touchstart", he, {
      passive: !0
    }), ct("touchend", rt, {
      passive: !0
    })), qk(b.props.trigger).forEach(function(M) {
      if (M !== "manual")
        switch (ct(M, he), M) {
          case "mouseenter":
            ct("mouseleave", rt);
            break;
          case "focus":
            ct(rv ? "focusout" : "blur", Le);
            break;
          case "focusin":
            ct("focusout", Le);
            break;
        }
    });
  }
  function xt() {
    h.forEach(function(M) {
      var G = M.node, ie = M.eventType, Ee = M.handler, me = M.options;
      G.removeEventListener(ie, Ee, me);
    }), h = [];
  }
  function he(M) {
    var G, ie = !1;
    if (!(!b.state.isEnabled || te(M) || a)) {
      var Ee = ((G = c) == null ? void 0 : G.type) === "focus";
      c = M, g = M.currentTarget, F(), !b.state.isVisible && jk(M) && Hs.forEach(function(me) {
        return me(M);
      }), M.type === "click" && (b.props.trigger.indexOf("mouseenter") < 0 || o) && b.props.hideOnClick !== !1 && b.state.isVisible ? ie = !0 : ce(M), M.type === "click" && (o = !ie), ie && !Ee && Qe(M);
    }
  }
  function De(M) {
    var G = M.target, ie = U().contains(G) || v.contains(G);
    if (!(M.type === "mousemove" && ie)) {
      var Ee = be().concat(v).map(function(me) {
        var it, Mt = me._tippy, Sr = (it = Mt.popperInstance) == null ? void 0 : it.state;
        return Sr ? {
          popperRect: me.getBoundingClientRect(),
          popperState: Sr,
          props: n
        } : null;
      }).filter(Boolean);
      Xk(Ee, M) && (j(), Qe(M));
    }
  }
  function rt(M) {
    var G = te(M) || b.props.trigger.indexOf("click") >= 0 && o;
    if (!G) {
      if (b.props.interactive) {
        b.hideWithInteractivity(M);
        return;
      }
      Qe(M);
    }
  }
  function Le(M) {
    b.props.trigger.indexOf("focusin") < 0 && M.target !== U() || b.props.interactive && M.relatedTarget && v.contains(M.relatedTarget) || Qe(M);
  }
  function te(M) {
    return Gt.isTouch ? $() !== M.type.indexOf("touch") >= 0 : !1;
  }
  function Bt() {
    V();
    var M = b.props, G = M.popperOptions, ie = M.placement, Ee = M.offset, me = M.getReferenceClientRect, it = M.moveTransition, Mt = K() ? vu(v).arrow : null, Sr = me ? {
      getBoundingClientRect: me,
      contextElement: me.contextElement || U()
    } : t, td = {
      name: "$$tippy",
      enabled: !0,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: function(Ds) {
        var Ar = Ds.state;
        if (K()) {
          var Um = z(), Wa = Um.box;
          ["placement", "reference-hidden", "escaped"].forEach(function(Os) {
            Os === "placement" ? Wa.setAttribute("data-placement", Ar.placement) : Ar.attributes.popper["data-popper-" + Os] ? Wa.setAttribute("data-" + Os, "") : Wa.removeAttribute("data-" + Os);
          }), Ar.attributes.popper = {};
        }
      }
    }, Yn = [{
      name: "offset",
      options: {
        offset: Ee
      }
    }, {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    }, {
      name: "flip",
      options: {
        padding: 5
      }
    }, {
      name: "computeStyles",
      options: {
        adaptive: !it
      }
    }, td];
    K() && Mt && Yn.push({
      name: "arrow",
      options: {
        element: Mt,
        padding: 3
      }
    }), Yn.push.apply(Yn, (G == null ? void 0 : G.modifiers) || []), b.popperInstance = Pk(Sr, v, Object.assign({}, G, {
      placement: ie,
      onFirstUpdate: f,
      modifiers: Yn
    }));
  }
  function V() {
    b.popperInstance && (b.popperInstance.destroy(), b.popperInstance = null);
  }
  function de() {
    var M = b.props.appendTo, G, ie = U();
    b.props.interactive && M === v1 || M === "parent" ? G = ie.parentNode : G = E1(M, [ie]), G.contains(v) || G.appendChild(v), b.state.isMounted = !0, Bt(), {}.NODE_ENV !== "production" && yn(b.props.interactive && M === Et.appendTo && ie.nextElementSibling !== v, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", `

`, "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", `

`, "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", `

`, "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
  }
  function be() {
    return Ao(v.querySelectorAll("[data-tippy-root]"));
  }
  function ce(M) {
    b.clearDelayTimeouts(), M && S("onTrigger", [b, M]), fe();
    var G = A(!0), ie = N(), Ee = ie[0], me = ie[1];
    Gt.isTouch && Ee === "hold" && me && (G = me), G ? r = setTimeout(function() {
      b.show();
    }, G) : b.show();
  }
  function Qe(M) {
    if (b.clearDelayTimeouts(), S("onUntrigger", [b, M]), !b.state.isVisible) {
      Se();
      return;
    }
    if (!(b.props.trigger.indexOf("mouseenter") >= 0 && b.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(M.type) >= 0 && o)) {
      var G = A(!1);
      G ? i = setTimeout(function() {
        b.state.isVisible && b.hide();
      }, G) : s = requestAnimationFrame(function() {
        b.hide();
      });
    }
  }
  function je() {
    b.state.isEnabled = !0;
  }
  function H() {
    b.hide(), b.state.isEnabled = !1;
  }
  function q() {
    clearTimeout(r), clearTimeout(i), cancelAnimationFrame(s);
  }
  function D(M) {
    if ({}.NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("setProps")), !b.state.isDestroyed) {
      S("onBeforeUpdate", [b, M]), xt();
      var G = b.props, ie = vf(t, Object.assign({}, G, mf(M), {
        ignoreAttributes: !0
      }));
      b.props = ie, At(), G.interactiveDebounce !== ie.interactiveDebounce && (j(), p = pf(De, ie.interactiveDebounce)), G.triggerTarget && !ie.triggerTarget ? $r(G.triggerTarget).forEach(function(Ee) {
        Ee.removeAttribute("aria-expanded");
      }) : ie.triggerTarget && t.removeAttribute("aria-expanded"), F(), C(), _ && _(G, ie), b.popperInstance && (Bt(), be().forEach(function(Ee) {
        requestAnimationFrame(Ee._tippy.popperInstance.forceUpdate);
      })), S("onAfterUpdate", [b, M]);
    }
  }
  function R(M) {
    b.setProps({
      content: M
    });
  }
  function J() {
    ({}).NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("show"));
    var M = b.state.isVisible, G = b.state.isDestroyed, ie = !b.state.isEnabled, Ee = Gt.isTouch && !b.props.touch, me = pl(b.props.duration, 0, Et.duration);
    if (!(M || G || ie || Ee) && !U().hasAttribute("disabled") && (S("onShow", [b], !1), b.props.onShow(b) !== !1)) {
      if (b.state.isVisible = !0, K() && (v.style.visibility = "visible"), C(), fe(), b.state.isMounted || (v.style.transition = "none"), K()) {
        var it = z(), Mt = it.box, Sr = it.content;
        gl([Mt, Sr], 0);
      }
      f = function() {
        var Yn;
        if (!(!b.state.isVisible || u)) {
          if (u = !0, v.offsetHeight, v.style.transition = b.props.moveTransition, K() && b.props.animation) {
            var Ka = z(), Ds = Ka.box, Ar = Ka.content;
            gl([Ds, Ar], me), bf([Ds, Ar], "visible");
          }
          L(), F(), gf(bl, b), (Yn = b.popperInstance) == null || Yn.forceUpdate(), S("onMount", [b]), b.props.animation && K() && We(me, function() {
            b.state.isShown = !0, S("onShown", [b]);
          });
        }
      }, de();
    }
  }
  function ae() {
    ({}).NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("hide"));
    var M = !b.state.isVisible, G = b.state.isDestroyed, ie = !b.state.isEnabled, Ee = pl(b.props.duration, 1, Et.duration);
    if (!(M || G || ie) && (S("onHide", [b], !1), b.props.onHide(b) !== !1)) {
      if (b.state.isVisible = !1, b.state.isShown = !1, u = !1, o = !1, K() && (v.style.visibility = "hidden"), j(), Se(), C(!0), K()) {
        var me = z(), it = me.box, Mt = me.content;
        b.props.animation && (gl([it, Mt], Ee), bf([it, Mt], "hidden"));
      }
      L(), F(), b.props.animation ? K() && ut(Ee, b.unmount) : b.unmount();
    }
  }
  function Fe(M) {
    ({}).NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("hideWithInteractivity")), W().addEventListener("mousemove", p), gf(Hs, p), p(M);
  }
  function kt() {
    ({}).NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("unmount")), b.state.isVisible && b.hide(), b.state.isMounted && (V(), be().forEach(function(M) {
      M._tippy.unmount();
    }), v.parentNode && v.parentNode.removeChild(v), bl = bl.filter(function(M) {
      return M !== b;
    }), b.state.isMounted = !1, S("onHidden", [b]));
  }
  function Za() {
    ({}).NODE_ENV !== "production" && yn(b.state.isDestroyed, Dr("destroy")), !b.state.isDestroyed && (b.clearDelayTimeouts(), b.unmount(), xt(), delete t._tippy, b.state.isDestroyed = !0, S("onDestroy", [b]));
  }
}
function Ke(t, e) {
  e === void 0 && (e = {});
  var n = Et.plugins.concat(e.plugins || []);
  ({}).NODE_ENV !== "production" && (ov(t), A1(e, n)), tv();
  var r = Object.assign({}, e, {
    plugins: n
  }), i = Jk(t);
  if ({}.NODE_ENV !== "production") {
    var s = Gi(r.content), o = i.length > 1;
    yn(s && o, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", `

`, "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", `

`, `1) content: element.innerHTML
`, "2) content: () => element.cloneNode(true)"].join(" "));
  }
  var a = i.reduce(function(l, u) {
    var c = u && hv(u, r);
    return c && l.push(c), l;
  }, []);
  return Gi(t) ? a[0] : a;
}
Ke.defaultProps = Et;
Ke.setDefaultProps = uv;
Ke.currentInput = Gt;
Object.assign({}, c1, {
  effect: function(e) {
    var n = e.state, r = {
      popper: {
        position: n.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(n.elements.popper.style, r.popper), n.styles = r, n.elements.arrow && Object.assign(n.elements.arrow.style, r.arrow);
  }
});
Ke.setDefaultProps({
  render: M1
});
class mi extends ge {
  constructor() {
    super(...arguments);
    P(this, "tippyInstance");
    P(this, "tippyEl");
    P(this, "textEl");
    P(this, "menuData", []);
    P(this, "menuTextWidth", "40px");
    P(this, "defaultMenuIndex", 0);
    P(this, "refreshMenuText", !0);
    P(this, "width", "48px");
    P(this, "dropDivWith", "100px");
    P(this, "dropDivHeight", "260px");
    P(this, "showItemsTip", !1);
  }
  renderTemplate() {
    this.template = `
         <div style="width: ${this.width};">
         <div style="display: flex" id="tippy">
             <span style="line-height: 18px;font-size: 14px;text-align:center;overflow: hidden; width: ${this.menuTextWidth}" id="text">
                ${this.onMenuTextRender(this.defaultMenuIndex)}
             </span>
             <div style="width: 18px;height: 18px;display: inline-block">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
             </div>
         </div>
         </div>
        `;
  }
  connectedCallback() {
    this.renderTemplate(), super.connectedCallback(), this.textEl = this.querySelector("#text"), this.tippyInstance = Ke(this.querySelector("#tippy"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const n = document.createElement("div");
    n.style.height = this.dropDivHeight, n.style.width = this.dropDivWith, n.classList.add("aie-dropdown-container");
    for (let r = 0; r < this.menuData.length; r++) {
      const i = document.createElement("div");
      if (i.classList.add("aie-dropdown-item"), i.innerHTML = `
            <div class="red-dot-container" id="item${r}"><div class="${r == 0 ? "red-dot" : ""}"></div></div>
            <div class="text">${this.onDropdownItemRender(r)}</div>
            `, i.addEventListener("click", () => {
        this.onDropdownItemClick(r), this.tippyInstance.hide();
      }), this.showItemsTip) {
        const s = this.menuData[r];
        Ke(i, {
          appendTo: () => this.closest(".aie-container"),
          content: s.tip || s.title,
          theme: "aietip",
          arrow: !0,
          placement: "right"
        });
      }
      n.appendChild(i);
    }
    return this.tippyEl = n, n;
  }
  onTransaction(n) {
    var s, o;
    const r = (s = this.tippyEl) == null ? void 0 : s.querySelector(".red-dot");
    r && r.classList.remove("red-dot");
    let i = this.defaultMenuIndex;
    for (let a = 0; a < this.menuData.length; a++)
      if (this.onDropdownActive(n.editor, a)) {
        i = a;
        break;
      }
    if ((o = this.tippyEl) == null || o.querySelector(`#item${i}`).children[0].classList.add("red-dot"), this.refreshMenuText && this.textEl) {
      const a = this.onMenuTextRender(i);
      typeof a == "string" || typeof a == "number" ? this.textEl.innerHTML = a : (this.textEl.removeChild(this.textEl.firstChild), this.textEl.appendChild(a));
    }
  }
}
const pv = {
  type: "logger",
  log(t) {
    this.output("log", t);
  },
  warn(t) {
    this.output("warn", t);
  },
  error(t) {
    this.output("error", t);
  },
  output(t, e) {
    console && console[t] && console[t].apply(console, e);
  }
};
class Mo {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(e, n);
  }
  init(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = n.prefix || "i18next:", this.logger = e || pv, this.options = n, this.debug = n.debug;
  }
  log() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "log", "", !0);
  }
  warn() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "warn", "", !0);
  }
  error() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "error", "");
  }
  deprecate() {
    for (var e = arguments.length, n = new Array(e), r = 0; r < e; r++)
      n[r] = arguments[r];
    return this.forward(n, "warn", "WARNING DEPRECATED: ", !0);
  }
  forward(e, n, r, i) {
    return i && !this.debug ? null : (typeof e[0] == "string" && (e[0] = `${r}${this.prefix} ${e[0]}`), this.logger[n](e));
  }
  create(e) {
    return new Mo(this.logger, {
      prefix: `${this.prefix}:${e}:`,
      ...this.options
    });
  }
  clone(e) {
    return e = e || this.options, e.prefix = e.prefix || this.prefix, new Mo(this.logger, e);
  }
}
var Qt = new Mo();
class _a {
  constructor() {
    this.observers = {};
  }
  on(e, n) {
    return e.split(" ").forEach((r) => {
      this.observers[r] = this.observers[r] || [], this.observers[r].push(n);
    }), this;
  }
  off(e, n) {
    if (this.observers[e]) {
      if (!n) {
        delete this.observers[e];
        return;
      }
      this.observers[e] = this.observers[e].filter((r) => r !== n);
    }
  }
  emit(e) {
    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
      r[i - 1] = arguments[i];
    this.observers[e] && [].concat(this.observers[e]).forEach((o) => {
      o(...r);
    }), this.observers["*"] && [].concat(this.observers["*"]).forEach((o) => {
      o.apply(o, [e, ...r]);
    });
  }
}
function Ei() {
  let t, e;
  const n = new Promise((r, i) => {
    t = r, e = i;
  });
  return n.resolve = t, n.reject = e, n;
}
function _f(t) {
  return t == null ? "" : "" + t;
}
function gv(t, e, n) {
  t.forEach((r) => {
    e[r] && (n[r] = e[r]);
  });
}
function mc(t, e, n) {
  function r(o) {
    return o && o.indexOf("###") > -1 ? o.replace(/###/g, ".") : o;
  }
  function i() {
    return !t || typeof t == "string";
  }
  const s = typeof e != "string" ? [].concat(e) : e.split(".");
  for (; s.length > 1; ) {
    if (i())
      return {};
    const o = r(s.shift());
    !t[o] && n && (t[o] = new n()), Object.prototype.hasOwnProperty.call(t, o) ? t = t[o] : t = {};
  }
  return i() ? {} : {
    obj: t,
    k: r(s.shift())
  };
}
function wf(t, e, n) {
  const {
    obj: r,
    k: i
  } = mc(t, e, Object);
  r[i] = n;
}
function mv(t, e, n, r) {
  const {
    obj: i,
    k: s
  } = mc(t, e, Object);
  i[s] = i[s] || [], r && (i[s] = i[s].concat(n)), r || i[s].push(n);
}
function To(t, e) {
  const {
    obj: n,
    k: r
  } = mc(t, e);
  if (n)
    return n[r];
}
function bv(t, e, n) {
  const r = To(t, n);
  return r !== void 0 ? r : To(e, n);
}
function T1(t, e, n) {
  for (const r in e)
    r !== "__proto__" && r !== "constructor" && (r in t ? typeof t[r] == "string" || t[r] instanceof String || typeof e[r] == "string" || e[r] instanceof String ? n && (t[r] = e[r]) : T1(t[r], e[r], n) : t[r] = e[r]);
  return t;
}
function Or(t) {
  return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var yv = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function xv(t) {
  return typeof t == "string" ? t.replace(/[&<>"'\/]/g, (e) => yv[e]) : t;
}
const kv = [" ", ",", "?", "!", ";"];
function vv(t, e, n) {
  e = e || "", n = n || "";
  const r = kv.filter((o) => e.indexOf(o) < 0 && n.indexOf(o) < 0);
  if (r.length === 0)
    return !0;
  const i = new RegExp(`(${r.map((o) => o === "?" ? "\\?" : o).join("|")})`);
  let s = !i.test(t);
  if (!s) {
    const o = t.indexOf(n);
    o > 0 && !i.test(t.substring(0, o)) && (s = !0);
  }
  return s;
}
function Do(t, e) {
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!t)
    return;
  if (t[e])
    return t[e];
  const r = e.split(n);
  let i = t;
  for (let s = 0; s < r.length; ++s) {
    if (!i || typeof i[r[s]] == "string" && s + 1 < r.length)
      return;
    if (i[r[s]] === void 0) {
      let o = 2, a = r.slice(s, s + o).join(n), l = i[a];
      for (; l === void 0 && r.length > s + o; )
        o++, a = r.slice(s, s + o).join(n), l = i[a];
      if (l === void 0)
        return;
      if (l === null)
        return null;
      if (e.endsWith(a)) {
        if (typeof l == "string")
          return l;
        if (a && typeof l[a] == "string")
          return l[a];
      }
      const u = r.slice(s + o).join(n);
      return u ? Do(l, u, n) : void 0;
    }
    i = i[r[s]];
  }
  return i;
}
function Oo(t) {
  return t && t.indexOf("_") > 0 ? t.replace("_", "-") : t;
}
class Sf extends _a {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super(), this.data = e || {}, this.options = n, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0);
  }
  addNamespaces(e) {
    this.options.ns.indexOf(e) < 0 && this.options.ns.push(e);
  }
  removeNamespaces(e) {
    const n = this.options.ns.indexOf(e);
    n > -1 && this.options.ns.splice(n, 1);
  }
  getResource(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = i.keySeparator !== void 0 ? i.keySeparator : this.options.keySeparator, o = i.ignoreJSONStructure !== void 0 ? i.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let a = [e, n];
    r && typeof r != "string" && (a = a.concat(r)), r && typeof r == "string" && (a = a.concat(s ? r.split(s) : r)), e.indexOf(".") > -1 && (a = e.split("."));
    const l = To(this.data, a);
    return l || !o || typeof r != "string" ? l : Do(this.data && this.data[e] && this.data[e][n], r, s);
  }
  addResource(e, n, r, i) {
    let s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: !1
    };
    const o = s.keySeparator !== void 0 ? s.keySeparator : this.options.keySeparator;
    let a = [e, n];
    r && (a = a.concat(o ? r.split(o) : r)), e.indexOf(".") > -1 && (a = e.split("."), i = n, n = a[1]), this.addNamespaces(n), wf(this.data, a, i), s.silent || this.emit("added", e, n, r, i);
  }
  addResources(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: !1
    };
    for (const s in r)
      (typeof r[s] == "string" || Object.prototype.toString.apply(r[s]) === "[object Array]") && this.addResource(e, n, s, r[s], {
        silent: !0
      });
    i.silent || this.emit("added", e, n, r);
  }
  addResourceBundle(e, n, r, i, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: !1
    }, a = [e, n];
    e.indexOf(".") > -1 && (a = e.split("."), i = r, r = n, n = a[1]), this.addNamespaces(n);
    let l = To(this.data, a) || {};
    i ? T1(l, r, s) : l = {
      ...l,
      ...r
    }, wf(this.data, a, l), o.silent || this.emit("added", e, n, r);
  }
  removeResourceBundle(e, n) {
    this.hasResourceBundle(e, n) && delete this.data[e][n], this.removeNamespaces(n), this.emit("removed", e, n);
  }
  hasResourceBundle(e, n) {
    return this.getResource(e, n) !== void 0;
  }
  getResourceBundle(e, n) {
    return n || (n = this.options.defaultNS), this.options.compatibilityAPI === "v1" ? {
      ...this.getResource(e, n)
    } : this.getResource(e, n);
  }
  getDataByLanguage(e) {
    return this.data[e];
  }
  hasLanguageSomeTranslations(e) {
    const n = this.getDataByLanguage(e);
    return !!(n && Object.keys(n) || []).find((i) => n[i] && Object.keys(n[i]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}
var D1 = {
  processors: {},
  addPostProcessor(t) {
    this.processors[t.name] = t;
  },
  handle(t, e, n, r, i) {
    return t.forEach((s) => {
      this.processors[s] && (e = this.processors[s].process(e, n, r, i));
    }), e;
  }
};
const Af = {};
class No extends _a {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super(), gv(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], e, this), this.options = n, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = Qt.create("translator");
  }
  changeLanguage(e) {
    e && (this.language = e);
  }
  exists(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (e == null)
      return !1;
    const r = this.resolve(e, n);
    return r && r.res !== void 0;
  }
  extractFromKey(e, n) {
    let r = n.nsSeparator !== void 0 ? n.nsSeparator : this.options.nsSeparator;
    r === void 0 && (r = ":");
    const i = n.keySeparator !== void 0 ? n.keySeparator : this.options.keySeparator;
    let s = n.ns || this.options.defaultNS || [];
    const o = r && e.indexOf(r) > -1, a = !this.options.userDefinedKeySeparator && !n.keySeparator && !this.options.userDefinedNsSeparator && !n.nsSeparator && !vv(e, r, i);
    if (o && !a) {
      const l = e.match(this.interpolator.nestingRegexp);
      if (l && l.length > 0)
        return {
          key: e,
          namespaces: s
        };
      const u = e.split(r);
      (r !== i || r === i && this.options.ns.indexOf(u[0]) > -1) && (s = u.shift()), e = u.join(i);
    }
    return typeof s == "string" && (s = [s]), {
      key: e,
      namespaces: s
    };
  }
  translate(e, n, r) {
    if (typeof n != "object" && this.options.overloadTranslationOptionHandler && (n = this.options.overloadTranslationOptionHandler(arguments)), typeof n == "object" && (n = {
      ...n
    }), n || (n = {}), e == null)
      return "";
    Array.isArray(e) || (e = [String(e)]);
    const i = n.returnDetails !== void 0 ? n.returnDetails : this.options.returnDetails, s = n.keySeparator !== void 0 ? n.keySeparator : this.options.keySeparator, {
      key: o,
      namespaces: a
    } = this.extractFromKey(e[e.length - 1], n), l = a[a.length - 1], u = n.lng || this.language, c = n.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (u && u.toLowerCase() === "cimode") {
      if (c) {
        const b = n.nsSeparator || this.options.nsSeparator;
        return i ? {
          res: `${l}${b}${o}`,
          usedKey: o,
          exactUsedKey: o,
          usedLng: u,
          usedNS: l,
          usedParams: this.getUsedParamsDetails(n)
        } : `${l}${b}${o}`;
      }
      return i ? {
        res: o,
        usedKey: o,
        exactUsedKey: o,
        usedLng: u,
        usedNS: l,
        usedParams: this.getUsedParamsDetails(n)
      } : o;
    }
    const d = this.resolve(e, n);
    let f = d && d.res;
    const h = d && d.usedKey || o, p = d && d.exactUsedKey || o, g = Object.prototype.toString.apply(f), m = ["[object Number]", "[object Function]", "[object RegExp]"], y = n.joinArrays !== void 0 ? n.joinArrays : this.options.joinArrays, x = !this.i18nFormat || this.i18nFormat.handleAsObject;
    if (x && f && (typeof f != "string" && typeof f != "boolean" && typeof f != "number") && m.indexOf(g) < 0 && !(typeof y == "string" && g === "[object Array]")) {
      if (!n.returnObjects && !this.options.returnObjects) {
        this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        const b = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(h, f, {
          ...n,
          ns: a
        }) : `key '${o} (${this.language})' returned an object instead of string.`;
        return i ? (d.res = b, d.usedParams = this.getUsedParamsDetails(n), d) : b;
      }
      if (s) {
        const b = g === "[object Array]", E = b ? [] : {}, v = b ? p : h;
        for (const _ in f)
          if (Object.prototype.hasOwnProperty.call(f, _)) {
            const T = `${v}${s}${_}`;
            E[_] = this.translate(T, {
              ...n,
              joinArrays: !1,
              ns: a
            }), E[_] === T && (E[_] = f[_]);
          }
        f = E;
      }
    } else if (x && typeof y == "string" && g === "[object Array]")
      f = f.join(y), f && (f = this.extendTranslation(f, e, n, r));
    else {
      let b = !1, E = !1;
      const v = n.count !== void 0 && typeof n.count != "string", _ = No.hasDefaultValue(n), T = v ? this.pluralResolver.getSuffix(u, n.count, n) : "", w = n.ordinal && v ? this.pluralResolver.getSuffix(u, n.count, {
        ordinal: !1
      }) : "", N = n[`defaultValue${T}`] || n[`defaultValue${w}`] || n.defaultValue;
      !this.isValidLookup(f) && _ && (b = !0, f = N), this.isValidLookup(f) || (E = !0, f = o);
      const K = (n.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && E ? void 0 : f, U = _ && N !== f && this.options.updateMissing;
      if (E || b || U) {
        if (this.logger.log(U ? "updateKey" : "missingKey", u, l, o, U ? N : f), s) {
          const C = this.resolve(o, {
            ...n,
            keySeparator: !1
          });
          C && C.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let W = [];
        const z = this.languageUtils.getFallbackCodes(this.options.fallbackLng, n.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && z && z[0])
          for (let C = 0; C < z.length; C++)
            W.push(z[C]);
        else
          this.options.saveMissingTo === "all" ? W = this.languageUtils.toResolveHierarchy(n.lng || this.language) : W.push(n.lng || this.language);
        const A = (C, S, L) => {
          const F = _ && L !== f ? L : K;
          this.options.missingKeyHandler ? this.options.missingKeyHandler(C, l, S, F, U, n) : this.backendConnector && this.backendConnector.saveMissing && this.backendConnector.saveMissing(C, l, S, F, U, n), this.emit("missingKey", C, l, S, f);
        };
        this.options.saveMissing && (this.options.saveMissingPlurals && v ? W.forEach((C) => {
          this.pluralResolver.getSuffixes(C, n).forEach((S) => {
            A([C], o + S, n[`defaultValue${S}`] || N);
          });
        }) : A(W, o, N));
      }
      f = this.extendTranslation(f, e, n, d, r), E && f === o && this.options.appendNamespaceToMissingKey && (f = `${l}:${o}`), (E || b) && this.options.parseMissingKeyHandler && (this.options.compatibilityAPI !== "v1" ? f = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${l}:${o}` : o, b ? f : void 0) : f = this.options.parseMissingKeyHandler(f));
    }
    return i ? (d.res = f, d.usedParams = this.getUsedParamsDetails(n), d) : f;
  }
  extendTranslation(e, n, r, i, s) {
    var o = this;
    if (this.i18nFormat && this.i18nFormat.parse)
      e = this.i18nFormat.parse(e, {
        ...this.options.interpolation.defaultVariables,
        ...r
      }, r.lng || this.language || i.usedLng, i.usedNS, i.usedKey, {
        resolved: i
      });
    else if (!r.skipInterpolation) {
      r.interpolation && this.interpolator.init({
        ...r,
        interpolation: {
          ...this.options.interpolation,
          ...r.interpolation
        }
      });
      const u = typeof e == "string" && (r && r.interpolation && r.interpolation.skipOnVariables !== void 0 ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let c;
      if (u) {
        const f = e.match(this.interpolator.nestingRegexp);
        c = f && f.length;
      }
      let d = r.replace && typeof r.replace != "string" ? r.replace : r;
      if (this.options.interpolation.defaultVariables && (d = {
        ...this.options.interpolation.defaultVariables,
        ...d
      }), e = this.interpolator.interpolate(e, d, r.lng || this.language, r), u) {
        const f = e.match(this.interpolator.nestingRegexp), h = f && f.length;
        c < h && (r.nest = !1);
      }
      !r.lng && this.options.compatibilityAPI !== "v1" && i && i.res && (r.lng = i.usedLng), r.nest !== !1 && (e = this.interpolator.nest(e, function() {
        for (var f = arguments.length, h = new Array(f), p = 0; p < f; p++)
          h[p] = arguments[p];
        return s && s[0] === h[0] && !r.context ? (o.logger.warn(`It seems you are nesting recursively key: ${h[0]} in key: ${n[0]}`), null) : o.translate(...h, n);
      }, r)), r.interpolation && this.interpolator.reset();
    }
    const a = r.postProcess || this.options.postProcess, l = typeof a == "string" ? [a] : a;
    return e != null && l && l.length && r.applyPostProcessor !== !1 && (e = D1.handle(l, e, n, this.options && this.options.postProcessPassResolved ? {
      i18nResolved: {
        ...i,
        usedParams: this.getUsedParamsDetails(r)
      },
      ...r
    } : r, this)), e;
  }
  resolve(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r, i, s, o, a;
    return typeof e == "string" && (e = [e]), e.forEach((l) => {
      if (this.isValidLookup(r))
        return;
      const u = this.extractFromKey(l, n), c = u.key;
      i = c;
      let d = u.namespaces;
      this.options.fallbackNS && (d = d.concat(this.options.fallbackNS));
      const f = n.count !== void 0 && typeof n.count != "string", h = f && !n.ordinal && n.count === 0 && this.pluralResolver.shouldUseIntlApi(), p = n.context !== void 0 && (typeof n.context == "string" || typeof n.context == "number") && n.context !== "", g = n.lngs ? n.lngs : this.languageUtils.toResolveHierarchy(n.lng || this.language, n.fallbackLng);
      d.forEach((m) => {
        this.isValidLookup(r) || (a = m, !Af[`${g[0]}-${m}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(a) && (Af[`${g[0]}-${m}`] = !0, this.logger.warn(`key "${i}" for languages "${g.join(", ")}" won't get resolved as namespace "${a}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), g.forEach((y) => {
          if (this.isValidLookup(r))
            return;
          o = y;
          const x = [c];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys)
            this.i18nFormat.addLookupKeys(x, c, y, m, n);
          else {
            let b;
            f && (b = this.pluralResolver.getSuffix(y, n.count, n));
            const E = `${this.options.pluralSeparator}zero`, v = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (f && (x.push(c + b), n.ordinal && b.indexOf(v) === 0 && x.push(c + b.replace(v, this.options.pluralSeparator)), h && x.push(c + E)), p) {
              const _ = `${c}${this.options.contextSeparator}${n.context}`;
              x.push(_), f && (x.push(_ + b), n.ordinal && b.indexOf(v) === 0 && x.push(_ + b.replace(v, this.options.pluralSeparator)), h && x.push(_ + E));
            }
          }
          let k;
          for (; k = x.pop(); )
            this.isValidLookup(r) || (s = k, r = this.getResource(y, m, k, n));
        }));
      });
    }), {
      res: r,
      usedKey: i,
      exactUsedKey: s,
      usedLng: o,
      usedNS: a
    };
  }
  isValidLookup(e) {
    return e !== void 0 && !(!this.options.returnNull && e === null) && !(!this.options.returnEmptyString && e === "");
  }
  getResource(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(e, n, r, i) : this.resourceStore.getResource(e, n, r, i);
  }
  getUsedParamsDetails() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const n = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"], r = e.replace && typeof e.replace != "string";
    let i = r ? e.replace : e;
    if (r && typeof e.count < "u" && (i.count = e.count), this.options.interpolation.defaultVariables && (i = {
      ...this.options.interpolation.defaultVariables,
      ...i
    }), !r) {
      i = {
        ...i
      };
      for (const s of n)
        delete i[s];
    }
    return i;
  }
  static hasDefaultValue(e) {
    const n = "defaultValue";
    for (const r in e)
      if (Object.prototype.hasOwnProperty.call(e, r) && n === r.substring(0, n.length) && e[r] !== void 0)
        return !0;
    return !1;
  }
}
function yl(t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}
class Mf {
  constructor(e) {
    this.options = e, this.supportedLngs = this.options.supportedLngs || !1, this.logger = Qt.create("languageUtils");
  }
  getScriptPartFromCode(e) {
    if (e = Oo(e), !e || e.indexOf("-") < 0)
      return null;
    const n = e.split("-");
    return n.length === 2 || (n.pop(), n[n.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(n.join("-"));
  }
  getLanguagePartFromCode(e) {
    if (e = Oo(e), !e || e.indexOf("-") < 0)
      return e;
    const n = e.split("-");
    return this.formatLanguageCode(n[0]);
  }
  formatLanguageCode(e) {
    if (typeof e == "string" && e.indexOf("-") > -1) {
      const n = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let r = e.split("-");
      return this.options.lowerCaseLng ? r = r.map((i) => i.toLowerCase()) : r.length === 2 ? (r[0] = r[0].toLowerCase(), r[1] = r[1].toUpperCase(), n.indexOf(r[1].toLowerCase()) > -1 && (r[1] = yl(r[1].toLowerCase()))) : r.length === 3 && (r[0] = r[0].toLowerCase(), r[1].length === 2 && (r[1] = r[1].toUpperCase()), r[0] !== "sgn" && r[2].length === 2 && (r[2] = r[2].toUpperCase()), n.indexOf(r[1].toLowerCase()) > -1 && (r[1] = yl(r[1].toLowerCase())), n.indexOf(r[2].toLowerCase()) > -1 && (r[2] = yl(r[2].toLowerCase()))), r.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? e.toLowerCase() : e;
  }
  isSupportedCode(e) {
    return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e) > -1;
  }
  getBestMatchFromCodes(e) {
    if (!e)
      return null;
    let n;
    return e.forEach((r) => {
      if (n)
        return;
      const i = this.formatLanguageCode(r);
      (!this.options.supportedLngs || this.isSupportedCode(i)) && (n = i);
    }), !n && this.options.supportedLngs && e.forEach((r) => {
      if (n)
        return;
      const i = this.getLanguagePartFromCode(r);
      if (this.isSupportedCode(i))
        return n = i;
      n = this.options.supportedLngs.find((s) => {
        if (s === i)
          return s;
        if (!(s.indexOf("-") < 0 && i.indexOf("-") < 0) && s.indexOf(i) === 0)
          return s;
      });
    }), n || (n = this.getFallbackCodes(this.options.fallbackLng)[0]), n;
  }
  getFallbackCodes(e, n) {
    if (!e)
      return [];
    if (typeof e == "function" && (e = e(n)), typeof e == "string" && (e = [e]), Object.prototype.toString.apply(e) === "[object Array]")
      return e;
    if (!n)
      return e.default || [];
    let r = e[n];
    return r || (r = e[this.getScriptPartFromCode(n)]), r || (r = e[this.formatLanguageCode(n)]), r || (r = e[this.getLanguagePartFromCode(n)]), r || (r = e.default), r || [];
  }
  toResolveHierarchy(e, n) {
    const r = this.getFallbackCodes(n || this.options.fallbackLng || [], e), i = [], s = (o) => {
      o && (this.isSupportedCode(o) ? i.push(o) : this.logger.warn(`rejecting language code not found in supportedLngs: ${o}`));
    };
    return typeof e == "string" && (e.indexOf("-") > -1 || e.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && s(this.formatLanguageCode(e)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && s(this.getScriptPartFromCode(e)), this.options.load !== "currentOnly" && s(this.getLanguagePartFromCode(e))) : typeof e == "string" && s(this.formatLanguageCode(e)), r.forEach((o) => {
      i.indexOf(o) < 0 && s(this.formatLanguageCode(o));
    }), i;
  }
}
let Ev = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}], Cv = {
  1: function(t) {
    return +(t > 1);
  },
  2: function(t) {
    return +(t != 1);
  },
  3: function(t) {
    return 0;
  },
  4: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  5: function(t) {
    return t == 0 ? 0 : t == 1 ? 1 : t == 2 ? 2 : t % 100 >= 3 && t % 100 <= 10 ? 3 : t % 100 >= 11 ? 4 : 5;
  },
  6: function(t) {
    return t == 1 ? 0 : t >= 2 && t <= 4 ? 1 : 2;
  },
  7: function(t) {
    return t == 1 ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  8: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t != 8 && t != 11 ? 2 : 3;
  },
  9: function(t) {
    return +(t >= 2);
  },
  10: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t < 7 ? 2 : t < 11 ? 3 : 4;
  },
  11: function(t) {
    return t == 1 || t == 11 ? 0 : t == 2 || t == 12 ? 1 : t > 2 && t < 20 ? 2 : 3;
  },
  12: function(t) {
    return +(t % 10 != 1 || t % 100 == 11);
  },
  13: function(t) {
    return +(t !== 0);
  },
  14: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : t == 3 ? 2 : 3;
  },
  15: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2;
  },
  16: function(t) {
    return t % 10 == 1 && t % 100 != 11 ? 0 : t !== 0 ? 1 : 2;
  },
  17: function(t) {
    return t == 1 || t % 10 == 1 && t % 100 != 11 ? 0 : 1;
  },
  18: function(t) {
    return t == 0 ? 0 : t == 1 ? 1 : 2;
  },
  19: function(t) {
    return t == 1 ? 0 : t == 0 || t % 100 > 1 && t % 100 < 11 ? 1 : t % 100 > 10 && t % 100 < 20 ? 2 : 3;
  },
  20: function(t) {
    return t == 1 ? 0 : t == 0 || t % 100 > 0 && t % 100 < 20 ? 1 : 2;
  },
  21: function(t) {
    return t % 100 == 1 ? 1 : t % 100 == 2 ? 2 : t % 100 == 3 || t % 100 == 4 ? 3 : 0;
  },
  22: function(t) {
    return t == 1 ? 0 : t == 2 ? 1 : (t < 0 || t > 10) && t % 10 == 0 ? 2 : 3;
  }
};
const _v = ["v1", "v2", "v3"], wv = ["v4"], Tf = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function Sv() {
  const t = {};
  return Ev.forEach((e) => {
    e.lngs.forEach((n) => {
      t[n] = {
        numbers: e.nr,
        plurals: Cv[e.fc]
      };
    });
  }), t;
}
class Av {
  constructor(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = e, this.options = n, this.logger = Qt.create("pluralResolver"), (!this.options.compatibilityJSON || wv.includes(this.options.compatibilityJSON)) && (typeof Intl > "u" || !Intl.PluralRules) && (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = Sv();
  }
  addRule(e, n) {
    this.rules[e] = n;
  }
  getRule(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi())
      try {
        return new Intl.PluralRules(Oo(e), {
          type: n.ordinal ? "ordinal" : "cardinal"
        });
      } catch {
        return;
      }
    return this.rules[e] || this.rules[this.languageUtils.getLanguagePartFromCode(e)];
  }
  needsPlural(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, n);
    return this.shouldUseIntlApi() ? r && r.resolvedOptions().pluralCategories.length > 1 : r && r.numbers.length > 1;
  }
  getPluralFormsOfKey(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(e, r).map((i) => `${n}${i}`);
  }
  getSuffixes(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, n);
    return r ? this.shouldUseIntlApi() ? r.resolvedOptions().pluralCategories.sort((i, s) => Tf[i] - Tf[s]).map((i) => `${this.options.prepend}${n.ordinal ? `ordinal${this.options.prepend}` : ""}${i}`) : r.numbers.map((i) => this.getSuffix(e, i, n)) : [];
  }
  getSuffix(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const i = this.getRule(e, r);
    return i ? this.shouldUseIntlApi() ? `${this.options.prepend}${r.ordinal ? `ordinal${this.options.prepend}` : ""}${i.select(n)}` : this.getSuffixRetroCompatible(i, n) : (this.logger.warn(`no plural rule found for: ${e}`), "");
  }
  getSuffixRetroCompatible(e, n) {
    const r = e.noAbs ? e.plurals(n) : e.plurals(Math.abs(n));
    let i = e.numbers[r];
    this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 && (i === 2 ? i = "plural" : i === 1 && (i = ""));
    const s = () => this.options.prepend && i.toString() ? this.options.prepend + i.toString() : i.toString();
    return this.options.compatibilityJSON === "v1" ? i === 1 ? "" : typeof i == "number" ? `_plural_${i.toString()}` : s() : this.options.compatibilityJSON === "v2" || this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 ? s() : this.options.prepend && r.toString() ? this.options.prepend + r.toString() : r.toString();
  }
  shouldUseIntlApi() {
    return !_v.includes(this.options.compatibilityJSON);
  }
}
function Df(t, e, n) {
  let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".", i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, s = bv(t, e, n);
  return !s && i && typeof n == "string" && (s = Do(t, n, r), s === void 0 && (s = Do(e, n, r))), s;
}
class Mv {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Qt.create("interpolator"), this.options = e, this.format = e.interpolation && e.interpolation.format || ((n) => n), this.init(e);
  }
  init() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.interpolation || (e.interpolation = {
      escapeValue: !0
    });
    const n = e.interpolation;
    this.escape = n.escape !== void 0 ? n.escape : xv, this.escapeValue = n.escapeValue !== void 0 ? n.escapeValue : !0, this.useRawValueToEscape = n.useRawValueToEscape !== void 0 ? n.useRawValueToEscape : !1, this.prefix = n.prefix ? Or(n.prefix) : n.prefixEscaped || "{{", this.suffix = n.suffix ? Or(n.suffix) : n.suffixEscaped || "}}", this.formatSeparator = n.formatSeparator ? n.formatSeparator : n.formatSeparator || ",", this.unescapePrefix = n.unescapeSuffix ? "" : n.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : n.unescapeSuffix || "", this.nestingPrefix = n.nestingPrefix ? Or(n.nestingPrefix) : n.nestingPrefixEscaped || Or("$t("), this.nestingSuffix = n.nestingSuffix ? Or(n.nestingSuffix) : n.nestingSuffixEscaped || Or(")"), this.nestingOptionsSeparator = n.nestingOptionsSeparator ? n.nestingOptionsSeparator : n.nestingOptionsSeparator || ",", this.maxReplaces = n.maxReplaces ? n.maxReplaces : 1e3, this.alwaysFormat = n.alwaysFormat !== void 0 ? n.alwaysFormat : !1, this.resetRegExp();
  }
  reset() {
    this.options && this.init(this.options);
  }
  resetRegExp() {
    const e = `${this.prefix}(.+?)${this.suffix}`;
    this.regexp = new RegExp(e, "g");
    const n = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
    this.regexpUnescape = new RegExp(n, "g");
    const r = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
    this.nestingRegexp = new RegExp(r, "g");
  }
  interpolate(e, n, r, i) {
    let s, o, a;
    const l = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function u(p) {
      return p.replace(/\$/g, "$$$$");
    }
    const c = (p) => {
      if (p.indexOf(this.formatSeparator) < 0) {
        const x = Df(n, l, p, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(x, void 0, r, {
          ...i,
          ...n,
          interpolationkey: p
        }) : x;
      }
      const g = p.split(this.formatSeparator), m = g.shift().trim(), y = g.join(this.formatSeparator).trim();
      return this.format(Df(n, l, m, this.options.keySeparator, this.options.ignoreJSONStructure), y, r, {
        ...i,
        ...n,
        interpolationkey: m
      });
    };
    this.resetRegExp();
    const d = i && i.missingInterpolationHandler || this.options.missingInterpolationHandler, f = i && i.interpolation && i.interpolation.skipOnVariables !== void 0 ? i.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    return [{
      regex: this.regexpUnescape,
      safeValue: (p) => u(p)
    }, {
      regex: this.regexp,
      safeValue: (p) => this.escapeValue ? u(this.escape(p)) : u(p)
    }].forEach((p) => {
      for (a = 0; s = p.regex.exec(e); ) {
        const g = s[1].trim();
        if (o = c(g), o === void 0)
          if (typeof d == "function") {
            const y = d(e, s, i);
            o = typeof y == "string" ? y : "";
          } else if (i && Object.prototype.hasOwnProperty.call(i, g))
            o = "";
          else if (f) {
            o = s[0];
            continue;
          } else
            this.logger.warn(`missed to pass in variable ${g} for interpolating ${e}`), o = "";
        else
          typeof o != "string" && !this.useRawValueToEscape && (o = _f(o));
        const m = p.safeValue(o);
        if (e = e.replace(s[0], m), f ? (p.regex.lastIndex += o.length, p.regex.lastIndex -= s[0].length) : p.regex.lastIndex = 0, a++, a >= this.maxReplaces)
          break;
      }
    }), e;
  }
  nest(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i, s, o;
    function a(l, u) {
      const c = this.nestingOptionsSeparator;
      if (l.indexOf(c) < 0)
        return l;
      const d = l.split(new RegExp(`${c}[ ]*{`));
      let f = `{${d[1]}`;
      l = d[0], f = this.interpolate(f, o);
      const h = f.match(/'/g), p = f.match(/"/g);
      (h && h.length % 2 === 0 && !p || p.length % 2 !== 0) && (f = f.replace(/'/g, '"'));
      try {
        o = JSON.parse(f), u && (o = {
          ...u,
          ...o
        });
      } catch (g) {
        return this.logger.warn(`failed parsing options string in nesting for key ${l}`, g), `${l}${c}${f}`;
      }
      return delete o.defaultValue, l;
    }
    for (; i = this.nestingRegexp.exec(e); ) {
      let l = [];
      o = {
        ...r
      }, o = o.replace && typeof o.replace != "string" ? o.replace : o, o.applyPostProcessor = !1, delete o.defaultValue;
      let u = !1;
      if (i[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(i[1])) {
        const c = i[1].split(this.formatSeparator).map((d) => d.trim());
        i[1] = c.shift(), l = c, u = !0;
      }
      if (s = n(a.call(this, i[1].trim(), o), o), s && i[0] === e && typeof s != "string")
        return s;
      typeof s != "string" && (s = _f(s)), s || (this.logger.warn(`missed to resolve ${i[1]} for nesting ${e}`), s = ""), u && (s = l.reduce((c, d) => this.format(c, d, r.lng, {
        ...r,
        interpolationkey: i[1].trim()
      }), s.trim())), e = e.replace(i[0], s), this.regexp.lastIndex = 0;
    }
    return e;
  }
}
function Tv(t) {
  let e = t.toLowerCase().trim();
  const n = {};
  if (t.indexOf("(") > -1) {
    const r = t.split("(");
    e = r[0].toLowerCase().trim();
    const i = r[1].substring(0, r[1].length - 1);
    e === "currency" && i.indexOf(":") < 0 ? n.currency || (n.currency = i.trim()) : e === "relativetime" && i.indexOf(":") < 0 ? n.range || (n.range = i.trim()) : i.split(";").forEach((o) => {
      if (!o)
        return;
      const [a, ...l] = o.split(":"), u = l.join(":").trim().replace(/^'+|'+$/g, "");
      n[a.trim()] || (n[a.trim()] = u), u === "false" && (n[a.trim()] = !1), u === "true" && (n[a.trim()] = !0), isNaN(u) || (n[a.trim()] = parseInt(u, 10));
    });
  }
  return {
    formatName: e,
    formatOptions: n
  };
}
function Nr(t) {
  const e = {};
  return function(r, i, s) {
    const o = i + JSON.stringify(s);
    let a = e[o];
    return a || (a = t(Oo(i), s), e[o] = a), a(r);
  };
}
class Dv {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Qt.create("formatter"), this.options = e, this.formats = {
      number: Nr((n, r) => {
        const i = new Intl.NumberFormat(n, {
          ...r
        });
        return (s) => i.format(s);
      }),
      currency: Nr((n, r) => {
        const i = new Intl.NumberFormat(n, {
          ...r,
          style: "currency"
        });
        return (s) => i.format(s);
      }),
      datetime: Nr((n, r) => {
        const i = new Intl.DateTimeFormat(n, {
          ...r
        });
        return (s) => i.format(s);
      }),
      relativetime: Nr((n, r) => {
        const i = new Intl.RelativeTimeFormat(n, {
          ...r
        });
        return (s) => i.format(s, r.range || "day");
      }),
      list: Nr((n, r) => {
        const i = new Intl.ListFormat(n, {
          ...r
        });
        return (s) => i.format(s);
      })
    }, this.init(e);
  }
  init(e) {
    const r = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    }).interpolation;
    this.formatSeparator = r.formatSeparator ? r.formatSeparator : r.formatSeparator || ",";
  }
  add(e, n) {
    this.formats[e.toLowerCase().trim()] = n;
  }
  addCached(e, n) {
    this.formats[e.toLowerCase().trim()] = Nr(n);
  }
  format(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return n.split(this.formatSeparator).reduce((a, l) => {
      const {
        formatName: u,
        formatOptions: c
      } = Tv(l);
      if (this.formats[u]) {
        let d = a;
        try {
          const f = i && i.formatParams && i.formatParams[i.interpolationkey] || {}, h = f.locale || f.lng || i.locale || i.lng || r;
          d = this.formats[u](a, h, {
            ...c,
            ...i,
            ...f
          });
        } catch (f) {
          this.logger.warn(f);
        }
        return d;
      } else
        this.logger.warn(`there was no format function for ${u}`);
      return a;
    }, e);
  }
}
function Ov(t, e) {
  t.pending[e] !== void 0 && (delete t.pending[e], t.pendingCount--);
}
class Nv extends _a {
  constructor(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super(), this.backend = e, this.store = n, this.services = r, this.languageUtils = r.languageUtils, this.options = i, this.logger = Qt.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = i.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = i.maxRetries >= 0 ? i.maxRetries : 5, this.retryTimeout = i.retryTimeout >= 1 ? i.retryTimeout : 350, this.state = {}, this.queue = [], this.backend && this.backend.init && this.backend.init(r, i.backend, i);
  }
  queueLoad(e, n, r, i) {
    const s = {}, o = {}, a = {}, l = {};
    return e.forEach((u) => {
      let c = !0;
      n.forEach((d) => {
        const f = `${u}|${d}`;
        !r.reload && this.store.hasResourceBundle(u, d) ? this.state[f] = 2 : this.state[f] < 0 || (this.state[f] === 1 ? o[f] === void 0 && (o[f] = !0) : (this.state[f] = 1, c = !1, o[f] === void 0 && (o[f] = !0), s[f] === void 0 && (s[f] = !0), l[d] === void 0 && (l[d] = !0)));
      }), c || (a[u] = !0);
    }), (Object.keys(s).length || Object.keys(o).length) && this.queue.push({
      pending: o,
      pendingCount: Object.keys(o).length,
      loaded: {},
      errors: [],
      callback: i
    }), {
      toLoad: Object.keys(s),
      pending: Object.keys(o),
      toLoadLanguages: Object.keys(a),
      toLoadNamespaces: Object.keys(l)
    };
  }
  loaded(e, n, r) {
    const i = e.split("|"), s = i[0], o = i[1];
    n && this.emit("failedLoading", s, o, n), r && this.store.addResourceBundle(s, o, r), this.state[e] = n ? -1 : 2;
    const a = {};
    this.queue.forEach((l) => {
      mv(l.loaded, [s], o), Ov(l, e), n && l.errors.push(n), l.pendingCount === 0 && !l.done && (Object.keys(l.loaded).forEach((u) => {
        a[u] || (a[u] = {});
        const c = l.loaded[u];
        c.length && c.forEach((d) => {
          a[u][d] === void 0 && (a[u][d] = !0);
        });
      }), l.done = !0, l.errors.length ? l.callback(l.errors) : l.callback());
    }), this.emit("loaded", a), this.queue = this.queue.filter((l) => !l.done);
  }
  read(e, n, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout, o = arguments.length > 5 ? arguments[5] : void 0;
    if (!e.length)
      return o(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng: e,
        ns: n,
        fcName: r,
        tried: i,
        wait: s,
        callback: o
      });
      return;
    }
    this.readingCalls++;
    const a = (u, c) => {
      if (this.readingCalls--, this.waitingReads.length > 0) {
        const d = this.waitingReads.shift();
        this.read(d.lng, d.ns, d.fcName, d.tried, d.wait, d.callback);
      }
      if (u && c && i < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, e, n, r, i + 1, s * 2, o);
        }, s);
        return;
      }
      o(u, c);
    }, l = this.backend[r].bind(this.backend);
    if (l.length === 2) {
      try {
        const u = l(e, n);
        u && typeof u.then == "function" ? u.then((c) => a(null, c)).catch(a) : a(null, u);
      } catch (u) {
        a(u);
      }
      return;
    }
    return l(e, n, a);
  }
  prepareLoading(e, n) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend)
      return this.logger.warn("No backend was added via i18next.use. Will not load resources."), i && i();
    typeof e == "string" && (e = this.languageUtils.toResolveHierarchy(e)), typeof n == "string" && (n = [n]);
    const s = this.queueLoad(e, n, r, i);
    if (!s.toLoad.length)
      return s.pending.length || i(), null;
    s.toLoad.forEach((o) => {
      this.loadOne(o);
    });
  }
  load(e, n, r) {
    this.prepareLoading(e, n, {}, r);
  }
  reload(e, n, r) {
    this.prepareLoading(e, n, {
      reload: !0
    }, r);
  }
  loadOne(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const r = e.split("|"), i = r[0], s = r[1];
    this.read(i, s, "read", void 0, void 0, (o, a) => {
      o && this.logger.warn(`${n}loading namespace ${s} for language ${i} failed`, o), !o && a && this.logger.log(`${n}loaded namespace ${s} for language ${i}`, a), this.loaded(e, o, a);
    });
  }
  saveMissing(e, n, r, i, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {}, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(n)) {
      this.logger.warn(`did not save key "${r}" as the namespace "${n}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (!(r == null || r === "")) {
      if (this.backend && this.backend.create) {
        const l = {
          ...o,
          isUpdate: s
        }, u = this.backend.create.bind(this.backend);
        if (u.length < 6)
          try {
            let c;
            u.length === 5 ? c = u(e, n, r, i, l) : c = u(e, n, r, i), c && typeof c.then == "function" ? c.then((d) => a(null, d)).catch(a) : a(null, c);
          } catch (c) {
            a(c);
          }
        else
          u(e, n, r, i, a, l);
      }
      !e || !e[0] || this.store.addResource(e[0], n, r, i);
    }
  }
}
function Of() {
  return {
    debug: !1,
    initImmediate: !0,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: !1,
    supportedLngs: !1,
    nonExplicitSupportedLngs: !1,
    load: "all",
    preload: !1,
    simplifyPluralSuffix: !0,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: !1,
    saveMissing: !1,
    updateMissing: !1,
    saveMissingTo: "fallback",
    saveMissingPlurals: !0,
    missingKeyHandler: !1,
    missingInterpolationHandler: !1,
    postProcess: !1,
    postProcessPassResolved: !1,
    returnNull: !1,
    returnEmptyString: !0,
    returnObjects: !1,
    joinArrays: !1,
    returnedObjectHandler: !1,
    parseMissingKeyHandler: !1,
    appendNamespaceToMissingKey: !1,
    appendNamespaceToCIMode: !1,
    overloadTranslationOptionHandler: function(e) {
      let n = {};
      if (typeof e[1] == "object" && (n = e[1]), typeof e[1] == "string" && (n.defaultValue = e[1]), typeof e[2] == "string" && (n.tDescription = e[2]), typeof e[2] == "object" || typeof e[3] == "object") {
        const r = e[3] || e[2];
        Object.keys(r).forEach((i) => {
          n[i] = r[i];
        });
      }
      return n;
    },
    interpolation: {
      escapeValue: !0,
      format: (t, e, n, r) => t,
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: !0
    }
  };
}
function Nf(t) {
  return typeof t.ns == "string" && (t.ns = [t.ns]), typeof t.fallbackLng == "string" && (t.fallbackLng = [t.fallbackLng]), typeof t.fallbackNS == "string" && (t.fallbackNS = [t.fallbackNS]), t.supportedLngs && t.supportedLngs.indexOf("cimode") < 0 && (t.supportedLngs = t.supportedLngs.concat(["cimode"])), t;
}
function Bs() {
}
function Lv(t) {
  Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((n) => {
    typeof t[n] == "function" && (t[n] = t[n].bind(t));
  });
}
class Yi extends _a {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 ? arguments[1] : void 0;
    if (super(), this.options = Nf(e), this.services = {}, this.logger = Qt, this.modules = {
      external: []
    }, Lv(this), n && !this.isInitialized && !e.isClone) {
      if (!this.options.initImmediate)
        return this.init(e, n), this;
      setTimeout(() => {
        this.init(e, n);
      }, 0);
    }
  }
  init() {
    var e = this;
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0;
    typeof n == "function" && (r = n, n = {}), !n.defaultNS && n.defaultNS !== !1 && n.ns && (typeof n.ns == "string" ? n.defaultNS = n.ns : n.ns.indexOf("translation") < 0 && (n.defaultNS = n.ns[0]));
    const i = Of();
    this.options = {
      ...i,
      ...this.options,
      ...Nf(n)
    }, this.options.compatibilityAPI !== "v1" && (this.options.interpolation = {
      ...i.interpolation,
      ...this.options.interpolation
    }), n.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = n.keySeparator), n.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = n.nsSeparator);
    function s(c) {
      return c ? typeof c == "function" ? new c() : c : null;
    }
    if (!this.options.isClone) {
      this.modules.logger ? Qt.init(s(this.modules.logger), this.options) : Qt.init(null, this.options);
      let c;
      this.modules.formatter ? c = this.modules.formatter : typeof Intl < "u" && (c = Dv);
      const d = new Mf(this.options);
      this.store = new Sf(this.options.resources, this.options);
      const f = this.services;
      f.logger = Qt, f.resourceStore = this.store, f.languageUtils = d, f.pluralResolver = new Av(d, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      }), c && (!this.options.interpolation.format || this.options.interpolation.format === i.interpolation.format) && (f.formatter = s(c), f.formatter.init(f, this.options), this.options.interpolation.format = f.formatter.format.bind(f.formatter)), f.interpolator = new Mv(this.options), f.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      }, f.backendConnector = new Nv(s(this.modules.backend), f.resourceStore, f, this.options), f.backendConnector.on("*", function(h) {
        for (var p = arguments.length, g = new Array(p > 1 ? p - 1 : 0), m = 1; m < p; m++)
          g[m - 1] = arguments[m];
        e.emit(h, ...g);
      }), this.modules.languageDetector && (f.languageDetector = s(this.modules.languageDetector), f.languageDetector.init && f.languageDetector.init(f, this.options.detection, this.options)), this.modules.i18nFormat && (f.i18nFormat = s(this.modules.i18nFormat), f.i18nFormat.init && f.i18nFormat.init(this)), this.translator = new No(this.services, this.options), this.translator.on("*", function(h) {
        for (var p = arguments.length, g = new Array(p > 1 ? p - 1 : 0), m = 1; m < p; m++)
          g[m - 1] = arguments[m];
        e.emit(h, ...g);
      }), this.modules.external.forEach((h) => {
        h.init && h.init(this);
      });
    }
    if (this.format = this.options.interpolation.format, r || (r = Bs), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const c = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      c.length > 0 && c[0] !== "dev" && (this.options.lng = c[0]);
    }
    !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach((c) => {
      this[c] = function() {
        return e.store[c](...arguments);
      };
    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach((c) => {
      this[c] = function() {
        return e.store[c](...arguments), e;
      };
    });
    const l = Ei(), u = () => {
      const c = (d, f) => {
        this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), l.resolve(f), r(d, f);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized)
        return c(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, c);
    };
    return this.options.resources || !this.options.initImmediate ? u() : setTimeout(u, 0), l;
  }
  loadResources(e) {
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Bs;
    const i = typeof e == "string" ? e : this.language;
    if (typeof e == "function" && (r = e), !this.options.resources || this.options.partialBundledLanguages) {
      if (i && i.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0))
        return r();
      const s = [], o = (a) => {
        if (!a || a === "cimode")
          return;
        this.services.languageUtils.toResolveHierarchy(a).forEach((u) => {
          u !== "cimode" && s.indexOf(u) < 0 && s.push(u);
        });
      };
      i ? o(i) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((l) => o(l)), this.options.preload && this.options.preload.forEach((a) => o(a)), this.services.backendConnector.load(s, this.options.ns, (a) => {
        !a && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), r(a);
      });
    } else
      r(null);
  }
  reloadResources(e, n, r) {
    const i = Ei();
    return e || (e = this.languages), n || (n = this.options.ns), r || (r = Bs), this.services.backendConnector.reload(e, n, (s) => {
      i.resolve(), r(s);
    }), i;
  }
  use(e) {
    if (!e)
      throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!e.type)
      throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    return e.type === "backend" && (this.modules.backend = e), (e.type === "logger" || e.log && e.warn && e.error) && (this.modules.logger = e), e.type === "languageDetector" && (this.modules.languageDetector = e), e.type === "i18nFormat" && (this.modules.i18nFormat = e), e.type === "postProcessor" && D1.addPostProcessor(e), e.type === "formatter" && (this.modules.formatter = e), e.type === "3rdParty" && this.modules.external.push(e), this;
  }
  setResolvedLanguage(e) {
    if (!(!e || !this.languages) && !(["cimode", "dev"].indexOf(e) > -1))
      for (let n = 0; n < this.languages.length; n++) {
        const r = this.languages[n];
        if (!(["cimode", "dev"].indexOf(r) > -1) && this.store.hasLanguageSomeTranslations(r)) {
          this.resolvedLanguage = r;
          break;
        }
      }
  }
  changeLanguage(e, n) {
    var r = this;
    this.isLanguageChangingTo = e;
    const i = Ei();
    this.emit("languageChanging", e);
    const s = (l) => {
      this.language = l, this.languages = this.services.languageUtils.toResolveHierarchy(l), this.resolvedLanguage = void 0, this.setResolvedLanguage(l);
    }, o = (l, u) => {
      u ? (s(u), this.translator.changeLanguage(u), this.isLanguageChangingTo = void 0, this.emit("languageChanged", u), this.logger.log("languageChanged", u)) : this.isLanguageChangingTo = void 0, i.resolve(function() {
        return r.t(...arguments);
      }), n && n(l, function() {
        return r.t(...arguments);
      });
    }, a = (l) => {
      !e && !l && this.services.languageDetector && (l = []);
      const u = typeof l == "string" ? l : this.services.languageUtils.getBestMatchFromCodes(l);
      u && (this.language || s(u), this.translator.language || this.translator.changeLanguage(u), this.services.languageDetector && this.services.languageDetector.cacheUserLanguage && this.services.languageDetector.cacheUserLanguage(u)), this.loadResources(u, (c) => {
        o(c, u);
      });
    };
    return !e && this.services.languageDetector && !this.services.languageDetector.async ? a(this.services.languageDetector.detect()) : !e && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(a) : this.services.languageDetector.detect(a) : a(e), i;
  }
  getFixedT(e, n, r) {
    var i = this;
    const s = function(o, a) {
      let l;
      if (typeof a != "object") {
        for (var u = arguments.length, c = new Array(u > 2 ? u - 2 : 0), d = 2; d < u; d++)
          c[d - 2] = arguments[d];
        l = i.options.overloadTranslationOptionHandler([o, a].concat(c));
      } else
        l = {
          ...a
        };
      l.lng = l.lng || s.lng, l.lngs = l.lngs || s.lngs, l.ns = l.ns || s.ns, l.keyPrefix = l.keyPrefix || r || s.keyPrefix;
      const f = i.options.keySeparator || ".";
      let h;
      return l.keyPrefix && Array.isArray(o) ? h = o.map((p) => `${l.keyPrefix}${f}${p}`) : h = l.keyPrefix ? `${l.keyPrefix}${f}${o}` : o, i.t(h, l);
    };
    return typeof e == "string" ? s.lng = e : s.lngs = e, s.ns = n, s.keyPrefix = r, s;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(e) {
    this.options.defaultNS = e;
  }
  hasLoadedNamespace(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized)
      return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
    if (!this.languages || !this.languages.length)
      return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
    const r = n.lng || this.resolvedLanguage || this.languages[0], i = this.options ? this.options.fallbackLng : !1, s = this.languages[this.languages.length - 1];
    if (r.toLowerCase() === "cimode")
      return !0;
    const o = (a, l) => {
      const u = this.services.backendConnector.state[`${a}|${l}`];
      return u === -1 || u === 2;
    };
    if (n.precheck) {
      const a = n.precheck(this, o);
      if (a !== void 0)
        return a;
    }
    return !!(this.hasResourceBundle(r, e) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || o(r, e) && (!i || o(s, e)));
  }
  loadNamespaces(e, n) {
    const r = Ei();
    return this.options.ns ? (typeof e == "string" && (e = [e]), e.forEach((i) => {
      this.options.ns.indexOf(i) < 0 && this.options.ns.push(i);
    }), this.loadResources((i) => {
      r.resolve(), n && n(i);
    }), r) : (n && n(), Promise.resolve());
  }
  loadLanguages(e, n) {
    const r = Ei();
    typeof e == "string" && (e = [e]);
    const i = this.options.preload || [], s = e.filter((o) => i.indexOf(o) < 0);
    return s.length ? (this.options.preload = i.concat(s), this.loadResources((o) => {
      r.resolve(), n && n(o);
    }), r) : (n && n(), Promise.resolve());
  }
  dir(e) {
    if (e || (e = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !e)
      return "rtl";
    const n = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"], r = this.services && this.services.languageUtils || new Mf(Of());
    return n.indexOf(r.getLanguagePartFromCode(e)) > -1 || e.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 ? arguments[1] : void 0;
    return new Yi(e, n);
  }
  cloneInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Bs;
    const r = e.forkResourceStore;
    r && delete e.forkResourceStore;
    const i = {
      ...this.options,
      ...e,
      isClone: !0
    }, s = new Yi(i);
    return (e.debug !== void 0 || e.prefix !== void 0) && (s.logger = s.logger.clone(e)), ["store", "services", "language"].forEach((a) => {
      s[a] = this[a];
    }), s.services = {
      ...this.services
    }, s.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, r && (s.store = new Sf(this.store.data, i), s.services.resourceStore = s.store), s.translator = new No(s.services, i), s.translator.on("*", function(a) {
      for (var l = arguments.length, u = new Array(l > 1 ? l - 1 : 0), c = 1; c < l; c++)
        u[c - 1] = arguments[c];
      s.emit(a, ...u);
    }), s.init(i, n), s.translator.options = i, s.translator.backendConnector.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, s;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const Xe = Yi.createInstance();
Xe.createInstance = Yi.createInstance;
Xe.createInstance;
Xe.dir;
Xe.init;
Xe.loadResources;
Xe.reloadResources;
Xe.use;
Xe.changeLanguage;
Xe.getFixedT;
const re = Xe.t;
Xe.exists;
Xe.setDefaultNamespace;
Xe.hasLoadedNamespace;
Xe.loadNamespaces;
Xe.loadLanguages;
const Rv = ["paragraph", "h1", "h2", "h3", "h4", "h5", "h6"];
let Iv = class extends mi {
  constructor() {
    super(), this.menuData = Rv.map((e) => re(e)), this.dropDivHeight = "265px", this.dropDivWith = "150px";
  }
  onDropdownActive(e, n) {
    return n == 0 ? e.isActive("paragraph") : e.isActive("heading", { level: n });
  }
  onDropdownItemClick(e) {
    e == 0 ? this.editor.chain().setParagraph().run() : this.editor.chain().setHeading({ level: e }).run();
  }
  onDropdownItemRender(e) {
    return e == 0 ? this.menuData[e] : `<h${e}>${this.menuData[e]}</h${e}>`;
  }
  onMenuTextRender(e) {
    return this.menuData[e].replace(" ", "");
  }
};
const Fv = [
  { name: "宋体", value: "SimSun" },
  { name: "仿宋", value: "FangSong" },
  { name: "黑体", value: "SimHei" },
  { name: "楷体", value: "KaiTi" },
  { name: "微软雅黑", value: "Microsoft YaHei" },
  { name: "方正仿宋简体_GBK", value: "FangSong_GB2312" },
  { name: "Arial", value: "Arial" }
];
let Hv = class extends mi {
  constructor() {
    super(), this.width = "72px", this.menuTextWidth = "60px", this.dropDivWith = "150px";
  }
  onCreate(e, n) {
    var r;
    super.onCreate(e, n), this.menuData = ((r = n.fontFamily) == null ? void 0 : r.values) || Fv, this.menuData = [
      { name: re("default-font-family"), value: "" }
    ].concat(this.menuData);
  }
  onDropdownActive(e, n) {
    return e.isActive("textStyle", { fontFamily: this.menuData[n].value });
  }
  onDropdownItemClick(e) {
    const n = this.menuData[e].value;
    n ? this.editor.chain().setFontFamily(n).run() : this.editor.chain().unsetFontFamily().run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].name;
  }
  onMenuTextRender(e) {
    return this.menuData[e].name;
  }
};
const Bv = [
  { name: "9", value: 9 },
  { name: "10", value: 10 },
  { name: "11", value: 11 },
  { name: "12", value: 12 },
  { name: "14", value: 14 },
  { name: "18", value: 18 },
  { name: "20", value: 20 },
  { name: "22", value: 22 },
  { name: "24", value: 24 },
  { name: "26", value: 26 },
  { name: "28", value: 28 },
  { name: "30", value: 30 },
  { name: "36", value: 36 },
  { name: "42", value: 42 },
  { name: "48", value: 48 },
  { name: "56", value: 56 },
  { name: "72", value: 72 }
];
class Pv extends mi {
  constructor() {
    super(), this.dropDivWith = "134px";
  }
  onCreate(e, n) {
    var r;
    super.onCreate(e, n), this.menuData = ((r = n.fontSize) == null ? void 0 : r.values) || Bv;
    for (let i = 0; i < this.menuData.length; i++)
      if (this.menuData[i].value == 14) {
        this.defaultMenuIndex = i, this.menuData[i].name = `14（${re("default")}）`;
        break;
      }
  }
  onDropdownActive(e, n) {
    return e.isActive("textStyle", { fontSize: `${this.menuData[n].value}px` });
  }
  onDropdownItemClick(e) {
    var r, i;
    const n = this.menuData[e].value;
    n == 14 ? (r = this.editor) == null || r.chain().focus().unsetFontSize().run() : (i = this.editor) == null || i.chain().focus().setFontSize(`${n}px`).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].name;
  }
  onMenuTextRender(e) {
    const n = this.menuData[e];
    return n.value == 14 ? re("default-font-size") : n.name;
  }
}
let $v = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBold();
  }
  onActive(e) {
    return e.isActive("bold");
  }
}, zv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleItalic();
  }
  onActive(e) {
    return e.isActive("italic");
  }
}, Vv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleUnderline();
  }
  onActive(e) {
    return e.isActive("underline");
  }
}, Uv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleStrike();
  }
  onActive(e) {
    return e.isActive("strike");
  }
}, qv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.59567 4L10.5 9.92831L15.4043 4H18L11.7978 11.4971L18 18.9943V19H15.4091L10.5 13.0659L5.59092 19H3V18.9943L9.20216 11.4971L3 4H5.59567ZM21.8 16C21.8 15.5582 21.4418 15.2 21 15.2C20.5582 15.2 20.2 15.5582 20.2 16C20.2 16.0762 20.2107 16.15 20.2306 16.2198L19.0765 16.5496C19.0267 16.375 19 16.1906 19 16C19 14.8954 19.8954 14 21 14C22.1046 14 23 14.8954 23 16C23 16.5727 22.7593 17.0892 22.3735 17.4538L20.7441 19H23V20H19V19L21.5507 16.5803C21.7042 16.4345 21.8 16.2284 21.8 16Z"></path></svg>
         </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleSubscript();
  }
  onActive(e) {
    return e.isActive("subscript");
  }
}, Zv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.59567 5L10.5 10.9283L15.4043 5H18L11.7978 12.4971L18 19.9943V20H15.4091L10.5 14.0659L5.59092 20H3V19.9943L9.20216 12.4971L3 5H5.59567ZM21.5507 6.5803C21.7042 6.43453 21.8 6.22845 21.8 6C21.8 5.55817 21.4418 5.2 21 5.2C20.5582 5.2 20.2 5.55817 20.2 6C20.2 6.07624 20.2107 6.14999 20.2306 6.21983L19.0765 6.54958C19.0267 6.37497 19 6.1906 19 6C19 4.89543 19.8954 4 21 4C22.1046 4 23 4.89543 23 6C23 6.57273 22.7593 7.08923 22.3735 7.45384L20.7441 9H23V10H19V9L21.5507 6.5803V6.5803Z"></path></svg>
         </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleSuperscript();
  }
  onActive(e) {
    return e.isActive("superscript");
  }
};
const Kv = [
  "ffffff",
  "000000",
  "e9d989",
  "2972f4",
  "609eec",
  "de3c36",
  "a1d533",
  "7334c5",
  "27b5d9",
  "ff8926",
  "f2f2f2",
  "7f7f7f",
  "ddd9c3",
  "c6d9f0",
  "dbe5f1",
  "f2dcdb",
  "ebf1dd",
  "e5e0ec",
  "dbeef3",
  "fdeada",
  "d8d8d8",
  "595959",
  "c4bd97",
  "8db3e2",
  "b8cce4",
  "e5b9b7",
  "d7e3bc",
  "ccc1d9",
  "b7dde8",
  "fbd5b5",
  "bfbfbf",
  "3f3f3f",
  "938953",
  "548dd4",
  "95b3d7",
  "d99694",
  "c3d69b",
  "b2a2c7",
  "92cddc",
  "fac08f",
  "a5a5a5",
  "262626",
  "494429",
  "17365d",
  "366092",
  "953734",
  "76923c",
  "5f497a",
  "31859b",
  "e36c09",
  "6e6e6e",
  "0c0c0c",
  "1d1b10",
  "0f243e",
  "244061",
  "632423",
  "4f6128",
  "3f3151",
  "205867",
  "974806"
], Wv = ["c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "002060", "7030a0"];
class O1 extends ge {
  constructor() {
    super();
    P(this, "historyColorsKey", "historyColors");
    P(this, "historyColors", []);
    P(this, "iconSvg");
    P(this, "menuColorEL");
    P(this, "onColorItemClick");
    P(this, "onDefaultColorClick");
  }
  connectedCallback() {
    this.template = `
            <div style="width: 36px;height: 18px;display: flex;padding-right: 0">
                <div style="width: 18px;height: 18px" class="currentColor">
                    <div style="height: 15px;width: 15px;padding:0 1.5px;line-height: 18px">${this.iconSvg}</div>
                    <div style="width: 18px;height: 3px;background: #333" id="menuColorEL"></div>
                </div>
                <div style="width: 18px;height: 18px" id="dropdown">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
                </div>
            </div>
            `, super.connectedCallback();
    const n = localStorage.getItem(this.historyColorsKey);
    n && (this.historyColors = JSON.parse(n)), this.querySelector(".currentColor").addEventListener("click", () => {
      this.onColorItemClick(this.historyColors.length > 0 ? this.historyColors[0] : "#ccc");
    }), this.menuColorEL = this.querySelector("#menuColorEL"), this.historyColors && this.historyColors.length > 0 && (this.menuColorEL.style.background = this.historyColors[0]), Ke(this.querySelector("#dropdown"), {
      content: this.createMenuElement(),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const n = document.createElement("div");
    return n.style.height = "278px", n.style.width = "250px", n.classList.add("aie-dropdown-container"), n.innerHTML = `
        <div class="color-panel">
            <div class="color-panel-default-button" id="defaultColor">${re("default")}</div>
            <div style="display: flex;flex-wrap: wrap;padding-top: 5px">
                ${Kv.map((r, i) => `<div class="color-item" data-color="#${r}" style="width: 18px;height:18px;margin:1px;padding:1px;border:1px solid #${i == 0 ? "efefef" : r};background: #${r}"></div>`).join(" ")}
            </div>
            <div class="color-panel-title">${re("standardColors")}</div>
            <div style="display: flex;flex-wrap: wrap;">
                ${Wv.map((r) => `<div class="color-item" data-color="#${r}" style="width: 18px;height:18px;margin:1px;padding:1px;border:1px solid #${r};background: #${r}"></div>`).join(" ")}
            </div>
            <div class="color-panel-title">${re("historyColors")}</div>
            <div style="display: flex;flex-wrap: wrap;" id="history-colors">
               ${this.historyColors.map((r) => `<div class="history-color-item" data-color="${r}" style="width: 22px;height: 23px;margin: 1px;background: ${r}"></div>`).join(" ")}
            </div>
        </div>
        `, n.querySelector("#defaultColor").addEventListener("click", () => {
      this.onDefaultColorClick();
    }), n.querySelectorAll(".color-item").forEach((r) => {
      r.addEventListener("click", () => {
        this.invokeColorItemClick(n, r);
      }), r.addEventListener("mouseover", () => {
        r.style.border = "solid 1px #999";
      }), r.addEventListener("mouseout", () => {
        let i = r.getAttribute("data-color");
        i === "#ffffff" && (i = "#efefef"), r.style.border = `solid 1px ${i}`;
      });
    }), n.querySelector("#history-colors").addEventListener("click", (r) => {
      const i = r.target.closest(".history-color-item");
      i && this.invokeColorItemClick(n, i);
    }), n;
  }
  invokeColorItemClick(n, r) {
    const i = r.getAttribute("data-color");
    this.historyColors = this.historyColors.filter((s) => s !== i), this.historyColors.unshift(i), this.historyColors.length > 7 && (this.historyColors = this.historyColors.slice(0, 7)), n.querySelector("#history-colors").innerHTML = `
                ${this.historyColors.map((s) => `<div class="history-color-item" data-color="${s}" style="width: 22px;height: 23px;margin: 1px;background: ${s}"></div>`).join(" ")}
                `, localStorage.setItem(this.historyColorsKey, JSON.stringify(this.historyColors)), this.menuColorEL.style.background = i, this.onColorItemClick(i);
  }
}
let jv = class extends O1 {
  constructor() {
    super(), this.historyColorsKey = "highlightHistoryColors", this.iconSvg = '<svg style="width: 14px;height: 14px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.2427 4.51138L8.50547 11.2486L7.79836 13.3699L6.7574 14.4109L9.58583 17.2393L10.6268 16.1983L12.7481 15.4912L19.4853 8.75402L15.2427 4.51138ZM21.6066 8.04692C21.9972 8.43744 21.9972 9.0706 21.6066 9.46113L13.8285 17.2393L11.7071 17.9464L10.2929 19.3606C9.90241 19.7511 9.26925 19.7511 8.87872 19.3606L4.63608 15.118C4.24556 14.7275 4.24556 14.0943 4.63608 13.7038L6.0503 12.2896L6.7574 10.1682L14.5356 2.39006C14.9261 1.99954 15.5593 1.99954 15.9498 2.39006L21.6066 8.04692ZM15.2427 7.33981L16.6569 8.75402L11.7071 13.7038L10.2929 12.2896L15.2427 7.33981ZM4.28253 16.8858L7.11096 19.7142L5.69674 21.1284L1.4541 19.7142L4.28253 16.8858Z"></path></svg>', this.onDefaultColorClick = () => {
      var e;
      (e = this.editor) == null || e.chain().focus().unsetHighlight().run();
    }, this.onColorItemClick = (e) => {
      var n;
      (n = this.editor) == null || n.chain().focus().setHighlight({ color: e }).run();
    };
  }
  onActive(e) {
    return e.isActive("highlight");
  }
};
class Gv extends O1 {
  constructor() {
    super(), this.historyColorsKey = "fontHistoryColors", this.iconSvg = '<svg style="width: 14px;height: 14px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.55446 22H3.40039L11.0004 3H13.0004L20.6004 22H18.4463L16.0463 16H7.95446L5.55446 22ZM8.75446 14H15.2463L12.0004 5.88517L8.75446 14Z"></path></svg>', this.onDefaultColorClick = () => {
      var e;
      (e = this.editor) == null || e.chain().focus().unsetColor().run();
    }, this.onColorItemClick = (e) => {
      var n;
      (n = this.editor) == null || n.chain().focus().setColor(e).run();
    };
  }
  onActive(e) {
    return e.isActive("textStyle");
  }
}
class Jv extends ge {
  constructor() {
    super(), this.template = `
        <div no-hover style="width: 1px;height: 20px; display: flex">
            <div class="aie-menu-divider" />
        </div>
        `;
  }
}
let Yv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
             <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM3 3.5H6V6.5H3V3.5ZM3 10.5H6V13.5H3V10.5ZM3 17.5H6V20.5H3V17.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBulletList();
  }
  onActive(e) {
    return e.isActive("bulletList");
  }
}, Xv = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
               <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleOrderedList();
  }
  onActive(e) {
    return e.isActive("orderedList");
  }
};
class Qv extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM3 12.5L7 9V16L3 12.5Z"></path></svg>
         </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.outdent();
  }
}
class eE extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM7 12.5L3 16V9L7 12.5Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.indent();
  }
}
const tE = [
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z"></path></svg></div>',
    title: "align-left",
    value: "left"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z"></path></svg></div>',
    title: "align-center",
    value: "center"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z"></path></svg></div>',
    title: "align-right",
    value: "right"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM3 14H21V16H3V14ZM3 9H21V11H3V9Z"></path></svg></div>',
    title: "align-justify",
    value: "justify"
  }
];
class nE extends mi {
  constructor() {
    super(), this.menuData = tE.map((e) => ({ ...e, title: re(e.title) })), this.dropDivHeight = "112px", this.dropDivWith = "60px", this.width = "36px", this.menuTextWidth = "20px", this.showItemsTip = !0;
  }
  onDropdownActive(e, n) {
    return e.isActive({ textAlign: this.menuData[n].value });
  }
  onDropdownItemClick(e) {
    this.editor.chain().focus().setTextAlign(this.menuData[e].value).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].icon;
  }
  onMenuTextRender(e) {
    return this.menuData[e].icon;
  }
}
class bc {
  constructor() {
    P(this, "tippyInstance");
    P(this, "content");
    P(this, "onConfirmClickFunc");
    P(this, "onShowFunc");
  }
  setContent(e) {
    this.content = e;
  }
  onConfirmClick(e) {
    this.onConfirmClickFunc = e;
  }
  onShow(e) {
    this.onShowFunc = e;
  }
  setTrigger(e, n = "bottom", r = "click") {
    this.tippyInstance = Ke(e, {
      content: this.createContentElement(),
      appendTo: e.closest(".aie-container"),
      placement: n,
      trigger: r,
      interactive: !0,
      arrow: !1,
      onShow: (i) => {
        this.onShowFunc && this.onShowFunc(i);
      }
    });
  }
  show() {
    var e;
    (e = this.tippyInstance) == null || e.show();
  }
  hide() {
    var e;
    (e = this.tippyInstance) == null || e.hide();
  }
  createContentElement() {
    const e = `
            <div class="aie-popover">
              <div class="aie-popover-header">
               <svg class="aie-popover-header-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z"></path></svg>
              </div>
              <div class="aie-popover-content">${this.content}</div>
              <div class="aie-popover-footer">
              <button class="aie-popover-footer-confirm" type="button">${re("confirm")}</button>
              </div>
            </div>
        `, n = document.createElement("div");
    return n.innerHTML = e, n.querySelector(".aie-popover-header-close").addEventListener("click", () => {
      this.tippyInstance.hide();
    }), n.querySelector(".aie-popover-footer-confirm").addEventListener("click", () => {
      this.onConfirmClickFunc && this.onConfirmClickFunc(this.tippyInstance), this.tippyInstance.hide();
    }), n;
  }
}
let rE = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.6572 14.8282L16.2429 13.414L17.6572 11.9998C19.2193 10.4377 19.2193 7.90506 17.6572 6.34296C16.0951 4.78086 13.5624 4.78086 12.0003 6.34296L10.5861 7.75717L9.17188 6.34296L10.5861 4.92875C12.9292 2.5856 16.7282 2.5856 19.0714 4.92875C21.4145 7.27189 21.4145 11.0709 19.0714 13.414L17.6572 14.8282ZM14.8287 17.6567L13.4145 19.0709C11.0714 21.414 7.27238 21.414 4.92923 19.0709C2.58609 16.7277 2.58609 12.9287 4.92923 10.5856L6.34345 9.17139L7.75766 10.5856L6.34345 11.9998C4.78135 13.5619 4.78135 16.0946 6.34345 17.6567C7.90555 19.2188 10.4382 19.2188 12.0003 17.6567L13.4145 16.2425L14.8287 17.6567ZM14.8287 7.75717L16.2429 9.17139L9.17188 16.2425L7.75766 14.8282L14.8287 7.75717Z"></path></svg>
        </div>
        `;
  }
  connectedCallback() {
    super.connectedCallback();
    const e = new bc();
    e.setContent(`
            <div style="width: 250px">${re("link-address")}</div>
             <div style="width: 250px">
             <input type="text" id="href" style="width: 250px">
            </div>
            
            <div style="margin-top: 10px">${re("link-open-type")}</div>
            <div>
            <select id="target" style="width: 250px">
               <option value="">${re("default")}</option>
               <option value="_blank">${re("link-open-blank")}</option>
            </select>
            </div>
        `), e.onConfirmClick((n) => {
      var s, o;
      const r = n.popper.querySelector("#href").value;
      if (r.trim() === "") {
        (s = this.editor) == null || s.chain().focus().extendMarkRange("link").unsetLink().run();
        return;
      }
      let i = n.popper.querySelector("#target").value;
      i.trim() === "" && (i = null), (o = this.editor) == null || o.chain().focus().extendMarkRange("link").setLink({
        href: r,
        target: i,
        rel: null
      }).run();
    }), e.onShow((n) => {
      var i;
      const r = (i = this.editor) == null ? void 0 : i.getAttributes("link");
      r && r.href ? n.popper.querySelector("#href").value = r.href : n.popper.querySelector("#href").value = "", r && r.target ? n.popper.querySelector("#target").value = r.target : n.popper.querySelector("#target").value = "";
    }), e.setTrigger(this.querySelector("div"), "bottom");
  }
  onActive(e) {
    return e.isActive("link");
  }
};
class iE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M2 4C2 3.44772 2.44772 3 3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4ZM4 19H20V9H4V19ZM11 13H6V17H11V13Z"></path></svg>
        </div>
        `;
  }
  connectedCallback() {
    super.connectedCallback();
    const e = new bc();
    e.setContent(`
            <div style="padding: 10px 10px 0 0;width: 850px;max-width: calc(100% - 10px);">
                <textarea id="source-code" style="width: 100%; height: 260px;"></textarea>
            </div>
        `), e.onConfirmClick((n) => {
      var i;
      const r = n.popper.querySelector("#source-code");
      (i = this.editor) == null || i.commands.setContent(r.value);
    }), e.onShow((n) => {
      var r;
      n.popper.querySelector("#source-code").value = ((r = this.editor) == null ? void 0 : r.getHTML()) || "";
    }), e.setTrigger(this.querySelector("div"), "bottom");
  }
}
class sE extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM5 5V19H19V5H5ZM11.0026 16L6.75999 11.7574L8.17421 10.3431L11.0026 13.1716L16.6595 7.51472L18.0737 8.92893L11.0026 16Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleTaskList();
  }
  onActive(e) {
    return e.isActive("taskList");
  }
}
const oE = ["1.0", "1.25", "1.5", "2.0", "2.5", "3.0"];
class aE extends mi {
  constructor() {
    super(), this.menuData = oE, this.refreshMenuText = !1, this.dropDivHeight = "180px", this.dropDivWith = "70px", this.width = "36px", this.menuTextWidth = "20px";
  }
  onDropdownActive(e, n) {
    return n == 0 ? e.isActive("paragraph") : e.isActive("heading", { level: n });
  }
  onDropdownItemClick(e) {
    const n = `${(Number(this.menuData[e]) * 100).toFixed(0)}%`;
    this.editor.chain().setLineHeight(n).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e];
  }
  onMenuTextRender(e) {
    return `
              <div style="width:18px;height: 18px;">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11 4H21V6H11V4ZM6 7V11H4V7H1L5 3L9 7H6ZM6 17H9L5 21L1 17H4V13H6V17ZM11 18H21V20H11V18ZM9 11H21V13H9V11Z"></path></svg>
              </div>
         `;
  }
}
class lE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4.58341 17.3211C3.55316 16.2275 3 15 3 13.0104C3 9.51092 5.45651 6.37372 9.03059 4.82324L9.92328 6.20085C6.58804 8.00545 5.93618 10.3461 5.67564 11.8221C6.21263 11.5444 6.91558 11.4467 7.60471 11.5106C9.40908 11.6778 10.8312 13.1591 10.8312 15C10.8312 16.933 9.26416 18.5 7.33116 18.5C6.2581 18.5 5.23196 18.0096 4.58341 17.3211ZM14.5834 17.3211C13.5532 16.2275 13 15 13 13.0104C13 9.51092 15.4565 6.37372 19.0306 4.82324L19.9233 6.20085C16.588 8.00545 15.9362 10.3461 15.6756 11.8221C16.2126 11.5444 16.9156 11.4467 17.6047 11.5106C19.4091 11.6778 20.8312 13.1591 20.8312 15C20.8312 16.933 19.2642 18.5 17.3312 18.5C16.2581 18.5 15.232 18.0096 14.5834 17.3211Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBlockquote();
  }
  onActive(e) {
    return e.isActive("blockquote");
  }
}
let uE = class extends ge {
  constructor() {
    super();
    P(this, "fileInput");
    this.template = `
        <div>
        <input type="file" accept="image/*" multiple  style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.9918 21C2.44405 21 2 20.5551 2 20.0066V3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918ZM20 15V5H4V19L14 9L20 15ZM20 17.8284L14 11.8284L6.82843 19H20V17.8284ZM8 11C6.89543 11 6 10.1046 6 9C6 7.89543 6.89543 7 8 7C9.10457 7 10 7.89543 10 9C10 10.1046 9.10457 11 8 11Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  connectedCallback() {
    var n, r;
    super.connectedCallback(), (r = (n = this.options) == null ? void 0 : n.image) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadImage(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(n) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.image) != null && i.customMenuInvoke ? this.options.image.customMenuInvoke(this.editor.aiEditor) : (s = this.fileInput) == null || s.click();
  }
};
class cE extends ge {
  constructor() {
    super();
    P(this, "fileInput");
    this.template = `
        <div>
        <input type="file" accept="video/*" style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM4 5V19H20V5H4ZM10.6219 8.41459L15.5008 11.6672C15.6846 11.7897 15.7343 12.0381 15.6117 12.2219C15.5824 12.2658 15.5447 12.3035 15.5008 12.3328L10.6219 15.5854C10.4381 15.708 10.1897 15.6583 10.0672 15.4745C10.0234 15.4088 10 15.3316 10 15.2526V8.74741C10 8.52649 10.1791 8.34741 10.4 8.34741C10.479 8.34741 10.5562 8.37078 10.6219 8.41459Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  connectedCallback() {
    var n, r;
    super.connectedCallback(), (r = (n = this.options) == null ? void 0 : n.video) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadVideo(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(n) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.video) != null && i.customMenuInvoke ? this.options.video.customMenuInvoke(this.editor.aiEditor) : (s = this.fileInput) == null || s.click();
  }
}
let dE = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 11.9998L15.9289 19.0708L14.5147 17.6566L20.1716 11.9998L14.5147 6.34292L15.9289 4.92871L23 11.9998ZM3.82843 11.9998L9.48528 17.6566L8.07107 19.0708L1 11.9998L8.07107 4.92871L9.48528 6.34292L3.82843 11.9998Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleCode();
  }
  onActive(e) {
    return e.isActive("code");
  }
}, fE = class extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M3.41436 5.99995L5.70726 3.70706L4.29304 2.29285L0.585938 5.99995L4.29304 9.70706L5.70726 8.29285L3.41436 5.99995ZM9.58594 5.99995L7.29304 3.70706L8.70726 2.29285L12.4144 5.99995L8.70726 9.70706L7.29304 8.29285L9.58594 5.99995ZM14.0002 2.99995H21.0002C21.5524 2.99995 22.0002 3.44767 22.0002 3.99995V20C22.0002 20.5522 21.5524 21 21.0002 21H3.00015C2.44787 21 2.00015 20.5522 2.00015 20V12H4.00015V19H20.0002V4.99995H14.0002V2.99995Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleCodeBlock();
  }
  onActive(e) {
    return e.isActive("codeBlock");
  }
};
class hE extends ge {
  constructor() {
    super(), this.template = `
        <div style="height: 16px">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13.9999 18.9967H20.9999V20.9967H11.9999L8.00229 20.9992L1.51457 14.5115C1.12405 14.1209 1.12405 13.4878 1.51457 13.0972L12.1212 2.49065C12.5117 2.10012 13.1449 2.10012 13.5354 2.49065L21.3136 10.2688C21.7041 10.6593 21.7041 11.2925 21.3136 11.683L13.9999 18.9967ZM15.6567 14.5115L19.1922 10.9759L12.8283 4.61197L9.29275 8.1475L15.6567 14.5115Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.unsetAllMarks();
  }
}
class pE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2 11H4V13H2V11ZM6 11H18V13H6V11ZM20 11H22V13H20V11Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.setHorizontalRule();
  }
}
let gE = class extends ge {
  constructor() {
    super();
    P(this, "instance");
    this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14 10H10V14H14V10ZM16 10V14H19V10H16ZM14 19V16H10V19H14ZM16 19H19V16H16V19ZM14 5H10V8H14V5ZM16 5V8H19V5H16ZM8 10H5V14H8V10ZM8 19V16H5V19H8ZM8 5H5V8H8V5ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z"></path></svg>
        </div>
        `;
  }
  connectedCallback() {
    super.connectedCallback(), this.instance = Ke(this.querySelector("svg"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const n = document.createElement("div");
    n.classList.add("aie-dropdown-container"), n.innerHTML = `
        <div style="margin: 5px">
            <div style="padding: 5px 0;font-size: 14px;display: flex"><span>${re("insertTable")}</span><span style="margin-left: auto" id="columnRows"></span></div>
            <div style="display: flex;flex-wrap: wrap;width: 240px;height: 200px" id="table-cells">
            ${[...Array(8).keys()].map((i, s) => [...Array(10).keys()].map((o, a) => `<div data-i="${s}" data-j="${a}" class="table-cell" style="width: 20px;height: 20px;margin:1px;"></div>`).join("")).join("")}
            </div>
        </div>
        `;
    const r = n.querySelector("#table-cells");
    return r.addEventListener("click", (i) => {
      var o, a;
      const s = i.target.closest(".table-cell");
      if (s) {
        let l = s.getAttribute("data-i"), u = s.getAttribute("data-j");
        (o = this.editor) == null || o.commands.insertTable({ rows: Number(l) + 1, cols: Number(u) + 1, withHeaderRow: !0 }), (a = this.instance) == null || a.hide();
      }
    }), r.addEventListener("mouseover", (i) => {
      const s = i.target.closest(".table-cell");
      if (s) {
        let o = Number(s.getAttribute("data-i")), a = Number(s.getAttribute("data-j"));
        const l = r.querySelectorAll("div"), u = n.querySelector("#columnRows");
        u.textContent = `${o + 1} ${re("row")} x ${a + 1} ${re("column")}`, l.forEach((c) => {
          let d = Number(c.getAttribute("data-i")), f = Number(c.getAttribute("data-j"));
          d <= o && f <= a ? c.classList.add("active") : c.classList.remove("active");
        });
      }
    }), r.addEventListener("mouseleave", () => {
      r.querySelectorAll("div").forEach((o) => {
        o.classList.remove("active");
      });
      const s = n.querySelector("#columnRows");
      s.textContent = "";
    }), n;
  }
};
class mE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 18H16.5C17.8807 18 19 16.8807 19 15.5C19 14.1193 17.8807 13 16.5 13H3V11H16.5C18.9853 11 21 13.0147 21 15.5C21 17.9853 18.9853 20 16.5 20H15V22L11 19L15 16V18ZM3 4H21V6H3V4ZM9 18V20H3V18H9Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.setHardBreak();
  }
}
class bE extends ge {
  constructor() {
    super();
    P(this, "fileInput");
    this.template = `
        <div>
        <input type="file" style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.8287 7.7574L9.1718 13.4143C8.78127 13.8048 8.78127 14.4379 9.1718 14.8285C9.56232 15.219 10.1955 15.219 10.586 14.8285L16.2429 9.17161C17.4144 8.00004 17.4144 6.10055 16.2429 4.92897C15.0713 3.7574 13.1718 3.7574 12.0002 4.92897L6.34337 10.5858C4.39075 12.5384 4.39075 15.7043 6.34337 17.6569C8.29599 19.6095 11.4618 19.6095 13.4144 17.6569L19.0713 12L20.4855 13.4143L14.8287 19.0711C12.095 21.8048 7.66283 21.8048 4.92916 19.0711C2.19549 16.3374 2.19549 11.9053 4.92916 9.17161L10.586 3.51476C12.5386 1.56214 15.7045 1.56214 17.6571 3.51476C19.6097 5.46738 19.6097 8.63321 17.6571 10.5858L12.0002 16.2427C10.8287 17.4143 8.92916 17.4143 7.75759 16.2427C6.58601 15.0711 6.58601 13.1716 7.75759 12L13.4144 6.34319L14.8287 7.7574Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  connectedCallback() {
    var n, r;
    super.connectedCallback(), (r = (n = this.options) == null ? void 0 : n.attachment) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadAttachment(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(n) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.attachment) != null && i.customMenuInvoke ? this.options.attachment.customMenuInvoke(this.editor.aiEditor) : (s = this.fileInput) == null || s.click();
  }
}
class yE extends ge {
  constructor() {
    super();
    P(this, "fullscreenSvg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 3V5H4V9H2V3H8ZM2 21V15H4V19H8V21H2ZM22 21H16V19H20V15H22V21ZM22 9H20V5H16V3H22V9Z"></path></svg>');
    P(this, "fullscreenExitSvg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18 7H22V9H16V3H18V7ZM8 9H2V7H6V3H8V9ZM18 17V21H16V15H22V17H18ZM8 15V21H6V17H2V15H8Z"></path></svg>');
    P(this, "isFullscreen", !1);
    this.template = `
        <div>
        ${this.fullscreenSvg}
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(n) {
    const r = this.closest(".aie-container");
    this.isFullscreen ? (r.style.height = "100%", r.style.width = "", r.style.background = "", r.style.position = "", r.style.top = "", r.style.left = "", r.style.zIndex = "") : (r.style.height = "calc(100vh - 2px)", r.style.width = "calc(100% - 2px)", r.style.position = "fixed", r.style.top = "0", r.style.left = "0", r.style.zIndex = "9999"), this.isFullscreen = !this.isFullscreen, this.querySelector("div").innerHTML = this.isFullscreen ? this.fullscreenExitSvg : this.fullscreenSvg;
  }
}
class xE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17 2C17.5523 2 18 2.44772 18 3V7H21C21.5523 7 22 7.44772 22 8V18C22 18.5523 21.5523 19 21 19H18V21C18 21.5523 17.5523 22 17 22H7C6.44772 22 6 21.5523 6 21V19H3C2.44772 19 2 18.5523 2 18V8C2 7.44772 2.44772 7 3 7H6V3C6 2.44772 6.44772 2 7 2H17ZM16 17H8V20H16V17ZM20 9H4V17H6V16C6 15.4477 6.44772 15 7 15H17C17.5523 15 18 15.4477 18 16V17H20V9ZM8 10V12H5V10H8ZM16 4H8V7H16V4Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    let n = this.closest(".aie-container").querySelector(".aie-content").innerHTML;
    n = `<div class="aie-container" style="border: none;padding: 0;margin: 0"><div class="aie-content" style="border: none;height: auto;overflow: visible">${n}</div></div>`;
    const i = Array.from(document.querySelectorAll("style, link")).map((l) => l.outerHTML).join("") + n, s = document.createElement("iframe");
    s.id = "aie-print-iframe", s.setAttribute("style", "position: absolute; width: 0; height: 0; top: -10px; left: -10px;"), document.body.appendChild(s);
    const o = s.contentWindow, a = s.contentDocument || s.contentWindow && s.contentWindow.document;
    a && (a.open(), a.write(i), a.close()), o && (s.onload = function() {
      try {
        setTimeout(() => {
          o.focus();
          try {
            o.document.execCommand("print", !1) || o.print();
          } catch {
            o.print();
          }
          o.close();
        }, 10);
      } catch (l) {
        console.error(l);
      }
      setTimeout(function() {
        document.body.removeChild(s);
      }, 100);
    });
  }
}
const kE = [
  "😀",
  "😃",
  "😄",
  "😁",
  "😆",
  "😅",
  "🤣",
  "😂",
  "🙂",
  "🙃",
  "😉",
  "😊",
  "😇",
  "🥰",
  "😍",
  "🤩",
  "😘",
  "😗",
  "😚",
  "😙",
  "🥲",
  "😋",
  "😛",
  "😜",
  "🤪",
  "😝",
  "🤑",
  "🤗",
  "🤭",
  "🤫",
  "🤔",
  "🤐",
  "🤨",
  "😐",
  "😑",
  "😶",
  "😶‍🌫",
  "😏",
  "😒",
  "🙄",
  "😬",
  "😮‍💨",
  "🤥",
  "😌",
  "😔",
  "😪",
  "🤤",
  "😴",
  "😷",
  "🤒",
  "🤕",
  "🤢",
  "🤮",
  "🤧",
  "🥵",
  "🥶",
  "🥴",
  "😵",
  "😵‍💫",
  "🤯",
  "🤠",
  "🥳",
  "🥸",
  "😎",
  "🤓",
  "🧐",
  "😕",
  "😟",
  "🙁",
  "😮",
  "😲",
  "😳",
  "🥺",
  "😦",
  "😧",
  "😨",
  "😰",
  "😥",
  "😢",
  "😭",
  "😱",
  "😖",
  "😣",
  "😞",
  "😓",
  "😩",
  "😫",
  "🥱",
  "😤",
  "😡",
  "😠",
  "🤬",
  "😈",
  "👿",
  "💀",
  "☠️",
  "💩",
  "🤡",
  "👹",
  "👺",
  "👻",
  "👽",
  "👾",
  "🤖",
  "😺",
  "😸",
  "😹",
  "😻",
  "😼",
  "😽",
  "🙀",
  "😿",
  "😾",
  "🙈",
  "🙉",
  "🙊",
  "💌",
  "💘",
  "💝",
  "💖",
  "💗",
  "💓",
  "💞",
  "💕",
  "💟",
  "❣️",
  "💔",
  "💋",
  "💯",
  "💢",
  "💥",
  "💫",
  "💦",
  "💨",
  "💤"
];
class vE extends ge {
  constructor() {
    super(), this.template = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM8 13H16C16 15.2091 14.2091 17 12 17C9.79086 17 8 15.2091 8 13ZM8 11C7.17157 11 6.5 10.3284 6.5 9.5C6.5 8.67157 7.17157 8 8 8C8.82843 8 9.5 8.67157 9.5 9.5C9.5 10.3284 8.82843 11 8 11ZM16 11C15.1716 11 14.5 10.3284 14.5 9.5C14.5 8.67157 15.1716 8 16 8C16.8284 8 17.5 8.67157 17.5 9.5C17.5 10.3284 16.8284 11 16 11Z"></path></svg>
        </div>
        `;
  }
  connectedCallback() {
    super.connectedCallback(), Ke(this.querySelector("svg"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const e = document.createElement("div");
    return e.style.height = "220px", e.style.width = "400px", e.classList.add("aie-dropdown-container"), e.innerHTML = `
        <div style="margin: 5px">
            <div class="emoji-cells">
            ${kE.map((n) => `<div  class="emoji-cell">${n}</div>`).join("")}
            </div>
        </div>
        `, e.querySelector(".emoji-cells").addEventListener("click", (n) => {
      var i;
      const r = n.target.closest(".emoji-cell");
      r && ((i = this.editor) == null || i.commands.insertContent(r.innerHTML));
    }), e;
  }
}
class EE extends ge {
  constructor() {
    super();
    P(this, "svg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 4.99658V7.99658H19V4.99658H5ZM4 2.99658H20C20.5523 2.99658 21 3.4443 21 3.99658V8.99658C21 9.54887 20.5523 9.99658 20 9.99658H4C3.44772 9.99658 3 9.54887 3 8.99658V3.99658C3 3.4443 3.44772 2.99658 4 2.99658ZM6 11.9966H12C12.5523 11.9966 13 12.4443 13 12.9966V15.9966H14V21.9966H10V15.9966H11V13.9966H5C4.44772 13.9966 4 13.5489 4 12.9966V10.9966H6V11.9966ZM17.7322 13.7288L19.5 11.961L21.2678 13.7288C22.2441 14.7051 22.2441 16.288 21.2678 17.2643C20.2915 18.2407 18.7085 18.2407 17.7322 17.2643C16.7559 16.288 16.7559 14.7051 17.7322 13.7288Z"></path></svg>');
    this.template = `
        <div style="height: 16px">
        ${this.svg}
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(n) {
    var r;
    n.setPainter((r = this.editor) == null ? void 0 : r.state.selection.$head.marks());
  }
}
class wa {
  constructor(e, n, r) {
    P(this, "editor");
    P(this, "globalConfig");
    P(this, "aiModelName");
    P(this, "aiModelConfig");
    this.editor = e, this.globalConfig = n, this.aiModelName = r, this.aiModelConfig = n.models[r];
  }
  chatWithPayload(e, n) {
    const r = (s) => {
      this.createAiClient(s, n).start(typeof e == "string" ? e : JSON.stringify(e));
    }, i = () => {
      n == null || n.onStop();
    };
    this.globalConfig.onCreateClientUrl ? this.globalConfig.onCreateClientUrl(this.aiModelName, this.aiModelConfig, r, i) : r(this.createAiClientUrl());
  }
  chat(e, n, r) {
    const i = (o) => {
      const a = this.createAiClient(o, r), l = n.includes("{content}") ? n.split("{content}").join(e) : `${e}
${n}`, u = this.wrapPayload(l);
      a.start(typeof u == "string" ? u : JSON.stringify(u));
    }, s = () => {
      r == null || r.onStop();
    };
    this.globalConfig.onCreateClientUrl ? this.globalConfig.onCreateClientUrl(this.aiModelName, this.aiModelConfig, i, s) : i(this.createAiClientUrl());
  }
}
class N1 {
  constructor(e, n) {
    P(this, "isStop", !1);
    P(this, "url");
    P(this, "webSocket");
    P(this, "isOpen", !1);
    P(this, "payload");
    P(this, "listener");
    this.url = e, this.listener = n;
  }
  start(e) {
    this.listener.onStart(this), this.payload = e, this.webSocket = new WebSocket(this.url), this.webSocket.onopen = (n) => this.onOpen(n), this.webSocket.onmessage = (n) => this.onMessage(n), this.webSocket.onclose = (n) => this.onClose(n), this.webSocket.onerror = (n) => this.onError(n);
  }
  stop() {
    this.webSocket && (this.webSocket.close(), this.webSocket = void 0, this.isStop || (this.listener.onStop(), this.isStop = !0));
  }
  send(e) {
    this.webSocket && this.isOpen && this.webSocket.send(e);
  }
  onOpen(e) {
    this.isOpen = !0, this.send(this.payload);
  }
  onMessage(e) {
    this.listener.onMessage(e.data);
  }
  onClose(e) {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
  onError(e) {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
}
var Fn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Cs(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function CE(t) {
  if (t.__esModule)
    return t;
  var e = t.default;
  if (typeof e == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    n.prototype = e.prototype;
  } else
    n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(t).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(t, r);
    Object.defineProperty(n, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[r];
      }
    });
  }), n;
}
var L1 = { exports: {} };
function _E(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var xl = { exports: {} };
const wE = {}, SE = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: wE
}, Symbol.toStringTag, { value: "Module" })), AE = /* @__PURE__ */ CE(SE);
var Lf;
function Sa() {
  return Lf || (Lf = 1, function(t, e) {
    (function(n, r) {
      t.exports = r();
    })(Fn, function() {
      var n = n || function(r, i) {
        var s;
        if (typeof window < "u" && window.crypto && (s = window.crypto), typeof self < "u" && self.crypto && (s = self.crypto), typeof globalThis < "u" && globalThis.crypto && (s = globalThis.crypto), !s && typeof window < "u" && window.msCrypto && (s = window.msCrypto), !s && typeof Fn < "u" && Fn.crypto && (s = Fn.crypto), !s && typeof _E == "function")
          try {
            s = AE;
          } catch {
          }
        var o = function() {
          if (s) {
            if (typeof s.getRandomValues == "function")
              try {
                return s.getRandomValues(new Uint32Array(1))[0];
              } catch {
              }
            if (typeof s.randomBytes == "function")
              try {
                return s.randomBytes(4).readInt32LE();
              } catch {
              }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        }, a = Object.create || function() {
          function x() {
          }
          return function(k) {
            var b;
            return x.prototype = k, b = new x(), x.prototype = null, b;
          };
        }(), l = {}, u = l.lib = {}, c = u.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(x) {
              var k = a(this);
              return x && k.mixIn(x), (!k.hasOwnProperty("init") || this.init === k.init) && (k.init = function() {
                k.$super.init.apply(this, arguments);
              }), k.init.prototype = k, k.$super = this, k;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var x = this.extend();
              return x.init.apply(x, arguments), x;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(x) {
              for (var k in x)
                x.hasOwnProperty(k) && (this[k] = x[k]);
              x.hasOwnProperty("toString") && (this.toString = x.toString);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }(), d = u.WordArray = c.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(x, k) {
            x = this.words = x || [], k != i ? this.sigBytes = k : this.sigBytes = x.length * 4;
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(x) {
            return (x || h).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(x) {
            var k = this.words, b = x.words, E = this.sigBytes, v = x.sigBytes;
            if (this.clamp(), E % 4)
              for (var _ = 0; _ < v; _++) {
                var T = b[_ >>> 2] >>> 24 - _ % 4 * 8 & 255;
                k[E + _ >>> 2] |= T << 24 - (E + _) % 4 * 8;
              }
            else
              for (var w = 0; w < v; w += 4)
                k[E + w >>> 2] = b[w >>> 2];
            return this.sigBytes += v, this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var x = this.words, k = this.sigBytes;
            x[k >>> 2] &= 4294967295 << 32 - k % 4 * 8, x.length = r.ceil(k / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var x = c.clone.call(this);
            return x.words = this.words.slice(0), x;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(x) {
            for (var k = [], b = 0; b < x; b += 4)
              k.push(o());
            return new d.init(k, x);
          }
        }), f = l.enc = {}, h = f.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(x) {
            for (var k = x.words, b = x.sigBytes, E = [], v = 0; v < b; v++) {
              var _ = k[v >>> 2] >>> 24 - v % 4 * 8 & 255;
              E.push((_ >>> 4).toString(16)), E.push((_ & 15).toString(16));
            }
            return E.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(x) {
            for (var k = x.length, b = [], E = 0; E < k; E += 2)
              b[E >>> 3] |= parseInt(x.substr(E, 2), 16) << 24 - E % 8 * 4;
            return new d.init(b, k / 2);
          }
        }, p = f.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(x) {
            for (var k = x.words, b = x.sigBytes, E = [], v = 0; v < b; v++) {
              var _ = k[v >>> 2] >>> 24 - v % 4 * 8 & 255;
              E.push(String.fromCharCode(_));
            }
            return E.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(x) {
            for (var k = x.length, b = [], E = 0; E < k; E++)
              b[E >>> 2] |= (x.charCodeAt(E) & 255) << 24 - E % 4 * 8;
            return new d.init(b, k);
          }
        }, g = f.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(x) {
            try {
              return decodeURIComponent(escape(p.stringify(x)));
            } catch {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(x) {
            return p.parse(unescape(encodeURIComponent(x)));
          }
        }, m = u.BufferedBlockAlgorithm = c.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new d.init(), this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(x) {
            typeof x == "string" && (x = g.parse(x)), this._data.concat(x), this._nDataBytes += x.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(x) {
            var k, b = this._data, E = b.words, v = b.sigBytes, _ = this.blockSize, T = _ * 4, w = v / T;
            x ? w = r.ceil(w) : w = r.max((w | 0) - this._minBufferSize, 0);
            var N = w * _, $ = r.min(N * 4, v);
            if (N) {
              for (var K = 0; K < N; K += _)
                this._doProcessBlock(E, K);
              k = E.splice(0, N), b.sigBytes -= $;
            }
            return new d.init(k, $);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var x = c.clone.call(this);
            return x._data = this._data.clone(), x;
          },
          _minBufferSize: 0
        });
        u.Hasher = m.extend({
          /**
           * Configuration options.
           */
          cfg: c.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(x) {
            this.cfg = this.cfg.extend(x), this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            m.reset.call(this), this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(x) {
            return this._append(x), this._process(), this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(x) {
            x && this._append(x);
            var k = this._doFinalize();
            return k;
          },
          blockSize: 16,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(x) {
            return function(k, b) {
              return new x.init(b).finalize(k);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(x) {
            return function(k, b) {
              return new y.HMAC.init(x, b).finalize(k);
            };
          }
        });
        var y = l.algo = {};
        return l;
      }(Math);
      return n;
    });
  }(xl)), xl.exports;
}
var kl = { exports: {} }, Rf;
function ME() {
  return Rf || (Rf = 1, function(t, e) {
    (function(n, r) {
      t.exports = r(Sa());
    })(Fn, function(n) {
      return function(r) {
        var i = n, s = i.lib, o = s.WordArray, a = s.Hasher, l = i.algo, u = [], c = [];
        (function() {
          function h(y) {
            for (var x = r.sqrt(y), k = 2; k <= x; k++)
              if (!(y % k))
                return !1;
            return !0;
          }
          function p(y) {
            return (y - (y | 0)) * 4294967296 | 0;
          }
          for (var g = 2, m = 0; m < 64; )
            h(g) && (m < 8 && (u[m] = p(r.pow(g, 1 / 2))), c[m] = p(r.pow(g, 1 / 3)), m++), g++;
        })();
        var d = [], f = l.SHA256 = a.extend({
          _doReset: function() {
            this._hash = new o.init(u.slice(0));
          },
          _doProcessBlock: function(h, p) {
            for (var g = this._hash.words, m = g[0], y = g[1], x = g[2], k = g[3], b = g[4], E = g[5], v = g[6], _ = g[7], T = 0; T < 64; T++) {
              if (T < 16)
                d[T] = h[p + T] | 0;
              else {
                var w = d[T - 15], N = (w << 25 | w >>> 7) ^ (w << 14 | w >>> 18) ^ w >>> 3, $ = d[T - 2], K = ($ << 15 | $ >>> 17) ^ ($ << 13 | $ >>> 19) ^ $ >>> 10;
                d[T] = N + d[T - 7] + K + d[T - 16];
              }
              var U = b & E ^ ~b & v, W = m & y ^ m & x ^ y & x, z = (m << 30 | m >>> 2) ^ (m << 19 | m >>> 13) ^ (m << 10 | m >>> 22), A = (b << 26 | b >>> 6) ^ (b << 21 | b >>> 11) ^ (b << 7 | b >>> 25), C = _ + A + U + c[T] + d[T], S = z + W;
              _ = v, v = E, E = b, b = k + C | 0, k = x, x = y, y = m, m = C + S | 0;
            }
            g[0] = g[0] + m | 0, g[1] = g[1] + y | 0, g[2] = g[2] + x | 0, g[3] = g[3] + k | 0, g[4] = g[4] + b | 0, g[5] = g[5] + E | 0, g[6] = g[6] + v | 0, g[7] = g[7] + _ | 0;
          },
          _doFinalize: function() {
            var h = this._data, p = h.words, g = this._nDataBytes * 8, m = h.sigBytes * 8;
            return p[m >>> 5] |= 128 << 24 - m % 32, p[(m + 64 >>> 9 << 4) + 14] = r.floor(g / 4294967296), p[(m + 64 >>> 9 << 4) + 15] = g, h.sigBytes = p.length * 4, this._process(), this._hash;
          },
          clone: function() {
            var h = a.clone.call(this);
            return h._hash = this._hash.clone(), h;
          }
        });
        i.SHA256 = a._createHelper(f), i.HmacSHA256 = a._createHmacHelper(f);
      }(Math), n.SHA256;
    });
  }(kl)), kl.exports;
}
var vl = { exports: {} }, If;
function TE() {
  return If || (If = 1, function(t, e) {
    (function(n, r) {
      t.exports = r(Sa());
    })(Fn, function(n) {
      (function() {
        var r = n, i = r.lib, s = i.Base, o = r.enc, a = o.Utf8, l = r.algo;
        l.HMAC = s.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(u, c) {
            u = this._hasher = new u.init(), typeof c == "string" && (c = a.parse(c));
            var d = u.blockSize, f = d * 4;
            c.sigBytes > f && (c = u.finalize(c)), c.clamp();
            for (var h = this._oKey = c.clone(), p = this._iKey = c.clone(), g = h.words, m = p.words, y = 0; y < d; y++)
              g[y] ^= 1549556828, m[y] ^= 909522486;
            h.sigBytes = p.sigBytes = f, this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var u = this._hasher;
            u.reset(), u.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(u) {
            return this._hasher.update(u), this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(u) {
            var c = this._hasher, d = c.finalize(u);
            c.reset();
            var f = c.finalize(this._oKey.clone().concat(d));
            return f;
          }
        });
      })();
    });
  }(vl)), vl.exports;
}
(function(t, e) {
  (function(n, r, i) {
    t.exports = r(Sa(), ME(), TE());
  })(Fn, function(n) {
    return n.HmacSHA256;
  });
})(L1);
var DE = L1.exports;
const OE = /* @__PURE__ */ Cs(DE);
var R1 = { exports: {} };
(function(t, e) {
  (function(n, r) {
    t.exports = r(Sa());
  })(Fn, function(n) {
    return function() {
      var r = n, i = r.lib, s = i.WordArray, o = r.enc;
      o.Base64 = {
        /**
         * Converts a word array to a Base64 string.
         *
         * @param {WordArray} wordArray The word array.
         *
         * @return {string} The Base64 string.
         *
         * @static
         *
         * @example
         *
         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
         */
        stringify: function(l) {
          var u = l.words, c = l.sigBytes, d = this._map;
          l.clamp();
          for (var f = [], h = 0; h < c; h += 3)
            for (var p = u[h >>> 2] >>> 24 - h % 4 * 8 & 255, g = u[h + 1 >>> 2] >>> 24 - (h + 1) % 4 * 8 & 255, m = u[h + 2 >>> 2] >>> 24 - (h + 2) % 4 * 8 & 255, y = p << 16 | g << 8 | m, x = 0; x < 4 && h + x * 0.75 < c; x++)
              f.push(d.charAt(y >>> 6 * (3 - x) & 63));
          var k = d.charAt(64);
          if (k)
            for (; f.length % 4; )
              f.push(k);
          return f.join("");
        },
        /**
         * Converts a Base64 string to a word array.
         *
         * @param {string} base64Str The Base64 string.
         *
         * @return {WordArray} The word array.
         *
         * @static
         *
         * @example
         *
         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
         */
        parse: function(l) {
          var u = l.length, c = this._map, d = this._reverseMap;
          if (!d) {
            d = this._reverseMap = [];
            for (var f = 0; f < c.length; f++)
              d[c.charCodeAt(f)] = f;
          }
          var h = c.charAt(64);
          if (h) {
            var p = l.indexOf(h);
            p !== -1 && (u = p);
          }
          return a(l, u, d);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
      function a(l, u, c) {
        for (var d = [], f = 0, h = 0; h < u; h++)
          if (h % 4) {
            var p = c[l.charCodeAt(h - 1)] << h % 4 * 2, g = c[l.charCodeAt(h)] >>> 6 - h % 4 * 2, m = p | g;
            d[f >>> 2] |= m << 24 - f % 4 * 8, f++;
          }
        return s.create(d, f);
      }
    }(), n.enc.Base64;
  });
})(R1);
var NE = R1.exports;
const LE = /* @__PURE__ */ Cs(NE), Aa = () => "10000000-1000-4000-8000-100000000000".replace(
  /[018]/g,
  (t) => (t ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> t / 4).toString(16)
);
class RE extends wa {
  constructor(e, n) {
    super(e, n, "spark"), this.aiModelConfig = {
      version: "v3.5",
      protocol: "wss",
      ...n.models.spark
    };
  }
  createAiClient(e, n) {
    return new N1(e, {
      onStart: n.onStart,
      onStop: n.onStop,
      // 星火内容解析 https://www.xfyun.cn/doc/spark/Web.html#_1-%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E
      onMessage: (r) => {
        var s, o, a, l, u;
        const i = JSON.parse(r);
        i.payload && ((o = (s = i.payload.usage) == null ? void 0 : s.text) != null && o.total_tokens && this.globalConfig.onTokenConsume && this.globalConfig.onTokenConsume(this.aiModelName, this.aiModelConfig, (l = (a = i.payload.usage) == null ? void 0 : a.text) == null ? void 0 : l.total_tokens), (u = i.payload.choices) != null && u.text && i.payload.choices.text[0] && n.onMessage({
          ...i.payload.choices.text[0],
          status: i.payload.choices.status
        }));
      }
    });
  }
  wrapPayload(e) {
    const n = this.aiModelConfig, r = {
      header: {
        app_id: n.appId,
        uid: Aa()
      },
      parameter: {
        chat: {
          domain: this.getDomain(n),
          temperature: 0.5,
          max_tokens: 2048
        }
      },
      payload: {
        message: {
          text: [
            { role: "user", content: e }
          ]
        }
      }
    };
    return JSON.stringify(r);
  }
  getDomain(e) {
    switch (e.version) {
      case "v3.5":
        return "generalv3.5";
      case "v3.1":
        return "generalv3";
      case "v2.1":
        return "generalv2";
      default:
        return "general";
    }
  }
  createAiClientUrl() {
    const e = this.aiModelConfig, n = (/* @__PURE__ */ new Date()).toUTCString().replace("GMT", "+0000");
    let r = `host: spark-api.xf-yun.com
`;
    r += "date: " + n + `
`, r += `GET /${e.version}/chat HTTP/1.1`;
    const i = OE(r, e.apiSecret), s = LE.stringify(i), o = `api_key="${e.apiKey}", algorithm="hmac-sha256", headers="host date request-line", signature="${s}"`, a = btoa(o);
    return `${e.protocol}://spark-api.xf-yun.com/${e.version}/chat?authorization=${a}&date=${encodeURIComponent(n)}&host=spark-api.xf-yun.com`;
  }
}
class IE {
  constructor(e, n) {
    P(this, "isStop", !1);
    P(this, "config");
    P(this, "fetch");
    P(this, "isOpen", !1);
    P(this, "payload");
    P(this, "listener");
    this.config = e, this.listener = n;
  }
  start(e) {
    this.payload = e, this.onOpen(), this.listener.onStart(this);
  }
  stop() {
    this.fetch && (this.fetch = void 0, this.isStop || (this.listener.onStop(), this.isStop = !0));
  }
  async send(e) {
    if (this.isOpen)
      try {
        this.fetch = await fetch(this.config.url, { method: this.config.method, body: e });
        const n = this.fetch;
        if (!n.body)
          throw new Error("response.body is none");
        const r = ({ done: o, value: a }) => {
          if (o) {
            this.onClose();
            return;
          }
          return this.onMessage(s.decode(a)), i.read().then(({ done: l, value: u }) => r({ done: l, value: u }));
        }, i = n.body.getReader(), s = new TextDecoder("utf-8");
        i.read().then(({ done: o, value: a }) => r({ done: o, value: a }));
      } catch {
        this.onError();
      }
  }
  onOpen() {
    this.isOpen = !0, this.send(this.payload);
  }
  onMessage(e) {
    this.listener.onMessage(e);
  }
  onClose() {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
  onError() {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
}
class FE extends wa {
  constructor(e, n) {
    super(e, n, "wenxin"), this.aiModelConfig = {
      ...n.models.wenxin
    };
  }
  createAiClient(e, n) {
    return new IE({ url: e, method: "POST" }, {
      onStart: n.onStart,
      onStop: n.onStop,
      onMessage: (r) => {
        const i = r.match(/data:([\s\S]*)$/);
        if (!i)
          return;
        const s = JSON.parse(i[1]);
        n.onMessage({
          status: s.is_end ? 2 : 1,
          role: "assistant",
          content: s.result || "",
          index: s.sentence_id
        });
      }
    });
  }
  wrapPayload(e) {
    const n = {
      messages: [],
      stream: !0
    };
    return n.messages.push({ role: "user", content: e }), JSON.stringify(n);
  }
  createAiClientUrl() {
    return `https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie_speed?access_token=${this.aiModelConfig.access_token}`;
  }
}
class I1 {
  constructor(e, n) {
    P(this, "isStop", !1);
    P(this, "config");
    P(this, "fetch");
    P(this, "isOpen", !1);
    P(this, "payload");
    P(this, "listener");
    P(this, "ctrl", new AbortController());
    this.config = e, this.listener = n;
  }
  start(e) {
    this.payload = e, this.onOpen(), this.listener.onStart(this);
  }
  stop() {
    this.fetch && (this.ctrl.abort(), this.isStop || (this.listener.onStop(), this.isStop = !0));
  }
  async send(e) {
    var n;
    if (this.isOpen)
      try {
        const r = await fetch(
          this.config.url,
          {
            method: this.config.method || "POST",
            headers: this.config.headers,
            body: e
          }
        );
        if (!r.ok) {
          this.onError();
          return;
        }
        const i = (n = r.body) == null ? void 0 : n.getReader();
        if (!i) {
          this.onError();
          return;
        }
        const s = new TextDecoder("utf-8");
        for (; ; ) {
          let { value: o, done: a } = await i.read();
          if (a) {
            this.onClose();
            break;
          }
          let l = s.decode(o);
          if (!l)
            return;
          const u = l.split(`

`);
          let c = "", d = 0;
          for (let f of u)
            f.indexOf("data:") == 0 ? (c && this.onMessage(c), c = f.substring(5)) : (d != u.length - 1 && (c += `

`), c += f), d++;
          c && this.onMessage(c);
        }
      } catch {
        this.onError();
      }
  }
  onOpen() {
    this.isOpen = !0, this.send(this.payload);
  }
  onMessage(e) {
    this.listener.onMessage(e);
  }
  onClose() {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
  onError() {
    this.isOpen = !1, this.isStop || (this.listener.onStop(), this.isStop = !0);
  }
}
class HE extends wa {
  constructor(e, n) {
    super(e, n, "custom"), this.aiModelConfig = {
      protocol: "sse",
      ...n.models.custom
    };
  }
  createAiClient(e, n) {
    var s;
    const r = this.aiModelConfig, i = {
      onStart: n.onStart,
      onStop: n.onStop,
      onMessage: (o) => {
        var u;
        const a = this.aiModelConfig, l = (u = a.parseMessage) == null ? void 0 : u.call(a, o);
        l && n.onMessage(l);
      }
    };
    return r.protocol === "sse" ? new I1({
      url: e,
      method: "post",
      headers: (s = r.headers) == null ? void 0 : s.call(r)
    }, i) : new N1(e, i);
  }
  wrapPayload(e) {
    var r;
    const n = this.aiModelConfig;
    return (r = n.wrapPayload) == null ? void 0 : r.call(n, e);
  }
  createAiClientUrl() {
    var n;
    const e = this.aiModelConfig;
    return typeof e.url == "string" ? e.url : (n = e.url) == null ? void 0 : n.call(e);
  }
}
class BE extends wa {
  constructor(e, n) {
    super(e, n, "openai"), this.aiModelConfig = {
      endpoint: "https://api.openai.com",
      model: "gpt-3.5-turbo",
      ...n.models.openai
    };
  }
  createAiClient(e, n) {
    const r = this.aiModelConfig;
    return new I1({
      url: e,
      method: "post",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${r.apiKey}`
      }
    }, {
      onStart: n.onStart,
      onStop: n.onStop,
      onMessage: (i) => {
        var o, a;
        const s = JSON.parse(i);
        n.onMessage({
          status: s.choices[0].finish_reason === "stop" ? 2 : 1,
          role: "assistant",
          content: ((o = s.choices[0].delta) == null ? void 0 : o.content) || "",
          index: s.choices[0].index
        }), this.globalConfig.onTokenConsume && ((a = s.choices[0].usage) != null && a.total_tokens) && this.globalConfig.onTokenConsume(this.aiModelName, this.aiModelConfig, s.choices[0].usage.total_tokens);
      }
    });
  }
  wrapPayload(e) {
    const r = {
      model: this.aiModelConfig.model,
      messages: [
        {
          role: "user",
          content: e
        }
      ],
      stream: !0
    };
    return JSON.stringify(r);
  }
  createAiClientUrl() {
    return `${this.aiModelConfig.endpoint}/v1/chat/completions`;
  }
}
class Er {
  static init(e, n) {
    var r;
    if (n && n.models)
      for (let i of Object.keys(n.models))
        switch (i) {
          case "spark":
            this.set(i, new RE(e, n));
            break;
          case "wenxin":
            this.set(i, new FE(e, n));
            break;
          case "openai":
            this.set(i, new BE(e, n));
            break;
          case "custom":
            this.set(i, new HE(e, n));
            break;
          default:
            const s = (r = n.modelFactory) == null ? void 0 : r.create(i, e, n);
            s && this.set(i, s);
        }
  }
  static get(e) {
    return (!e || e === "auto") && (e = Object.keys(this.models)[0]), this.models[e];
  }
  static set(e, n) {
    this.models[e] = n;
  }
}
P(Er, "models", {});
const PE = (t) => {
  let e = "";
  return t.descendants((n) => {
    n.text && (e += n.text);
  }), e;
};
class Lo {
  constructor(e, n) {
    P(this, "editor");
    P(this, "from");
    P(this, "options");
    this.editor = e, this.from = e.view.state.selection.from, this.options = n || {
      markdownParseEnable: !0
    };
  }
  onStart() {
  }
  onStop() {
  }
  onMessage(e) {
    const { state: { tr: n }, view: r } = this.editor;
    if (r.dispatch(n.insertText(e.content)), e.status == 2 && this.options.markdownParseEnable) {
      const i = this.editor.state.selection.to, s = this.editor.state.doc.textBetween(this.from, i), { state: { tr: o }, view: a } = this.editor, l = this.editor.parseMarkdown(s);
      if (this.options.useMarkdownTextOnly) {
        const u = PE(l), c = this.editor.schema.text(u);
        a.dispatch(o.replaceWith(this.from, i, c).scrollIntoView());
      } else
        a.dispatch(o.replaceWith(this.from, i, l).scrollIntoView());
    }
    this.editor.commands.scrollIntoView();
  }
}
const $E = [
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M4 18.9997H20V13.9997H22V19.9997C22 20.552 21.5523 20.9997 21 20.9997H3C2.44772 20.9997 2 20.552 2 19.9997V13.9997H4V18.9997ZM16.1716 6.9997L12.2218 3.04996L13.636 1.63574L20 7.9997L13.636 14.3637L12.2218 12.9495L16.1716 8.9997H5V6.9997H16.1716Z"></path></svg>',
    name: "AI 续写",
    prompt: "请帮我继续扩展一些这段话的内容",
    text: "focusBefore",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M15 5.25C16.7949 5.25 18.25 3.79493 18.25 2H19.75C19.75 3.79493 21.2051 5.25 23 5.25V6.75C21.2051 6.75 19.75 8.20507 19.75 10H18.25C18.25 8.20507 16.7949 6.75 15 6.75V5.25ZM4 7C4 5.89543 4.89543 5 6 5H13V3H6C3.79086 3 2 4.79086 2 7V17C2 19.2091 3.79086 21 6 21H18C20.2091 21 22 19.2091 22 17V12H20V17C20 18.1046 19.1046 19 18 19H6C4.89543 19 4 18.1046 4 17V7Z"></path></svg>',
    name: "AI 优化",
    prompt: "请帮我优化一下这段文字的内容，并返回结果",
    text: "selected",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M17.934 3.0359L19.666 4.0359L18.531 6H21V8H19V12H21V14H19V21H17V14L13.9157 14.0004C13.5914 16.8623 12.3522 19.3936 10.5466 21.1933L8.98361 19.9233C10.5031 18.4847 11.5801 16.4008 11.9008 14.0009L10 14V12L12 11.999V8H10V6H12.467L11.334 4.0359L13.066 3.0359L14.777 6H16.221L17.934 3.0359ZM5 13.803L3 14.339V12.268L5 11.732V8H3V6H5V3H7V6H9V8H7V11.197L9 10.661V12.731L7 13.267V18.5C7 19.8807 5.88071 21 4.5 21H3V19H4.5C4.74546 19 4.94961 18.8231 4.99194 18.5899L5 18.5V13.803ZM17 8H14V12H17V8Z"></path></svg>',
    name: "AI 校对",
    prompt: "请帮我找出这段话的错别字，把错别字修改后，并返回结果，不要解释或其他多余的内容",
    text: "selected",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M5 15V17C5 18.0544 5.81588 18.9182 6.85074 18.9945L7 19H10V21H7C4.79086 21 3 19.2091 3 17V15H5ZM18 10L22.4 21H20.245L19.044 18H14.954L13.755 21H11.601L16 10H18ZM17 12.8852L15.753 16H18.245L17 12.8852ZM8 2V4H12V11H8V14H6V11H2V4H6V2H8ZM17 3C19.2091 3 21 4.79086 21 7V9H19V7C19 5.89543 18.1046 5 17 5H14V3H17ZM6 6H4V9H6V6ZM10 6H8V9H10V6Z"></path></svg>',
    name: "AI 翻译",
    prompt: "请帮我翻译以上内容，在翻译之前，想先判断一下这个内容是不是中文，如果是中文，则翻译问英文，如果是其他语言，则需要翻译为中文，注意，你只需要返回翻译的结果，不需要对此进行任何解释，不需要除了翻译结果以外的其他任何内容。",
    text: "selected",
    model: "auto"
  }
];
class zE extends mi {
  constructor() {
    super(), this.dropDivHeight = "auto", this.dropDivWith = "94px", this.width = "36px", this.menuTextWidth = "20px";
  }
  onCreate(e, n) {
    var r;
    super.onCreate(e, n), this.menuData = ((r = n.ai) == null ? void 0 : r.menus) || $E;
  }
  renderTemplate() {
    this.template = `
         <div style="width: ${this.width};">
         <div id="tippy" class="menu-ai" id="text">
             <span> AI </span>
             <div style="width: 18px;height: 18px;display: inline-block" >
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
             </div>
         </div>
         </div>
        `;
  }
  createMenuElement() {
    const e = document.createElement("div");
    e.style.height = this.dropDivHeight, e.style.width = this.dropDivWith, e.classList.add("aie-dropdown-container");
    for (let n = 0; n < this.menuData.length; n++) {
      const r = document.createElement("div");
      r.classList.add("aie-dropdown-item"), r.innerHTML = `
            <div class="text" style="display: flex;padding-left: 5px">${this.onDropdownItemRender(n)}</div>
            `, r.addEventListener("click", () => {
        this.onDropdownItemClick(n), this.tippyInstance.hide();
      }), e.appendChild(r);
    }
    return this.tippyEl = e, e;
  }
  onTransaction(e) {
  }
  onDropdownActive(e, n) {
    return !1;
  }
  getSelectedText(e) {
    if (e === "selected") {
      const { selection: n, doc: r } = this.editor.state;
      return r.textBetween(n.from, n.to);
    } else
      return this.editor.state.selection.$head.parent.textContent;
  }
  onDropdownItemClick(e) {
    const n = this.menuData[e], r = this.getSelectedText(n.text);
    if (r) {
      const i = Er.get(n.model);
      i ? i == null || i.chat(r, n.prompt, new Lo(this.editor)) : console.error("Ai model config error.");
    } else
      console.error("Can not get selected text.");
  }
  onDropdownItemRender(e) {
    return `<div style="width:18px;height: 18px;">${this.menuData[e].icon}</div><div style="margin-left: 10px">${this.menuData[e].name}</div>`;
  }
  onMenuTextRender(e) {
    return this.menuData[e].icon;
  }
}
class VE extends ge {
  constructor() {
    super(), this.template = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M21 3C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H21ZM20 5H4V19H20V5ZM18 15V17H6V15H18Z"></path></svg>
        </div>
        `, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    var n;
    (n = this.editor) != null && n.isActive("container") ? e.unsetContainer() : e.setContainer("warning"), e.focus();
  }
  onActive(e) {
    return e.isActive("container");
  }
}
class UE extends ge {
  constructor() {
    super();
    P(this, "config");
  }
  onConfig(n) {
    this.config = n, n.html ? this.template = n.html : n.icon && (this.template = `<div style="height: 16px">${n.icon}</div>`), this.addEventListener("click", (r) => {
      this.config && this.config.onClick && this.config.onClick(r, this.editor.aiEditor);
    });
  }
}
const se = (t, e) => {
  window.customElements.get(t) || window.customElements.define(t, e);
};
se("aie-undo", a1);
se("aie-undo", a1);
se("aie-redo", R3);
se("aie-brush", EE);
se("aie-container", VE);
se("aie-custom", UE);
se("aie-eraser", hE);
se("aie-heading", Iv);
se("aie-font-family", Hv);
se("aie-font-size", Pv);
se("aie-bold", $v);
se("aie-italic", zv);
se("aie-underline", Vv);
se("aie-strike", Uv);
se("aie-link", rE);
se("aie-source-code", iE);
se("aie-code", dE);
se("aie-subscript", qv);
se("aie-superscript", Zv);
se("aie-highlight", jv);
se("aie-font-color", Gv);
se("aie-divider", Jv);
se("aie-bullet-list", Yv);
se("aie-ordered-list", Xv);
se("aie-indent-decrease", Qv);
se("aie-indent-increase", eE);
se("aie-align", nE);
se("aie-todo", sE);
se("aie-line-height", aE);
se("aie-break", mE);
se("aie-quote", lE);
se("aie-image", uE);
se("aie-video", cE);
se("aie-code-block", fE);
se("aie-hr", pE);
se("aie-table", gE);
se("aie-attachment", bE);
se("aie-fullscreen", yE);
se("aie-printer", xE);
se("aie-emoji", vE);
se("aie-ai", zE);
const qE = [
  "undo",
  "redo",
  "brush",
  "eraser",
  "divider",
  "heading",
  "font-family",
  "font-size",
  "divider",
  "bold",
  "italic",
  "underline",
  "strike",
  "link",
  "code",
  "subscript",
  "superscript",
  "hr",
  "todo",
  "emoji",
  "divider",
  "highlight",
  "font-color",
  "divider",
  "align",
  "line-height",
  "divider",
  "bullet-list",
  "ordered-list",
  "indent-decrease",
  "indent-increase",
  "break",
  "divider",
  "image",
  "video",
  "attachment",
  "quote",
  "container",
  "code-block",
  "table",
  "divider",
  "source-code",
  "printer",
  "fullscreen",
  "ai"
];
class F1 extends HTMLElement {
  constructor() {
    super();
    // template:string;
    P(this, "menuButtons", []);
  }
  connectedCallback() {
    const n = document.createElement("div");
    for (let r of this.menuButtons)
      n.appendChild(r);
    n.style.display = "flex", n.style.flexWrap = "wrap", this.appendChild(n);
  }
  onCreate(n, r) {
    let i = r.toolbarKeys || qE;
    for (let s of i)
      if (s)
        try {
          if (typeof s == "string") {
            s = s.trim(), s === "|" && (s = "divider");
            const o = document.createElement("aie-" + s);
            if (o.classList.add("aie-menu-item"), o.onCreate(n, r), s !== "divider") {
              const a = re(s);
              a && Ke(o, {
                appendTo: () => n.editor.view.dom.closest(".aie-container"),
                content: a,
                theme: "aietip",
                arrow: !0
                // trigger:"click",
                // interactive:true,
              });
            }
            this.menuButtons.push(o);
          } else {
            const o = s, a = document.createElement("aie-custom");
            if (a.classList.add("aie-menu-item"), o.id && a.setAttribute("id", o.id), o.className && a.classList.add(o.className), a.onCreate(n, r), a.onConfig(o), o.tip) {
              const l = re(o.tip);
              l && Ke(a, {
                appendTo: () => n.editor.view.dom.closest(".aie-container"),
                content: l,
                theme: "aietip",
                arrow: !0
                // trigger:"click",
                // interactive:true,
              });
            }
            o.onCreate && o.onCreate(a, n.editor.aiEditor), this.menuButtons.push(a);
          }
        } catch {
          console.error("Can not create toolbar by key: " + s);
        }
  }
  onTransaction(n) {
    for (let r of this.menuButtons)
      r.onTransaction(n);
  }
}
class H1 extends HTMLElement {
  constructor() {
    super();
    P(this, "count", 0);
    P(this, "draggable", !0);
  }
  initDraggable(n) {
    if (this.draggable = !!n, !this.draggable)
      return;
    let r, i, s = 300, o = 300, a, l, u;
    const c = (f) => {
      f.preventDefault(), document.removeEventListener("mouseup", c), document.removeEventListener("mousemove", d);
    }, d = (f) => {
      const h = f.clientX - r, p = f.clientY - i;
      if (h == 0 && p == 0)
        return;
      let g = a + h, m = l + p;
      g < s && (g = s), m < o && (m = o), u.style.width = `${g}px`, u.style.height = `${m}px`;
    };
    this.addEventListener("mousedown", (f) => {
      var p;
      f.target.closest("svg") && (f.preventDefault(), document.addEventListener("mouseup", c), document.addEventListener("mousemove", d), u = (p = f.target.closest(".aie-container")) == null ? void 0 : p.parentElement, a = u.clientWidth, l = u.clientHeight, r = f.clientX, i = f.clientY);
    }), this.addEventListener("mouseup", c);
  }
  updateCharacters() {
    this.draggable ? this.innerHTML = `<div style="display: flex"> 
                                <span> Powered by AiEditor, Characters: ${this.count} </span>
                                <div style="width: 20px;height: 20px;overflow: hidden">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 16L6 10H18L12 16Z"></path></svg>
                                </div>
                            </div>
                            ` : this.innerHTML = `<div style="display: flex;"> 
                                <span style="margin-right: 10px"> Powered by AiEditor, Characters: ${this.count} </span>
                            </div>
                            `;
  }
  onCreate(n, r) {
    this.count = n.editor.storage.characterCount.characters(), this.updateCharacters();
  }
  onTransaction(n) {
    const r = n.editor.storage.characterCount.characters();
    r != this.count && (this.count = r, this.updateCharacters());
  }
}
const ZE = /^\s*>\s$/, KE = ue.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: !0,
  parseHTML() {
    return [
      { tag: "blockquote" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["blockquote", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: t }) => t.wrapIn(this.name),
      toggleBlockquote: () => ({ commands: t }) => t.toggleWrap(this.name),
      unsetBlockquote: () => ({ commands: t }) => t.lift(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      kr({
        find: ZE,
        type: this.type
      })
    ];
  }
}), WE = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))$/, jE = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))/g, GE = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))$/, JE = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))/g, YE = Ie.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (t) => t.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight",
        getAttrs: (t) => /^(bold(er)?|[5-9]\d{2,})$/.test(t) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["strong", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: t }) => t.setMark(this.name),
      toggleBold: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetBold: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      xr({
        find: WE,
        type: this.type
      }),
      xr({
        find: GE,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Zn({
        find: jE,
        type: this.type
      }),
      Zn({
        find: JE,
        type: this.type
      })
    ];
  }
}), XE = ue.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["li", le(this.options.HTMLAttributes, t), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), Ff = Ie.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (t) => t.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["span", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: t, commands: e }) => {
        const n = xs(t, this.type);
        return Object.entries(n).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), Hf = /^\s*([-+*])\s$/, QE = ue.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      { tag: "ul" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["ul", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: t, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(XE.name, this.editor.getAttributes(Ff.name)).run() : t.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let t = kr({
      find: Hf,
      type: this.type
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (t = kr({
      find: Hf,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: () => this.editor.getAttributes(Ff.name),
      editor: this.editor
    })), [
      t
    ];
  }
}), eC = /(?:^|\s)(`(?!\s+`)((?:[^`]+))`(?!\s+`))$/, tC = /(?:^|\s)(`(?!\s+`)((?:[^`]+))`(?!\s+`))/g, nC = Ie.create({
  name: "code",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  excludes: "_",
  code: !0,
  exitable: !0,
  parseHTML() {
    return [
      { tag: "code" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["code", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setCode: () => ({ commands: t }) => t.setMark(this.name),
      toggleCode: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetCode: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-e": () => this.editor.commands.toggleCode()
    };
  },
  addInputRules() {
    return [
      xr({
        find: eC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Zn({
        find: tC,
        type: this.type
      })
    ];
  }
}), rC = /^```([a-z]+)?[\s\n]$/, iC = /^~~~([a-z]+)?[\s\n]$/, B1 = ue.create({
  name: "codeBlock",
  addOptions() {
    return {
      languageClassPrefix: "language-",
      exitOnTripleEnter: !0,
      exitOnArrowDown: !0,
      HTMLAttributes: {}
    };
  },
  content: "text*",
  marks: "",
  group: "block",
  code: !0,
  defining: !0,
  addAttributes() {
    return {
      language: {
        default: null,
        parseHTML: (t) => {
          var e;
          const { languageClassPrefix: n } = this.options, s = [...((e = t.firstElementChild) === null || e === void 0 ? void 0 : e.classList) || []].filter((o) => o.startsWith(n)).map((o) => o.replace(n, ""))[0];
          return s || null;
        },
        rendered: !1
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "pre",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ node: t, HTMLAttributes: e }) {
    return [
      "pre",
      le(this.options.HTMLAttributes, e),
      [
        "code",
        {
          class: t.attrs.language ? this.options.languageClassPrefix + t.attrs.language : null
        },
        0
      ]
    ];
  },
  addCommands() {
    return {
      setCodeBlock: (t) => ({ commands: e }) => e.setNode(this.name, t),
      toggleCodeBlock: (t) => ({ commands: e }) => e.toggleNode(this.name, "paragraph", t)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-c": () => this.editor.commands.toggleCodeBlock(),
      // remove code block when at start of document or code block is empty
      Backspace: () => {
        const { empty: t, $anchor: e } = this.editor.state.selection, n = e.pos === 1;
        return !t || e.parent.type.name !== this.name ? !1 : n || !e.parent.textContent.length ? this.editor.commands.clearNodes() : !1;
      },
      // exit node on triple enter
      Enter: ({ editor: t }) => {
        if (!this.options.exitOnTripleEnter)
          return !1;
        const { state: e } = t, { selection: n } = e, { $from: r, empty: i } = n;
        if (!i || r.parent.type !== this.type)
          return !1;
        const s = r.parentOffset === r.parent.nodeSize - 2, o = r.parent.textContent.endsWith(`

`);
        return !s || !o ? !1 : t.chain().command(({ tr: a }) => (a.delete(r.pos - 2, r.pos), !0)).exitCode().run();
      },
      // exit node on arrow down
      ArrowDown: ({ editor: t }) => {
        if (!this.options.exitOnArrowDown)
          return !1;
        const { state: e } = t, { selection: n, doc: r } = e, { $from: i, empty: s } = n;
        if (!s || i.parent.type !== this.type || !(i.parentOffset === i.parent.nodeSize - 2))
          return !1;
        const a = i.after();
        return a === void 0 || r.nodeAt(a) ? !1 : t.commands.exitCode();
      }
    };
  },
  addInputRules() {
    return [
      gu({
        find: rC,
        type: this.type,
        getAttributes: (t) => ({
          language: t[1]
        })
      }),
      gu({
        find: iC,
        type: this.type,
        getAttributes: (t) => ({
          language: t[1]
        })
      })
    ];
  },
  addProseMirrorPlugins() {
    return [
      // this plugin creates a code block for pasted content from VS Code
      // we can also detect the copied code language
      new we({
        key: new Te("codeBlockVSCodeHandler"),
        props: {
          handlePaste: (t, e) => {
            if (!e.clipboardData || this.editor.isActive(this.type.name))
              return !1;
            const n = e.clipboardData.getData("text/plain"), r = e.clipboardData.getData("vscode-editor-data"), i = r ? JSON.parse(r) : void 0, s = i == null ? void 0 : i.mode;
            if (!n || !s)
              return !1;
            const { tr: o } = t.state;
            return t.state.selection.from === t.state.doc.nodeSize - (1 + t.state.selection.$to.depth * 2) ? o.insert(t.state.selection.from - 1, this.type.create({ language: s })) : o.replaceSelectionWith(this.type.create({ language: s })), o.setSelection(X.near(o.doc.resolve(Math.max(0, o.selection.from - 2)))), o.insertText(n.replace(/\r\n?/g, `
`)), o.setMeta("paste", !0), t.dispatch(o), !0;
          }
        }
      })
    ];
  }
}), sC = ue.create({
  name: "doc",
  topNode: !0,
  content: "block+"
});
function oC(t = {}) {
  return new we({
    view(e) {
      return new aC(e, t);
    }
  });
}
class aC {
  constructor(e, n) {
    var r;
    this.editorView = e, this.cursorPos = null, this.element = null, this.timeout = -1, this.width = (r = n.width) !== null && r !== void 0 ? r : 1, this.color = n.color === !1 ? void 0 : n.color || "black", this.class = n.class, this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((i) => {
      let s = (o) => {
        this[i](o);
      };
      return e.dom.addEventListener(i, s), { name: i, handler: s };
    });
  }
  destroy() {
    this.handlers.forEach(({ name: e, handler: n }) => this.editorView.dom.removeEventListener(e, n));
  }
  update(e, n) {
    this.cursorPos != null && n.doc != e.state.doc && (this.cursorPos > e.state.doc.content.size ? this.setCursor(null) : this.updateOverlay());
  }
  setCursor(e) {
    e != this.cursorPos && (this.cursorPos = e, e == null ? (this.element.parentNode.removeChild(this.element), this.element = null) : this.updateOverlay());
  }
  updateOverlay() {
    let e = this.editorView.state.doc.resolve(this.cursorPos), n = !e.parent.inlineContent, r;
    if (n) {
      let a = e.nodeBefore, l = e.nodeAfter;
      if (a || l) {
        let u = this.editorView.nodeDOM(this.cursorPos - (a ? a.nodeSize : 0));
        if (u) {
          let c = u.getBoundingClientRect(), d = a ? c.bottom : c.top;
          a && l && (d = (d + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2), r = { left: c.left, right: c.right, top: d - this.width / 2, bottom: d + this.width / 2 };
        }
      }
    }
    if (!r) {
      let a = this.editorView.coordsAtPos(this.cursorPos);
      r = { left: a.left - this.width / 2, right: a.left + this.width / 2, top: a.top, bottom: a.bottom };
    }
    let i = this.editorView.dom.offsetParent;
    this.element || (this.element = i.appendChild(document.createElement("div")), this.class && (this.element.className = this.class), this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;", this.color && (this.element.style.backgroundColor = this.color)), this.element.classList.toggle("prosemirror-dropcursor-block", n), this.element.classList.toggle("prosemirror-dropcursor-inline", !n);
    let s, o;
    if (!i || i == document.body && getComputedStyle(i).position == "static")
      s = -pageXOffset, o = -pageYOffset;
    else {
      let a = i.getBoundingClientRect();
      s = a.left - i.scrollLeft, o = a.top - i.scrollTop;
    }
    this.element.style.left = r.left - s + "px", this.element.style.top = r.top - o + "px", this.element.style.width = r.right - r.left + "px", this.element.style.height = r.bottom - r.top + "px";
  }
  scheduleRemoval(e) {
    clearTimeout(this.timeout), this.timeout = setTimeout(() => this.setCursor(null), e);
  }
  dragover(e) {
    if (!this.editorView.editable)
      return;
    let n = this.editorView.posAtCoords({ left: e.clientX, top: e.clientY }), r = n && n.inside >= 0 && this.editorView.state.doc.nodeAt(n.inside), i = r && r.type.spec.disableDropCursor, s = typeof i == "function" ? i(this.editorView, n, e) : i;
    if (n && !s) {
      let o = n.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let a = Xp(this.editorView.state.doc, o, this.editorView.dragging.slice);
        a != null && (o = a);
      }
      this.setCursor(o), this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(e) {
    (e.target == this.editorView.dom || !this.editorView.dom.contains(e.relatedTarget)) && this.setCursor(null);
  }
}
const lC = xe.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      oC(this.options)
    ];
  }
});
class Re extends ne {
  /**
  Create a gap cursor.
  */
  constructor(e) {
    super(e, e);
  }
  map(e, n) {
    let r = e.resolve(n.map(this.head));
    return Re.valid(r) ? new Re(r) : ne.near(r);
  }
  content() {
    return B.empty;
  }
  eq(e) {
    return e instanceof Re && e.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, n) {
    if (typeof n.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new Re(e.resolve(n.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new yc(this.anchor);
  }
  /**
  @internal
  */
  static valid(e) {
    let n = e.parent;
    if (n.isTextblock || !uC(e) || !cC(e))
      return !1;
    let r = n.type.spec.allowGapCursor;
    if (r != null)
      return r;
    let i = n.contentMatchAt(e.index()).defaultType;
    return i && i.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom(e, n, r = !1) {
    e:
      for (; ; ) {
        if (!r && Re.valid(e))
          return e;
        let i = e.pos, s = null;
        for (let o = e.depth; ; o--) {
          let a = e.node(o);
          if (n > 0 ? e.indexAfter(o) < a.childCount : e.index(o) > 0) {
            s = a.child(n > 0 ? e.indexAfter(o) : e.index(o) - 1);
            break;
          } else if (o == 0)
            return null;
          i += n;
          let l = e.doc.resolve(i);
          if (Re.valid(l))
            return l;
        }
        for (; ; ) {
          let o = n > 0 ? s.firstChild : s.lastChild;
          if (!o) {
            if (s.isAtom && !s.isText && !ee.isSelectable(s)) {
              e = e.doc.resolve(i + s.nodeSize * n), r = !1;
              continue e;
            }
            break;
          }
          s = o, i += n;
          let a = e.doc.resolve(i);
          if (Re.valid(a))
            return a;
        }
        return null;
      }
  }
}
Re.prototype.visible = !1;
Re.findFrom = Re.findGapCursorFrom;
ne.jsonID("gapcursor", Re);
class yc {
  constructor(e) {
    this.pos = e;
  }
  map(e) {
    return new yc(e.map(this.pos));
  }
  resolve(e) {
    let n = e.resolve(this.pos);
    return Re.valid(n) ? new Re(n) : ne.near(n);
  }
}
function uC(t) {
  for (let e = t.depth; e >= 0; e--) {
    let n = t.index(e), r = t.node(e);
    if (n == 0) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let i = r.child(n - 1); ; i = i.lastChild) {
      if (i.childCount == 0 && !i.inlineContent || i.isAtom || i.type.spec.isolating)
        return !0;
      if (i.inlineContent)
        return !1;
    }
  }
  return !0;
}
function cC(t) {
  for (let e = t.depth; e >= 0; e--) {
    let n = t.indexAfter(e), r = t.node(e);
    if (n == r.childCount) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let i = r.child(n); ; i = i.firstChild) {
      if (i.childCount == 0 && !i.inlineContent || i.isAtom || i.type.spec.isolating)
        return !0;
      if (i.inlineContent)
        return !1;
    }
  }
  return !0;
}
function dC() {
  return new we({
    props: {
      decorations: gC,
      createSelectionBetween(t, e, n) {
        return e.pos == n.pos && Re.valid(n) ? new Re(n) : null;
      },
      handleClick: hC,
      handleKeyDown: fC,
      handleDOMEvents: { beforeinput: pC }
    }
  });
}
const fC = Xu({
  ArrowLeft: Ps("horiz", -1),
  ArrowRight: Ps("horiz", 1),
  ArrowUp: Ps("vert", -1),
  ArrowDown: Ps("vert", 1)
});
function Ps(t, e) {
  const n = t == "vert" ? e > 0 ? "down" : "up" : e > 0 ? "right" : "left";
  return function(r, i, s) {
    let o = r.selection, a = e > 0 ? o.$to : o.$from, l = o.empty;
    if (o instanceof X) {
      if (!s.endOfTextblock(n) || a.depth == 0)
        return !1;
      l = !1, a = r.doc.resolve(e > 0 ? a.after() : a.before());
    }
    let u = Re.findGapCursorFrom(a, e, l);
    return u ? (i && i(r.tr.setSelection(new Re(u))), !0) : !1;
  };
}
function hC(t, e, n) {
  if (!t || !t.editable)
    return !1;
  let r = t.state.doc.resolve(e);
  if (!Re.valid(r))
    return !1;
  let i = t.posAtCoords({ left: n.clientX, top: n.clientY });
  return i && i.inside > -1 && ee.isSelectable(t.state.doc.nodeAt(i.inside)) ? !1 : (t.dispatch(t.state.tr.setSelection(new Re(r))), !0);
}
function pC(t, e) {
  if (e.inputType != "insertCompositionText" || !(t.state.selection instanceof Re))
    return !1;
  let { $from: n } = t.state.selection, r = n.parent.contentMatchAt(n.index()).findWrapping(t.state.schema.nodes.text);
  if (!r)
    return !1;
  let i = O.empty;
  for (let o = r.length - 1; o >= 0; o--)
    i = O.from(r[o].createAndFill(null, i));
  let s = t.state.tr.replace(n.pos, n.pos, new B(i, 0, 0));
  return s.setSelection(X.near(s.doc.resolve(n.pos + 1))), t.dispatch(s), !1;
}
function gC(t) {
  if (!(t.selection instanceof Re))
    return null;
  let e = document.createElement("div");
  return e.className = "ProseMirror-gapcursor", ve.create(t.doc, [Be.widget(t.selection.head, e, { key: "gapcursor" })]);
}
const mC = xe.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [
      dC()
    ];
  },
  extendNodeSchema(t) {
    var e;
    const n = {
      name: t.name,
      options: t.options,
      storage: t.storage
    };
    return {
      allowGapCursor: (e = oe(Z(t, "allowGapCursor", n))) !== null && e !== void 0 ? e : null
    };
  }
}), bC = ue.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: !0,
      HTMLAttributes: {}
    };
  },
  inline: !0,
  group: "inline",
  selectable: !1,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["br", le(this.options.HTMLAttributes, t)];
  },
  renderText() {
    return `
`;
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: t, chain: e, state: n, editor: r }) => t.first([
        () => t.exitCode(),
        () => t.command(() => {
          const { selection: i, storedMarks: s } = n;
          if (i.$from.parent.type.spec.isolating)
            return !1;
          const { keepMarks: o } = this.options, { splittableMarks: a } = r.extensionManager, l = s || i.$to.parentOffset && i.$from.marks();
          return e().insertContent({ type: this.name }).command(({ tr: u, dispatch: c }) => {
            if (c && l && o) {
              const d = l.filter((f) => a.includes(f.type.name));
              u.ensureMarks(d);
            }
            return !0;
          }).run();
        })
      ])
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
}), P1 = ue.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: !0,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: !1
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((t) => ({
      tag: `h${t}`,
      attrs: { level: t }
    }));
  },
  renderHTML({ node: t, HTMLAttributes: e }) {
    return [`h${this.options.levels.includes(t.attrs.level) ? t.attrs.level : this.options.levels[0]}`, le(this.options.HTMLAttributes, e), 0];
  },
  addCommands() {
    return {
      setHeading: (t) => ({ commands: e }) => this.options.levels.includes(t.level) ? e.setNode(this.name, t) : !1,
      toggleHeading: (t) => ({ commands: e }) => this.options.levels.includes(t.level) ? e.toggleNode(this.name, "paragraph", t) : !1
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce((t, e) => ({
      ...t,
      [`Mod-Alt-${e}`]: () => this.editor.commands.toggleHeading({ level: e })
    }), {});
  },
  addInputRules() {
    return this.options.levels.map((t) => gu({
      find: new RegExp(`^(#{1,${t}})\\s$`),
      type: this.type,
      getAttributes: {
        level: t
      }
    }));
  }
});
var Ro = 200, qe = function() {
};
qe.prototype.append = function(e) {
  return e.length ? (e = qe.from(e), !this.length && e || e.length < Ro && this.leafAppend(e) || this.length < Ro && e.leafPrepend(this) || this.appendInner(e)) : this;
};
qe.prototype.prepend = function(e) {
  return e.length ? qe.from(e).append(this) : this;
};
qe.prototype.appendInner = function(e) {
  return new yC(this, e);
};
qe.prototype.slice = function(e, n) {
  return e === void 0 && (e = 0), n === void 0 && (n = this.length), e >= n ? qe.empty : this.sliceInner(Math.max(0, e), Math.min(this.length, n));
};
qe.prototype.get = function(e) {
  if (!(e < 0 || e >= this.length))
    return this.getInner(e);
};
qe.prototype.forEach = function(e, n, r) {
  n === void 0 && (n = 0), r === void 0 && (r = this.length), n <= r ? this.forEachInner(e, n, r, 0) : this.forEachInvertedInner(e, n, r, 0);
};
qe.prototype.map = function(e, n, r) {
  n === void 0 && (n = 0), r === void 0 && (r = this.length);
  var i = [];
  return this.forEach(function(s, o) {
    return i.push(e(s, o));
  }, n, r), i;
};
qe.from = function(e) {
  return e instanceof qe ? e : e && e.length ? new $1(e) : qe.empty;
};
var $1 = /* @__PURE__ */ function(t) {
  function e(r) {
    t.call(this), this.values = r;
  }
  t && (e.__proto__ = t), e.prototype = Object.create(t && t.prototype), e.prototype.constructor = e;
  var n = { length: { configurable: !0 }, depth: { configurable: !0 } };
  return e.prototype.flatten = function() {
    return this.values;
  }, e.prototype.sliceInner = function(i, s) {
    return i == 0 && s == this.length ? this : new e(this.values.slice(i, s));
  }, e.prototype.getInner = function(i) {
    return this.values[i];
  }, e.prototype.forEachInner = function(i, s, o, a) {
    for (var l = s; l < o; l++)
      if (i(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.forEachInvertedInner = function(i, s, o, a) {
    for (var l = s - 1; l >= o; l--)
      if (i(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.leafAppend = function(i) {
    if (this.length + i.length <= Ro)
      return new e(this.values.concat(i.flatten()));
  }, e.prototype.leafPrepend = function(i) {
    if (this.length + i.length <= Ro)
      return new e(i.flatten().concat(this.values));
  }, n.length.get = function() {
    return this.values.length;
  }, n.depth.get = function() {
    return 0;
  }, Object.defineProperties(e.prototype, n), e;
}(qe);
qe.empty = new $1([]);
var yC = /* @__PURE__ */ function(t) {
  function e(n, r) {
    t.call(this), this.left = n, this.right = r, this.length = n.length + r.length, this.depth = Math.max(n.depth, r.depth) + 1;
  }
  return t && (e.__proto__ = t), e.prototype = Object.create(t && t.prototype), e.prototype.constructor = e, e.prototype.flatten = function() {
    return this.left.flatten().concat(this.right.flatten());
  }, e.prototype.getInner = function(r) {
    return r < this.left.length ? this.left.get(r) : this.right.get(r - this.left.length);
  }, e.prototype.forEachInner = function(r, i, s, o) {
    var a = this.left.length;
    if (i < a && this.left.forEachInner(r, i, Math.min(s, a), o) === !1 || s > a && this.right.forEachInner(r, Math.max(i - a, 0), Math.min(this.length, s) - a, o + a) === !1)
      return !1;
  }, e.prototype.forEachInvertedInner = function(r, i, s, o) {
    var a = this.left.length;
    if (i > a && this.right.forEachInvertedInner(r, i - a, Math.max(s, a) - a, o + a) === !1 || s < a && this.left.forEachInvertedInner(r, Math.min(i, a), s, o) === !1)
      return !1;
  }, e.prototype.sliceInner = function(r, i) {
    if (r == 0 && i == this.length)
      return this;
    var s = this.left.length;
    return i <= s ? this.left.slice(r, i) : r >= s ? this.right.slice(r - s, i - s) : this.left.slice(r, s).append(this.right.slice(0, i - s));
  }, e.prototype.leafAppend = function(r) {
    var i = this.right.leafAppend(r);
    if (i)
      return new e(this.left, i);
  }, e.prototype.leafPrepend = function(r) {
    var i = this.left.leafPrepend(r);
    if (i)
      return new e(i, this.right);
  }, e.prototype.appendInner = function(r) {
    return this.left.depth >= Math.max(this.right.depth, r.depth) + 1 ? new e(this.left, new e(this.right, r)) : new e(this, r);
  }, e;
}(qe);
const xC = 500;
class $t {
  constructor(e, n) {
    this.items = e, this.eventCount = n;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(e, n) {
    if (this.eventCount == 0)
      return null;
    let r = this.items.length;
    for (; ; r--)
      if (this.items.get(r - 1).selection) {
        --r;
        break;
      }
    let i, s;
    n && (i = this.remapping(r, this.items.length), s = i.maps.length);
    let o = e.tr, a, l, u = [], c = [];
    return this.items.forEach((d, f) => {
      if (!d.step) {
        i || (i = this.remapping(r, f + 1), s = i.maps.length), s--, c.push(d);
        return;
      }
      if (i) {
        c.push(new Zt(d.map));
        let h = d.step.map(i.slice(s)), p;
        h && o.maybeStep(h).doc && (p = o.mapping.maps[o.mapping.maps.length - 1], u.push(new Zt(p, void 0, void 0, u.length + c.length))), s--, p && i.appendMap(p, s);
      } else
        o.maybeStep(d.step);
      if (d.selection)
        return a = i ? d.selection.map(i.slice(s)) : d.selection, l = new $t(this.items.slice(0, r).append(c.reverse().concat(u)), this.eventCount - 1), !1;
    }, this.items.length, 0), { remaining: l, transform: o, selection: a };
  }
  // Create a new branch with the given transform added.
  addTransform(e, n, r, i) {
    let s = [], o = this.eventCount, a = this.items, l = !i && a.length ? a.get(a.length - 1) : null;
    for (let c = 0; c < e.steps.length; c++) {
      let d = e.steps[c].invert(e.docs[c]), f = new Zt(e.mapping.maps[c], d, n), h;
      (h = l && l.merge(f)) && (f = h, c ? s.pop() : a = a.slice(0, a.length - 1)), s.push(f), n && (o++, n = void 0), i || (l = f);
    }
    let u = o - r.depth;
    return u > vC && (a = kC(a, u), o -= u), new $t(a.append(s), o);
  }
  remapping(e, n) {
    let r = new Gr();
    return this.items.forEach((i, s) => {
      let o = i.mirrorOffset != null && s - i.mirrorOffset >= e ? r.maps.length - i.mirrorOffset : void 0;
      r.appendMap(i.map, o);
    }, e, n), r;
  }
  addMaps(e) {
    return this.eventCount == 0 ? this : new $t(this.items.append(e.map((n) => new Zt(n))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(e, n) {
    if (!this.eventCount)
      return this;
    let r = [], i = Math.max(0, this.items.length - n), s = e.mapping, o = e.steps.length, a = this.eventCount;
    this.items.forEach((f) => {
      f.selection && a--;
    }, i);
    let l = n;
    this.items.forEach((f) => {
      let h = s.getMirror(--l);
      if (h == null)
        return;
      o = Math.min(o, h);
      let p = s.maps[h];
      if (f.step) {
        let g = e.steps[h].invert(e.docs[h]), m = f.selection && f.selection.map(s.slice(l + 1, h));
        m && a++, r.push(new Zt(p, g, m));
      } else
        r.push(new Zt(p));
    }, i);
    let u = [];
    for (let f = n; f < o; f++)
      u.push(new Zt(s.maps[f]));
    let c = this.items.slice(0, i).append(u).append(r), d = new $t(c, a);
    return d.emptyItemCount() > xC && (d = d.compress(this.items.length - r.length)), d;
  }
  emptyItemCount() {
    let e = 0;
    return this.items.forEach((n) => {
      n.step || e++;
    }), e;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(e = this.items.length) {
    let n = this.remapping(0, e), r = n.maps.length, i = [], s = 0;
    return this.items.forEach((o, a) => {
      if (a >= e)
        i.push(o), o.selection && s++;
      else if (o.step) {
        let l = o.step.map(n.slice(r)), u = l && l.getMap();
        if (r--, u && n.appendMap(u, r), l) {
          let c = o.selection && o.selection.map(n.slice(r));
          c && s++;
          let d = new Zt(u.invert(), l, c), f, h = i.length - 1;
          (f = i.length && i[h].merge(d)) ? i[h] = f : i.push(d);
        }
      } else
        o.map && r--;
    }, this.items.length, 0), new $t(qe.from(i.reverse()), s);
  }
}
$t.empty = new $t(qe.empty, 0);
function kC(t, e) {
  let n;
  return t.forEach((r, i) => {
    if (r.selection && e-- == 0)
      return n = i, !1;
  }), t.slice(n);
}
class Zt {
  constructor(e, n, r, i) {
    this.map = e, this.step = n, this.selection = r, this.mirrorOffset = i;
  }
  merge(e) {
    if (this.step && e.step && !e.selection) {
      let n = e.step.merge(this.step);
      if (n)
        return new Zt(n.getMap().invert(), n, this.selection);
    }
  }
}
class Sn {
  constructor(e, n, r, i, s) {
    this.done = e, this.undone = n, this.prevRanges = r, this.prevTime = i, this.prevComposition = s;
  }
}
const vC = 20;
function EC(t, e, n, r) {
  let i = n.getMeta(Un), s;
  if (i)
    return i.historyState;
  n.getMeta(_C) && (t = new Sn(t.done, t.undone, null, 0, -1));
  let o = n.getMeta("appendedTransaction");
  if (n.steps.length == 0)
    return t;
  if (o && o.getMeta(Un))
    return o.getMeta(Un).redo ? new Sn(t.done.addTransform(n, void 0, r, ao(e)), t.undone, Bf(n.mapping.maps[n.steps.length - 1]), t.prevTime, t.prevComposition) : new Sn(t.done, t.undone.addTransform(n, void 0, r, ao(e)), null, t.prevTime, t.prevComposition);
  if (n.getMeta("addToHistory") !== !1 && !(o && o.getMeta("addToHistory") === !1)) {
    let a = n.getMeta("composition"), l = t.prevTime == 0 || !o && t.prevComposition != a && (t.prevTime < (n.time || 0) - r.newGroupDelay || !CC(n, t.prevRanges)), u = o ? El(t.prevRanges, n.mapping) : Bf(n.mapping.maps[n.steps.length - 1]);
    return new Sn(t.done.addTransform(n, l ? e.selection.getBookmark() : void 0, r, ao(e)), $t.empty, u, n.time, a ?? t.prevComposition);
  } else
    return (s = n.getMeta("rebased")) ? new Sn(t.done.rebased(n, s), t.undone.rebased(n, s), El(t.prevRanges, n.mapping), t.prevTime, t.prevComposition) : new Sn(t.done.addMaps(n.mapping.maps), t.undone.addMaps(n.mapping.maps), El(t.prevRanges, n.mapping), t.prevTime, t.prevComposition);
}
function CC(t, e) {
  if (!e)
    return !1;
  if (!t.docChanged)
    return !0;
  let n = !1;
  return t.mapping.maps[0].forEach((r, i) => {
    for (let s = 0; s < e.length; s += 2)
      r <= e[s + 1] && i >= e[s] && (n = !0);
  }), n;
}
function Bf(t) {
  let e = [];
  return t.forEach((n, r, i, s) => e.push(i, s)), e;
}
function El(t, e) {
  if (!t)
    return null;
  let n = [];
  for (let r = 0; r < t.length; r += 2) {
    let i = e.map(t[r], 1), s = e.map(t[r + 1], -1);
    i <= s && n.push(i, s);
  }
  return n;
}
function z1(t, e, n, r) {
  let i = ao(e), s = Un.get(e).spec.config, o = (r ? t.undone : t.done).popEvent(e, i);
  if (!o)
    return;
  let a = o.selection.resolve(o.transform.doc), l = (r ? t.done : t.undone).addTransform(o.transform, e.selection.getBookmark(), s, i), u = new Sn(r ? l : o.remaining, r ? o.remaining : l, null, 0, -1);
  n(o.transform.setSelection(a).setMeta(Un, { redo: r, historyState: u }).scrollIntoView());
}
let Cl = !1, Pf = null;
function ao(t) {
  let e = t.plugins;
  if (Pf != e) {
    Cl = !1, Pf = e;
    for (let n = 0; n < e.length; n++)
      if (e[n].spec.historyPreserveItems) {
        Cl = !0;
        break;
      }
  }
  return Cl;
}
const Un = new Te("history"), _C = new Te("closeHistory");
function wC(t = {}) {
  return t = {
    depth: t.depth || 100,
    newGroupDelay: t.newGroupDelay || 500
  }, new we({
    key: Un,
    state: {
      init() {
        return new Sn($t.empty, $t.empty, null, 0, -1);
      },
      apply(e, n, r) {
        return EC(n, r, e, t);
      }
    },
    config: t,
    props: {
      handleDOMEvents: {
        beforeinput(e, n) {
          let r = n.inputType, i = r == "historyUndo" ? V1 : r == "historyRedo" ? U1 : null;
          return i ? (n.preventDefault(), i(e.state, e.dispatch)) : !1;
        }
      }
    }
  });
}
const V1 = (t, e) => {
  let n = Un.getState(t);
  return !n || n.done.eventCount == 0 ? !1 : (e && z1(n, t, e, !1), !0);
}, U1 = (t, e) => {
  let n = Un.getState(t);
  return !n || n.undone.eventCount == 0 ? !1 : (e && z1(n, t, e, !0), !0);
}, SC = xe.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state: t, dispatch: e }) => V1(t, e),
      redo: () => ({ state: t, dispatch: e }) => U1(t, e)
    };
  },
  addProseMirrorPlugins() {
    return [
      wC(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Mod-y": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
}), AC = ue.create({
  name: "horizontalRule",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  parseHTML() {
    return [{ tag: "hr" }];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["hr", le(this.options.HTMLAttributes, t)];
  },
  addCommands() {
    return {
      setHorizontalRule: () => ({ chain: t, state: e }) => {
        const { $to: n } = e.selection, r = t();
        return n.parentOffset === 0 ? r.insertContentAt(Math.max(n.pos - 2, 0), { type: this.name }) : r.insertContent({ type: this.name }), r.command(({ tr: i, dispatch: s }) => {
          var o;
          if (s) {
            const { $to: a } = i.selection, l = a.end();
            if (a.nodeAfter)
              a.nodeAfter.isTextblock ? i.setSelection(X.create(i.doc, a.pos + 1)) : a.nodeAfter.isBlock ? i.setSelection(ee.create(i.doc, a.pos)) : i.setSelection(X.create(i.doc, a.pos));
            else {
              const u = (o = a.parent.type.contentMatch.defaultType) === null || o === void 0 ? void 0 : o.create();
              u && (i.insert(l, u), i.setSelection(X.create(i.doc, l + 1)));
            }
            i.scrollIntoView();
          }
          return !0;
        }).run();
      }
    };
  },
  addInputRules() {
    return [
      ac({
        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
        type: this.type
      })
    ];
  }
}), MC = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))$/, TC = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))/g, DC = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))$/, OC = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))/g, NC = Ie.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (t) => t.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["em", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: t }) => t.setMark(this.name),
      toggleItalic: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetItalic: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      xr({
        find: MC,
        type: this.type
      }),
      xr({
        find: DC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Zn({
        find: TC,
        type: this.type
      }),
      Zn({
        find: OC,
        type: this.type
      })
    ];
  }
}), LC = ue.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["li", le(this.options.HTMLAttributes, t), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), RC = ue.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["li", le(this.options.HTMLAttributes, t), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), $f = Ie.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (t) => t.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["span", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: t, commands: e }) => {
        const n = xs(t, this.type);
        return Object.entries(n).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), zf = /^(\d+)\.\s$/, IC = ue.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (t) => t.hasAttribute("start") ? parseInt(t.getAttribute("start") || "", 10) : 1
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    const { start: e, ...n } = t;
    return e === 1 ? ["ol", le(this.options.HTMLAttributes, n), 0] : ["ol", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: t, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(RC.name, this.editor.getAttributes($f.name)).run() : t.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let t = kr({
      find: zf,
      type: this.type,
      getAttributes: (e) => ({ start: +e[1] }),
      joinPredicate: (e, n) => n.childCount + n.attrs.start === +e[1]
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (t = kr({
      find: zf,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: (e) => ({ start: +e[1], ...this.editor.getAttributes($f.name) }),
      joinPredicate: (e, n) => n.childCount + n.attrs.start === +e[1],
      editor: this.editor
    })), [
      t
    ];
  }
}), FC = ue.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      { tag: "p" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["p", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: t }) => t.setNode(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
}), HC = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))$/, BC = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))/g, PC = Ie.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (t) => t.includes("line-through") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["s", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: t }) => t.setMark(this.name),
      toggleStrike: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetStrike: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-s": () => this.editor.commands.toggleStrike()
    };
  },
  addInputRules() {
    return [
      xr({
        find: HC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Zn({
        find: BC,
        type: this.type
      })
    ];
  }
}), $C = ue.create({
  name: "text",
  group: "inline"
}), zC = xe.create({
  name: "starterKit",
  addExtensions() {
    var t, e, n, r, i, s, o, a, l, u, c, d, f, h, p, g, m, y;
    const x = [];
    return this.options.blockquote !== !1 && x.push(KE.configure((t = this.options) === null || t === void 0 ? void 0 : t.blockquote)), this.options.bold !== !1 && x.push(YE.configure((e = this.options) === null || e === void 0 ? void 0 : e.bold)), this.options.bulletList !== !1 && x.push(QE.configure((n = this.options) === null || n === void 0 ? void 0 : n.bulletList)), this.options.code !== !1 && x.push(nC.configure((r = this.options) === null || r === void 0 ? void 0 : r.code)), this.options.codeBlock !== !1 && x.push(B1.configure((i = this.options) === null || i === void 0 ? void 0 : i.codeBlock)), this.options.document !== !1 && x.push(sC.configure((s = this.options) === null || s === void 0 ? void 0 : s.document)), this.options.dropcursor !== !1 && x.push(lC.configure((o = this.options) === null || o === void 0 ? void 0 : o.dropcursor)), this.options.gapcursor !== !1 && x.push(mC.configure((a = this.options) === null || a === void 0 ? void 0 : a.gapcursor)), this.options.hardBreak !== !1 && x.push(bC.configure((l = this.options) === null || l === void 0 ? void 0 : l.hardBreak)), this.options.heading !== !1 && x.push(P1.configure((u = this.options) === null || u === void 0 ? void 0 : u.heading)), this.options.history !== !1 && x.push(SC.configure((c = this.options) === null || c === void 0 ? void 0 : c.history)), this.options.horizontalRule !== !1 && x.push(AC.configure((d = this.options) === null || d === void 0 ? void 0 : d.horizontalRule)), this.options.italic !== !1 && x.push(NC.configure((f = this.options) === null || f === void 0 ? void 0 : f.italic)), this.options.listItem !== !1 && x.push(LC.configure((h = this.options) === null || h === void 0 ? void 0 : h.listItem)), this.options.orderedList !== !1 && x.push(IC.configure((p = this.options) === null || p === void 0 ? void 0 : p.orderedList)), this.options.paragraph !== !1 && x.push(FC.configure((g = this.options) === null || g === void 0 ? void 0 : g.paragraph)), this.options.strike !== !1 && x.push(PC.configure((m = this.options) === null || m === void 0 ? void 0 : m.strike)), this.options.text !== !1 && x.push($C.configure((y = this.options) === null || y === void 0 ? void 0 : y.text)), x;
  }
}), VC = Ie.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (t) => t.includes("underline") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["u", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: t }) => t.setMark(this.name),
      toggleUnderline: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetUnderline: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
}), UC = Ie.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (t) => t.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["span", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: t, commands: e }) => {
        const n = xs(t, this.type);
        return Object.entries(n).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), qC = xe.create({
  name: "fontFamily",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          fontFamily: {
            default: null,
            parseHTML: (t) => {
              var e;
              return (e = t.style.fontFamily) === null || e === void 0 ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (t) => t.fontFamily ? {
              style: `font-family: ${t.fontFamily.split(",").map((e) => CSS.escape(e.trim())).join(", ")}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setFontFamily: (t) => ({ chain: e }) => e().setMark("textStyle", { fontFamily: t }).run(),
      unsetFontFamily: () => ({ chain: t }) => t().setMark("textStyle", { fontFamily: null }).removeEmptyTextStyle().run()
    };
  }
}), q1 = (t) => {
  const e = document.createElement("div");
  return e.classList.add("aie-loader-placeholder"), e.innerHTML = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C16.9706 3 21 7.02944 21 12H19C19 8.13401 15.866 5 12 5V3Z"></path></svg>
    `, Be.widget(t.pos, e, { id: t.id });
}, ZC = (t) => {
  const e = document.createElement("div");
  return e.classList.add("aie-loader-placeholder"), e.style.height = "20px", e.style.display = "inline-block", e.innerHTML = `
    <svg style="width: 16px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C16.9706 3 21 7.02944 21 12H19C19 8.13401 15.866 5 12 5V3Z"></path></svg>
   ${t.text}
    `, Be.widget(t.pos, e, { id: t.id });
}, KC = (t, e, n, r) => {
  const i = new FormData();
  return i.append(r, t), new Promise((s, o) => {
    fetch(e, {
      method: "post",
      headers: { Accept: "application/json", ...n },
      body: i
    }).then((a) => a.json()).then((a) => {
      s(a);
    }).catch((a) => {
      o(a);
    });
  });
}, WC = (t, e, n, r) => {
  let i = new FileReader();
  return new Promise((s, o) => {
    i.onload = () => s({ errorCode: 0, data: { src: i.result, href: t.name } }), i.onerror = () => o(i.error), setTimeout(() => i.readAsDataURL(t), 5e3 * Math.random());
  });
}, xc = (t) => t ? KC : WC, Vf = new Te("aie-attachment-plugin"), Ci = "attachment_action", jC = xe.create({
  name: "attachment",
  addOptions() {
    return {
      uploadUrl: "",
      uploadHeaders: {},
      HTMLAttributes: {}
    };
  },
  addCommands() {
    return {
      uploadAttachment: (t) => () => {
        const e = typeof this.options.uploadHeaders == "object" ? this.options.uploadHeaders : typeof this.options.uploadHeaders == "function" ? this.options.uploadHeaders() : {};
        if (this.options.uploaderEvent && this.options.uploaderEvent.onUploadBefore && this.options.uploaderEvent.onUploadBefore(t, this.options.uploadUrl, e) === !1)
          return !1;
        const n = Aa(), { state: { tr: r }, view: i, schema: s } = this.editor;
        r.selection.empty || r.deleteSelection(), i.dispatch(r.setMeta(Ci, {
          type: "add",
          id: n,
          pos: r.selection.from,
          text: t.name
        }));
        const o = this.options.uploader || xc(this.options.uploadUrl), a = this.options.uploadFormName || "attachment";
        return o(t, this.options.uploadUrl, e, a).then((l) => {
          var u;
          if ((u = this.options.uploaderEvent) != null && u.onSuccess) {
            const c = this.options.uploaderEvent.onSuccess(t, l);
            if (typeof c == "boolean" && !c)
              return;
            typeof c == "object" && (l = c);
          }
          if (l.errorCode === 0 && l.data && l.data.href) {
            let d = Vf.getState(this.editor.state).find(void 0, void 0, (h) => h.id == n);
            const f = l.data.fileName || t.name;
            i.dispatch(i.state.tr.insertText(` ${f} `, d[0].from).addMark(d[0].from + 1, f.length + d[0].from + 1, s.marks.link.create({
              href: l.data.href,
              target: "_blank"
            })).setMeta(Ci, { type: "remove", id: n }));
          } else
            i.dispatch(r.setMeta(Ci, { type: "remove", id: n })), this.options.uploaderEvent && this.options.uploaderEvent.onFailed && this.options.uploaderEvent.onFailed(t, l);
        }).catch((l) => {
          const { state: { tr: u }, view: c } = this.editor;
          c.dispatch(u.setMeta(Ci, { type: "remove", id: n })), this.options.uploaderEvent && this.options.uploaderEvent.onError && this.options.uploaderEvent.onError(t, l);
        }), !0;
      }
    };
  },
  addProseMirrorPlugins() {
    const t = this.editor;
    return [
      new we({
        key: Vf,
        state: {
          init: () => ve.empty,
          apply: (e, n) => {
            const r = e.getMeta(Ci);
            return n = n.map(e.mapping, e.doc), r && r.type === "add" ? n = n.add(e.doc, [ZC(r)]) : r && r.type === "remove" && (n = n.remove(n.find(
              void 0,
              void 0,
              (i) => i.id == r.id
            ))), n;
          }
        },
        props: {
          decorations(e) {
            return this.getState(e);
          },
          handleDOMEvents: {
            drop(e, n) {
              if (!(n.dataTransfer && n.dataTransfer.files && n.dataTransfer.files.length))
                return !1;
              const i = Array.from(n.dataTransfer.files).filter((s) => !/video/i.test(s.type) && !/image/i.test(s.type));
              return n.preventDefault(), i.forEach((s) => {
                t.commands.uploadAttachment(s);
              }), !0;
            }
          }
        }
      })
    ];
  }
}), GC = xe.create({
  name: "painter",
  addCommands() {
    return {
      setPainter: (t) => ({ view: { dispatch: e, state: { tr: n }, dom: r } }) => (r.style.cursor = "context-menu", e(n.setMeta("painterAction", { type: "start", marks: t })), !0)
    };
  },
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("aie-painter"),
        state: {
          init: () => [],
          apply: (t, e) => {
            const n = t.getMeta("painterAction");
            return n && n.type === "start" ? e = n.marks : n && n.type === "end" && (e = []), e;
          }
        },
        props: {
          handleDOMEvents: {
            mousedown(t, e) {
              const n = this.getState(t.state);
              if (!n || n.length == 0)
                return !1;
              const r = () => {
                document.removeEventListener("mouseup", r);
                let { dispatch: i, state: { tr: s, selection: o }, dom: a } = t;
                a.style.cursor = "", s = s.removeMark(o.from, o.to);
                for (let l of n)
                  l.type.name != "link" && (s = s.addMark(o.from, o.to, l));
                i(s.setMeta("painterAction", { type: "end" }));
              };
              return document.addEventListener("mouseup", r), !0;
            }
          }
        }
      })
    ];
  }
}), JC = /(?:^|\s)(==(?!\s+==)((?:[^=]+))==(?!\s+==))$/, YC = /(?:^|\s)(==(?!\s+==)((?:[^=]+))==(?!\s+==))/g, XC = Ie.create({
  name: "highlight",
  addOptions() {
    return {
      multicolor: !1,
      HTMLAttributes: {}
    };
  },
  addAttributes() {
    return this.options.multicolor ? {
      color: {
        default: null,
        parseHTML: (t) => t.getAttribute("data-color") || t.style.backgroundColor,
        renderHTML: (t) => t.color ? {
          "data-color": t.color,
          style: `background-color: ${t.color}; color: inherit`
        } : {}
      }
    } : {};
  },
  parseHTML() {
    return [
      {
        tag: "mark"
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["mark", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setHighlight: (t) => ({ commands: e }) => e.setMark(this.name, t),
      toggleHighlight: (t) => ({ commands: e }) => e.toggleMark(this.name, t),
      unsetHighlight: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-h": () => this.editor.commands.toggleHighlight()
    };
  },
  addInputRules() {
    return [
      xr({
        find: JC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Zn({
        find: YC,
        type: this.type
      })
    ];
  }
}), QC = xe.create({
  name: "color",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          color: {
            default: null,
            parseHTML: (t) => {
              var e;
              return (e = t.style.color) === null || e === void 0 ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (t) => t.color ? {
              style: `color: ${t.color}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setColor: (t) => ({ chain: e }) => e().setMark("textStyle", { color: t }).run(),
      unsetColor: () => ({ chain: t }) => t().setMark("textStyle", { color: null }).removeEmptyTextStyle().run()
    };
  }
}), e_ = xe.create({
  name: "fontSize",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          fontSize: {
            default: null,
            parseHTML: (t) => {
              var e;
              return (e = t.style.fontSize) == null ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (t) => t.fontSize ? {
              style: `font-size: ${t.fontSize}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setFontSize: (t) => ({ chain: e }) => e().setMark("textStyle", { fontSize: t }).run(),
      unsetFontSize: () => ({ chain: t }) => t().setMark("textStyle", { fontSize: null }).removeEmptyTextStyle().run()
    };
  }
}), t_ = xe.create({
  name: "lineHeight",
  addOptions() {
    return {
      types: ["heading", "paragraph"],
      heights: ["100%", "125%", "150%", "200%", "250%", "300%"],
      defaultHeight: "100%"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          lineHeight: {
            default: this.options.defaultHeight,
            parseHTML: (t) => t.style.lineHeight || this.options.defaultHeight,
            renderHTML: (t) => t.lineHeight === this.options.defaultHeight ? {} : { style: `line-height: ${t.lineHeight}` }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setLineHeight: (t) => ({ commands: e }) => this.options.heights.includes(t) ? this.options.types.every(
        (n) => e.updateAttributes(n, { lineHeight: t })
      ) : !1,
      unsetLineHeight: () => ({ commands: t }) => this.options.types.every(
        (e) => t.resetAttributes(e, "lineHeight")
      )
    };
  }
}), n_ = xe.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: "left"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (t) => t.style.textAlign || this.options.defaultAlignment,
            renderHTML: (t) => t.textAlign === this.options.defaultAlignment ? {} : { style: `text-align: ${t.textAlign}` }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (t) => ({ commands: e }) => this.options.alignments.includes(t) ? this.options.types.map((n) => e.updateAttributes(n, { textAlign: t })).every((n) => n) : !1,
      unsetTextAlign: () => ({ commands: t }) => this.options.types.map((e) => t.resetAttributes(e, "textAlign")).every((e) => e)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
}), r_ = xe.create({
  name: "indent",
  addOptions() {
    return {
      types: ["listItem", "paragraph"],
      minLevel: 0,
      maxLevel: 8
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          indent: {
            default: 0,
            parseHTML: (t) => {
              const e = Number(t.getAttribute("data-indent"));
              return e && e > this.options.minLevel ? e : null;
            },
            renderHTML: (t) => t.indent ? {
              style: `text-indent: ${(t == null ? void 0 : t.indent) * 10}px`,
              "data-indent": t == null ? void 0 : t.indent
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    const t = (r, i, s) => {
      var a;
      const o = (a = r == null ? void 0 : r.doc) == null ? void 0 : a.nodeAt(i);
      if (o) {
        const l = (o.attrs.indent || 0) + s, { minLevel: u, maxLevel: c } = this.options, d = l < u ? u : l > c ? c : l;
        if (d !== o.attrs.indent) {
          const { indent: f, ...h } = o.attrs, p = d > u ? { ...h, indent: d } : h;
          return r.setNodeMarkup(i, o.type, p, o.marks);
        }
      }
      return r;
    }, e = (r, i) => {
      const { doc: s, selection: o } = r;
      if (s && o && (o instanceof X || o instanceof Nt)) {
        const { from: a, to: l } = o;
        s.nodesBetween(a, l, (u, c) => this.options.types.includes(u.type.name) ? (r = t(r, c, i), !1) : !0);
      }
      return r;
    }, n = (r) => () => ({ tr: i, state: s, dispatch: o }) => {
      const { selection: a } = s;
      return i = i.setSelection(a), i = e(i, r), i.docChanged ? (o == null || o(i), !0) : !1;
    };
    return {
      indent: n(1),
      outdent: n(-1)
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.indent(),
      "Shift-Tab": () => this.editor.commands.outdent()
    };
  }
}), i_ = /(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/, s_ = ue.create({
  name: "image",
  addOptions() {
    return {
      inline: !1,
      allowBase64: !1,
      HTMLAttributes: {}
    };
  },
  inline() {
    return this.options.inline;
  },
  group() {
    return this.options.inline ? "inline" : "block";
  },
  draggable: !0,
  addAttributes() {
    return {
      src: {
        default: null
      },
      alt: {
        default: null
      },
      title: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["img", le(this.options.HTMLAttributes, t)];
  },
  addCommands() {
    return {
      setImage: (t) => ({ commands: e }) => e.insertContent({
        type: this.name,
        attrs: t
      })
    };
  },
  addInputRules() {
    return [
      ac({
        find: i_,
        type: this.type,
        getAttributes: (t) => {
          const [, , e, n, r] = t;
          return { src: n, alt: e, title: r };
        }
      })
    ];
  }
}), Z1 = (t, e, n) => {
  const r = t.querySelector(".resize-obj"), i = 10;
  let s, o, a, l;
  const u = (f) => {
    f.preventDefault(), e.addEventListener("mousemove", c), e.addEventListener("mouseup", d), e.addEventListener("mouseleave", d), s = f.clientX, o = Number(r.getAttribute("data-with")) || r.clientWidth, a = f.target.getAttribute("data-position"), l = e.clientWidth - 100;
  }, c = (f) => {
    const h = f.clientX - s;
    if (h == 0)
      return;
    const p = a === "right" ? h > 0 : h < 0;
    let g = o + Math.abs(h) * (p ? 1 : -1);
    g >= l && (g = l), g < i && (g = i), r.style.width = `${g}px`, r.setAttribute("data-width", g.toString());
  }, d = () => {
    e.removeEventListener("mousemove", c), e.removeEventListener("mouseup", d), e.removeEventListener("mouseleave", d);
    const f = { width: Number(r.getAttribute("data-width")) };
    n(f);
  };
  for (let f of t.querySelector(".aie-resize").children)
    f.addEventListener("mousedown", u);
}, Uf = new Te("aie-image-plugin"), _i = "image_action", o_ = s_.extend(
  {
    name: "image",
    draggable: !0,
    selectable: !0,
    addOptions() {
      var t;
      return {
        ...(t = this.parent) == null ? void 0 : t.call(this),
        uploadUrl: "",
        uploadHeaders: {},
        uploader: void 0,
        defaultSize: 350
      };
    },
    allowGapCursor() {
      return !this.options.inline;
    },
    addAttributes() {
      return {
        src: {
          default: "",
          parseHTML: (t) => `${t.getAttribute("src") ?? ""}`
        },
        alt: {
          default: ""
        },
        title: {
          default: ""
        },
        width: {
          default: this.options.defaultSize
        },
        height: {
          default: "auto"
        },
        align: {
          default: "left"
        }
      };
    },
    parseHTML() {
      return [
        {
          tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
        }
      ];
    },
    renderHTML({ HTMLAttributes: t }) {
      return [
        "img",
        le(this.options.HTMLAttributes, t)
      ];
    },
    addCommands() {
      var t;
      return {
        ...(t = this.parent) == null ? void 0 : t.call(this),
        uploadImage: (e) => () => {
          const n = typeof this.options.uploadHeaders == "object" ? this.options.uploadHeaders : typeof this.options.uploadHeaders == "function" ? this.options.uploadHeaders() : {};
          if (this.options.uploaderEvent && this.options.uploaderEvent.onUploadBefore && this.options.uploaderEvent.onUploadBefore(e, this.options.uploadUrl, n) === !1)
            return !1;
          const r = Aa(), { state: { tr: i }, view: s, schema: o } = this.editor;
          i.selection.empty || i.deleteSelection(), s.dispatch(i.setMeta(_i, {
            type: "add",
            id: r,
            pos: i.selection.from
          }));
          const a = this.options.uploader || xc(this.options.uploadUrl), l = this.options.uploadFormName || "image";
          return a(e, this.options.uploadUrl, n, l).then((u) => {
            var c;
            if ((c = this.options.uploaderEvent) != null && c.onSuccess) {
              const d = this.options.uploaderEvent.onSuccess(e, u);
              if (typeof d == "boolean" && !d)
                return;
              typeof d == "object" && (u = d);
            }
            if (u.errorCode === 0 && u.data && u.data.src) {
              let f = Uf.getState(this.editor.state).find(void 0, void 0, (h) => h.id == r);
              s.dispatch(s.state.tr.insert(f[0].from, o.nodes.image.create({
                src: u.data.src,
                alt: u.data.alt
              })).setMeta(_i, { type: "remove", id: r }));
            } else
              s.dispatch(i.setMeta(_i, { type: "remove", id: r })), this.options.uploaderEvent && this.options.uploaderEvent.onFailed && this.options.uploaderEvent.onFailed(e, u);
          }).catch((u) => {
            const { state: { tr: c }, view: d } = this.editor;
            d.dispatch(c.setMeta(_i, { type: "remove", id: r })), this.options.uploaderEvent && this.options.uploaderEvent.onError && this.options.uploaderEvent.onError(e, u);
          }), !0;
        }
      };
    },
    addNodeView() {
      return (t) => {
        if (!this.editor.isEditable)
          return {};
        const e = document.createElement("div"), { src: n, width: r, height: i, align: s } = t.node.attrs;
        return e.classList.add(`align-${s}`), e.innerHTML = `
                <div class="aie-resize-wrapper">
                    <div class="aie-resize">
                        <div class="aie-resize-btn-top-left" data-position="left" draggable="true"></div>
                        <div class="aie-resize-btn-top-right" data-position="right" draggable="true"></div>
                        <div class="aie-resize-btn-bottom-left" data-position="left" draggable="true"></div>
                        <div class="aie-resize-btn-bottom-right" data-position="right" draggable="true"></div>
                    </div>
                    <img src="${n}" style="width: ${r}px; height: ${i}" class="align-${s} resize-obj">
                </div>
                `, Z1(e, t.editor.view.dom, (o) => t.editor.commands.updateAttributes("image", o)), {
          dom: e
        };
      };
    },
    addProseMirrorPlugins() {
      const t = this.editor;
      return [
        new we({
          key: Uf,
          state: {
            init: () => ve.empty,
            apply: (e, n) => {
              const r = e.getMeta(_i);
              if (r) {
                let i = !1;
                const s = n.map(e.mapping, e.doc, {
                  onRemove: (o) => {
                    i = !0;
                  }
                });
                i || (n = s), r.type === "add" ? n = n.add(e.doc, [q1(r)]) : r.type === "remove" && (n = n.remove(n.find(
                  void 0,
                  void 0,
                  (o) => o.id == r.id
                )));
              }
              return n;
            }
          },
          props: {
            decorations(e) {
              return this.getState(e);
            },
            handlePaste: (e, n) => {
              var i;
              const r = Array.from(((i = n.clipboardData) == null ? void 0 : i.items) || []);
              for (const s of r)
                if (s.type.indexOf("image") === 0) {
                  n.preventDefault();
                  const o = s.getAsFile();
                  o && this.editor.commands.uploadImage(o);
                }
            },
            handleDOMEvents: {
              drop(e, n) {
                if (!(n.dataTransfer && n.dataTransfer.files && n.dataTransfer.files.length))
                  return !1;
                const i = Array.from(n.dataTransfer.files).filter((u) => /image/i.test(u.type));
                if (i.length === 0)
                  return !1;
                n.preventDefault();
                const { state: { tr: s, doc: o }, dispatch: a } = e, l = e.posAtCoords({ left: n.clientX, top: n.clientY });
                return a(s.setSelection(X.create(o, l.pos)).scrollIntoView()), i.forEach((u) => {
                  t.commands.uploadImage(u);
                }), !0;
              }
            },
            transformPastedHTML(e) {
              const r = new DOMParser().parseFromString(e, "text/html"), i = r.documentElement.querySelector("body");
              if (i != null && i.children) {
                const s = r.documentElement.querySelectorAll("p > img");
                for (const o of s) {
                  const a = o.parentNode, l = Array.prototype.indexOf.call(i.children, a);
                  o.parentElement.prepend(o), i.insertBefore(o, i.children[l]);
                }
                return i.innerHTML;
              }
              return e;
            }
          }
        })
      ];
    }
  }
);
var Eu, Cu;
if (typeof WeakMap < "u") {
  let t = /* @__PURE__ */ new WeakMap();
  Eu = (e) => t.get(e), Cu = (e, n) => (t.set(e, n), n);
} else {
  const t = [];
  let n = 0;
  Eu = (r) => {
    for (let i = 0; i < t.length; i += 2)
      if (t[i] == r)
        return t[i + 1];
  }, Cu = (r, i) => (n == 10 && (n = 0), t[n++] = r, t[n++] = i);
}
var Ne = class {
  constructor(t, e, n, r) {
    this.width = t, this.height = e, this.map = n, this.problems = r;
  }
  // Find the dimensions of the cell at the given position.
  findCell(t) {
    for (let e = 0; e < this.map.length; e++) {
      const n = this.map[e];
      if (n != t)
        continue;
      const r = e % this.width, i = e / this.width | 0;
      let s = r + 1, o = i + 1;
      for (let a = 1; s < this.width && this.map[e + a] == n; a++)
        s++;
      for (let a = 1; o < this.height && this.map[e + this.width * a] == n; a++)
        o++;
      return { left: r, top: i, right: s, bottom: o };
    }
    throw new RangeError(`No cell with offset ${t} found`);
  }
  // Find the left side of the cell at the given position.
  colCount(t) {
    for (let e = 0; e < this.map.length; e++)
      if (this.map[e] == t)
        return e % this.width;
    throw new RangeError(`No cell with offset ${t} found`);
  }
  // Find the next cell in the given direction, starting from the cell
  // at `pos`, if any.
  nextCell(t, e, n) {
    const { left: r, right: i, top: s, bottom: o } = this.findCell(t);
    return e == "horiz" ? (n < 0 ? r == 0 : i == this.width) ? null : this.map[s * this.width + (n < 0 ? r - 1 : i)] : (n < 0 ? s == 0 : o == this.height) ? null : this.map[r + this.width * (n < 0 ? s - 1 : o)];
  }
  // Get the rectangle spanning the two given cells.
  rectBetween(t, e) {
    const {
      left: n,
      right: r,
      top: i,
      bottom: s
    } = this.findCell(t), {
      left: o,
      right: a,
      top: l,
      bottom: u
    } = this.findCell(e);
    return {
      left: Math.min(n, o),
      top: Math.min(i, l),
      right: Math.max(r, a),
      bottom: Math.max(s, u)
    };
  }
  // Return the position of all cells that have the top left corner in
  // the given rectangle.
  cellsInRect(t) {
    const e = [], n = {};
    for (let r = t.top; r < t.bottom; r++)
      for (let i = t.left; i < t.right; i++) {
        const s = r * this.width + i, o = this.map[s];
        n[o] || (n[o] = !0, !(i == t.left && i && this.map[s - 1] == o || r == t.top && r && this.map[s - this.width] == o) && e.push(o));
      }
    return e;
  }
  // Return the position at which the cell at the given row and column
  // starts, or would start, if a cell started there.
  positionAt(t, e, n) {
    for (let r = 0, i = 0; ; r++) {
      const s = i + n.child(r).nodeSize;
      if (r == t) {
        let o = e + t * this.width;
        const a = (t + 1) * this.width;
        for (; o < a && this.map[o] < i; )
          o++;
        return o == a ? s - 1 : this.map[o];
      }
      i = s;
    }
  }
  // Find the table map for the given table node.
  static get(t) {
    return Eu(t) || Cu(t, a_(t));
  }
};
function a_(t) {
  if (t.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + t.type.name);
  const e = l_(t), n = t.childCount, r = [];
  let i = 0, s = null;
  const o = [];
  for (let u = 0, c = e * n; u < c; u++)
    r[u] = 0;
  for (let u = 0, c = 0; u < n; u++) {
    const d = t.child(u);
    c++;
    for (let p = 0; ; p++) {
      for (; i < r.length && r[i] != 0; )
        i++;
      if (p == d.childCount)
        break;
      const g = d.child(p), { colspan: m, rowspan: y, colwidth: x } = g.attrs;
      for (let k = 0; k < y; k++) {
        if (k + u >= n) {
          (s || (s = [])).push({
            type: "overlong_rowspan",
            pos: c,
            n: y - k
          });
          break;
        }
        const b = i + k * e;
        for (let E = 0; E < m; E++) {
          r[b + E] == 0 ? r[b + E] = c : (s || (s = [])).push({
            type: "collision",
            row: u,
            pos: c,
            n: m - E
          });
          const v = x && x[E];
          if (v) {
            const _ = (b + E) % e * 2, T = o[_];
            T == null || T != v && o[_ + 1] == 1 ? (o[_] = v, o[_ + 1] = 1) : T == v && o[_ + 1]++;
          }
        }
      }
      i += m, c += g.nodeSize;
    }
    const f = (u + 1) * e;
    let h = 0;
    for (; i < f; )
      r[i++] == 0 && h++;
    h && (s || (s = [])).push({ type: "missing", row: u, n: h }), c++;
  }
  const a = new Ne(e, n, r, s);
  let l = !1;
  for (let u = 0; !l && u < o.length; u += 2)
    o[u] != null && o[u + 1] < n && (l = !0);
  return l && u_(a, o, t), a;
}
function l_(t) {
  let e = -1, n = !1;
  for (let r = 0; r < t.childCount; r++) {
    const i = t.child(r);
    let s = 0;
    if (n)
      for (let o = 0; o < r; o++) {
        const a = t.child(o);
        for (let l = 0; l < a.childCount; l++) {
          const u = a.child(l);
          o + u.attrs.rowspan > r && (s += u.attrs.colspan);
        }
      }
    for (let o = 0; o < i.childCount; o++) {
      const a = i.child(o);
      s += a.attrs.colspan, a.attrs.rowspan > 1 && (n = !0);
    }
    e == -1 ? e = s : e != s && (e = Math.max(e, s));
  }
  return e;
}
function u_(t, e, n) {
  t.problems || (t.problems = []);
  const r = {};
  for (let i = 0; i < t.map.length; i++) {
    const s = t.map[i];
    if (r[s])
      continue;
    r[s] = !0;
    const o = n.nodeAt(s);
    if (!o)
      throw new RangeError(`No cell with offset ${s} found`);
    let a = null;
    const l = o.attrs;
    for (let u = 0; u < l.colspan; u++) {
      const c = (i + u) % t.width, d = e[c * 2];
      d != null && (!l.colwidth || l.colwidth[u] != d) && ((a || (a = c_(l)))[u] = d);
    }
    a && t.problems.unshift({
      type: "colwidth mismatch",
      pos: s,
      colwidth: a
    });
  }
}
function c_(t) {
  if (t.colwidth)
    return t.colwidth.slice();
  const e = [];
  for (let n = 0; n < t.colspan; n++)
    e.push(0);
  return e;
}
function tt(t) {
  let e = t.cached.tableNodeTypes;
  if (!e) {
    e = t.cached.tableNodeTypes = {};
    for (const n in t.nodes) {
      const r = t.nodes[n], i = r.spec.tableRole;
      i && (e[i] = r);
    }
  }
  return e;
}
var Dn = new Te("selectingCells");
function bi(t) {
  for (let e = t.depth - 1; e > 0; e--)
    if (t.node(e).type.spec.tableRole == "row")
      return t.node(0).resolve(t.before(e + 1));
  return null;
}
function d_(t) {
  for (let e = t.depth; e > 0; e--) {
    const n = t.node(e).type.spec.tableRole;
    if (n === "cell" || n === "header_cell")
      return t.node(e);
  }
  return null;
}
function Vt(t) {
  const e = t.selection.$head;
  for (let n = e.depth; n > 0; n--)
    if (e.node(n).type.spec.tableRole == "row")
      return !0;
  return !1;
}
function Ma(t) {
  const e = t.selection;
  if ("$anchorCell" in e && e.$anchorCell)
    return e.$anchorCell.pos > e.$headCell.pos ? e.$anchorCell : e.$headCell;
  if ("node" in e && e.node && e.node.type.spec.tableRole == "cell")
    return e.$anchor;
  const n = bi(e.$head) || f_(e.$head);
  if (n)
    return n;
  throw new RangeError(`No cell found around position ${e.head}`);
}
function f_(t) {
  for (let e = t.nodeAfter, n = t.pos; e; e = e.firstChild, n++) {
    const r = e.type.spec.tableRole;
    if (r == "cell" || r == "header_cell")
      return t.doc.resolve(n);
  }
  for (let e = t.nodeBefore, n = t.pos; e; e = e.lastChild, n--) {
    const r = e.type.spec.tableRole;
    if (r == "cell" || r == "header_cell")
      return t.doc.resolve(n - e.nodeSize);
  }
}
function _u(t) {
  return t.parent.type.spec.tableRole == "row" && !!t.nodeAfter;
}
function h_(t) {
  return t.node(0).resolve(t.pos + t.nodeAfter.nodeSize);
}
function kc(t, e) {
  return t.depth == e.depth && t.pos >= e.start(-1) && t.pos <= e.end(-1);
}
function K1(t, e, n) {
  const r = t.node(-1), i = Ne.get(r), s = t.start(-1), o = i.nextCell(t.pos - s, e, n);
  return o == null ? null : t.node(0).resolve(s + o);
}
function Cr(t, e, n = 1) {
  const r = { ...t, colspan: t.colspan - n };
  return r.colwidth && (r.colwidth = r.colwidth.slice(), r.colwidth.splice(e, n), r.colwidth.some((i) => i > 0) || (r.colwidth = null)), r;
}
function W1(t, e, n = 1) {
  const r = { ...t, colspan: t.colspan + n };
  if (r.colwidth) {
    r.colwidth = r.colwidth.slice();
    for (let i = 0; i < n; i++)
      r.colwidth.splice(e, 0, 0);
  }
  return r;
}
function p_(t, e, n) {
  const r = tt(e.type.schema).header_cell;
  for (let i = 0; i < t.height; i++)
    if (e.nodeAt(t.map[n + i * t.width]).type != r)
      return !1;
  return !0;
}
var Ce = class pn extends ne {
  // A table selection is identified by its anchor and head cells. The
  // positions given to this constructor should point _before_ two
  // cells in the same table. They may be the same, to select a single
  // cell.
  constructor(e, n = e) {
    const r = e.node(-1), i = Ne.get(r), s = e.start(-1), o = i.rectBetween(
      e.pos - s,
      n.pos - s
    ), a = e.node(0), l = i.cellsInRect(o).filter((c) => c != n.pos - s);
    l.unshift(n.pos - s);
    const u = l.map((c) => {
      const d = r.nodeAt(c);
      if (!d)
        throw RangeError(`No cell with offset ${c} found`);
      const f = s + c + 1;
      return new r0(
        a.resolve(f),
        a.resolve(f + d.content.size)
      );
    });
    super(u[0].$from, u[0].$to, u), this.$anchorCell = e, this.$headCell = n;
  }
  map(e, n) {
    const r = e.resolve(n.map(this.$anchorCell.pos)), i = e.resolve(n.map(this.$headCell.pos));
    if (_u(r) && _u(i) && kc(r, i)) {
      const s = this.$anchorCell.node(-1) != r.node(-1);
      return s && this.isRowSelection() ? pn.rowSelection(r, i) : s && this.isColSelection() ? pn.colSelection(r, i) : new pn(r, i);
    }
    return X.between(r, i);
  }
  // Returns a rectangular slice of table rows containing the selected
  // cells.
  content() {
    const e = this.$anchorCell.node(-1), n = Ne.get(e), r = this.$anchorCell.start(-1), i = n.rectBetween(
      this.$anchorCell.pos - r,
      this.$headCell.pos - r
    ), s = {}, o = [];
    for (let l = i.top; l < i.bottom; l++) {
      const u = [];
      for (let c = l * n.width + i.left, d = i.left; d < i.right; d++, c++) {
        const f = n.map[c];
        if (s[f])
          continue;
        s[f] = !0;
        const h = n.findCell(f);
        let p = e.nodeAt(f);
        if (!p)
          throw RangeError(`No cell with offset ${f} found`);
        const g = i.left - h.left, m = h.right - i.right;
        if (g > 0 || m > 0) {
          let y = p.attrs;
          if (g > 0 && (y = Cr(y, 0, g)), m > 0 && (y = Cr(
            y,
            y.colspan - m,
            m
          )), h.left < i.left) {
            if (p = p.type.createAndFill(y), !p)
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(y)}`
              );
          } else
            p = p.type.create(y, p.content);
        }
        if (h.top < i.top || h.bottom > i.bottom) {
          const y = {
            ...p.attrs,
            rowspan: Math.min(h.bottom, i.bottom) - Math.max(h.top, i.top)
          };
          h.top < i.top ? p = p.type.createAndFill(y) : p = p.type.create(y, p.content);
        }
        u.push(p);
      }
      o.push(e.child(l).copy(O.from(u)));
    }
    const a = this.isColSelection() && this.isRowSelection() ? e : o;
    return new B(O.from(a), 1, 1);
  }
  replace(e, n = B.empty) {
    const r = e.steps.length, i = this.ranges;
    for (let o = 0; o < i.length; o++) {
      const { $from: a, $to: l } = i[o], u = e.mapping.slice(r);
      e.replace(
        u.map(a.pos),
        u.map(l.pos),
        o ? B.empty : n
      );
    }
    const s = ne.findFrom(
      e.doc.resolve(e.mapping.slice(r).map(this.to)),
      -1
    );
    s && e.setSelection(s);
  }
  replaceWith(e, n) {
    this.replace(e, new B(O.from(n), 0, 0));
  }
  forEachCell(e) {
    const n = this.$anchorCell.node(-1), r = Ne.get(n), i = this.$anchorCell.start(-1), s = r.cellsInRect(
      r.rectBetween(
        this.$anchorCell.pos - i,
        this.$headCell.pos - i
      )
    );
    for (let o = 0; o < s.length; o++)
      e(n.nodeAt(s[o]), i + s[o]);
  }
  // True if this selection goes all the way from the top to the
  // bottom of the table.
  isColSelection() {
    const e = this.$anchorCell.index(-1), n = this.$headCell.index(-1);
    if (Math.min(e, n) > 0)
      return !1;
    const r = e + this.$anchorCell.nodeAfter.attrs.rowspan, i = n + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(r, i) == this.$headCell.node(-1).childCount;
  }
  // Returns the smallest column selection that covers the given anchor
  // and head cell.
  static colSelection(e, n = e) {
    const r = e.node(-1), i = Ne.get(r), s = e.start(-1), o = i.findCell(e.pos - s), a = i.findCell(n.pos - s), l = e.node(0);
    return o.top <= a.top ? (o.top > 0 && (e = l.resolve(s + i.map[o.left])), a.bottom < i.height && (n = l.resolve(
      s + i.map[i.width * (i.height - 1) + a.right - 1]
    ))) : (a.top > 0 && (n = l.resolve(s + i.map[a.left])), o.bottom < i.height && (e = l.resolve(
      s + i.map[i.width * (i.height - 1) + o.right - 1]
    ))), new pn(e, n);
  }
  // True if this selection goes all the way from the left to the
  // right of the table.
  isRowSelection() {
    const e = this.$anchorCell.node(-1), n = Ne.get(e), r = this.$anchorCell.start(-1), i = n.colCount(this.$anchorCell.pos - r), s = n.colCount(this.$headCell.pos - r);
    if (Math.min(i, s) > 0)
      return !1;
    const o = i + this.$anchorCell.nodeAfter.attrs.colspan, a = s + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(o, a) == n.width;
  }
  eq(e) {
    return e instanceof pn && e.$anchorCell.pos == this.$anchorCell.pos && e.$headCell.pos == this.$headCell.pos;
  }
  // Returns the smallest row selection that covers the given anchor
  // and head cell.
  static rowSelection(e, n = e) {
    const r = e.node(-1), i = Ne.get(r), s = e.start(-1), o = i.findCell(e.pos - s), a = i.findCell(n.pos - s), l = e.node(0);
    return o.left <= a.left ? (o.left > 0 && (e = l.resolve(
      s + i.map[o.top * i.width]
    )), a.right < i.width && (n = l.resolve(
      s + i.map[i.width * (a.top + 1) - 1]
    ))) : (a.left > 0 && (n = l.resolve(s + i.map[a.top * i.width])), o.right < i.width && (e = l.resolve(
      s + i.map[i.width * (o.top + 1) - 1]
    ))), new pn(e, n);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(e, n) {
    return new pn(e.resolve(n.anchor), e.resolve(n.head));
  }
  static create(e, n, r = n) {
    return new pn(e.resolve(n), e.resolve(r));
  }
  getBookmark() {
    return new g_(this.$anchorCell.pos, this.$headCell.pos);
  }
};
Ce.prototype.visible = !1;
ne.jsonID("cell", Ce);
var g_ = class j1 {
  constructor(e, n) {
    this.anchor = e, this.head = n;
  }
  map(e) {
    return new j1(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    const n = e.resolve(this.anchor), r = e.resolve(this.head);
    return n.parent.type.spec.tableRole == "row" && r.parent.type.spec.tableRole == "row" && n.index() < n.parent.childCount && r.index() < r.parent.childCount && kc(n, r) ? new Ce(n, r) : ne.near(r, 1);
  }
};
function m_(t) {
  if (!(t.selection instanceof Ce))
    return null;
  const e = [];
  return t.selection.forEachCell((n, r) => {
    e.push(
      Be.node(r, r + n.nodeSize, { class: "selectedCell" })
    );
  }), ve.create(t.doc, e);
}
function b_({ $from: t, $to: e }) {
  if (t.pos == e.pos || t.pos < t.pos - 6)
    return !1;
  let n = t.pos, r = e.pos, i = t.depth;
  for (; i >= 0 && !(t.after(i + 1) < t.end(i)); i--, n++)
    ;
  for (let s = e.depth; s >= 0 && !(e.before(s + 1) > e.start(s)); s--, r--)
    ;
  return n == r && /row|table/.test(t.node(i).type.spec.tableRole);
}
function y_({ $from: t, $to: e }) {
  let n, r;
  for (let i = t.depth; i > 0; i--) {
    const s = t.node(i);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      n = s;
      break;
    }
  }
  for (let i = e.depth; i > 0; i--) {
    const s = e.node(i);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      r = s;
      break;
    }
  }
  return n !== r && e.parentOffset === 0;
}
function x_(t, e, n) {
  const r = (e || t).selection, i = (e || t).doc;
  let s, o;
  if (r instanceof ee && (o = r.node.type.spec.tableRole)) {
    if (o == "cell" || o == "header_cell")
      s = Ce.create(i, r.from);
    else if (o == "row") {
      const a = i.resolve(r.from + 1);
      s = Ce.rowSelection(a, a);
    } else if (!n) {
      const a = Ne.get(r.node), l = r.from + 1, u = l + a.map[a.width * a.height - 1];
      s = Ce.create(i, l + 1, u);
    }
  } else
    r instanceof X && b_(r) ? s = X.create(i, r.from) : r instanceof X && y_(r) && (s = X.create(i, r.$from.start(), r.$from.end()));
  return s && (e || (e = t.tr)).setSelection(s), e;
}
var k_ = new Te("fix-tables");
function G1(t, e, n, r) {
  const i = t.childCount, s = e.childCount;
  e:
    for (let o = 0, a = 0; o < s; o++) {
      const l = e.child(o);
      for (let u = a, c = Math.min(i, o + 3); u < c; u++)
        if (t.child(u) == l) {
          a = u + 1, n += l.nodeSize;
          continue e;
        }
      r(l, n), a < i && t.child(a).sameMarkup(l) ? G1(t.child(a), l, n + 1, r) : l.nodesBetween(0, l.content.size, r, n + 1), n += l.nodeSize;
    }
}
function J1(t, e) {
  let n;
  const r = (i, s) => {
    i.type.spec.tableRole == "table" && (n = v_(t, i, s, n));
  };
  return e ? e.doc != t.doc && G1(e.doc, t.doc, 0, r) : t.doc.descendants(r), n;
}
function v_(t, e, n, r) {
  const i = Ne.get(e);
  if (!i.problems)
    return r;
  r || (r = t.tr);
  const s = [];
  for (let l = 0; l < i.height; l++)
    s.push(0);
  for (let l = 0; l < i.problems.length; l++) {
    const u = i.problems[l];
    if (u.type == "collision") {
      const c = e.nodeAt(u.pos);
      if (!c)
        continue;
      const d = c.attrs;
      for (let f = 0; f < d.rowspan; f++)
        s[u.row + f] += u.n;
      r.setNodeMarkup(
        r.mapping.map(n + 1 + u.pos),
        null,
        Cr(d, d.colspan - u.n, u.n)
      );
    } else if (u.type == "missing")
      s[u.row] += u.n;
    else if (u.type == "overlong_rowspan") {
      const c = e.nodeAt(u.pos);
      if (!c)
        continue;
      r.setNodeMarkup(r.mapping.map(n + 1 + u.pos), null, {
        ...c.attrs,
        rowspan: c.attrs.rowspan - u.n
      });
    } else if (u.type == "colwidth mismatch") {
      const c = e.nodeAt(u.pos);
      if (!c)
        continue;
      r.setNodeMarkup(r.mapping.map(n + 1 + u.pos), null, {
        ...c.attrs,
        colwidth: u.colwidth
      });
    }
  }
  let o, a;
  for (let l = 0; l < s.length; l++)
    s[l] && (o == null && (o = l), a = l);
  for (let l = 0, u = n + 1; l < i.height; l++) {
    const c = e.child(l), d = u + c.nodeSize, f = s[l];
    if (f > 0) {
      let h = "cell";
      c.firstChild && (h = c.firstChild.type.spec.tableRole);
      const p = [];
      for (let m = 0; m < f; m++) {
        const y = tt(t.schema)[h].createAndFill();
        y && p.push(y);
      }
      const g = (l == 0 || o == l - 1) && a == l ? u + 1 : d - 1;
      r.insert(r.mapping.map(g), p);
    }
    u = d;
  }
  return r.setMeta(k_, { fixTables: !0 });
}
function E_(t) {
  if (!t.size)
    return null;
  let { content: e, openStart: n, openEnd: r } = t;
  for (; e.childCount == 1 && (n > 0 && r > 0 || e.child(0).type.spec.tableRole == "table"); )
    n--, r--, e = e.child(0).content;
  const i = e.child(0), s = i.type.spec.tableRole, o = i.type.schema, a = [];
  if (s == "row")
    for (let l = 0; l < e.childCount; l++) {
      let u = e.child(l).content;
      const c = l ? 0 : Math.max(0, n - 1), d = l < e.childCount - 1 ? 0 : Math.max(0, r - 1);
      (c || d) && (u = wu(
        tt(o).row,
        new B(u, c, d)
      ).content), a.push(u);
    }
  else if (s == "cell" || s == "header_cell")
    a.push(
      n || r ? wu(
        tt(o).row,
        new B(e, n, r)
      ).content : e
    );
  else
    return null;
  return C_(o, a);
}
function C_(t, e) {
  const n = [];
  for (let i = 0; i < e.length; i++) {
    const s = e[i];
    for (let o = s.childCount - 1; o >= 0; o--) {
      const { rowspan: a, colspan: l } = s.child(o).attrs;
      for (let u = i; u < i + a; u++)
        n[u] = (n[u] || 0) + l;
    }
  }
  let r = 0;
  for (let i = 0; i < n.length; i++)
    r = Math.max(r, n[i]);
  for (let i = 0; i < n.length; i++)
    if (i >= e.length && e.push(O.empty), n[i] < r) {
      const s = tt(t).cell.createAndFill(), o = [];
      for (let a = n[i]; a < r; a++)
        o.push(s);
      e[i] = e[i].append(O.from(o));
    }
  return { height: e.length, width: r, rows: e };
}
function wu(t, e) {
  const n = t.createAndFill();
  return new Vu(n).replace(0, n.content.size, e).doc;
}
function __({ width: t, height: e, rows: n }, r, i) {
  if (t != r) {
    const s = [], o = [];
    for (let a = 0; a < n.length; a++) {
      const l = n[a], u = [];
      for (let c = s[a] || 0, d = 0; c < r; d++) {
        let f = l.child(d % l.childCount);
        c + f.attrs.colspan > r && (f = f.type.createChecked(
          Cr(
            f.attrs,
            f.attrs.colspan,
            c + f.attrs.colspan - r
          ),
          f.content
        )), u.push(f), c += f.attrs.colspan;
        for (let h = 1; h < f.attrs.rowspan; h++)
          s[a + h] = (s[a + h] || 0) + f.attrs.colspan;
      }
      o.push(O.from(u));
    }
    n = o, t = r;
  }
  if (e != i) {
    const s = [];
    for (let o = 0, a = 0; o < i; o++, a++) {
      const l = [], u = n[a % e];
      for (let c = 0; c < u.childCount; c++) {
        let d = u.child(c);
        o + d.attrs.rowspan > i && (d = d.type.create(
          {
            ...d.attrs,
            rowspan: Math.max(1, i - d.attrs.rowspan)
          },
          d.content
        )), l.push(d);
      }
      s.push(O.from(l));
    }
    n = s, e = i;
  }
  return { width: t, height: e, rows: n };
}
function w_(t, e, n, r, i, s, o) {
  const a = t.doc.type.schema, l = tt(a);
  let u, c;
  if (i > e.width)
    for (let d = 0, f = 0; d < e.height; d++) {
      const h = n.child(d);
      f += h.nodeSize;
      const p = [];
      let g;
      h.lastChild == null || h.lastChild.type == l.cell ? g = u || (u = l.cell.createAndFill()) : g = c || (c = l.header_cell.createAndFill());
      for (let m = e.width; m < i; m++)
        p.push(g);
      t.insert(t.mapping.slice(o).map(f - 1 + r), p);
    }
  if (s > e.height) {
    const d = [];
    for (let p = 0, g = (e.height - 1) * e.width; p < Math.max(e.width, i); p++) {
      const m = p >= e.width ? !1 : n.nodeAt(e.map[g + p]).type == l.header_cell;
      d.push(
        m ? c || (c = l.header_cell.createAndFill()) : u || (u = l.cell.createAndFill())
      );
    }
    const f = l.row.create(null, O.from(d)), h = [];
    for (let p = e.height; p < s; p++)
      h.push(f);
    t.insert(t.mapping.slice(o).map(r + n.nodeSize - 2), h);
  }
  return !!(u || c);
}
function qf(t, e, n, r, i, s, o, a) {
  if (o == 0 || o == e.height)
    return !1;
  let l = !1;
  for (let u = i; u < s; u++) {
    const c = o * e.width + u, d = e.map[c];
    if (e.map[c - e.width] == d) {
      l = !0;
      const f = n.nodeAt(d), { top: h, left: p } = e.findCell(d);
      t.setNodeMarkup(t.mapping.slice(a).map(d + r), null, {
        ...f.attrs,
        rowspan: o - h
      }), t.insert(
        t.mapping.slice(a).map(e.positionAt(o, p, n)),
        f.type.createAndFill({
          ...f.attrs,
          rowspan: h + f.attrs.rowspan - o
        })
      ), u += f.attrs.colspan - 1;
    }
  }
  return l;
}
function Zf(t, e, n, r, i, s, o, a) {
  if (o == 0 || o == e.width)
    return !1;
  let l = !1;
  for (let u = i; u < s; u++) {
    const c = u * e.width + o, d = e.map[c];
    if (e.map[c - 1] == d) {
      l = !0;
      const f = n.nodeAt(d), h = e.colCount(d), p = t.mapping.slice(a).map(d + r);
      t.setNodeMarkup(
        p,
        null,
        Cr(
          f.attrs,
          o - h,
          f.attrs.colspan - (o - h)
        )
      ), t.insert(
        p + f.nodeSize,
        f.type.createAndFill(
          Cr(f.attrs, 0, o - h)
        )
      ), u += f.attrs.rowspan - 1;
    }
  }
  return l;
}
function Kf(t, e, n, r, i) {
  let s = n ? t.doc.nodeAt(n - 1) : t.doc;
  if (!s)
    throw new Error("No table found");
  let o = Ne.get(s);
  const { top: a, left: l } = r, u = l + i.width, c = a + i.height, d = t.tr;
  let f = 0;
  function h() {
    if (s = n ? d.doc.nodeAt(n - 1) : d.doc, !s)
      throw new Error("No table found");
    o = Ne.get(s), f = d.mapping.maps.length;
  }
  w_(d, o, s, n, u, c, f) && h(), qf(d, o, s, n, l, u, a, f) && h(), qf(d, o, s, n, l, u, c, f) && h(), Zf(d, o, s, n, a, c, l, f) && h(), Zf(d, o, s, n, a, c, u, f) && h();
  for (let p = a; p < c; p++) {
    const g = o.positionAt(p, l, s), m = o.positionAt(p, u, s);
    d.replace(
      d.mapping.slice(f).map(g + n),
      d.mapping.slice(f).map(m + n),
      new B(i.rows[p - a], 0, 0)
    );
  }
  h(), d.setSelection(
    new Ce(
      d.doc.resolve(n + o.positionAt(a, l, s)),
      d.doc.resolve(n + o.positionAt(c - 1, u - 1, s))
    )
  ), e(d);
}
var S_ = Xu({
  ArrowLeft: $s("horiz", -1),
  ArrowRight: $s("horiz", 1),
  ArrowUp: $s("vert", -1),
  ArrowDown: $s("vert", 1),
  "Shift-ArrowLeft": zs("horiz", -1),
  "Shift-ArrowRight": zs("horiz", 1),
  "Shift-ArrowUp": zs("vert", -1),
  "Shift-ArrowDown": zs("vert", 1),
  Backspace: Vs,
  "Mod-Backspace": Vs,
  Delete: Vs,
  "Mod-Delete": Vs
});
function lo(t, e, n) {
  return n.eq(t.selection) ? !1 : (e && e(t.tr.setSelection(n).scrollIntoView()), !0);
}
function $s(t, e) {
  return (n, r, i) => {
    if (!i)
      return !1;
    const s = n.selection;
    if (s instanceof Ce)
      return lo(
        n,
        r,
        ne.near(s.$headCell, e)
      );
    if (t != "horiz" && !s.empty)
      return !1;
    const o = Y1(i, t, e);
    if (o == null)
      return !1;
    if (t == "horiz")
      return lo(
        n,
        r,
        ne.near(n.doc.resolve(s.head + e), e)
      );
    {
      const a = n.doc.resolve(o), l = K1(a, t, e);
      let u;
      return l ? u = ne.near(l, 1) : e < 0 ? u = ne.near(n.doc.resolve(a.before(-1)), -1) : u = ne.near(n.doc.resolve(a.after(-1)), 1), lo(n, r, u);
    }
  };
}
function zs(t, e) {
  return (n, r, i) => {
    if (!i)
      return !1;
    const s = n.selection;
    let o;
    if (s instanceof Ce)
      o = s;
    else {
      const l = Y1(i, t, e);
      if (l == null)
        return !1;
      o = new Ce(n.doc.resolve(l));
    }
    const a = K1(o.$headCell, t, e);
    return a ? lo(
      n,
      r,
      new Ce(o.$anchorCell, a)
    ) : !1;
  };
}
function Vs(t, e) {
  const n = t.selection;
  if (!(n instanceof Ce))
    return !1;
  if (e) {
    const r = t.tr, i = tt(t.schema).cell.createAndFill().content;
    n.forEachCell((s, o) => {
      s.content.eq(i) || r.replace(
        r.mapping.map(o + 1),
        r.mapping.map(o + s.nodeSize - 1),
        new B(i, 0, 0)
      );
    }), r.docChanged && e(r);
  }
  return !0;
}
function A_(t, e) {
  const n = t.state.doc, r = bi(n.resolve(e));
  return r ? (t.dispatch(t.state.tr.setSelection(new Ce(r))), !0) : !1;
}
function M_(t, e, n) {
  if (!Vt(t.state))
    return !1;
  let r = E_(n);
  const i = t.state.selection;
  if (i instanceof Ce) {
    r || (r = {
      width: 1,
      height: 1,
      rows: [
        O.from(
          wu(tt(t.state.schema).cell, n)
        )
      ]
    });
    const s = i.$anchorCell.node(-1), o = i.$anchorCell.start(-1), a = Ne.get(s).rectBetween(
      i.$anchorCell.pos - o,
      i.$headCell.pos - o
    );
    return r = __(r, a.right - a.left, a.bottom - a.top), Kf(t.state, t.dispatch, o, a, r), !0;
  } else if (r) {
    const s = Ma(t.state), o = s.start(-1);
    return Kf(
      t.state,
      t.dispatch,
      o,
      Ne.get(s.node(-1)).findCell(s.pos - o),
      r
    ), !0;
  } else
    return !1;
}
function T_(t, e) {
  var n;
  if (e.ctrlKey || e.metaKey)
    return;
  const r = Wf(t, e.target);
  let i;
  if (e.shiftKey && t.state.selection instanceof Ce)
    s(t.state.selection.$anchorCell, e), e.preventDefault();
  else if (e.shiftKey && r && (i = bi(t.state.selection.$anchor)) != null && ((n = _l(t, e)) == null ? void 0 : n.pos) != i.pos)
    s(i, e), e.preventDefault();
  else if (!r)
    return;
  function s(l, u) {
    let c = _l(t, u);
    const d = Dn.getState(t.state) == null;
    if (!c || !kc(l, c))
      if (d)
        c = l;
      else
        return;
    const f = new Ce(l, c);
    if (d || !t.state.selection.eq(f)) {
      const h = t.state.tr.setSelection(f);
      d && h.setMeta(Dn, l.pos), t.dispatch(h);
    }
  }
  function o() {
    t.root.removeEventListener("mouseup", o), t.root.removeEventListener("dragstart", o), t.root.removeEventListener("mousemove", a), Dn.getState(t.state) != null && t.dispatch(t.state.tr.setMeta(Dn, -1));
  }
  function a(l) {
    const u = l, c = Dn.getState(t.state);
    let d;
    if (c != null)
      d = t.state.doc.resolve(c);
    else if (Wf(t, u.target) != r && (d = _l(t, e), !d))
      return o();
    d && s(d, u);
  }
  t.root.addEventListener("mouseup", o), t.root.addEventListener("dragstart", o), t.root.addEventListener("mousemove", a);
}
function Y1(t, e, n) {
  if (!(t.state.selection instanceof X))
    return null;
  const { $head: r } = t.state.selection;
  for (let i = r.depth - 1; i >= 0; i--) {
    const s = r.node(i);
    if ((n < 0 ? r.index(i) : r.indexAfter(i)) != (n < 0 ? 0 : s.childCount))
      return null;
    if (s.type.spec.tableRole == "cell" || s.type.spec.tableRole == "header_cell") {
      const a = r.before(i), l = e == "vert" ? n > 0 ? "down" : "up" : n > 0 ? "right" : "left";
      return t.endOfTextblock(l) ? a : null;
    }
  }
  return null;
}
function Wf(t, e) {
  for (; e && e != t.dom; e = e.parentNode)
    if (e.nodeName == "TD" || e.nodeName == "TH")
      return e;
  return null;
}
function _l(t, e) {
  const n = t.posAtCoords({
    left: e.clientX,
    top: e.clientY
  });
  return n && n ? bi(t.state.doc.resolve(n.pos)) : null;
}
var D_ = class {
  constructor(e, n) {
    this.node = e, this.cellMinWidth = n, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), Su(e, this.colgroup, this.table, n), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(e) {
    return e.type != this.node.type ? !1 : (this.node = e, Su(e, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(e) {
    return e.type == "attributes" && (e.target == this.table || this.colgroup.contains(e.target));
  }
};
function Su(t, e, n, r, i, s) {
  var o;
  let a = 0, l = !0, u = e.firstChild;
  const c = t.firstChild;
  if (c) {
    for (let d = 0, f = 0; d < c.childCount; d++) {
      const { colspan: h, colwidth: p } = c.child(d).attrs;
      for (let g = 0; g < h; g++, f++) {
        const m = i == f ? s : p && p[g], y = m ? m + "px" : "";
        a += m || r, m || (l = !1), u ? (u.style.width != y && (u.style.width = y), u = u.nextSibling) : e.appendChild(document.createElement("col")).style.width = y;
      }
    }
    for (; u; ) {
      const d = u.nextSibling;
      (o = u.parentNode) == null || o.removeChild(u), u = d;
    }
    l ? (n.style.width = a + "px", n.style.minWidth = "") : (n.style.width = "", n.style.minWidth = a + "px");
  }
}
var Ot = new Te(
  "tableColumnResizing"
);
function O_({
  handleWidth: t = 5,
  cellMinWidth: e = 25,
  View: n = D_,
  lastColumnResizable: r = !0
} = {}) {
  const i = new we({
    key: Ot,
    state: {
      init(s, o) {
        return i.spec.props.nodeViews[tt(o.schema).table.name] = (a, l) => new n(a, e, l), new N_(-1, !1);
      },
      apply(s, o) {
        return o.apply(s);
      }
    },
    props: {
      attributes: (s) => {
        const o = Ot.getState(s);
        return o && o.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (s, o) => {
          L_(
            s,
            o,
            t,
            e,
            r
          );
        },
        mouseleave: (s) => {
          R_(s);
        },
        mousedown: (s, o) => {
          I_(s, o, e);
        }
      },
      decorations: (s) => {
        const o = Ot.getState(s);
        if (o && o.activeHandle > -1)
          return z_(s, o.activeHandle);
      },
      nodeViews: {}
    }
  });
  return i;
}
var N_ = class uo {
  constructor(e, n) {
    this.activeHandle = e, this.dragging = n;
  }
  apply(e) {
    const n = this, r = e.getMeta(Ot);
    if (r && r.setHandle != null)
      return new uo(r.setHandle, !1);
    if (r && r.setDragging !== void 0)
      return new uo(n.activeHandle, r.setDragging);
    if (n.activeHandle > -1 && e.docChanged) {
      let i = e.mapping.map(n.activeHandle, -1);
      return _u(e.doc.resolve(i)) || (i = -1), new uo(i, n.dragging);
    }
    return n;
  }
};
function L_(t, e, n, r, i) {
  const s = Ot.getState(t.state);
  if (s && !s.dragging) {
    const o = H_(e.target);
    let a = -1;
    if (o) {
      const { left: l, right: u } = o.getBoundingClientRect();
      e.clientX - l <= n ? a = jf(t, e, "left", n) : u - e.clientX <= n && (a = jf(t, e, "right", n));
    }
    if (a != s.activeHandle) {
      if (!i && a !== -1) {
        const l = t.state.doc.resolve(a), u = l.node(-1), c = Ne.get(u), d = l.start(-1);
        if (c.colCount(l.pos - d) + l.nodeAfter.attrs.colspan - 1 == c.width - 1)
          return;
      }
      X1(t, a);
    }
  }
}
function R_(t) {
  const e = Ot.getState(t.state);
  e && e.activeHandle > -1 && !e.dragging && X1(t, -1);
}
function I_(t, e, n) {
  var r;
  const i = (r = t.dom.ownerDocument.defaultView) != null ? r : window, s = Ot.getState(t.state);
  if (!s || s.activeHandle == -1 || s.dragging)
    return !1;
  const o = t.state.doc.nodeAt(s.activeHandle), a = F_(t, s.activeHandle, o.attrs);
  t.dispatch(
    t.state.tr.setMeta(Ot, {
      setDragging: { startX: e.clientX, startWidth: a }
    })
  );
  function l(c) {
    i.removeEventListener("mouseup", l), i.removeEventListener("mousemove", u);
    const d = Ot.getState(t.state);
    d != null && d.dragging && (B_(
      t,
      d.activeHandle,
      Gf(d.dragging, c, n)
    ), t.dispatch(
      t.state.tr.setMeta(Ot, { setDragging: null })
    ));
  }
  function u(c) {
    if (!c.which)
      return l(c);
    const d = Ot.getState(t.state);
    if (d && d.dragging) {
      const f = Gf(d.dragging, c, n);
      P_(t, d.activeHandle, f, n);
    }
  }
  return i.addEventListener("mouseup", l), i.addEventListener("mousemove", u), e.preventDefault(), !0;
}
function F_(t, e, { colspan: n, colwidth: r }) {
  const i = r && r[r.length - 1];
  if (i)
    return i;
  const s = t.domAtPos(e);
  let a = s.node.childNodes[s.offset].offsetWidth, l = n;
  if (r)
    for (let u = 0; u < n; u++)
      r[u] && (a -= r[u], l--);
  return a / l;
}
function H_(t) {
  for (; t && t.nodeName != "TD" && t.nodeName != "TH"; )
    t = t.classList && t.classList.contains("ProseMirror") ? null : t.parentNode;
  return t;
}
function jf(t, e, n, r) {
  const i = n == "right" ? -r : r, s = t.posAtCoords({
    left: e.clientX + i,
    top: e.clientY
  });
  if (!s)
    return -1;
  const { pos: o } = s, a = bi(t.state.doc.resolve(o));
  if (!a)
    return -1;
  if (n == "right")
    return a.pos;
  const l = Ne.get(a.node(-1)), u = a.start(-1), c = l.map.indexOf(a.pos - u);
  return c % l.width == 0 ? -1 : u + l.map[c - 1];
}
function Gf(t, e, n) {
  const r = e.clientX - t.startX;
  return Math.max(n, t.startWidth + r);
}
function X1(t, e) {
  t.dispatch(
    t.state.tr.setMeta(Ot, { setHandle: e })
  );
}
function B_(t, e, n) {
  const r = t.state.doc.resolve(e), i = r.node(-1), s = Ne.get(i), o = r.start(-1), a = s.colCount(r.pos - o) + r.nodeAfter.attrs.colspan - 1, l = t.state.tr;
  for (let u = 0; u < s.height; u++) {
    const c = u * s.width + a;
    if (u && s.map[c] == s.map[c - s.width])
      continue;
    const d = s.map[c], f = i.nodeAt(d).attrs, h = f.colspan == 1 ? 0 : a - s.colCount(d);
    if (f.colwidth && f.colwidth[h] == n)
      continue;
    const p = f.colwidth ? f.colwidth.slice() : $_(f.colspan);
    p[h] = n, l.setNodeMarkup(o + d, null, { ...f, colwidth: p });
  }
  l.docChanged && t.dispatch(l);
}
function P_(t, e, n, r) {
  const i = t.state.doc.resolve(e), s = i.node(-1), o = i.start(-1), a = Ne.get(s).colCount(i.pos - o) + i.nodeAfter.attrs.colspan - 1;
  let l = t.domAtPos(i.start(-1)).node;
  for (; l && l.nodeName != "TABLE"; )
    l = l.parentNode;
  l && Su(
    s,
    l.firstChild,
    l,
    r,
    a,
    n
  );
}
function $_(t) {
  return Array(t).fill(0);
}
function z_(t, e) {
  const n = [], r = t.doc.resolve(e), i = r.node(-1);
  if (!i)
    return ve.empty;
  const s = Ne.get(i), o = r.start(-1), a = s.colCount(r.pos - o) + r.nodeAfter.attrs.colspan;
  for (let l = 0; l < s.height; l++) {
    const u = a + l * s.width - 1;
    if ((a == s.width || s.map[u] != s.map[u + 1]) && (l == 0 || s.map[u] != s.map[u - s.width])) {
      const c = s.map[u], d = o + c + i.nodeAt(c).nodeSize - 1, f = document.createElement("div");
      f.className = "column-resize-handle", n.push(Be.widget(d, f));
    }
  }
  return ve.create(t.doc, n);
}
function an(t) {
  const e = t.selection, n = Ma(t), r = n.node(-1), i = n.start(-1), s = Ne.get(r);
  return { ...e instanceof Ce ? s.rectBetween(
    e.$anchorCell.pos - i,
    e.$headCell.pos - i
  ) : s.findCell(n.pos - i), tableStart: i, map: s, table: r };
}
function Q1(t, { map: e, tableStart: n, table: r }, i) {
  let s = i > 0 ? -1 : 0;
  p_(e, r, i + s) && (s = i == 0 || i == e.width ? null : 0);
  for (let o = 0; o < e.height; o++) {
    const a = o * e.width + i;
    if (i > 0 && i < e.width && e.map[a - 1] == e.map[a]) {
      const l = e.map[a], u = r.nodeAt(l);
      t.setNodeMarkup(
        t.mapping.map(n + l),
        null,
        W1(u.attrs, i - e.colCount(l))
      ), o += u.attrs.rowspan - 1;
    } else {
      const l = s == null ? tt(r.type.schema).cell : r.nodeAt(e.map[a + s]).type, u = e.positionAt(o, i, r);
      t.insert(t.mapping.map(n + u), l.createAndFill());
    }
  }
  return t;
}
function V_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t);
    e(Q1(t.tr, n, n.left));
  }
  return !0;
}
function U_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t);
    e(Q1(t.tr, n, n.right));
  }
  return !0;
}
function q_(t, { map: e, table: n, tableStart: r }, i) {
  const s = t.mapping.maps.length;
  for (let o = 0; o < e.height; ) {
    const a = o * e.width + i, l = e.map[a], u = n.nodeAt(l), c = u.attrs;
    if (i > 0 && e.map[a - 1] == l || i < e.width - 1 && e.map[a + 1] == l)
      t.setNodeMarkup(
        t.mapping.slice(s).map(r + l),
        null,
        Cr(c, i - e.colCount(l))
      );
    else {
      const d = t.mapping.slice(s).map(r + l);
      t.delete(d, d + u.nodeSize);
    }
    o += c.rowspan;
  }
}
function Z_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t), r = t.tr;
    if (n.left == 0 && n.right == n.map.width)
      return !1;
    for (let i = n.right - 1; q_(r, n, i), i != n.left; i--) {
      const s = n.tableStart ? r.doc.nodeAt(n.tableStart - 1) : r.doc;
      if (!s)
        throw RangeError("No table found");
      n.table = s, n.map = Ne.get(s);
    }
    e(r);
  }
  return !0;
}
function K_(t, e, n) {
  var r;
  const i = tt(e.type.schema).header_cell;
  for (let s = 0; s < t.width; s++)
    if (((r = e.nodeAt(t.map[s + n * t.width])) == null ? void 0 : r.type) != i)
      return !1;
  return !0;
}
function eg(t, { map: e, tableStart: n, table: r }, i) {
  var s;
  let o = n;
  for (let u = 0; u < i; u++)
    o += r.child(u).nodeSize;
  const a = [];
  let l = i > 0 ? -1 : 0;
  K_(e, r, i + l) && (l = i == 0 || i == e.height ? null : 0);
  for (let u = 0, c = e.width * i; u < e.width; u++, c++)
    if (i > 0 && i < e.height && e.map[c] == e.map[c - e.width]) {
      const d = e.map[c], f = r.nodeAt(d).attrs;
      t.setNodeMarkup(n + d, null, {
        ...f,
        rowspan: f.rowspan + 1
      }), u += f.colspan - 1;
    } else {
      const d = l == null ? tt(r.type.schema).cell : (s = r.nodeAt(e.map[c + l * e.width])) == null ? void 0 : s.type, f = d == null ? void 0 : d.createAndFill();
      f && a.push(f);
    }
  return t.insert(o, tt(r.type.schema).row.create(null, a)), t;
}
function W_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t);
    e(eg(t.tr, n, n.top));
  }
  return !0;
}
function j_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t);
    e(eg(t.tr, n, n.bottom));
  }
  return !0;
}
function G_(t, { map: e, table: n, tableStart: r }, i) {
  let s = 0;
  for (let u = 0; u < i; u++)
    s += n.child(u).nodeSize;
  const o = s + n.child(i).nodeSize, a = t.mapping.maps.length;
  t.delete(s + r, o + r);
  const l = /* @__PURE__ */ new Set();
  for (let u = 0, c = i * e.width; u < e.width; u++, c++) {
    const d = e.map[c];
    if (!l.has(d)) {
      if (l.add(d), i > 0 && d == e.map[c - e.width]) {
        const f = n.nodeAt(d).attrs;
        t.setNodeMarkup(t.mapping.slice(a).map(d + r), null, {
          ...f,
          rowspan: f.rowspan - 1
        }), u += f.colspan - 1;
      } else if (i < e.height && d == e.map[c + e.width]) {
        const f = n.nodeAt(d), h = f.attrs, p = f.type.create(
          { ...h, rowspan: f.attrs.rowspan - 1 },
          f.content
        ), g = e.positionAt(i + 1, u, n);
        t.insert(t.mapping.slice(a).map(r + g), p), u += h.colspan - 1;
      }
    }
  }
}
function J_(t, e) {
  if (!Vt(t))
    return !1;
  if (e) {
    const n = an(t), r = t.tr;
    if (n.top == 0 && n.bottom == n.map.height)
      return !1;
    for (let i = n.bottom - 1; G_(r, n, i), i != n.top; i--) {
      const s = n.tableStart ? r.doc.nodeAt(n.tableStart - 1) : r.doc;
      if (!s)
        throw RangeError("No table found");
      n.table = s, n.map = Ne.get(n.table);
    }
    e(r);
  }
  return !0;
}
function Jf(t) {
  const e = t.content;
  return e.childCount == 1 && e.child(0).isTextblock && e.child(0).childCount == 0;
}
function Y_({ width: t, height: e, map: n }, r) {
  let i = r.top * t + r.left, s = i, o = (r.bottom - 1) * t + r.left, a = i + (r.right - r.left - 1);
  for (let l = r.top; l < r.bottom; l++) {
    if (r.left > 0 && n[s] == n[s - 1] || r.right < t && n[a] == n[a + 1])
      return !0;
    s += t, a += t;
  }
  for (let l = r.left; l < r.right; l++) {
    if (r.top > 0 && n[i] == n[i - t] || r.bottom < e && n[o] == n[o + t])
      return !0;
    i++, o++;
  }
  return !1;
}
function Yf(t, e) {
  const n = t.selection;
  if (!(n instanceof Ce) || n.$anchorCell.pos == n.$headCell.pos)
    return !1;
  const r = an(t), { map: i } = r;
  if (Y_(i, r))
    return !1;
  if (e) {
    const s = t.tr, o = {};
    let a = O.empty, l, u;
    for (let c = r.top; c < r.bottom; c++)
      for (let d = r.left; d < r.right; d++) {
        const f = i.map[c * i.width + d], h = r.table.nodeAt(f);
        if (!(o[f] || !h))
          if (o[f] = !0, l == null)
            l = f, u = h;
          else {
            Jf(h) || (a = a.append(h.content));
            const p = s.mapping.map(f + r.tableStart);
            s.delete(p, p + h.nodeSize);
          }
      }
    if (l == null || u == null)
      return !0;
    if (s.setNodeMarkup(l + r.tableStart, null, {
      ...W1(
        u.attrs,
        u.attrs.colspan,
        r.right - r.left - u.attrs.colspan
      ),
      rowspan: r.bottom - r.top
    }), a.size) {
      const c = l + 1 + u.content.size, d = Jf(u) ? l + 1 : c;
      s.replaceWith(d + r.tableStart, c + r.tableStart, a);
    }
    s.setSelection(
      new Ce(s.doc.resolve(l + r.tableStart))
    ), e(s);
  }
  return !0;
}
function Xf(t, e) {
  const n = tt(t.schema);
  return X_(({ node: r }) => n[r.type.spec.tableRole])(t, e);
}
function X_(t) {
  return (e, n) => {
    var r;
    const i = e.selection;
    let s, o;
    if (i instanceof Ce) {
      if (i.$anchorCell.pos != i.$headCell.pos)
        return !1;
      s = i.$anchorCell.nodeAfter, o = i.$anchorCell.pos;
    } else {
      if (s = d_(i.$from), !s)
        return !1;
      o = (r = bi(i.$from)) == null ? void 0 : r.pos;
    }
    if (s == null || o == null || s.attrs.colspan == 1 && s.attrs.rowspan == 1)
      return !1;
    if (n) {
      let a = s.attrs;
      const l = [], u = a.colwidth;
      a.rowspan > 1 && (a = { ...a, rowspan: 1 }), a.colspan > 1 && (a = { ...a, colspan: 1 });
      const c = an(e), d = e.tr;
      for (let h = 0; h < c.right - c.left; h++)
        l.push(
          u ? {
            ...a,
            colwidth: u && u[h] ? [u[h]] : null
          } : a
        );
      let f;
      for (let h = c.top; h < c.bottom; h++) {
        let p = c.map.positionAt(h, c.left, c.table);
        h == c.top && (p += s.nodeSize);
        for (let g = c.left, m = 0; g < c.right; g++, m++)
          g == c.left && h == c.top || d.insert(
            f = d.mapping.map(p + c.tableStart, 1),
            t({ node: s, row: h, col: g }).createAndFill(l[m])
          );
      }
      d.setNodeMarkup(
        o,
        t({ node: s, row: c.top, col: c.left }),
        l[0]
      ), i instanceof Ce && d.setSelection(
        new Ce(
          d.doc.resolve(i.$anchorCell.pos),
          f ? d.doc.resolve(f) : void 0
        )
      ), n(d);
    }
    return !0;
  };
}
function Q_(t, e) {
  return function(n, r) {
    if (!Vt(n))
      return !1;
    const i = Ma(n);
    if (i.nodeAfter.attrs[t] === e)
      return !1;
    if (r) {
      const s = n.tr;
      n.selection instanceof Ce ? n.selection.forEachCell((o, a) => {
        o.attrs[t] !== e && s.setNodeMarkup(a, null, {
          ...o.attrs,
          [t]: e
        });
      }) : s.setNodeMarkup(i.pos, null, {
        ...i.nodeAfter.attrs,
        [t]: e
      }), r(s);
    }
    return !0;
  };
}
function ew(t) {
  return function(e, n) {
    if (!Vt(e))
      return !1;
    if (n) {
      const r = tt(e.schema), i = an(e), s = e.tr, o = i.map.cellsInRect(
        t == "column" ? {
          left: i.left,
          top: 0,
          right: i.right,
          bottom: i.map.height
        } : t == "row" ? {
          left: 0,
          top: i.top,
          right: i.map.width,
          bottom: i.bottom
        } : i
      ), a = o.map((l) => i.table.nodeAt(l));
      for (let l = 0; l < o.length; l++)
        a[l].type == r.header_cell && s.setNodeMarkup(
          i.tableStart + o[l],
          r.cell,
          a[l].attrs
        );
      if (s.steps.length == 0)
        for (let l = 0; l < o.length; l++)
          s.setNodeMarkup(
            i.tableStart + o[l],
            r.header_cell,
            a[l].attrs
          );
      n(s);
    }
    return !0;
  };
}
function Qf(t, e, n) {
  const r = e.map.cellsInRect({
    left: 0,
    top: 0,
    right: t == "row" ? e.map.width : 1,
    bottom: t == "column" ? e.map.height : 1
  });
  for (let i = 0; i < r.length; i++) {
    const s = e.table.nodeAt(r[i]);
    if (s && s.type !== n.header_cell)
      return !1;
  }
  return !0;
}
function Xi(t, e) {
  return e = e || { useDeprecatedLogic: !1 }, e.useDeprecatedLogic ? ew(t) : function(n, r) {
    if (!Vt(n))
      return !1;
    if (r) {
      const i = tt(n.schema), s = an(n), o = n.tr, a = Qf("row", s, i), l = Qf(
        "column",
        s,
        i
      ), c = (t === "column" ? a : t === "row" ? l : !1) ? 1 : 0, d = t == "column" ? {
        left: 0,
        top: c,
        right: 1,
        bottom: s.map.height
      } : t == "row" ? {
        left: c,
        top: 0,
        right: s.map.width,
        bottom: 1
      } : s, f = t == "column" ? l ? i.cell : i.header_cell : t == "row" ? a ? i.cell : i.header_cell : i.cell;
      s.map.cellsInRect(d).forEach((h) => {
        const p = h + s.tableStart, g = o.doc.nodeAt(p);
        g && o.setNodeMarkup(p, f, g.attrs);
      }), r(o);
    }
    return !0;
  };
}
Xi("row", {
  useDeprecatedLogic: !0
});
Xi("column", {
  useDeprecatedLogic: !0
});
var tw = Xi("cell", {
  useDeprecatedLogic: !0
});
function nw(t, e) {
  if (e < 0) {
    const n = t.nodeBefore;
    if (n)
      return t.pos - n.nodeSize;
    for (let r = t.index(-1) - 1, i = t.before(); r >= 0; r--) {
      const s = t.node(-1).child(r), o = s.lastChild;
      if (o)
        return i - 1 - o.nodeSize;
      i -= s.nodeSize;
    }
  } else {
    if (t.index() < t.parent.childCount - 1)
      return t.pos + t.nodeAfter.nodeSize;
    const n = t.node(-1);
    for (let r = t.indexAfter(-1), i = t.after(); r < n.childCount; r++) {
      const s = n.child(r);
      if (s.childCount)
        return i + 1;
      i += s.nodeSize;
    }
  }
  return null;
}
function eh(t) {
  return function(e, n) {
    if (!Vt(e))
      return !1;
    const r = nw(Ma(e), t);
    if (r == null)
      return !1;
    if (n) {
      const i = e.doc.resolve(r);
      n(
        e.tr.setSelection(X.between(i, h_(i))).scrollIntoView()
      );
    }
    return !0;
  };
}
function rw(t, e) {
  const n = t.selection.$anchor;
  for (let r = n.depth; r > 0; r--)
    if (n.node(r).type.spec.tableRole == "table")
      return e && e(
        t.tr.delete(n.before(r), n.after(r)).scrollIntoView()
      ), !0;
  return !1;
}
function iw({
  allowTableNodeSelection: t = !1
} = {}) {
  return new we({
    key: Dn,
    // This piece of state is used to remember when a mouse-drag
    // cell-selection is happening, so that it can continue even as
    // transactions (which might move its anchor cell) come in.
    state: {
      init() {
        return null;
      },
      apply(e, n) {
        const r = e.getMeta(Dn);
        if (r != null)
          return r == -1 ? null : r;
        if (n == null || !e.docChanged)
          return n;
        const { deleted: i, pos: s } = e.mapping.mapResult(n);
        return i ? null : s;
      }
    },
    props: {
      decorations: m_,
      handleDOMEvents: {
        mousedown: T_
      },
      createSelectionBetween(e) {
        return Dn.getState(e.state) != null ? e.state.selection : null;
      },
      handleTripleClick: A_,
      handleKeyDown: S_,
      handlePaste: M_
    },
    appendTransaction(e, n, r) {
      return x_(
        r,
        J1(r, n),
        t
      );
    }
  });
}
function th(t, e, n, r, i, s) {
  let o = 0, a = !0, l = e.firstChild;
  const u = t.firstChild;
  for (let c = 0, d = 0; c < u.childCount; c += 1) {
    const { colspan: f, colwidth: h } = u.child(c).attrs;
    for (let p = 0; p < f; p += 1, d += 1) {
      const g = i === d ? s : h && h[p], m = g ? `${g}px` : "";
      o += g || r, g || (a = !1), l ? (l.style.width !== m && (l.style.width = m), l = l.nextSibling) : e.appendChild(document.createElement("col")).style.width = m;
    }
  }
  for (; l; ) {
    const c = l.nextSibling;
    l.parentNode.removeChild(l), l = c;
  }
  a ? (n.style.width = `${o}px`, n.style.minWidth = "") : (n.style.width = "", n.style.minWidth = `${o}px`);
}
class sw {
  constructor(e, n) {
    this.node = e, this.cellMinWidth = n, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), th(e, this.colgroup, this.table, n), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(e) {
    return e.type !== this.node.type ? !1 : (this.node = e, th(e, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(e) {
    return e.type === "attributes" && (e.target === this.table || this.colgroup.contains(e.target));
  }
}
function ow(t, e, n, r) {
  let i = 0, s = !0;
  const o = [], a = t.firstChild;
  if (!a)
    return {};
  for (let d = 0, f = 0; d < a.childCount; d += 1) {
    const { colspan: h, colwidth: p } = a.child(d).attrs;
    for (let g = 0; g < h; g += 1, f += 1) {
      const m = n === f ? r : p && p[g], y = m ? `${m}px` : "";
      i += m || e, m || (s = !1), o.push(["col", y ? { style: `width: ${y}` } : {}]);
    }
  }
  const l = s ? `${i}px` : "", u = s ? "" : `${i}px`;
  return { colgroup: ["colgroup", {}, ...o], tableWidth: l, tableMinWidth: u };
}
function nh(t, e) {
  return e ? t.createChecked(null, e) : t.createAndFill();
}
function aw(t) {
  if (t.cached.tableNodeTypes)
    return t.cached.tableNodeTypes;
  const e = {};
  return Object.keys(t.nodes).forEach((n) => {
    const r = t.nodes[n];
    r.spec.tableRole && (e[r.spec.tableRole] = r);
  }), t.cached.tableNodeTypes = e, e;
}
function lw(t, e, n, r, i) {
  const s = aw(t), o = [], a = [];
  for (let u = 0; u < n; u += 1) {
    const c = nh(s.cell, i);
    if (c && a.push(c), r) {
      const d = nh(s.header_cell, i);
      d && o.push(d);
    }
  }
  const l = [];
  for (let u = 0; u < e; u += 1)
    l.push(s.row.createChecked(null, r && u === 0 ? o : a));
  return s.table.createChecked(null, l);
}
function uw(t) {
  return t instanceof Ce;
}
const Us = ({ editor: t }) => {
  const { selection: e } = t.state;
  if (!uw(e))
    return !1;
  let n = 0;
  const r = Q0(e.ranges[0].$from, (s) => s.type.name === "table");
  return r == null || r.node.descendants((s) => {
    if (s.type.name === "table")
      return !1;
    ["tableCell", "tableHeader"].includes(s.type.name) && (n += 1);
  }), n === e.ranges.length ? (t.commands.deleteTable(), !0) : !1;
}, cw = ue.create({
  name: "table",
  // @ts-ignore
  addOptions() {
    return {
      HTMLAttributes: {},
      resizable: !1,
      handleWidth: 5,
      cellMinWidth: 25,
      // TODO: fix
      View: sw,
      lastColumnResizable: !0,
      allowTableNodeSelection: !1
    };
  },
  content: "tableRow+",
  tableRole: "table",
  isolating: !0,
  group: "block",
  parseHTML() {
    return [{ tag: "table" }];
  },
  renderHTML({ node: t, HTMLAttributes: e }) {
    const { colgroup: n, tableWidth: r, tableMinWidth: i } = ow(t, this.options.cellMinWidth);
    return [
      "table",
      le(this.options.HTMLAttributes, e, {
        style: r ? `width: ${r}` : `minWidth: ${i}`
      }),
      n,
      ["tbody", 0]
    ];
  },
  addCommands() {
    return {
      insertTable: ({ rows: t = 3, cols: e = 3, withHeaderRow: n = !0 } = {}) => ({ tr: r, dispatch: i, editor: s }) => {
        const o = lw(s.schema, t, e, n);
        if (i) {
          const a = r.selection.anchor + 1;
          r.replaceSelectionWith(o).scrollIntoView().setSelection(X.near(r.doc.resolve(a)));
        }
        return !0;
      },
      addColumnBefore: () => ({ state: t, dispatch: e }) => V_(t, e),
      addColumnAfter: () => ({ state: t, dispatch: e }) => U_(t, e),
      deleteColumn: () => ({ state: t, dispatch: e }) => Z_(t, e),
      addRowBefore: () => ({ state: t, dispatch: e }) => W_(t, e),
      addRowAfter: () => ({ state: t, dispatch: e }) => j_(t, e),
      deleteRow: () => ({ state: t, dispatch: e }) => J_(t, e),
      deleteTable: () => ({ state: t, dispatch: e }) => rw(t, e),
      mergeCells: () => ({ state: t, dispatch: e }) => Yf(t, e),
      splitCell: () => ({ state: t, dispatch: e }) => Xf(t, e),
      toggleHeaderColumn: () => ({ state: t, dispatch: e }) => Xi("column")(t, e),
      toggleHeaderRow: () => ({ state: t, dispatch: e }) => Xi("row")(t, e),
      toggleHeaderCell: () => ({ state: t, dispatch: e }) => tw(t, e),
      mergeOrSplit: () => ({ state: t, dispatch: e }) => Yf(t, e) ? !0 : Xf(t, e),
      setCellAttribute: (t, e) => ({ state: n, dispatch: r }) => Q_(t, e)(n, r),
      goToNextCell: () => ({ state: t, dispatch: e }) => eh(1)(t, e),
      goToPreviousCell: () => ({ state: t, dispatch: e }) => eh(-1)(t, e),
      fixTables: () => ({ state: t, dispatch: e }) => (e && J1(t), !0),
      setCellSelection: (t) => ({ tr: e, dispatch: n }) => {
        if (n) {
          const r = Ce.create(e.doc, t.anchorCell, t.headCell);
          e.setSelection(r);
        }
        return !0;
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.goToNextCell() ? !0 : this.editor.can().addRowAfter() ? this.editor.chain().addRowAfter().goToNextCell().run() : !1,
      "Shift-Tab": () => this.editor.commands.goToPreviousCell(),
      Backspace: Us,
      "Mod-Backspace": Us,
      Delete: Us,
      "Mod-Delete": Us
    };
  },
  addProseMirrorPlugins() {
    return [
      ...this.options.resizable && this.editor.isEditable ? [
        O_({
          handleWidth: this.options.handleWidth,
          cellMinWidth: this.options.cellMinWidth,
          // @ts-ignore (incorrect type)
          View: this.options.View,
          // TODO: PR for @types/prosemirror-tables
          // @ts-ignore (incorrect type)
          lastColumnResizable: this.options.lastColumnResizable
        })
      ] : [],
      iw({
        allowTableNodeSelection: this.options.allowTableNodeSelection
      })
    ];
  },
  extendNodeSchema(t) {
    const e = {
      name: t.name,
      options: t.options,
      storage: t.storage
    };
    return {
      tableRole: oe(Z(t, "tableRole", e))
    };
  }
}), dw = ue.create({
  name: "tableRow",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "(tableCell | tableHeader)*",
  tableRole: "row",
  parseHTML() {
    return [
      { tag: "tr" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["tr", le(this.options.HTMLAttributes, t), 0];
  }
}), fw = ue.create({
  name: "tableHeader",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (t) => {
          const e = t.getAttribute("colwidth");
          return e ? [parseInt(e, 10)] : null;
        }
      }
    };
  },
  tableRole: "header_cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "th" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["th", le(this.options.HTMLAttributes, t), 0];
  }
}), hw = ue.create({
  name: "tableCell",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (t) => {
          const e = t.getAttribute("colwidth");
          return e ? [parseInt(e, 10)] : null;
        }
      }
    };
  },
  tableRole: "cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "td" }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["td", le(this.options.HTMLAttributes, t), 0];
  }
}), pw = xe.create({
  name: "characterCount",
  addOptions() {
    return {
      limit: null,
      mode: "textSize"
    };
  },
  addStorage() {
    return {
      characters: () => 0,
      words: () => 0
    };
  },
  onBeforeCreate() {
    this.storage.characters = (t) => {
      const e = (t == null ? void 0 : t.node) || this.editor.state.doc;
      return ((t == null ? void 0 : t.mode) || this.options.mode) === "textSize" ? e.textBetween(0, e.content.size, void 0, " ").length : e.nodeSize;
    }, this.storage.words = (t) => {
      const e = (t == null ? void 0 : t.node) || this.editor.state.doc;
      return e.textBetween(0, e.content.size, " ", " ").split(" ").filter((i) => i !== "").length;
    };
  },
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("characterCount"),
        filterTransaction: (t, e) => {
          const n = this.options.limit;
          if (!t.docChanged || n === 0 || n === null || n === void 0)
            return !0;
          const r = this.storage.characters({ node: e.doc }), i = this.storage.characters({ node: t.doc });
          if (i <= n || r > n && i > n && i <= r)
            return !0;
          if (r > n && i > n && i > r || !t.getMeta("paste"))
            return !1;
          const o = t.selection.$head.pos, a = i - n, l = o - a, u = o;
          return t.deleteRange(l, u), !(this.storage.characters({ node: t.doc }) > n);
        }
      })
    ];
  }
}), gw = "aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2", mw = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2", ui = (t, e) => {
  for (const n in e)
    t[n] = e[n];
  return t;
}, Au = "numeric", Mu = "ascii", Tu = "alpha", co = "asciinumeric", qs = "alphanumeric", Du = "domain", tg = "emoji", bw = "scheme", yw = "slashscheme", rh = "whitespace";
function xw(t, e) {
  return t in e || (e[t] = []), e[t];
}
function or(t, e, n) {
  e[Au] && (e[co] = !0, e[qs] = !0), e[Mu] && (e[co] = !0, e[Tu] = !0), e[co] && (e[qs] = !0), e[Tu] && (e[qs] = !0), e[qs] && (e[Du] = !0), e[tg] && (e[Du] = !0);
  for (const r in e) {
    const i = xw(r, n);
    i.indexOf(t) < 0 && i.push(t);
  }
}
function kw(t, e) {
  const n = {};
  for (const r in e)
    e[r].indexOf(t) >= 0 && (n[r] = !0);
  return n;
}
function ft(t) {
  t === void 0 && (t = null), this.j = {}, this.jr = [], this.jd = null, this.t = t;
}
ft.groups = {};
ft.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(t) {
    const e = this, n = e.j[t];
    if (n)
      return n;
    for (let r = 0; r < e.jr.length; r++) {
      const i = e.jr[r][0], s = e.jr[r][1];
      if (s && i.test(t))
        return s;
    }
    return e.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(t, e) {
    return e === void 0 && (e = !1), e ? t in this.j : !!this.go(t);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(t, e, n, r) {
    for (let i = 0; i < t.length; i++)
      this.tt(t[i], e, n, r);
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(t, e, n, r) {
    r = r || ft.groups;
    let i;
    return e && e.j ? i = e : (i = new ft(e), n && r && or(e, n, r)), this.jr.push([t, i]), i;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(t, e, n, r) {
    let i = this;
    const s = t.length;
    if (!s)
      return i;
    for (let o = 0; o < s - 1; o++)
      i = i.tt(t[o]);
    return i.tt(t[s - 1], e, n, r);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(t, e, n, r) {
    r = r || ft.groups;
    const i = this;
    if (e && e.j)
      return i.j[t] = e, e;
    const s = e;
    let o, a = i.go(t);
    if (a ? (o = new ft(), ui(o.j, a.j), o.jr.push.apply(o.jr, a.jr), o.jd = a.jd, o.t = a.t) : o = new ft(), s) {
      if (r)
        if (o.t && typeof o.t == "string") {
          const l = ui(kw(o.t, r), n);
          or(s, l, r);
        } else
          n && or(s, n, r);
      o.t = s;
    }
    return i.j[t] = o, o;
  }
};
const Y = (t, e, n, r, i) => t.ta(e, n, r, i), Tt = (t, e, n, r, i) => t.tr(e, n, r, i), ih = (t, e, n, r, i) => t.ts(e, n, r, i), I = (t, e, n, r, i) => t.tt(e, n, r, i), gn = "WORD", Ou = "UWORD", Qi = "LOCALHOST", Nu = "TLD", Lu = "UTLD", fo = "SCHEME", zr = "SLASH_SCHEME", vc = "NUM", ng = "WS", Ec = "NL", Kr = "OPENBRACE", Hi = "OPENBRACKET", Bi = "OPENANGLEBRACKET", Pi = "OPENPAREN", nr = "CLOSEBRACE", Wr = "CLOSEBRACKET", jr = "CLOSEANGLEBRACKET", rr = "CLOSEPAREN", Io = "AMPERSAND", Fo = "APOSTROPHE", Ho = "ASTERISK", An = "AT", Bo = "BACKSLASH", Po = "BACKTICK", $o = "CARET", On = "COLON", Cc = "COMMA", zo = "DOLLAR", Kt = "DOT", Vo = "EQUALS", _c = "EXCLAMATION", Wt = "HYPHEN", Uo = "PERCENT", qo = "PIPE", Zo = "PLUS", Ko = "POUND", Wo = "QUERY", wc = "QUOTE", Sc = "SEMI", jt = "SLASH", $i = "TILDE", jo = "UNDERSCORE", rg = "EMOJI", Go = "SYM";
var ig = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  WORD: gn,
  UWORD: Ou,
  LOCALHOST: Qi,
  TLD: Nu,
  UTLD: Lu,
  SCHEME: fo,
  SLASH_SCHEME: zr,
  NUM: vc,
  WS: ng,
  NL: Ec,
  OPENBRACE: Kr,
  OPENBRACKET: Hi,
  OPENANGLEBRACKET: Bi,
  OPENPAREN: Pi,
  CLOSEBRACE: nr,
  CLOSEBRACKET: Wr,
  CLOSEANGLEBRACKET: jr,
  CLOSEPAREN: rr,
  AMPERSAND: Io,
  APOSTROPHE: Fo,
  ASTERISK: Ho,
  AT: An,
  BACKSLASH: Bo,
  BACKTICK: Po,
  CARET: $o,
  COLON: On,
  COMMA: Cc,
  DOLLAR: zo,
  DOT: Kt,
  EQUALS: Vo,
  EXCLAMATION: _c,
  HYPHEN: Wt,
  PERCENT: Uo,
  PIPE: qo,
  PLUS: Zo,
  POUND: Ko,
  QUERY: Wo,
  QUOTE: wc,
  SEMI: Sc,
  SLASH: jt,
  TILDE: $i,
  UNDERSCORE: jo,
  EMOJI: rg,
  SYM: Go
});
const Lr = /[a-z]/, wl = /\p{L}/u, Sl = /\p{Emoji}/u, Al = /\d/, sh = /\s/, oh = `
`, vw = "️", Ew = "‍";
let Zs = null, Ks = null;
function Cw(t) {
  t === void 0 && (t = []);
  const e = {};
  ft.groups = e;
  const n = new ft();
  Zs == null && (Zs = ah(gw)), Ks == null && (Ks = ah(mw)), I(n, "'", Fo), I(n, "{", Kr), I(n, "[", Hi), I(n, "<", Bi), I(n, "(", Pi), I(n, "}", nr), I(n, "]", Wr), I(n, ">", jr), I(n, ")", rr), I(n, "&", Io), I(n, "*", Ho), I(n, "@", An), I(n, "`", Po), I(n, "^", $o), I(n, ":", On), I(n, ",", Cc), I(n, "$", zo), I(n, ".", Kt), I(n, "=", Vo), I(n, "!", _c), I(n, "-", Wt), I(n, "%", Uo), I(n, "|", qo), I(n, "+", Zo), I(n, "#", Ko), I(n, "?", Wo), I(n, '"', wc), I(n, "/", jt), I(n, ";", Sc), I(n, "~", $i), I(n, "_", jo), I(n, "\\", Bo);
  const r = Tt(n, Al, vc, {
    [Au]: !0
  });
  Tt(r, Al, r);
  const i = Tt(n, Lr, gn, {
    [Mu]: !0
  });
  Tt(i, Lr, i);
  const s = Tt(n, wl, Ou, {
    [Tu]: !0
  });
  Tt(s, Lr), Tt(s, wl, s);
  const o = Tt(n, sh, ng, {
    [rh]: !0
  });
  I(n, oh, Ec, {
    [rh]: !0
  }), I(o, oh), Tt(o, sh, o);
  const a = Tt(n, Sl, rg, {
    [tg]: !0
  });
  Tt(a, Sl, a), I(a, vw, a);
  const l = I(a, Ew);
  Tt(l, Sl, a);
  const u = [[Lr, i]], c = [[Lr, null], [wl, s]];
  for (let d = 0; d < Zs.length; d++)
    Cn(n, Zs[d], Nu, gn, u);
  for (let d = 0; d < Ks.length; d++)
    Cn(n, Ks[d], Lu, Ou, c);
  or(Nu, {
    tld: !0,
    ascii: !0
  }, e), or(Lu, {
    utld: !0,
    alpha: !0
  }, e), Cn(n, "file", fo, gn, u), Cn(n, "mailto", fo, gn, u), Cn(n, "http", zr, gn, u), Cn(n, "https", zr, gn, u), Cn(n, "ftp", zr, gn, u), Cn(n, "ftps", zr, gn, u), or(fo, {
    scheme: !0,
    ascii: !0
  }, e), or(zr, {
    slashscheme: !0,
    ascii: !0
  }, e), t = t.sort((d, f) => d[0] > f[0] ? 1 : -1);
  for (let d = 0; d < t.length; d++) {
    const f = t[d][0], p = t[d][1] ? {
      [bw]: !0
    } : {
      [yw]: !0
    };
    f.indexOf("-") >= 0 ? p[Du] = !0 : Lr.test(f) ? Al.test(f) ? p[co] = !0 : p[Mu] = !0 : p[Au] = !0, ih(n, f, f, p);
  }
  return ih(n, "localhost", Qi, {
    ascii: !0
  }), n.jd = new ft(Go), {
    start: n,
    tokens: ui({
      groups: e
    }, ig)
  };
}
function _w(t, e) {
  const n = ww(e.replace(/[A-Z]/g, (a) => a.toLowerCase())), r = n.length, i = [];
  let s = 0, o = 0;
  for (; o < r; ) {
    let a = t, l = null, u = 0, c = null, d = -1, f = -1;
    for (; o < r && (l = a.go(n[o])); )
      a = l, a.accepts() ? (d = 0, f = 0, c = a) : d >= 0 && (d += n[o].length, f++), u += n[o].length, s += n[o].length, o++;
    s -= d, o -= f, u -= d, i.push({
      t: c.t,
      // token type/name
      v: e.slice(s - u, s),
      // string value
      s: s - u,
      // start index
      e: s
      // end index (excluding)
    });
  }
  return i;
}
function ww(t) {
  const e = [], n = t.length;
  let r = 0;
  for (; r < n; ) {
    let i = t.charCodeAt(r), s, o = i < 55296 || i > 56319 || r + 1 === n || (s = t.charCodeAt(r + 1)) < 56320 || s > 57343 ? t[r] : t.slice(r, r + 2);
    e.push(o), r += o.length;
  }
  return e;
}
function Cn(t, e, n, r, i) {
  let s;
  const o = e.length;
  for (let a = 0; a < o - 1; a++) {
    const l = e[a];
    t.j[l] ? s = t.j[l] : (s = new ft(r), s.jr = i.slice(), t.j[l] = s), t = s;
  }
  return s = new ft(n), s.jr = i.slice(), t.j[e[o - 1]] = s, s;
}
function ah(t) {
  const e = [], n = [];
  let r = 0, i = "0123456789";
  for (; r < t.length; ) {
    let s = 0;
    for (; i.indexOf(t[r + s]) >= 0; )
      s++;
    if (s > 0) {
      e.push(n.join(""));
      for (let o = parseInt(t.substring(r, r + s), 10); o > 0; o--)
        n.pop();
      r += s;
    } else
      n.push(t[r]), r++;
  }
  return e;
}
const es = {
  defaultProtocol: "http",
  events: null,
  format: lh,
  formatHref: lh,
  nl2br: !1,
  tagName: "a",
  target: null,
  rel: null,
  validate: !0,
  truncate: 1 / 0,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Ac(t, e) {
  e === void 0 && (e = null);
  let n = ui({}, es);
  t && (n = ui(n, t instanceof Ac ? t.o : t));
  const r = n.ignoreTags, i = [];
  for (let s = 0; s < r.length; s++)
    i.push(r[s].toUpperCase());
  this.o = n, e && (this.defaultRender = e), this.ignoreTags = i;
}
Ac.prototype = {
  o: es,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(t) {
    return t;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(t) {
    return this.get("validate", t.toString(), t);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(t, e, n) {
    const r = e != null;
    let i = this.o[t];
    return i && (typeof i == "object" ? (i = n.t in i ? i[n.t] : es[t], typeof i == "function" && r && (i = i(e, n))) : typeof i == "function" && r && (i = i(e, n.t, n)), i);
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(t, e, n) {
    let r = this.o[t];
    return typeof r == "function" && e != null && (r = r(e, n.t, n)), r;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(t) {
    const e = t.render(this);
    return (this.get("render", null, t) || this.defaultRender)(e, t.t, t);
  }
};
function lh(t) {
  return t;
}
function sg(t, e) {
  this.t = "token", this.v = t, this.tk = e;
}
sg.prototype = {
  isLink: !1,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
  */
  toHref(t) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(t) {
    const e = this.toString(), n = t.get("truncate", e, this), r = t.get("format", e, this);
    return n && r.length > n ? r.substring(0, n) + "…" : r;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(t) {
    return t.get("formatHref", this.toHref(t.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(t) {
    return t === void 0 && (t = es.defaultProtocol), {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(t),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(t) {
    return {
      type: this.t,
      value: this.toFormattedString(t),
      isLink: this.isLink,
      href: this.toFormattedHref(t),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(t) {
    return t.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(t) {
    const e = this, n = this.toHref(t.get("defaultProtocol")), r = t.get("formatHref", n, this), i = t.get("tagName", n, e), s = this.toFormattedString(t), o = {}, a = t.get("className", n, e), l = t.get("target", n, e), u = t.get("rel", n, e), c = t.getObj("attributes", n, e), d = t.getObj("events", n, e);
    return o.href = r, a && (o.class = a), l && (o.target = l), u && (o.rel = u), c && ui(o, c), {
      tagName: i,
      attributes: o,
      content: s,
      eventListeners: d
    };
  }
};
function Ta(t, e) {
  class n extends sg {
    constructor(i, s) {
      super(i, s), this.t = t;
    }
  }
  for (const r in e)
    n.prototype[r] = e[r];
  return n.t = t, n;
}
const uh = Ta("email", {
  isLink: !0,
  toHref() {
    return "mailto:" + this.toString();
  }
}), ch = Ta("text"), Sw = Ta("nl"), Xn = Ta("url", {
  isLink: !0,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(t) {
    return t === void 0 && (t = es.defaultProtocol), this.hasProtocol() ? this.v : `${t}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const t = this.tk;
    return t.length >= 2 && t[0].t !== Qi && t[1].t === On;
  }
}), Pe = (t) => new ft(t);
function Aw(t) {
  let {
    groups: e
  } = t;
  const n = e.domain.concat([Io, Ho, An, Bo, Po, $o, zo, Vo, Wt, vc, Uo, qo, Zo, Ko, jt, Go, $i, jo]), r = [Fo, jr, nr, Wr, rr, On, Cc, Kt, _c, Bi, Kr, Hi, Pi, Wo, wc, Sc], i = [Io, Fo, Ho, Bo, Po, $o, nr, zo, Vo, Wt, Kr, Uo, qo, Zo, Ko, Wo, jt, Go, $i, jo], s = Pe(), o = I(s, $i);
  Y(o, i, o), Y(o, e.domain, o);
  const a = Pe(), l = Pe(), u = Pe();
  Y(s, e.domain, a), Y(s, e.scheme, l), Y(s, e.slashscheme, u), Y(a, i, o), Y(a, e.domain, a);
  const c = I(a, An);
  I(o, An, c), I(l, An, c), I(u, An, c);
  const d = I(o, Kt);
  Y(d, i, o), Y(d, e.domain, o);
  const f = Pe();
  Y(c, e.domain, f), Y(f, e.domain, f);
  const h = I(f, Kt);
  Y(h, e.domain, f);
  const p = Pe(uh);
  Y(h, e.tld, p), Y(h, e.utld, p), I(c, Qi, p);
  const g = I(f, Wt);
  Y(g, e.domain, f), Y(p, e.domain, f), I(p, Kt, h), I(p, Wt, g);
  const m = I(p, On);
  Y(m, e.numeric, uh);
  const y = I(a, Wt), x = I(a, Kt);
  Y(y, e.domain, a), Y(x, i, o), Y(x, e.domain, a);
  const k = Pe(Xn);
  Y(x, e.tld, k), Y(x, e.utld, k), Y(k, e.domain, a), Y(k, i, o), I(k, Kt, x), I(k, Wt, y), I(k, An, c);
  const b = I(k, On), E = Pe(Xn);
  Y(b, e.numeric, E);
  const v = Pe(Xn), _ = Pe();
  Y(v, n, v), Y(v, r, _), Y(_, n, v), Y(_, r, _), I(k, jt, v), I(E, jt, v);
  const T = I(l, On), w = I(u, On), N = I(w, jt), $ = I(N, jt);
  Y(l, e.domain, a), I(l, Kt, x), I(l, Wt, y), Y(u, e.domain, a), I(u, Kt, x), I(u, Wt, y), Y(T, e.domain, v), I(T, jt, v), Y($, e.domain, v), Y($, n, v), I($, jt, v);
  const K = I(v, Kr), U = I(v, Hi), W = I(v, Bi), z = I(v, Pi);
  I(_, Kr, K), I(_, Hi, U), I(_, Bi, W), I(_, Pi, z), I(K, nr, v), I(U, Wr, v), I(W, jr, v), I(z, rr, v), I(K, nr, v);
  const A = Pe(Xn), C = Pe(Xn), S = Pe(Xn), L = Pe(Xn);
  Y(K, n, A), Y(U, n, C), Y(W, n, S), Y(z, n, L);
  const F = Pe(), j = Pe(), Q = Pe(), pe = Pe();
  return Y(K, r), Y(U, r), Y(W, r), Y(z, r), Y(A, n, A), Y(C, n, C), Y(S, n, S), Y(L, n, L), Y(A, r, A), Y(C, r, C), Y(S, r, S), Y(L, r, L), Y(F, n, F), Y(j, n, C), Y(Q, n, S), Y(pe, n, L), Y(F, r, F), Y(j, r, j), Y(Q, r, Q), Y(pe, r, pe), I(C, Wr, v), I(S, jr, v), I(L, rr, v), I(A, nr, v), I(j, Wr, v), I(Q, jr, v), I(pe, rr, v), I(F, rr, v), I(s, Qi, k), I(s, Ec, Sw), {
    start: s,
    tokens: ig
  };
}
function Mw(t, e, n) {
  let r = n.length, i = 0, s = [], o = [];
  for (; i < r; ) {
    let a = t, l = null, u = null, c = 0, d = null, f = -1;
    for (; i < r && !(l = a.go(n[i].t)); )
      o.push(n[i++]);
    for (; i < r && (u = l || a.go(n[i].t)); )
      l = null, a = u, a.accepts() ? (f = 0, d = a) : f >= 0 && f++, i++, c++;
    if (f < 0)
      i -= c, i < r && (o.push(n[i]), i++);
    else {
      o.length > 0 && (s.push(Ml(ch, e, o)), o = []), i -= f, c -= f;
      const h = d.t, p = n.slice(i - c, i);
      s.push(Ml(h, e, p));
    }
  }
  return o.length > 0 && s.push(Ml(ch, e, o)), s;
}
function Ml(t, e, n) {
  const r = n[0].s, i = n[n.length - 1].e, s = e.slice(r, i);
  return new t(s, n);
}
const Tw = typeof console < "u" && console && console.warn || (() => {
}), Dw = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.", Oe = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: !1
};
function Ow() {
  ft.groups = {}, Oe.scanner = null, Oe.parser = null, Oe.tokenQueue = [], Oe.pluginQueue = [], Oe.customSchemes = [], Oe.initialized = !1;
}
function dh(t, e) {
  if (e === void 0 && (e = !1), Oe.initialized && Tw(`linkifyjs: already initialized - will not register custom scheme "${t}" ${Dw}`), !/^[0-9a-z]+(-[0-9a-z]+)*$/.test(t))
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  Oe.customSchemes.push([t, e]);
}
function Nw() {
  Oe.scanner = Cw(Oe.customSchemes);
  for (let t = 0; t < Oe.tokenQueue.length; t++)
    Oe.tokenQueue[t][1]({
      scanner: Oe.scanner
    });
  Oe.parser = Aw(Oe.scanner.tokens);
  for (let t = 0; t < Oe.pluginQueue.length; t++)
    Oe.pluginQueue[t][1]({
      scanner: Oe.scanner,
      parser: Oe.parser
    });
  Oe.initialized = !0;
}
function og(t) {
  return Oe.initialized || Nw(), Mw(Oe.parser.start, t, _w(Oe.scanner.start, t));
}
function ag(t, e, n) {
  if (e === void 0 && (e = null), n === void 0 && (n = null), e && typeof e == "object") {
    if (n)
      throw Error(`linkifyjs: Invalid link type ${e}; must be a string`);
    n = e, e = null;
  }
  const r = new Ac(n), i = og(t), s = [];
  for (let o = 0; o < i.length; o++) {
    const a = i[o];
    a.isLink && (!e || a.t === e) && r.check(a) && s.push(a.toFormattedObject(r));
  }
  return s;
}
function Lw(t) {
  return t.length === 1 ? t[0].isLink : t.length === 3 && t[1].isLink ? ["()", "[]"].includes(t[0].value + t[2].value) : !1;
}
function Rw(t) {
  return new we({
    key: new Te("autolink"),
    appendTransaction: (e, n, r) => {
      const i = e.some((u) => u.docChanged) && !n.doc.eq(r.doc), s = e.some((u) => u.getMeta("preventAutolink"));
      if (!i || s)
        return;
      const { tr: o } = r, a = Qx(n.doc, [...e]);
      if (o3(a).forEach(({ newRange: u }) => {
        const c = t3(r.doc, u, (h) => h.isTextblock);
        let d, f;
        if (c.length > 1 ? (d = c[0], f = r.doc.textBetween(d.pos, d.pos + d.node.nodeSize, void 0, " ")) : c.length && r.doc.textBetween(u.from, u.to, " ", " ").endsWith(" ") && (d = c[0], f = r.doc.textBetween(d.pos, u.to, void 0, " ")), d && f) {
          const h = f.split(" ").filter((y) => y !== "");
          if (h.length <= 0)
            return !1;
          const p = h[h.length - 1], g = d.pos + f.lastIndexOf(p);
          if (!p)
            return !1;
          const m = og(p).map((y) => y.toObject());
          if (!Lw(m))
            return !1;
          m.filter((y) => y.isLink).map((y) => ({
            ...y,
            from: g + y.start + 1,
            to: g + y.end + 1
          })).filter((y) => r.schema.marks.code ? !r.doc.rangeHasMark(y.from, y.to, r.schema.marks.code) : !0).filter((y) => t.validate ? t.validate(y.value) : !0).forEach((y) => {
            oc(y.from, y.to, r.doc).some((x) => x.mark.type === t.type) || o.addMark(y.from, y.to, t.type.create({
              href: y.href
            }));
          });
        }
      }), !!o.steps.length)
        return o;
    }
  });
}
function Iw(t) {
  return new we({
    key: new Te("handleClickLink"),
    props: {
      handleClick: (e, n, r) => {
        var i, s;
        if (t.whenNotEditable && e.editable || r.button !== 0)
          return !1;
        let o = r.target;
        const a = [];
        for (; o.nodeName !== "DIV"; )
          a.push(o), o = o.parentNode;
        if (!a.find((f) => f.nodeName === "A"))
          return !1;
        const l = e1(e.state, t.type.name), u = r.target, c = (i = u == null ? void 0 : u.href) !== null && i !== void 0 ? i : l.href, d = (s = u == null ? void 0 : u.target) !== null && s !== void 0 ? s : l.target;
        return u && c ? (window.open(c, d), !0) : !1;
      }
    }
  });
}
function Fw(t) {
  return new we({
    key: new Te("handlePasteLink"),
    props: {
      handlePaste: (e, n, r) => {
        const { state: i } = e, { selection: s } = i, { empty: o } = s;
        if (o)
          return !1;
        let a = "";
        r.content.forEach((u) => {
          a += u.textContent;
        });
        const l = ag(a).find((u) => u.isLink && u.value === a);
        return !a || !l ? !1 : (t.editor.commands.setMark(t.type, {
          href: l.href
        }), !0);
      }
    }
  });
}
const Hw = Ie.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: !1,
  onCreate() {
    this.options.protocols.forEach((t) => {
      if (typeof t == "string") {
        dh(t);
        return;
      }
      dh(t.scheme, t.optionalSlashes);
    });
  },
  onDestroy() {
    Ow();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: !0,
      linkOnPaste: !0,
      autolink: !0,
      protocols: [],
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      validate: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [{ tag: 'a[href]:not([href *= "javascript:" i])' }];
  },
  renderHTML({ HTMLAttributes: t }) {
    var e;
    return !((e = t.href) === null || e === void 0) && e.startsWith("javascript:") ? ["a", le(this.options.HTMLAttributes, { ...t, href: "" }), 0] : ["a", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setLink: (t) => ({ chain: e }) => e().setMark(this.name, t).setMeta("preventAutolink", !0).run(),
      toggleLink: (t) => ({ chain: e }) => e().toggleMark(this.name, t, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run(),
      unsetLink: () => ({ chain: t }) => t().unsetMark(this.name, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run()
    };
  },
  addPasteRules() {
    return [
      Zn({
        find: (t) => {
          const e = [];
          if (t) {
            const n = ag(t).filter((r) => r.isLink);
            n.length && n.forEach((r) => e.push({
              text: r.value,
              data: {
                href: r.href
              },
              index: r.start
            }));
          }
          return e;
        },
        type: this.type,
        getAttributes: (t) => {
          var e;
          return {
            href: (e = t.data) === null || e === void 0 ? void 0 : e.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const t = [];
    return this.options.autolink && t.push(Rw({
      type: this.type,
      validate: this.options.validate
    })), this.options.openOnClick && t.push(Iw({
      type: this.type,
      whenNotEditable: this.options.openOnClick === "whenNotEditable"
    })), this.options.linkOnPaste && t.push(Fw({
      editor: this.editor,
      type: this.type
    })), t;
  }
}), Bw = Ie.create({
  name: "superscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sup"
      },
      {
        style: "vertical-align",
        getAttrs(t) {
          return t !== "super" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["sup", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setSuperscript: () => ({ commands: t }) => t.setMark(this.name),
      toggleSuperscript: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetSuperscript: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-.": () => this.editor.commands.toggleSuperscript()
    };
  }
}), Pw = Ie.create({
  name: "subscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sub"
      },
      {
        style: "vertical-align",
        getAttrs(t) {
          return t !== "sub" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["sub", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setSubscript: () => ({ commands: t }) => t.setMark(this.name),
      toggleSubscript: () => ({ commands: t }) => t.toggleMark(this.name),
      unsetSubscript: () => ({ commands: t }) => t.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-,": () => this.editor.commands.toggleSubscript()
    };
  }
}), $w = ue.create({
  name: "taskList",
  addOptions() {
    return {
      itemTypeName: "taskItem",
      HTMLAttributes: {}
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      {
        tag: `ul[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["ul", le(this.options.HTMLAttributes, t, { "data-type": this.name }), 0];
  },
  addCommands() {
    return {
      toggleTaskList: () => ({ commands: t }) => t.toggleList(this.name, this.options.itemTypeName)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-9": () => this.editor.commands.toggleTaskList()
    };
  }
}), zw = /^\s*(\[([( |x])?\])\s$/, Vw = ue.create({
  name: "taskItem",
  addOptions() {
    return {
      nested: !1,
      HTMLAttributes: {},
      taskListTypeName: "taskList"
    };
  },
  content() {
    return this.options.nested ? "paragraph block*" : "paragraph+";
  },
  defining: !0,
  addAttributes() {
    return {
      checked: {
        default: !1,
        keepOnSplit: !1,
        parseHTML: (t) => t.getAttribute("data-checked") === "true",
        renderHTML: (t) => ({
          "data-checked": t.checked
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: `li[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ node: t, HTMLAttributes: e }) {
    return [
      "li",
      le(this.options.HTMLAttributes, e, {
        "data-type": this.name
      }),
      [
        "label",
        [
          "input",
          {
            type: "checkbox",
            checked: t.attrs.checked ? "checked" : null
          }
        ],
        ["span"]
      ],
      ["div", 0]
    ];
  },
  addKeyboardShortcuts() {
    const t = {
      Enter: () => this.editor.commands.splitListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
    return this.options.nested ? {
      ...t,
      Tab: () => this.editor.commands.sinkListItem(this.name)
    } : t;
  },
  addNodeView() {
    return ({ node: t, HTMLAttributes: e, getPos: n, editor: r }) => {
      const i = document.createElement("li"), s = document.createElement("label"), o = document.createElement("span"), a = document.createElement("input"), l = document.createElement("div");
      return s.contentEditable = "false", a.type = "checkbox", a.addEventListener("change", (u) => {
        if (!r.isEditable && !this.options.onReadOnlyChecked) {
          a.checked = !a.checked;
          return;
        }
        const { checked: c } = u.target;
        r.isEditable && typeof n == "function" && r.chain().focus(void 0, { scrollIntoView: !1 }).command(({ tr: d }) => {
          const f = n(), h = d.doc.nodeAt(f);
          return d.setNodeMarkup(f, void 0, {
            ...h == null ? void 0 : h.attrs,
            checked: c
          }), !0;
        }).run(), !r.isEditable && this.options.onReadOnlyChecked && (this.options.onReadOnlyChecked(t, c) || (a.checked = !a.checked));
      }), Object.entries(this.options.HTMLAttributes).forEach(([u, c]) => {
        i.setAttribute(u, c);
      }), i.dataset.checked = t.attrs.checked, t.attrs.checked && a.setAttribute("checked", "checked"), s.append(a, o), i.append(s, l), Object.entries(e).forEach(([u, c]) => {
        i.setAttribute(u, c);
      }), {
        dom: i,
        contentDOM: l,
        update: (u) => u.type !== this.type ? !1 : (i.dataset.checked = u.attrs.checked, u.attrs.checked ? a.setAttribute("checked", "checked") : a.removeAttribute("checked"), !0)
      };
    };
  },
  addInputRules() {
    return [
      kr({
        find: zw,
        type: this.type,
        getAttributes: (t) => ({
          checked: t[t.length - 1] === "x"
        })
      })
    ];
  }
});
var Mc = { exports: {} };
function Tc(t) {
  return t instanceof Map ? t.clear = t.delete = t.set = function() {
    throw new Error("map is read-only");
  } : t instanceof Set && (t.add = t.clear = t.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(t), Object.getOwnPropertyNames(t).forEach(function(e) {
    var n = t[e];
    typeof n == "object" && !Object.isFrozen(n) && Tc(n);
  }), t;
}
Mc.exports = Tc;
Mc.exports.default = Tc;
let fh = class {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
};
function lg(t) {
  return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Hn(t, ...e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r in t)
    n[r] = t[r];
  return e.forEach(function(r) {
    for (const i in r)
      n[i] = r[i];
  }), /** @type {T} */
  n;
}
const Uw = "</span>", hh = (t) => !!t.scope || t.sublanguage && t.language, qw = (t, { prefix: e }) => {
  if (t.includes(".")) {
    const n = t.split(".");
    return [
      `${e}${n.shift()}`,
      ...n.map((r, i) => `${r}${"_".repeat(i + 1)}`)
    ].join(" ");
  }
  return `${e}${t}`;
};
let Zw = class {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, n) {
    this.buffer = "", this.classPrefix = n.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += lg(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!hh(e))
      return;
    let n = "";
    e.sublanguage ? n = `language-${e.language}` : n = qw(e.scope, { prefix: this.classPrefix }), this.span(n);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    hh(e) && (this.buffer += Uw);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
};
const ph = (t = {}) => {
  const e = { children: [] };
  return Object.assign(e, t), e;
};
let Kw = class ug {
  constructor() {
    this.rootNode = ph(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const n = ph({ scope: e });
    this.add(n), this.stack.push(n);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, n) {
    return typeof n == "string" ? e.addText(n) : n.children && (e.openNode(n), n.children.forEach((r) => this._walk(e, r)), e.closeNode(n)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((n) => typeof n == "string") ? e.children = [e.children.join("")] : e.children.forEach((n) => {
      ug._collapse(n);
    }));
  }
}, Ww = class extends Kw {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   * @param {string} scope
   */
  addKeyword(e, n) {
    e !== "" && (this.openNode(n), this.addText(e), this.closeNode());
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  addSublanguage(e, n) {
    const r = e.root;
    r.sublanguage = !0, r.language = n, this.add(r);
  }
  toHTML() {
    return new Zw(this, this.options).value();
  }
  finalize() {
    return !0;
  }
};
function ts(t) {
  return t ? typeof t == "string" ? t : t.source : null;
}
function cg(t) {
  return _r("(?=", t, ")");
}
function jw(t) {
  return _r("(?:", t, ")*");
}
function Gw(t) {
  return _r("(?:", t, ")?");
}
function _r(...t) {
  return t.map((n) => ts(n)).join("");
}
function Jw(t) {
  const e = t[t.length - 1];
  return typeof e == "object" && e.constructor === Object ? (t.splice(t.length - 1, 1), e) : {};
}
function Dc(...t) {
  return "(" + (Jw(t).capture ? "" : "?:") + t.map((r) => ts(r)).join("|") + ")";
}
function dg(t) {
  return new RegExp(t.toString() + "|").exec("").length - 1;
}
function Yw(t, e) {
  const n = t && t.exec(e);
  return n && n.index === 0;
}
const Xw = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Oc(t, { joinWith: e }) {
  let n = 0;
  return t.map((r) => {
    n += 1;
    const i = n;
    let s = ts(r), o = "";
    for (; s.length > 0; ) {
      const a = Xw.exec(s);
      if (!a) {
        o += s;
        break;
      }
      o += s.substring(0, a.index), s = s.substring(a.index + a[0].length), a[0][0] === "\\" && a[1] ? o += "\\" + String(Number(a[1]) + i) : (o += a[0], a[0] === "(" && n++);
    }
    return o;
  }).map((r) => `(${r})`).join(e);
}
const Qw = /\b\B/, fg = "[a-zA-Z]\\w*", Nc = "[a-zA-Z_]\\w*", hg = "\\b\\d+(\\.\\d+)?", pg = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", gg = "\\b(0b[01]+)", e4 = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", t4 = (t = {}) => {
  const e = /^#![ ]*\//;
  return t.binary && (t.begin = _r(
    e,
    /.*\b/,
    t.binary,
    /\b.*/
  )), Hn({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (n, r) => {
      n.index !== 0 && r.ignoreMatch();
    }
  }, t);
}, ns = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, n4 = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [ns]
}, r4 = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [ns]
}, i4 = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, Da = function(t, e, n = {}) {
  const r = Hn(
    {
      scope: "comment",
      begin: t,
      end: e,
      contains: []
    },
    n
  );
  r.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const i = Dc(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return r.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: _r(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        i,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), r;
}, s4 = Da("//", "$"), o4 = Da("/\\*", "\\*/"), a4 = Da("#", "$"), l4 = {
  scope: "number",
  begin: hg,
  relevance: 0
}, u4 = {
  scope: "number",
  begin: pg,
  relevance: 0
}, c4 = {
  scope: "number",
  begin: gg,
  relevance: 0
}, d4 = {
  // this outer rule makes sure we actually have a WHOLE regex and not simply
  // an expression such as:
  //
  //     3 / something
  //
  // (which will then blow up when regex's `illegal` sees the newline)
  begin: /(?=\/[^/\n]*\/)/,
  contains: [{
    scope: "regexp",
    begin: /\//,
    end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      ns,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [ns]
      }
    ]
  }]
}, f4 = {
  scope: "title",
  begin: fg,
  relevance: 0
}, h4 = {
  scope: "title",
  begin: Nc,
  relevance: 0
}, p4 = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + Nc,
  relevance: 0
}, g4 = function(t) {
  return Object.assign(
    t,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, n) => {
        n.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, n) => {
        n.data._beginMatch !== e[1] && n.ignoreMatch();
      }
    }
  );
};
var Ws = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  MATCH_NOTHING_RE: Qw,
  IDENT_RE: fg,
  UNDERSCORE_IDENT_RE: Nc,
  NUMBER_RE: hg,
  C_NUMBER_RE: pg,
  BINARY_NUMBER_RE: gg,
  RE_STARTERS_RE: e4,
  SHEBANG: t4,
  BACKSLASH_ESCAPE: ns,
  APOS_STRING_MODE: n4,
  QUOTE_STRING_MODE: r4,
  PHRASAL_WORDS_MODE: i4,
  COMMENT: Da,
  C_LINE_COMMENT_MODE: s4,
  C_BLOCK_COMMENT_MODE: o4,
  HASH_COMMENT_MODE: a4,
  NUMBER_MODE: l4,
  C_NUMBER_MODE: u4,
  BINARY_NUMBER_MODE: c4,
  REGEXP_MODE: d4,
  TITLE_MODE: f4,
  UNDERSCORE_TITLE_MODE: h4,
  METHOD_GUARD: p4,
  END_SAME_AS_BEGIN: g4
});
function m4(t, e) {
  t.input[t.index - 1] === "." && e.ignoreMatch();
}
function b4(t, e) {
  t.className !== void 0 && (t.scope = t.className, delete t.className);
}
function y4(t, e) {
  e && t.beginKeywords && (t.begin = "\\b(" + t.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", t.__beforeBegin = m4, t.keywords = t.keywords || t.beginKeywords, delete t.beginKeywords, t.relevance === void 0 && (t.relevance = 0));
}
function x4(t, e) {
  Array.isArray(t.illegal) && (t.illegal = Dc(...t.illegal));
}
function k4(t, e) {
  if (t.match) {
    if (t.begin || t.end)
      throw new Error("begin & end are not supported with match");
    t.begin = t.match, delete t.match;
  }
}
function v4(t, e) {
  t.relevance === void 0 && (t.relevance = 1);
}
const E4 = (t, e) => {
  if (!t.beforeMatch)
    return;
  if (t.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const n = Object.assign({}, t);
  Object.keys(t).forEach((r) => {
    delete t[r];
  }), t.keywords = n.keywords, t.begin = _r(n.beforeMatch, cg(n.begin)), t.starts = {
    relevance: 0,
    contains: [
      Object.assign(n, { endsParent: !0 })
    ]
  }, t.relevance = 0, delete n.beforeMatch;
}, C4 = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], _4 = "keyword";
function mg(t, e, n = _4) {
  const r = /* @__PURE__ */ Object.create(null);
  return typeof t == "string" ? i(n, t.split(" ")) : Array.isArray(t) ? i(n, t) : Object.keys(t).forEach(function(s) {
    Object.assign(
      r,
      mg(t[s], e, s)
    );
  }), r;
  function i(s, o) {
    e && (o = o.map((a) => a.toLowerCase())), o.forEach(function(a) {
      const l = a.split("|");
      r[l[0]] = [s, w4(l[0], l[1])];
    });
  }
}
function w4(t, e) {
  return e ? Number(e) : S4(t) ? 0 : 1;
}
function S4(t) {
  return C4.includes(t.toLowerCase());
}
const gh = {}, hr = (t) => {
  console.error(t);
}, mh = (t, ...e) => {
  console.log(`WARN: ${t}`, ...e);
}, Rr = (t, e) => {
  gh[`${t}/${e}`] || (console.log(`Deprecated as of ${t}. ${e}`), gh[`${t}/${e}`] = !0);
}, Jo = new Error();
function bg(t, e, { key: n }) {
  let r = 0;
  const i = t[n], s = {}, o = {};
  for (let a = 1; a <= e.length; a++)
    o[a + r] = i[a], s[a + r] = !0, r += dg(e[a - 1]);
  t[n] = o, t[n]._emit = s, t[n]._multi = !0;
}
function A4(t) {
  if (Array.isArray(t.begin)) {
    if (t.skip || t.excludeBegin || t.returnBegin)
      throw hr("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), Jo;
    if (typeof t.beginScope != "object" || t.beginScope === null)
      throw hr("beginScope must be object"), Jo;
    bg(t, t.begin, { key: "beginScope" }), t.begin = Oc(t.begin, { joinWith: "" });
  }
}
function M4(t) {
  if (Array.isArray(t.end)) {
    if (t.skip || t.excludeEnd || t.returnEnd)
      throw hr("skip, excludeEnd, returnEnd not compatible with endScope: {}"), Jo;
    if (typeof t.endScope != "object" || t.endScope === null)
      throw hr("endScope must be object"), Jo;
    bg(t, t.end, { key: "endScope" }), t.end = Oc(t.end, { joinWith: "" });
  }
}
function T4(t) {
  t.scope && typeof t.scope == "object" && t.scope !== null && (t.beginScope = t.scope, delete t.scope);
}
function D4(t) {
  T4(t), typeof t.beginScope == "string" && (t.beginScope = { _wrap: t.beginScope }), typeof t.endScope == "string" && (t.endScope = { _wrap: t.endScope }), A4(t), M4(t);
}
function O4(t) {
  function e(o, a) {
    return new RegExp(
      ts(o),
      "m" + (t.case_insensitive ? "i" : "") + (t.unicodeRegex ? "u" : "") + (a ? "g" : "")
    );
  }
  class n {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      l.position = this.position++, this.matchIndexes[this.matchAt] = l, this.regexes.push([l, a]), this.matchAt += dg(a) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const a = this.regexes.map((l) => l[1]);
      this.matcherRe = e(Oc(a, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(a) {
      this.matcherRe.lastIndex = this.lastIndex;
      const l = this.matcherRe.exec(a);
      if (!l)
        return null;
      const u = l.findIndex((d, f) => f > 0 && d !== void 0), c = this.matchIndexes[u];
      return l.splice(0, u), Object.assign(l, c);
    }
  }
  class r {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(a) {
      if (this.multiRegexes[a])
        return this.multiRegexes[a];
      const l = new n();
      return this.rules.slice(a).forEach(([u, c]) => l.addRule(u, c)), l.compile(), this.multiRegexes[a] = l, l;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      this.rules.push([a, l]), l.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(a) {
      const l = this.getMatcher(this.regexIndex);
      l.lastIndex = this.lastIndex;
      let u = l.exec(a);
      if (this.resumingScanAtSamePosition() && !(u && u.index === this.lastIndex)) {
        const c = this.getMatcher(0);
        c.lastIndex = this.lastIndex + 1, u = c.exec(a);
      }
      return u && (this.regexIndex += u.position + 1, this.regexIndex === this.count && this.considerAll()), u;
    }
  }
  function i(o) {
    const a = new r();
    return o.contains.forEach((l) => a.addRule(l.begin, { rule: l, type: "begin" })), o.terminatorEnd && a.addRule(o.terminatorEnd, { type: "end" }), o.illegal && a.addRule(o.illegal, { type: "illegal" }), a;
  }
  function s(o, a) {
    const l = (
      /** @type CompiledMode */
      o
    );
    if (o.isCompiled)
      return l;
    [
      b4,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      k4,
      D4,
      E4
    ].forEach((c) => c(o, a)), t.compilerExtensions.forEach((c) => c(o, a)), o.__beforeBegin = null, [
      y4,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      x4,
      // default to 1 relevance if not specified
      v4
    ].forEach((c) => c(o, a)), o.isCompiled = !0;
    let u = null;
    return typeof o.keywords == "object" && o.keywords.$pattern && (o.keywords = Object.assign({}, o.keywords), u = o.keywords.$pattern, delete o.keywords.$pattern), u = u || /\w+/, o.keywords && (o.keywords = mg(o.keywords, t.case_insensitive)), l.keywordPatternRe = e(u, !0), a && (o.begin || (o.begin = /\B|\b/), l.beginRe = e(l.begin), !o.end && !o.endsWithParent && (o.end = /\B|\b/), o.end && (l.endRe = e(l.end)), l.terminatorEnd = ts(l.end) || "", o.endsWithParent && a.terminatorEnd && (l.terminatorEnd += (o.end ? "|" : "") + a.terminatorEnd)), o.illegal && (l.illegalRe = e(
      /** @type {RegExp | string} */
      o.illegal
    )), o.contains || (o.contains = []), o.contains = [].concat(...o.contains.map(function(c) {
      return N4(c === "self" ? o : c);
    })), o.contains.forEach(function(c) {
      s(
        /** @type Mode */
        c,
        l
      );
    }), o.starts && s(o.starts, a), l.matcher = i(l), l;
  }
  if (t.compilerExtensions || (t.compilerExtensions = []), t.contains && t.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return t.classNameAliases = Hn(t.classNameAliases || {}), s(
    /** @type Mode */
    t
  );
}
function yg(t) {
  return t ? t.endsWithParent || yg(t.starts) : !1;
}
function N4(t) {
  return t.variants && !t.cachedVariants && (t.cachedVariants = t.variants.map(function(e) {
    return Hn(t, { variants: null }, e);
  })), t.cachedVariants ? t.cachedVariants : yg(t) ? Hn(t, { starts: t.starts ? Hn(t.starts) : null }) : Object.isFrozen(t) ? Hn(t) : t;
}
var L4 = "11.6.0";
let R4 = class extends Error {
  constructor(e, n) {
    super(e), this.name = "HTMLInjectionError", this.html = n;
  }
};
const Tl = lg, bh = Hn, yh = Symbol("nomatch"), I4 = 7, F4 = function(t) {
  const e = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null), r = [];
  let i = !0;
  const s = "Could not find the language '{}', did you forget to load/include a language module?", o = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let a = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: Ww
  };
  function l(A) {
    return a.noHighlightRe.test(A);
  }
  function u(A) {
    let C = A.className + " ";
    C += A.parentNode ? A.parentNode.className : "";
    const S = a.languageDetectRe.exec(C);
    if (S) {
      const L = w(S[1]);
      return L || (mh(s.replace("{}", S[1])), mh("Falling back to no-highlight mode for this block.", A)), L ? S[1] : "no-highlight";
    }
    return C.split(/\s+/).find((L) => l(L) || w(L));
  }
  function c(A, C, S) {
    let L = "", F = "";
    typeof C == "object" ? (L = A, S = C.ignoreIllegals, F = C.language) : (Rr("10.7.0", "highlight(lang, code, ...args) has been deprecated."), Rr("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), F = A, L = C), S === void 0 && (S = !0);
    const j = {
      code: L,
      language: F
    };
    W("before:highlight", j);
    const Q = j.result ? j.result : d(j.language, j.code, S);
    return Q.code = j.code, W("after:highlight", Q), Q;
  }
  function d(A, C, S, L) {
    const F = /* @__PURE__ */ Object.create(null);
    function j(H, q) {
      return H.keywords[q];
    }
    function Q() {
      if (!te.keywords) {
        V.addText(de);
        return;
      }
      let H = 0;
      te.keywordPatternRe.lastIndex = 0;
      let q = te.keywordPatternRe.exec(de), D = "";
      for (; q; ) {
        D += de.substring(H, q.index);
        const R = De.case_insensitive ? q[0].toLowerCase() : q[0], J = j(te, R);
        if (J) {
          const [ae, Fe] = J;
          if (V.addText(D), D = "", F[R] = (F[R] || 0) + 1, F[R] <= I4 && (be += Fe), ae.startsWith("_"))
            D += q[0];
          else {
            const kt = De.classNameAliases[ae] || ae;
            V.addKeyword(q[0], kt);
          }
        } else
          D += q[0];
        H = te.keywordPatternRe.lastIndex, q = te.keywordPatternRe.exec(de);
      }
      D += de.substring(H), V.addText(D);
    }
    function pe() {
      if (de === "")
        return;
      let H = null;
      if (typeof te.subLanguage == "string") {
        if (!e[te.subLanguage]) {
          V.addText(de);
          return;
        }
        H = d(te.subLanguage, de, !0, Bt[te.subLanguage]), Bt[te.subLanguage] = /** @type {CompiledMode} */
        H._top;
      } else
        H = h(de, te.subLanguage.length ? te.subLanguage : null);
      te.relevance > 0 && (be += H.relevance), V.addSublanguage(H._emitter, H.language);
    }
    function ke() {
      te.subLanguage != null ? pe() : Q(), de = "";
    }
    function fe(H, q) {
      let D = 1;
      const R = q.length - 1;
      for (; D <= R; ) {
        if (!H._emit[D]) {
          D++;
          continue;
        }
        const J = De.classNameAliases[H[D]] || H[D], ae = q[D];
        J ? V.addKeyword(ae, J) : (de = ae, Q(), de = ""), D++;
      }
    }
    function Se(H, q) {
      return H.scope && typeof H.scope == "string" && V.openNode(De.classNameAliases[H.scope] || H.scope), H.beginScope && (H.beginScope._wrap ? (V.addKeyword(de, De.classNameAliases[H.beginScope._wrap] || H.beginScope._wrap), de = "") : H.beginScope._multi && (fe(H.beginScope, q), de = "")), te = Object.create(H, { parent: { value: te } }), te;
    }
    function ut(H, q, D) {
      let R = Yw(H.endRe, D);
      if (R) {
        if (H["on:end"]) {
          const J = new fh(H);
          H["on:end"](q, J), J.isMatchIgnored && (R = !1);
        }
        if (R) {
          for (; H.endsParent && H.parent; )
            H = H.parent;
          return H;
        }
      }
      if (H.endsWithParent)
        return ut(H.parent, q, D);
    }
    function We(H) {
      return te.matcher.regexIndex === 0 ? (de += H[0], 1) : (je = !0, 0);
    }
    function yt(H) {
      const q = H[0], D = H.rule, R = new fh(D), J = [D.__beforeBegin, D["on:begin"]];
      for (const ae of J)
        if (ae && (ae(H, R), R.isMatchIgnored))
          return We(q);
      return D.skip ? de += q : (D.excludeBegin && (de += q), ke(), !D.returnBegin && !D.excludeBegin && (de = q)), Se(D, H), D.returnBegin ? 0 : q.length;
    }
    function ct(H) {
      const q = H[0], D = C.substring(H.index), R = ut(te, H, D);
      if (!R)
        return yh;
      const J = te;
      te.endScope && te.endScope._wrap ? (ke(), V.addKeyword(q, te.endScope._wrap)) : te.endScope && te.endScope._multi ? (ke(), fe(te.endScope, H)) : J.skip ? de += q : (J.returnEnd || J.excludeEnd || (de += q), ke(), J.excludeEnd && (de = q));
      do
        te.scope && V.closeNode(), !te.skip && !te.subLanguage && (be += te.relevance), te = te.parent;
      while (te !== R.parent);
      return R.starts && Se(R.starts, H), J.returnEnd ? 0 : q.length;
    }
    function At() {
      const H = [];
      for (let q = te; q !== De; q = q.parent)
        q.scope && H.unshift(q.scope);
      H.forEach((q) => V.openNode(q));
    }
    let xt = {};
    function he(H, q) {
      const D = q && q[0];
      if (de += H, D == null)
        return ke(), 0;
      if (xt.type === "begin" && q.type === "end" && xt.index === q.index && D === "") {
        if (de += C.slice(q.index, q.index + 1), !i) {
          const R = new Error(`0 width match regex (${A})`);
          throw R.languageName = A, R.badRule = xt.rule, R;
        }
        return 1;
      }
      if (xt = q, q.type === "begin")
        return yt(q);
      if (q.type === "illegal" && !S) {
        const R = new Error('Illegal lexeme "' + D + '" for mode "' + (te.scope || "<unnamed>") + '"');
        throw R.mode = te, R;
      } else if (q.type === "end") {
        const R = ct(q);
        if (R !== yh)
          return R;
      }
      if (q.type === "illegal" && D === "")
        return 1;
      if (Qe > 1e5 && Qe > q.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return de += D, D.length;
    }
    const De = w(A);
    if (!De)
      throw hr(s.replace("{}", A)), new Error('Unknown language: "' + A + '"');
    const rt = O4(De);
    let Le = "", te = L || rt;
    const Bt = {}, V = new a.__emitter(a);
    At();
    let de = "", be = 0, ce = 0, Qe = 0, je = !1;
    try {
      for (te.matcher.considerAll(); ; ) {
        Qe++, je ? je = !1 : te.matcher.considerAll(), te.matcher.lastIndex = ce;
        const H = te.matcher.exec(C);
        if (!H)
          break;
        const q = C.substring(ce, H.index), D = he(q, H);
        ce = H.index + D;
      }
      return he(C.substring(ce)), V.closeAllNodes(), V.finalize(), Le = V.toHTML(), {
        language: A,
        value: Le,
        relevance: be,
        illegal: !1,
        _emitter: V,
        _top: te
      };
    } catch (H) {
      if (H.message && H.message.includes("Illegal"))
        return {
          language: A,
          value: Tl(C),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: H.message,
            index: ce,
            context: C.slice(ce - 100, ce + 100),
            mode: H.mode,
            resultSoFar: Le
          },
          _emitter: V
        };
      if (i)
        return {
          language: A,
          value: Tl(C),
          illegal: !1,
          relevance: 0,
          errorRaised: H,
          _emitter: V,
          _top: te
        };
      throw H;
    }
  }
  function f(A) {
    const C = {
      value: Tl(A),
      illegal: !1,
      relevance: 0,
      _top: o,
      _emitter: new a.__emitter(a)
    };
    return C._emitter.addText(A), C;
  }
  function h(A, C) {
    C = C || a.languages || Object.keys(e);
    const S = f(A), L = C.filter(w).filter($).map(
      (ke) => d(ke, A, !1)
    );
    L.unshift(S);
    const F = L.sort((ke, fe) => {
      if (ke.relevance !== fe.relevance)
        return fe.relevance - ke.relevance;
      if (ke.language && fe.language) {
        if (w(ke.language).supersetOf === fe.language)
          return 1;
        if (w(fe.language).supersetOf === ke.language)
          return -1;
      }
      return 0;
    }), [j, Q] = F, pe = j;
    return pe.secondBest = Q, pe;
  }
  function p(A, C, S) {
    const L = C && n[C] || S;
    A.classList.add("hljs"), A.classList.add(`language-${L}`);
  }
  function g(A) {
    let C = null;
    const S = u(A);
    if (l(S))
      return;
    if (W(
      "before:highlightElement",
      { el: A, language: S }
    ), A.children.length > 0 && (a.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(A)), a.throwUnescapedHTML))
      throw new R4(
        "One of your code blocks includes unescaped HTML.",
        A.innerHTML
      );
    C = A;
    const L = C.textContent, F = S ? c(L, { language: S, ignoreIllegals: !0 }) : h(L);
    A.innerHTML = F.value, p(A, S, F.language), A.result = {
      language: F.language,
      // TODO: remove with version 11.0
      re: F.relevance,
      relevance: F.relevance
    }, F.secondBest && (A.secondBest = {
      language: F.secondBest.language,
      relevance: F.secondBest.relevance
    }), W("after:highlightElement", { el: A, result: F, text: L });
  }
  function m(A) {
    a = bh(a, A);
  }
  const y = () => {
    b(), Rr("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function x() {
    b(), Rr("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let k = !1;
  function b() {
    if (document.readyState === "loading") {
      k = !0;
      return;
    }
    document.querySelectorAll(a.cssSelector).forEach(g);
  }
  function E() {
    k && b();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", E, !1);
  function v(A, C) {
    let S = null;
    try {
      S = C(t);
    } catch (L) {
      if (hr("Language definition for '{}' could not be registered.".replace("{}", A)), i)
        hr(L);
      else
        throw L;
      S = o;
    }
    S.name || (S.name = A), e[A] = S, S.rawDefinition = C.bind(null, t), S.aliases && N(S.aliases, { languageName: A });
  }
  function _(A) {
    delete e[A];
    for (const C of Object.keys(n))
      n[C] === A && delete n[C];
  }
  function T() {
    return Object.keys(e);
  }
  function w(A) {
    return A = (A || "").toLowerCase(), e[A] || e[n[A]];
  }
  function N(A, { languageName: C }) {
    typeof A == "string" && (A = [A]), A.forEach((S) => {
      n[S.toLowerCase()] = C;
    });
  }
  function $(A) {
    const C = w(A);
    return C && !C.disableAutodetect;
  }
  function K(A) {
    A["before:highlightBlock"] && !A["before:highlightElement"] && (A["before:highlightElement"] = (C) => {
      A["before:highlightBlock"](
        Object.assign({ block: C.el }, C)
      );
    }), A["after:highlightBlock"] && !A["after:highlightElement"] && (A["after:highlightElement"] = (C) => {
      A["after:highlightBlock"](
        Object.assign({ block: C.el }, C)
      );
    });
  }
  function U(A) {
    K(A), r.push(A);
  }
  function W(A, C) {
    const S = A;
    r.forEach(function(L) {
      L[S] && L[S](C);
    });
  }
  function z(A) {
    return Rr("10.7.0", "highlightBlock will be removed entirely in v12.0"), Rr("10.7.0", "Please use highlightElement now."), g(A);
  }
  Object.assign(t, {
    highlight: c,
    highlightAuto: h,
    highlightAll: b,
    highlightElement: g,
    // TODO: Remove with v12 API
    highlightBlock: z,
    configure: m,
    initHighlighting: y,
    initHighlightingOnLoad: x,
    registerLanguage: v,
    unregisterLanguage: _,
    listLanguages: T,
    getLanguage: w,
    registerAliases: N,
    autoDetection: $,
    inherit: bh,
    addPlugin: U
  }), t.debugMode = function() {
    i = !1;
  }, t.safeMode = function() {
    i = !0;
  }, t.versionString = L4, t.regex = {
    concat: _r,
    lookahead: cg,
    either: Dc,
    optional: Gw,
    anyNumberOfTimes: jw
  };
  for (const A in Ws)
    typeof Ws[A] == "object" && Mc.exports(Ws[A]);
  return Object.assign(t, Ws), t;
};
var rs = F4({}), H4 = rs;
rs.HighlightJS = rs;
rs.default = rs;
var B4 = H4;
function xg(t, e = []) {
  return t.map((n) => {
    const r = [...e, ...n.properties ? n.properties.className : []];
    return n.children ? xg(n.children, r) : {
      text: n.value,
      classes: r
    };
  }).flat();
}
function xh(t) {
  return t.value || t.children || [];
}
function P4(t) {
  return !!B4.getLanguage(t);
}
function kh({ doc: t, name: e, lowlight: n, defaultLanguage: r }) {
  const i = [];
  return hu(t, (s) => s.type.name === e).forEach((s) => {
    let o = s.pos + 1;
    const a = s.node.attrs.language || r, l = n.listLanguages(), u = a && (l.includes(a) || P4(a)) ? xh(n.highlight(a, s.node.textContent)) : xh(n.highlightAuto(s.node.textContent));
    xg(u).forEach((c) => {
      const d = o + c.text.length;
      if (c.classes.length) {
        const f = Be.inline(o, d, {
          class: c.classes.join(" ")
        });
        i.push(f);
      }
      o = d;
    });
  }), ve.create(t, i);
}
function $4(t) {
  return typeof t == "function";
}
function z4({ name: t, lowlight: e, defaultLanguage: n }) {
  if (!["highlight", "highlightAuto", "listLanguages"].every((i) => $4(e[i])))
    throw Error("You should provide an instance of lowlight to use the code-block-lowlight extension");
  const r = new we({
    key: new Te("lowlight"),
    state: {
      init: (i, { doc: s }) => kh({
        doc: s,
        name: t,
        lowlight: e,
        defaultLanguage: n
      }),
      apply: (i, s, o, a) => {
        const l = o.selection.$head.parent.type.name, u = a.selection.$head.parent.type.name, c = hu(o.doc, (f) => f.type.name === t), d = hu(a.doc, (f) => f.type.name === t);
        return i.docChanged && ([l, u].includes(t) || d.length !== c.length || i.steps.some((f) => (
          // @ts-ignore
          f.from !== void 0 && f.to !== void 0 && c.some((h) => (
            // @ts-ignore
            h.pos >= f.from && h.pos + h.node.nodeSize <= f.to
          ))
        ))) ? kh({
          doc: i.doc,
          name: t,
          lowlight: e,
          defaultLanguage: n
        }) : s.map(i.mapping, i.doc);
      }
    },
    props: {
      decorations(i) {
        return r.getState(i);
      }
    }
  });
  return r;
}
const V4 = B1.extend({
  addOptions() {
    var t;
    return {
      ...(t = this.parent) === null || t === void 0 ? void 0 : t.call(this),
      lowlight: {},
      defaultLanguage: null
    };
  },
  addProseMirrorPlugins() {
    var t;
    return [
      ...((t = this.parent) === null || t === void 0 ? void 0 : t.call(this)) || [],
      z4({
        name: this.name,
        lowlight: this.options.lowlight,
        defaultLanguage: this.options.defaultLanguage
      })
    ];
  }
});
function vh(t, e, n = {}) {
  const { empty: r, ranges: i, from: s, to: o } = t.selection, a = e ? En(e, t.schema) : null;
  if (r)
    return !!(t.storedMarks || t.selection.$from.marks()).filter((g) => a ? a.name === g.type.name : !0).find(
      (g) => ii(g.attrs, n, { strict: !1 })
    );
  let l = s, u = o;
  const c = [];
  i.forEach(({ $from: g, $to: m }) => {
    const y = g.pos, x = m.pos;
    l = Math.min(l, y), u = Math.max(l, x), t.doc.nodesBetween(y, x, (k, b) => {
      if (!k.isText && !k.marks.length)
        return;
      const E = Math.max(y, b), v = Math.min(x, b + k.nodeSize);
      c.push(
        ...k.marks.map((_) => ({
          mark: _,
          from: E,
          to: v
        }))
      );
    });
  });
  const d = u - l;
  if (d === 0)
    return !1;
  const f = c.filter((g) => a ? a.name === g.mark.type.name : !0).filter(
    (g) => ii(g.mark.attrs, n, { strict: !1 })
  ).reduce((g, m) => g + m.to - m.from, 0), h = c.filter((g) => a ? g.mark.type !== a && g.mark.type.excludes(a) : !0).reduce((g, m) => g + m.to - m.from, 0);
  return (f > 0 ? f + h : f) >= d;
}
function Eh(t) {
  var e;
  return !!((e = t.spec.group) != null && e.split(" ").includes("list"));
}
function Ch(t, e, n = {}) {
  if (!e)
    return yr(t, null, n) || vh(t, null, n);
  const r = t.schema.nodes[e];
  if (r) {
    if (Eh(r)) {
      const s = Ea((o) => Eh(o.type))(
        t.selection
      );
      return !!(s && s.node.type.name === e);
    }
    return yr(t, e, n);
  }
  return t.schema.marks[e] ? vh(t, e, n) : !1;
}
function _h(t) {
  return new ys({
    find: t.find,
    handler: ({ state: e, range: n, match: r, commands: i }) => {
      const s = e.doc.resolve(n.from), o = oe(t.getAttributes, void 0, r) || {};
      if (!s.node(-1).canReplaceWith(s.index(-1), s.indexAfter(-1), t.type))
        return null;
      e.tr.delete(n.from, n.to).setBlockType(n.from, n.from, t.type, o), setTimeout(() => i.focus(!0), 0);
    }
  });
}
const kg = [
  { name: "Auto", value: "auto" },
  { name: "Plain Text", value: "plaintext", alias: ["text", "txt"] },
  { name: "Bash", value: "bash", alias: ["sh"] },
  { name: "BASIC", value: "basic", alias: [] },
  { name: "C", value: "c", alias: ["h"] },
  { name: "Clojure", value: "clojure", alias: ["clj", "edn"] },
  { name: "CMake", value: "cmake", alias: ["cmake.in"] },
  {
    name: "CoffeeScript",
    value: "coffeescript",
    alias: ["coffee", "cson", "iced"]
  },
  {
    name: "C++",
    value: "cpp",
    alias: ["cc", "c++", "h++", "hpp", "hh", "hxx", "cxx"]
  },
  { name: "C#", value: "csharp", alias: ["cs", "c#"] },
  { name: "CSS", value: "css", alias: [] },
  { name: "Dart", value: "dart", alias: [] },
  { name: "Delphi", value: "delphi", alias: ["dpr", "dfm", "pas", "pascal"] },
  { name: "Dockerfile", value: "dockerfile", alias: ["docker"] },
  { name: "Erlang", value: "erlang", alias: ["erl"] },
  { name: "Go", value: "go", alias: ["golang"] },
  { name: "GraphQL", value: "graphql", alias: ["gql"] },
  { name: "Groovy", value: "groovy", alias: [] },
  { name: "Java", value: "java", alias: ["jsp"] },
  {
    name: "JavaScript",
    value: "javascript",
    alias: ["js", "jsx", "mjs", "cjs"]
  },
  { name: "JSON", value: "json", alias: [] },
  { name: "Kotlin", value: "kotlin", alias: ["kt", "kts"] },
  { name: "Lua", value: "lua", alias: [] },
  { name: "Makefile", value: "makefile", alias: ["mk", "mak", "make"] },
  { name: "Markdown", value: "markdown", alias: ["md", "mkdown", "mkd"] },
  { name: "Matlab", value: "matlab", alias: [] },
  {
    name: "Objective-C",
    value: "objectivec",
    alias: ["mm", "objc", "obj-c", "obj-c++", "objective-c++"]
  },
  { name: "PHP", value: "php", alias: [] },
  { name: "Properties", value: "properties", alias: [] },
  { name: "Python", value: "python", alias: ["py", "gyp", "ipython"] },
  {
    name: "Ruby",
    value: "ruby",
    alias: ["rb", "gemspec", "podspec", "thor", "irb"]
  },
  { name: "Rust", value: "rust", alias: ["rs"] },
  { name: "Scala", value: "scala", alias: [] },
  { name: "SCSS", value: "scss", alias: [] },
  { name: "Shell", value: "shell", alias: ["console", "shellsession"] },
  { name: "SQL", value: "sql", alias: [] },
  { name: "Swift", value: "swift", alias: [] },
  { name: "TypeScript", value: "typescript", alias: ["ts", "tsx"] },
  { name: "WebAssembly", value: "wasm", alias: [] },
  {
    name: "HTML, XML",
    value: "xml",
    alias: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ]
  },
  { name: "YAML", value: "yaml", alias: ["yml"] }
], wh = (t) => {
  if (!t)
    return null;
  const e = t.toLocaleLowerCase();
  return kg.find(
    (r) => r.value === e || r.alias && r.alias.includes(e)
  );
};
function U4(t, e) {
  const { $from: n, from: r, to: i } = t, a = (e.textContent || "").split(`
`).reduce((h, p, g) => (h[g] = (h[g - 1] || 0) + p.length + (g === 0 ? 0 : 1), h), {}), l = n.parentOffset, u = n.parentOffset + i - r, c = Object.keys(a), d = c.find(
    (h) => a[h] >= l
  ), f = c.find(
    (h) => a[h] >= u
  );
  return {
    start: d,
    end: f
  };
}
const q4 = /^[`·]{3}([a-z]+)?[\s\n]$/, Z4 = /^[~～]{3}([a-z]+)?[\s\n]$/, K4 = V4.extend({
  addOptions() {
    var t;
    return {
      ...(t = this.parent) == null ? void 0 : t.call(this),
      lowlight: {},
      defaultLanguage: null,
      languages: kg
    };
  },
  addCommands() {
    var t;
    return {
      ...(t = this.parent) == null ? void 0 : t.call(this),
      addCodeComments: (e, n) => ({ editor: r }) => {
        const { storage: i, view: { dispatch: s }, state: { tr: o } } = r;
        s(o.setSelection(ee.create(r.state.doc, n)).deleteSelection());
        const a = i.markdown.serializer.serialize(e);
        return Er.get(this.options.codeCommentsAi.model).chat(a, this.options.codeCommentsAi.prompt, new Lo(r, {
          markdownParseEnable: !0,
          useMarkdownTextOnly: !0
        })), !0;
      },
      addCodeExplain: (e, n) => ({ editor: r }) => {
        const { storage: i, view: { dispatch: s }, state: { tr: o } } = r, a = r.state.doc.nodeSize;
        a <= n + e.nodeSize + 2 ? (r.commands.insertContentAt(n + e.nodeSize + 1, "<p></p>"), s(o.setSelection(X.create(r.state.doc, a - 2)))) : s(o.setSelection(X.create(r.state.doc, n + e.nodeSize + 1)));
        const l = i.markdown.serializer.serialize(e), u = Er.get(this.options.codeExplainAi.model);
        return u == null || u.chat(l, this.options.codeExplainAi.prompt, new Lo(r)), !0;
      },
      toggleCodeBlock: (e) => ({ commands: n, editor: r, chain: i }) => {
        const { state: s } = r, { from: o, to: a } = s.selection;
        if (!Ch(s, this.name) && !s.selection.empty) {
          let l = !0;
          const u = [];
          if (s.doc.nodesBetween(o, a, (c, d) => {
            if (c.isInline)
              return !1;
            if (c.type.name !== "paragraph")
              return d + 1 <= o && d + c.nodeSize - 1 >= a ? void 0 : (l = !1, !1);
            {
              const f = (c.textContent || "").slice(
                d + 1 > o ? 0 : o - d - 1,
                d + c.nodeSize - 1 < a ? c.nodeSize - 1 : a - d - 1
              );
              u.push(f || "");
            }
          }), l && u.length > 1)
            return i().command(({ state: c, tr: d }) => (d.replaceRangeWith(
              o,
              a,
              this.type.create(
                e,
                c.schema.text(u.join(`
`))
              )
            ), !0)).setTextSelection({
              from: o + 2,
              to: o + 2
            }).run();
        }
        return n.toggleNode(this.name, "paragraph", e);
      }
    };
  },
  addKeyboardShortcuts() {
    var t;
    return {
      ...(t = this.parent) == null ? void 0 : t.call(this),
      Tab: ({ editor: e }) => {
        const { state: n, view: r } = e;
        if (!Ch(n, this.name))
          return !1;
        const { selection: i, tr: s } = n, o = "  ";
        if (i.empty)
          r.dispatch(s.insertText(o));
        else {
          const { $from: a, from: l, to: u } = i, c = a.node();
          if (c.type !== this.type)
            return !1;
          const { start: d, end: f } = U4(i, c);
          if (d === void 0 || f === void 0)
            return r.dispatch(s.replaceSelectionWith(n.schema.text(o))), !0;
          const g = (c.textContent || "").split(`
`).map((x, k) => k >= d && k <= f && x ? o + x : x), m = a.node(1), y = a.start(1);
          s.replaceWith(
            y,
            y + m.nodeSize - 2,
            n.schema.text(g.join(`
`))
          ), s.setSelection(
            X.between(
              s.doc.resolve(l + o.length),
              s.doc.resolve(
                u + (f - d + 1) * o.length
              )
            )
          ), r.dispatch(s);
        }
        return !0;
      }
    };
  },
  addInputRules() {
    return [
      _h({
        find: q4,
        type: this.type,
        getAttributes: (t) => {
          var e;
          return {
            language: ((e = wh(t[1])) == null ? void 0 : e.value) || this.options.defaultLanguage
          };
        }
      }),
      _h({
        find: Z4,
        type: this.type,
        getAttributes: (t) => {
          var e;
          return {
            language: ((e = wh(t[1])) == null ? void 0 : e.value) || this.options.defaultLanguage
          };
        }
      })
    ];
  },
  addNodeView() {
    return (t) => {
      var s, o;
      const e = document.createElement("div");
      e.classList.add("aie-codeblock-wrapper");
      const { language: n } = t.node.attrs;
      if (!this.editor.isEditable)
        return e.innerHTML = `
                <div class="aie-codeblock-tools" contenteditable="false">
                    <div class="aie-codeblock-tools-lang" contenteditable="false" style="margin-right: 10px">${n || this.options.defaultLanguage}</div>
                </div>
                <pre class="hljs"><code></code></pre>
                `, {
          dom: e,
          contentDOM: e.querySelector("code")
        };
      e.innerHTML = `
                <div class="aie-codeblock-tools" contenteditable="false">
                    ${this.options.codeCommentsAi ? '<div class="aie-codeblock-tools-comments">' + re("codeblock-ai-auto-comment") + "</div>" : ""}
                    ${this.options.codeExplainAi ? '<div class="aie-codeblock-tools-explain">' + re("codeblock-ai-code-explain") + "</div>" : ""}
                    <div class="aie-codeblock-tools-lang" contenteditable="false"><span>${n || this.options.defaultLanguage}</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 16L6 10H18L12 16Z"></path></svg></div>
                </div>
                <pre class="hljs"><code></code></pre>
                `;
      const r = () => {
        const a = document.createElement("div");
        return a.classList.add("aie-codeblock-langs"), a.innerHTML = `
                ${this.options.languages.map((l) => `<div class="aie-codeblock-langs-item" data-item="${l.value}">${l.name}</div>`).join("")}`, a.addEventListener("click", (l) => {
          const u = l.target.closest(".aie-codeblock-langs-item");
          if (u) {
            const c = u.getAttribute("data-item");
            t.editor.chain().setCodeBlock({ language: c }).run();
          }
        }), a;
      }, i = Ke(e.querySelector(".aie-codeblock-tools-lang"), {
        content: r(),
        appendTo: t.editor.options.element,
        placement: "bottom-end",
        trigger: "click",
        interactive: !0,
        arrow: !1,
        aria: {
          content: null,
          expanded: !1
        }
      });
      return (s = e.querySelector(".aie-codeblock-tools-comments")) == null || s.addEventListener("click", (a) => {
        const l = t.editor.view.posAtCoords({ left: a.clientX, top: a.clientY }), u = t.editor.state.doc.resolve(l.pos).parent;
        t.editor.chain().addCodeComments(u, l.pos);
      }), (o = e.querySelector(".aie-codeblock-tools-explain")) == null || o.addEventListener("click", (a) => {
        const l = t.editor.view.posAtCoords({ left: a.clientX, top: a.clientY }), u = t.editor.state.doc.resolve(l.pos).parent;
        t.editor.chain().addCodeExplain(u, l.pos);
      }), {
        dom: e,
        contentDOM: e.querySelector("code"),
        destroy: () => {
          i.destroy();
        }
      };
    };
  }
});
function W4(t) {
  const e = t.regex, n = t.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(?!struct)(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", u = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [t.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      t.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, c = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      t.inherit(u, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      n,
      t.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + t.IDENT_RE,
    relevance: 0
  }, h = e.optional(i) + t.IDENT_RE + "\\s*\\(", p = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], g = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], m = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], y = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], b = {
    type: g,
    keyword: p,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: m
  }, E = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: y
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      t.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, v = [
    E,
    d,
    a,
    n,
    t.C_BLOCK_COMMENT_MODE,
    c,
    u
  ], _ = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: b,
    contains: v.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: b,
        contains: v.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + h,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: b,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: b,
        relevance: 0
      },
      {
        begin: h,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          u,
          c
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: b,
        relevance: 0,
        contains: [
          n,
          t.C_BLOCK_COMMENT_MODE,
          u,
          c,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: b,
            relevance: 0,
            contains: [
              "self",
              n,
              t.C_BLOCK_COMMENT_MODE,
              u,
              c,
              a
            ]
          }
        ]
      },
      a,
      n,
      t.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: b,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      _,
      T,
      E,
      v,
      [
        d,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: b,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: t.IDENT_RE + "::",
          keywords: b
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function j4(t) {
  const e = {
    type: [
      "boolean",
      "byte",
      "word",
      "String"
    ],
    built_in: [
      "KeyboardController",
      "MouseController",
      "SoftwareSerial",
      "EthernetServer",
      "EthernetClient",
      "LiquidCrystal",
      "RobotControl",
      "GSMVoiceCall",
      "EthernetUDP",
      "EsploraTFT",
      "HttpClient",
      "RobotMotor",
      "WiFiClient",
      "GSMScanner",
      "FileSystem",
      "Scheduler",
      "GSMServer",
      "YunClient",
      "YunServer",
      "IPAddress",
      "GSMClient",
      "GSMModem",
      "Keyboard",
      "Ethernet",
      "Console",
      "GSMBand",
      "Esplora",
      "Stepper",
      "Process",
      "WiFiUDP",
      "GSM_SMS",
      "Mailbox",
      "USBHost",
      "Firmata",
      "PImage",
      "Client",
      "Server",
      "GSMPIN",
      "FileIO",
      "Bridge",
      "Serial",
      "EEPROM",
      "Stream",
      "Mouse",
      "Audio",
      "Servo",
      "File",
      "Task",
      "GPRS",
      "WiFi",
      "Wire",
      "TFT",
      "GSM",
      "SPI",
      "SD"
    ],
    _hints: [
      "setup",
      "loop",
      "runShellCommandAsynchronously",
      "analogWriteResolution",
      "retrieveCallingNumber",
      "printFirmwareVersion",
      "analogReadResolution",
      "sendDigitalPortPair",
      "noListenOnLocalhost",
      "readJoystickButton",
      "setFirmwareVersion",
      "readJoystickSwitch",
      "scrollDisplayRight",
      "getVoiceCallStatus",
      "scrollDisplayLeft",
      "writeMicroseconds",
      "delayMicroseconds",
      "beginTransmission",
      "getSignalStrength",
      "runAsynchronously",
      "getAsynchronously",
      "listenOnLocalhost",
      "getCurrentCarrier",
      "readAccelerometer",
      "messageAvailable",
      "sendDigitalPorts",
      "lineFollowConfig",
      "countryNameWrite",
      "runShellCommand",
      "readStringUntil",
      "rewindDirectory",
      "readTemperature",
      "setClockDivider",
      "readLightSensor",
      "endTransmission",
      "analogReference",
      "detachInterrupt",
      "countryNameRead",
      "attachInterrupt",
      "encryptionType",
      "readBytesUntil",
      "robotNameWrite",
      "readMicrophone",
      "robotNameRead",
      "cityNameWrite",
      "userNameWrite",
      "readJoystickY",
      "readJoystickX",
      "mouseReleased",
      "openNextFile",
      "scanNetworks",
      "noInterrupts",
      "digitalWrite",
      "beginSpeaker",
      "mousePressed",
      "isActionDone",
      "mouseDragged",
      "displayLogos",
      "noAutoscroll",
      "addParameter",
      "remoteNumber",
      "getModifiers",
      "keyboardRead",
      "userNameRead",
      "waitContinue",
      "processInput",
      "parseCommand",
      "printVersion",
      "readNetworks",
      "writeMessage",
      "blinkVersion",
      "cityNameRead",
      "readMessage",
      "setDataMode",
      "parsePacket",
      "isListening",
      "setBitOrder",
      "beginPacket",
      "isDirectory",
      "motorsWrite",
      "drawCompass",
      "digitalRead",
      "clearScreen",
      "serialEvent",
      "rightToLeft",
      "setTextSize",
      "leftToRight",
      "requestFrom",
      "keyReleased",
      "compassRead",
      "analogWrite",
      "interrupts",
      "WiFiServer",
      "disconnect",
      "playMelody",
      "parseFloat",
      "autoscroll",
      "getPINUsed",
      "setPINUsed",
      "setTimeout",
      "sendAnalog",
      "readSlider",
      "analogRead",
      "beginWrite",
      "createChar",
      "motorsStop",
      "keyPressed",
      "tempoWrite",
      "readButton",
      "subnetMask",
      "debugPrint",
      "macAddress",
      "writeGreen",
      "randomSeed",
      "attachGPRS",
      "readString",
      "sendString",
      "remotePort",
      "releaseAll",
      "mouseMoved",
      "background",
      "getXChange",
      "getYChange",
      "answerCall",
      "getResult",
      "voiceCall",
      "endPacket",
      "constrain",
      "getSocket",
      "writeJSON",
      "getButton",
      "available",
      "connected",
      "findUntil",
      "readBytes",
      "exitValue",
      "readGreen",
      "writeBlue",
      "startLoop",
      "IPAddress",
      "isPressed",
      "sendSysex",
      "pauseMode",
      "gatewayIP",
      "setCursor",
      "getOemKey",
      "tuneWrite",
      "noDisplay",
      "loadImage",
      "switchPIN",
      "onRequest",
      "onReceive",
      "changePIN",
      "playFile",
      "noBuffer",
      "parseInt",
      "overflow",
      "checkPIN",
      "knobRead",
      "beginTFT",
      "bitClear",
      "updateIR",
      "bitWrite",
      "position",
      "writeRGB",
      "highByte",
      "writeRed",
      "setSpeed",
      "readBlue",
      "noStroke",
      "remoteIP",
      "transfer",
      "shutdown",
      "hangCall",
      "beginSMS",
      "endWrite",
      "attached",
      "maintain",
      "noCursor",
      "checkReg",
      "checkPUK",
      "shiftOut",
      "isValid",
      "shiftIn",
      "pulseIn",
      "connect",
      "println",
      "localIP",
      "pinMode",
      "getIMEI",
      "display",
      "noBlink",
      "process",
      "getBand",
      "running",
      "beginSD",
      "drawBMP",
      "lowByte",
      "setBand",
      "release",
      "bitRead",
      "prepare",
      "pointTo",
      "readRed",
      "setMode",
      "noFill",
      "remove",
      "listen",
      "stroke",
      "detach",
      "attach",
      "noTone",
      "exists",
      "buffer",
      "height",
      "bitSet",
      "circle",
      "config",
      "cursor",
      "random",
      "IRread",
      "setDNS",
      "endSMS",
      "getKey",
      "micros",
      "millis",
      "begin",
      "print",
      "write",
      "ready",
      "flush",
      "width",
      "isPIN",
      "blink",
      "clear",
      "press",
      "mkdir",
      "rmdir",
      "close",
      "point",
      "yield",
      "image",
      "BSSID",
      "click",
      "delay",
      "read",
      "text",
      "move",
      "peek",
      "beep",
      "rect",
      "line",
      "open",
      "seek",
      "fill",
      "size",
      "turn",
      "stop",
      "home",
      "find",
      "step",
      "tone",
      "sqrt",
      "RSSI",
      "SSID",
      "end",
      "bit",
      "tan",
      "cos",
      "sin",
      "pow",
      "map",
      "abs",
      "max",
      "min",
      "get",
      "run",
      "put"
    ],
    literal: [
      "DIGITAL_MESSAGE",
      "FIRMATA_STRING",
      "ANALOG_MESSAGE",
      "REPORT_DIGITAL",
      "REPORT_ANALOG",
      "INPUT_PULLUP",
      "SET_PIN_MODE",
      "INTERNAL2V56",
      "SYSTEM_RESET",
      "LED_BUILTIN",
      "INTERNAL1V1",
      "SYSEX_START",
      "INTERNAL",
      "EXTERNAL",
      "DEFAULT",
      "OUTPUT",
      "INPUT",
      "HIGH",
      "LOW"
    ]
  }, n = W4(t), r = (
    /** @type {Record<string,any>} */
    n.keywords
  );
  return r.type = [
    ...r.type,
    ...e.type
  ], r.literal = [
    ...r.literal,
    ...e.literal
  ], r.built_in = [
    ...r.built_in,
    ...e.built_in
  ], r._hints = e._hints, n.name = "Arduino", n.aliases = ["ino"], n.supersetOf = "cpp", n;
}
function G4(t) {
  const e = t.regex, n = {}, r = {
    begin: /\$\{/,
    end: /\}/,
    contains: [
      "self",
      {
        begin: /:-/,
        contains: [n]
      }
      // default values
    ]
  };
  Object.assign(n, {
    className: "variable",
    variants: [
      { begin: e.concat(
        /\$[\w\d#@][\w\d_]*/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![\\w\\d])(?![$])"
      ) },
      r
    ]
  });
  const i = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    contains: [t.BACKSLASH_ESCAPE]
  }, s = {
    begin: /<<-?\s*(?=\w+)/,
    starts: { contains: [
      t.END_SAME_AS_BEGIN({
        begin: /(\w+)/,
        end: /(\w+)/,
        className: "string"
      })
    ] }
  }, o = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      t.BACKSLASH_ESCAPE,
      n,
      i
    ]
  };
  i.contains.push(o);
  const a = {
    match: /\\"/
  }, l = {
    className: "string",
    begin: /'/,
    end: /'/
  }, u = {
    match: /\\'/
  }, c = {
    begin: /\$?\(\(/,
    end: /\)\)/,
    contains: [
      {
        begin: /\d+#[0-9a-f]+/,
        className: "number"
      },
      t.NUMBER_MODE,
      n
    ]
  }, d = [
    "fish",
    "bash",
    "zsh",
    "sh",
    "csh",
    "ksh",
    "tcsh",
    "dash",
    "scsh"
  ], f = t.SHEBANG({
    binary: `(${d.join("|")})`,
    relevance: 10
  }), h = {
    className: "function",
    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
    returnBegin: !0,
    contains: [t.inherit(t.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
    relevance: 0
  }, p = [
    "if",
    "then",
    "else",
    "elif",
    "fi",
    "for",
    "while",
    "until",
    "in",
    "do",
    "done",
    "case",
    "esac",
    "function",
    "select"
  ], g = [
    "true",
    "false"
  ], m = { match: /(\/[a-z._-]+)+/ }, y = [
    "break",
    "cd",
    "continue",
    "eval",
    "exec",
    "exit",
    "export",
    "getopts",
    "hash",
    "pwd",
    "readonly",
    "return",
    "shift",
    "test",
    "times",
    "trap",
    "umask",
    "unset"
  ], x = [
    "alias",
    "bind",
    "builtin",
    "caller",
    "command",
    "declare",
    "echo",
    "enable",
    "help",
    "let",
    "local",
    "logout",
    "mapfile",
    "printf",
    "read",
    "readarray",
    "source",
    "type",
    "typeset",
    "ulimit",
    "unalias"
  ], k = [
    "autoload",
    "bg",
    "bindkey",
    "bye",
    "cap",
    "chdir",
    "clone",
    "comparguments",
    "compcall",
    "compctl",
    "compdescribe",
    "compfiles",
    "compgroups",
    "compquote",
    "comptags",
    "comptry",
    "compvalues",
    "dirs",
    "disable",
    "disown",
    "echotc",
    "echoti",
    "emulate",
    "fc",
    "fg",
    "float",
    "functions",
    "getcap",
    "getln",
    "history",
    "integer",
    "jobs",
    "kill",
    "limit",
    "log",
    "noglob",
    "popd",
    "print",
    "pushd",
    "pushln",
    "rehash",
    "sched",
    "setcap",
    "setopt",
    "stat",
    "suspend",
    "ttyctl",
    "unfunction",
    "unhash",
    "unlimit",
    "unsetopt",
    "vared",
    "wait",
    "whence",
    "where",
    "which",
    "zcompile",
    "zformat",
    "zftp",
    "zle",
    "zmodload",
    "zparseopts",
    "zprof",
    "zpty",
    "zregexparse",
    "zsocket",
    "zstyle",
    "ztcp"
  ], b = [
    "chcon",
    "chgrp",
    "chown",
    "chmod",
    "cp",
    "dd",
    "df",
    "dir",
    "dircolors",
    "ln",
    "ls",
    "mkdir",
    "mkfifo",
    "mknod",
    "mktemp",
    "mv",
    "realpath",
    "rm",
    "rmdir",
    "shred",
    "sync",
    "touch",
    "truncate",
    "vdir",
    "b2sum",
    "base32",
    "base64",
    "cat",
    "cksum",
    "comm",
    "csplit",
    "cut",
    "expand",
    "fmt",
    "fold",
    "head",
    "join",
    "md5sum",
    "nl",
    "numfmt",
    "od",
    "paste",
    "ptx",
    "pr",
    "sha1sum",
    "sha224sum",
    "sha256sum",
    "sha384sum",
    "sha512sum",
    "shuf",
    "sort",
    "split",
    "sum",
    "tac",
    "tail",
    "tr",
    "tsort",
    "unexpand",
    "uniq",
    "wc",
    "arch",
    "basename",
    "chroot",
    "date",
    "dirname",
    "du",
    "echo",
    "env",
    "expr",
    "factor",
    // "false", // keyword literal already
    "groups",
    "hostid",
    "id",
    "link",
    "logname",
    "nice",
    "nohup",
    "nproc",
    "pathchk",
    "pinky",
    "printenv",
    "printf",
    "pwd",
    "readlink",
    "runcon",
    "seq",
    "sleep",
    "stat",
    "stdbuf",
    "stty",
    "tee",
    "test",
    "timeout",
    // "true", // keyword literal already
    "tty",
    "uname",
    "unlink",
    "uptime",
    "users",
    "who",
    "whoami",
    "yes"
  ];
  return {
    name: "Bash",
    aliases: ["sh"],
    keywords: {
      $pattern: /\b[a-z][a-z0-9._-]+\b/,
      keyword: p,
      literal: g,
      built_in: [
        ...y,
        ...x,
        // Shell modifiers
        "set",
        "shopt",
        ...k,
        ...b
      ]
    },
    contains: [
      f,
      // to catch known shells and boost relevancy
      t.SHEBANG(),
      // to catch unknown shells but still highlight the shebang
      h,
      c,
      t.HASH_COMMENT_MODE,
      s,
      m,
      o,
      a,
      l,
      u,
      n
    ]
  };
}
function J4(t) {
  const e = t.regex, n = t.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    variants: [
      { begin: "\\b[a-z\\d_]*_t\\b" },
      { match: /\batomic_[a-z]{3,6}\b/ }
    ]
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", u = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [t.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      t.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, c = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      t.inherit(u, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      n,
      t.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + t.IDENT_RE,
    relevance: 0
  }, h = e.optional(i) + t.IDENT_RE + "\\s*\\(", m = {
    keyword: [
      "asm",
      "auto",
      "break",
      "case",
      "continue",
      "default",
      "do",
      "else",
      "enum",
      "extern",
      "for",
      "fortran",
      "goto",
      "if",
      "inline",
      "register",
      "restrict",
      "return",
      "sizeof",
      "struct",
      "switch",
      "typedef",
      "union",
      "volatile",
      "while",
      "_Alignas",
      "_Alignof",
      "_Atomic",
      "_Generic",
      "_Noreturn",
      "_Static_assert",
      "_Thread_local",
      // aliases
      "alignas",
      "alignof",
      "noreturn",
      "static_assert",
      "thread_local",
      // not a C keyword but is, for all intents and purposes, treated exactly like one.
      "_Pragma"
    ],
    type: [
      "float",
      "double",
      "signed",
      "unsigned",
      "int",
      "short",
      "long",
      "char",
      "void",
      "_Bool",
      "_Complex",
      "_Imaginary",
      "_Decimal32",
      "_Decimal64",
      "_Decimal128",
      // modifiers
      "const",
      "static",
      // aliases
      "complex",
      "bool",
      "imaginary"
    ],
    literal: "true false NULL",
    // TODO: apply hinting work similar to what was done in cpp.js
    built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
  }, y = [
    d,
    a,
    n,
    t.C_BLOCK_COMMENT_MODE,
    c,
    u
  ], x = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: m,
    contains: y.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: m,
        contains: y.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, k = {
    begin: "(" + o + "[\\*&\\s]+)+" + h,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: m,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: m,
        relevance: 0
      },
      {
        begin: h,
        returnBegin: !0,
        contains: [t.inherit(f, { className: "title.function" })],
        relevance: 0
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: m,
        relevance: 0,
        contains: [
          n,
          t.C_BLOCK_COMMENT_MODE,
          u,
          c,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: m,
            relevance: 0,
            contains: [
              "self",
              n,
              t.C_BLOCK_COMMENT_MODE,
              u,
              c,
              a
            ]
          }
        ]
      },
      a,
      n,
      t.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C",
    aliases: ["h"],
    keywords: m,
    // Until differentiations are added between `c` and `cpp`, `c` will
    // not be auto-detected to avoid auto-detect conflicts between C and C++
    disableAutodetect: !0,
    illegal: "</",
    contains: [].concat(
      x,
      k,
      y,
      [
        d,
        {
          begin: t.IDENT_RE + "::",
          keywords: m
        },
        {
          className: "class",
          beginKeywords: "enum class struct union",
          end: /[{;:<>=]/,
          contains: [
            { beginKeywords: "final class struct" },
            t.TITLE_MODE
          ]
        }
      ]
    ),
    exports: {
      preprocessor: d,
      strings: u,
      keywords: m
    }
  };
}
function Y4(t) {
  const e = t.regex, n = t.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(?!struct)(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", u = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [t.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      t.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, c = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      t.inherit(u, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      n,
      t.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + t.IDENT_RE,
    relevance: 0
  }, h = e.optional(i) + t.IDENT_RE + "\\s*\\(", p = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], g = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], m = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], y = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], b = {
    type: g,
    keyword: p,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: m
  }, E = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: y
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      t.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, v = [
    E,
    d,
    a,
    n,
    t.C_BLOCK_COMMENT_MODE,
    c,
    u
  ], _ = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: b,
    contains: v.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: b,
        contains: v.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + h,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: b,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: b,
        relevance: 0
      },
      {
        begin: h,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          u,
          c
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: b,
        relevance: 0,
        contains: [
          n,
          t.C_BLOCK_COMMENT_MODE,
          u,
          c,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: b,
            relevance: 0,
            contains: [
              "self",
              n,
              t.C_BLOCK_COMMENT_MODE,
              u,
              c,
              a
            ]
          }
        ]
      },
      a,
      n,
      t.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: b,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      _,
      T,
      E,
      v,
      [
        d,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: b,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: t.IDENT_RE + "::",
          keywords: b
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function X4(t) {
  const e = [
    "bool",
    "byte",
    "char",
    "decimal",
    "delegate",
    "double",
    "dynamic",
    "enum",
    "float",
    "int",
    "long",
    "nint",
    "nuint",
    "object",
    "sbyte",
    "short",
    "string",
    "ulong",
    "uint",
    "ushort"
  ], n = [
    "public",
    "private",
    "protected",
    "static",
    "internal",
    "protected",
    "abstract",
    "async",
    "extern",
    "override",
    "unsafe",
    "virtual",
    "new",
    "sealed",
    "partial"
  ], r = [
    "default",
    "false",
    "null",
    "true"
  ], i = [
    "abstract",
    "as",
    "base",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "do",
    "else",
    "event",
    "explicit",
    "extern",
    "finally",
    "fixed",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "interface",
    "internal",
    "is",
    "lock",
    "namespace",
    "new",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "record",
    "ref",
    "return",
    "scoped",
    "sealed",
    "sizeof",
    "stackalloc",
    "static",
    "struct",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "unchecked",
    "unsafe",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
  ], s = [
    "add",
    "alias",
    "and",
    "ascending",
    "async",
    "await",
    "by",
    "descending",
    "equals",
    "from",
    "get",
    "global",
    "group",
    "init",
    "into",
    "join",
    "let",
    "nameof",
    "not",
    "notnull",
    "on",
    "or",
    "orderby",
    "partial",
    "remove",
    "select",
    "set",
    "unmanaged",
    "value|0",
    "var",
    "when",
    "where",
    "with",
    "yield"
  ], o = {
    keyword: i.concat(s),
    built_in: e,
    literal: r
  }, a = t.inherit(t.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), l = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, u = {
    className: "string",
    begin: '@"',
    end: '"',
    contains: [{ begin: '""' }]
  }, c = t.inherit(u, { illegal: /\n/ }), d = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: o
  }, f = t.inherit(d, { illegal: /\n/ }), h = {
    className: "string",
    begin: /\$"/,
    end: '"',
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      t.BACKSLASH_ESCAPE,
      f
    ]
  }, p = {
    className: "string",
    begin: /\$@"/,
    end: '"',
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      d
    ]
  }, g = t.inherit(p, {
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      f
    ]
  });
  d.contains = [
    p,
    h,
    u,
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE,
    l,
    t.C_BLOCK_COMMENT_MODE
  ], f.contains = [
    g,
    h,
    c,
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE,
    l,
    t.inherit(t.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
  ];
  const m = { variants: [
    p,
    h,
    u,
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE
  ] }, y = {
    begin: "<",
    end: ">",
    contains: [
      { beginKeywords: "in out" },
      a
    ]
  }, x = t.IDENT_RE + "(<" + t.IDENT_RE + "(\\s*,\\s*" + t.IDENT_RE + ")*>)?(\\[\\])?", k = {
    // prevents expressions like `@class` from incorrect flagging
    // `class` as a keyword
    begin: "@" + t.IDENT_RE,
    relevance: 0
  };
  return {
    name: "C#",
    aliases: [
      "cs",
      "c#"
    ],
    keywords: o,
    illegal: /::/,
    contains: [
      t.COMMENT(
        "///",
        "$",
        {
          returnBegin: !0,
          contains: [
            {
              className: "doctag",
              variants: [
                {
                  begin: "///",
                  relevance: 0
                },
                { begin: "<!--|-->" },
                {
                  begin: "</?",
                  end: ">"
                }
              ]
            }
          ]
        }
      ),
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
      },
      m,
      l,
      {
        beginKeywords: "class interface",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:,]/,
        contains: [
          { beginKeywords: "where class" },
          a,
          y,
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "record",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          y,
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // [Attributes("")]
        className: "meta",
        begin: "^\\s*\\[(?=[\\w])",
        excludeBegin: !0,
        end: "\\]",
        excludeEnd: !0,
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new return throw await else",
        relevance: 0
      },
      {
        className: "function",
        begin: "(" + x + "\\s+)+" + t.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
        returnBegin: !0,
        end: /\s*[{;=]/,
        excludeEnd: !0,
        keywords: o,
        contains: [
          // prevents these from being highlighted `title`
          {
            beginKeywords: n.join(" "),
            relevance: 0
          },
          {
            begin: t.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
            returnBegin: !0,
            contains: [
              t.TITLE_MODE,
              y
            ],
            relevance: 0
          },
          { match: /\(\)/ },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: o,
            relevance: 0,
            contains: [
              m,
              l,
              t.C_BLOCK_COMMENT_MODE
            ]
          },
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      k
    ]
  };
}
const Q4 = (t) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: t.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: t.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), e6 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], t6 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], n6 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], r6 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], i6 = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse();
function s6(t) {
  const e = t.regex, n = Q4(t), r = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, i = "and or not only", s = /@-?\w[\w]*(-\w+)*/, o = "[a-zA-Z-][a-zA-Z0-9_-]*", a = [
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE
  ];
  return {
    name: "CSS",
    case_insensitive: !0,
    illegal: /[=|'\$]/,
    keywords: { keyframePosition: "from to" },
    classNameAliases: {
      // for visual continuity with `tag {}` and because we
      // don't have a great class for this?
      keyframePosition: "selector-tag"
    },
    contains: [
      n.BLOCK_COMMENT,
      r,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      n.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: /#[A-Za-z0-9_-]+/,
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\." + o,
        relevance: 0
      },
      n.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        variants: [
          { begin: ":(" + n6.join("|") + ")" },
          { begin: ":(:)?(" + r6.join("|") + ")" }
        ]
      },
      // we may actually need this (12/2020)
      // { // pseudo-selector params
      //   begin: /\(/,
      //   end: /\)/,
      //   contains: [ hljs.CSS_NUMBER_MODE ]
      // },
      n.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + i6.join("|") + ")\\b"
      },
      // attribute values
      {
        begin: /:/,
        end: /[;}{]/,
        contains: [
          n.BLOCK_COMMENT,
          n.HEXCOLOR,
          n.IMPORTANT,
          n.CSS_NUMBER_MODE,
          ...a,
          // needed to highlight these as strings and to avoid issues with
          // illegal characters that might be inside urls that would tigger the
          // languages illegal stack
          {
            begin: /(url|data-uri)\(/,
            end: /\)/,
            relevance: 0,
            // from keywords
            keywords: { built_in: "url data-uri" },
            contains: [
              ...a,
              {
                className: "string",
                // any character other than `)` as in `url()` will be the start
                // of a string, which ends with `)` (from the parent mode)
                begin: /[^)]/,
                endsWithParent: !0,
                excludeEnd: !0
              }
            ]
          },
          n.FUNCTION_DISPATCH
        ]
      },
      {
        begin: e.lookahead(/@/),
        end: "[{;]",
        relevance: 0,
        illegal: /:/,
        // break on Less variables @var: ...
        contains: [
          {
            className: "keyword",
            begin: s
          },
          {
            begin: /\s/,
            endsWithParent: !0,
            excludeEnd: !0,
            relevance: 0,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: i,
              attribute: t6.join(" ")
            },
            contains: [
              {
                begin: /[a-z-]+(?=:)/,
                className: "attribute"
              },
              ...a,
              n.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: "selector-tag",
        begin: "\\b(" + e6.join("|") + ")\\b"
      }
    ]
  };
}
function o6(t) {
  const e = t.regex;
  return {
    name: "Diff",
    aliases: ["patch"],
    contains: [
      {
        className: "meta",
        relevance: 10,
        match: e.either(
          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
          /^--- +\d+,\d+ +----$/
        )
      },
      {
        className: "comment",
        variants: [
          {
            begin: e.either(
              /Index: /,
              /^index/,
              /={3,}/,
              /^-{3}/,
              /^\*{3} /,
              /^\+{3}/,
              /^diff --git/
            ),
            end: /$/
          },
          { match: /^\*{15}$/ }
        ]
      },
      {
        className: "addition",
        begin: /^\+/,
        end: /$/
      },
      {
        className: "deletion",
        begin: /^-/,
        end: /$/
      },
      {
        className: "addition",
        begin: /^!/,
        end: /$/
      }
    ]
  };
}
function a6(t) {
  const s = {
    keyword: [
      "break",
      "case",
      "chan",
      "const",
      "continue",
      "default",
      "defer",
      "else",
      "fallthrough",
      "for",
      "func",
      "go",
      "goto",
      "if",
      "import",
      "interface",
      "map",
      "package",
      "range",
      "return",
      "select",
      "struct",
      "switch",
      "type",
      "var"
    ],
    type: [
      "bool",
      "byte",
      "complex64",
      "complex128",
      "error",
      "float32",
      "float64",
      "int8",
      "int16",
      "int32",
      "int64",
      "string",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "int",
      "uint",
      "uintptr",
      "rune"
    ],
    literal: [
      "true",
      "false",
      "iota",
      "nil"
    ],
    built_in: [
      "append",
      "cap",
      "close",
      "complex",
      "copy",
      "imag",
      "len",
      "make",
      "new",
      "panic",
      "print",
      "println",
      "real",
      "recover",
      "delete"
    ]
  };
  return {
    name: "Go",
    aliases: ["golang"],
    keywords: s,
    illegal: "</",
    contains: [
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        variants: [
          t.QUOTE_STRING_MODE,
          t.APOS_STRING_MODE,
          {
            begin: "`",
            end: "`"
          }
        ]
      },
      {
        className: "number",
        variants: [
          {
            begin: t.C_NUMBER_RE + "[i]",
            relevance: 1
          },
          t.C_NUMBER_MODE
        ]
      },
      {
        begin: /:=/
        // relevance booster
      },
      {
        className: "function",
        beginKeywords: "func",
        end: "\\s*(\\{|$)",
        excludeEnd: !0,
        contains: [
          t.TITLE_MODE,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: s,
            illegal: /["']/
          }
        ]
      }
    ]
  };
}
function l6(t) {
  const e = t.regex, n = /[_A-Za-z][_0-9A-Za-z]*/;
  return {
    name: "GraphQL",
    aliases: ["gql"],
    case_insensitive: !0,
    disableAutodetect: !1,
    keywords: {
      keyword: [
        "query",
        "mutation",
        "subscription",
        "type",
        "input",
        "schema",
        "directive",
        "interface",
        "union",
        "scalar",
        "fragment",
        "enum",
        "on"
      ],
      literal: [
        "true",
        "false",
        "null"
      ]
    },
    contains: [
      t.HASH_COMMENT_MODE,
      t.QUOTE_STRING_MODE,
      t.NUMBER_MODE,
      {
        scope: "punctuation",
        match: /[.]{3}/,
        relevance: 0
      },
      {
        scope: "punctuation",
        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
        relevance: 0
      },
      {
        scope: "variable",
        begin: /\$/,
        end: /\W/,
        excludeEnd: !0,
        relevance: 0
      },
      {
        scope: "meta",
        match: /@\w+/,
        excludeEnd: !0
      },
      {
        scope: "symbol",
        begin: e.concat(n, e.lookahead(/\s*:/)),
        relevance: 0
      }
    ],
    illegal: [
      /[;<']/,
      /BEGIN/
    ]
  };
}
function u6(t) {
  const e = t.regex, n = {
    className: "number",
    relevance: 0,
    variants: [
      { begin: /([+-]+)?[\d]+_[\d_]+/ },
      { begin: t.NUMBER_RE }
    ]
  }, r = t.COMMENT();
  r.variants = [
    {
      begin: /;/,
      end: /$/
    },
    {
      begin: /#/,
      end: /$/
    }
  ];
  const i = {
    className: "variable",
    variants: [
      { begin: /\$[\w\d"][\w\d_]*/ },
      { begin: /\$\{(.*?)\}/ }
    ]
  }, s = {
    className: "literal",
    begin: /\bon|off|true|false|yes|no\b/
  }, o = {
    className: "string",
    contains: [t.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: "'''",
        end: "'''",
        relevance: 10
      },
      {
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      }
    ]
  }, a = {
    begin: /\[/,
    end: /\]/,
    contains: [
      r,
      s,
      i,
      o,
      n,
      "self"
    ],
    relevance: 0
  }, l = /[A-Za-z0-9_-]+/, u = /"(\\"|[^"])*"/, c = /'[^']*'/, d = e.either(
    l,
    u,
    c
  ), f = e.concat(
    d,
    "(\\s*\\.\\s*",
    d,
    ")*",
    e.lookahead(/\s*=\s*[^#\s]/)
  );
  return {
    name: "TOML, also INI",
    aliases: ["toml"],
    case_insensitive: !0,
    illegal: /\S/,
    contains: [
      r,
      {
        className: "section",
        begin: /\[+/,
        end: /\]+/
      },
      {
        begin: f,
        className: "attr",
        starts: {
          end: /$/,
          contains: [
            r,
            a,
            s,
            i,
            o,
            n
          ]
        }
      }
    ]
  };
}
var Vr = "[0-9](_*[0-9])*", js = `\\.(${Vr})`, Gs = "[0-9a-fA-F](_*[0-9a-fA-F])*", Sh = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${Vr})((${js})|\\.)?|(${js}))[eE][+-]?(${Vr})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${Vr})((${js})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${js})[fFdD]?\\b` },
    { begin: `\\b(${Vr})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${Gs})\\.?|(${Gs})?\\.(${Gs}))[pP][+-]?(${Vr})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${Gs})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function vg(t, e, n) {
  return n === -1 ? "" : t.replace(e, (r) => vg(t, e, n - 1));
}
function c6(t) {
  const e = t.regex, n = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", r = n + vg("(?:<" + n + "~~~(?:\\s*,\\s*" + n + "~~~)*>)?", /~~~/g, 2), l = {
    keyword: [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits"
    ],
    literal: [
      "false",
      "true",
      "null"
    ],
    type: [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ],
    built_in: [
      "super",
      "this"
    ]
  }, u = {
    className: "meta",
    begin: "@" + n,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: ["self"]
        // allow nested () inside our annotation
      }
    ]
  }, c = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    keywords: l,
    relevance: 0,
    contains: [t.C_BLOCK_COMMENT_MODE],
    endsParent: !0
  };
  return {
    name: "Java",
    aliases: ["jsp"],
    keywords: l,
    illegal: /<\/|#/,
    contains: [
      t.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      // relevance boost
      {
        begin: /import java\.[a-z]+\./,
        keywords: "import",
        relevance: 2
      },
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      {
        begin: /"""/,
        end: /"""/,
        className: "string",
        contains: [t.BACKSLASH_ESCAPE]
      },
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE,
      {
        match: [
          /\b(?:class|interface|enum|extends|implements|new)/,
          /\s+/,
          n
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        // Exceptions for hyphenated keywords
        match: /non-sealed/,
        scope: "keyword"
      },
      {
        begin: [
          e.concat(/(?!else)/, n),
          /\s+/,
          n,
          /\s+/,
          /=(?!=)/
        ],
        className: {
          1: "type",
          3: "variable",
          5: "operator"
        }
      },
      {
        begin: [
          /record/,
          /\s+/,
          n
        ],
        className: {
          1: "keyword",
          3: "title.class"
        },
        contains: [
          c,
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new throw return else",
        relevance: 0
      },
      {
        begin: [
          "(?:" + r + "\\s+)",
          t.UNDERSCORE_IDENT_RE,
          /\s*(?=\()/
        ],
        className: { 2: "title.function" },
        keywords: l,
        contains: [
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: l,
            relevance: 0,
            contains: [
              u,
              t.APOS_STRING_MODE,
              t.QUOTE_STRING_MODE,
              Sh,
              t.C_BLOCK_COMMENT_MODE
            ]
          },
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      Sh,
      u
    ]
  };
}
const Ah = "[A-Za-z$_][0-9A-Za-z$_]*", d6 = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
], f6 = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], Eg = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], Cg = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], _g = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], h6 = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], p6 = [].concat(
  _g,
  Eg,
  Cg
);
function g6(t) {
  const e = t.regex, n = (S, { after: L }) => {
    const F = "</" + S[0].slice(1);
    return S.input.indexOf(F, L) !== -1;
  }, r = Ah, i = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (S, L) => {
      const F = S[0].length + S.index, j = S.input[F];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        j === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        j === ","
      ) {
        L.ignoreMatch();
        return;
      }
      j === ">" && (n(S, { after: F }) || L.ignoreMatch());
      let Q;
      const pe = S.input.substring(F);
      if (Q = pe.match(/^\s*=/)) {
        L.ignoreMatch();
        return;
      }
      if ((Q = pe.match(/^\s+extends\s+/)) && Q.index === 0) {
        L.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: Ah,
    keyword: d6,
    literal: f6,
    built_in: p6,
    "variable.language": h6
  }, l = "[0-9](_?[0-9])*", u = `\\.(${l})`, c = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", d = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${c})((${u})|\\.)?|(${u}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${c})\\b((${u})\\b|\\.)?|(${u})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, h = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, p = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, g = {
    begin: "gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, m = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      t.BACKSLASH_ESCAPE,
      f
    ]
  }, x = {
    className: "comment",
    variants: [
      t.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: r + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      t.C_BLOCK_COMMENT_MODE,
      t.C_LINE_COMMENT_MODE
    ]
  }, k = [
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE,
    h,
    p,
    g,
    m,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    d
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = k.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(k)
  });
  const b = [].concat(x, f.contains), E = b.concat([
    // eat recursive parens in sub expressions
    {
      begin: /\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(b)
    }
  ]), v = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: E
  }, _ = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          r,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(r, "(", e.concat(/\./, r), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          r
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...Eg,
        ...Cg
      ]
    }
  }, w = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, N = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          r,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [v],
    illegal: /%/
  }, $ = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function K(S) {
    return e.concat("(?!", S.join("|"), ")");
  }
  const U = {
    match: e.concat(
      /\b/,
      K([
        ..._g,
        "super",
        "import"
      ]),
      r,
      e.lookahead(/\(/)
    ),
    className: "title.function",
    relevance: 0
  }, W = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(r, /(?![0-9A-Za-z$_(])/)
    )),
    end: r,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, z = {
    match: [
      /get|set/,
      /\s+/,
      r,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      v
    ]
  }, A = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + t.UNDERSCORE_IDENT_RE + ")\\s*=>", C = {
    match: [
      /const|var|let/,
      /\s+/,
      r,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(A)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      v
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: E, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      t.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      w,
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE,
      h,
      p,
      g,
      m,
      x,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      d,
      T,
      {
        className: "attr",
        begin: r + e.lookahead(":"),
        relevance: 0
      },
      C,
      {
        // "value" container
        begin: "(" + t.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          x,
          t.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: A,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: t.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: E
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: i.begin, end: i.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      N,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + t.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          v,
          t.inherit(t.TITLE_MODE, { begin: r, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      W,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + r,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [v]
      },
      U,
      $,
      _,
      z,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function m6(t) {
  const e = {
    className: "attr",
    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
    relevance: 1.01
  }, n = {
    match: /[{}[\],:]/,
    className: "punctuation",
    relevance: 0
  }, r = [
    "true",
    "false",
    "null"
  ], i = {
    scope: "literal",
    beginKeywords: r.join(" ")
  };
  return {
    name: "JSON",
    keywords: {
      literal: r
    },
    contains: [
      e,
      n,
      t.QUOTE_STRING_MODE,
      i,
      t.C_NUMBER_MODE,
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE
    ],
    illegal: "\\S"
  };
}
var Ur = "[0-9](_*[0-9])*", Js = `\\.(${Ur})`, Ys = "[0-9a-fA-F](_*[0-9a-fA-F])*", b6 = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${Ur})((${Js})|\\.)?|(${Js}))[eE][+-]?(${Ur})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${Ur})((${Js})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${Js})[fFdD]?\\b` },
    { begin: `\\b(${Ur})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${Ys})\\.?|(${Ys})?\\.(${Ys}))[pP][+-]?(${Ur})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${Ys})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function y6(t) {
  const e = {
    keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
    built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
    literal: "true false null"
  }, n = {
    className: "keyword",
    begin: /\b(break|continue|return|this)\b/,
    starts: { contains: [
      {
        className: "symbol",
        begin: /@\w+/
      }
    ] }
  }, r = {
    className: "symbol",
    begin: t.UNDERSCORE_IDENT_RE + "@"
  }, i = {
    className: "subst",
    begin: /\$\{/,
    end: /\}/,
    contains: [t.C_NUMBER_MODE]
  }, s = {
    className: "variable",
    begin: "\\$" + t.UNDERSCORE_IDENT_RE
  }, o = {
    className: "string",
    variants: [
      {
        begin: '"""',
        end: '"""(?=[^"])',
        contains: [
          s,
          i
        ]
      },
      // Can't use built-in modes easily, as we want to use STRING in the meta
      // context as 'meta-string' and there's no syntax to remove explicitly set
      // classNames in built-in modes.
      {
        begin: "'",
        end: "'",
        illegal: /\n/,
        contains: [t.BACKSLASH_ESCAPE]
      },
      {
        begin: '"',
        end: '"',
        illegal: /\n/,
        contains: [
          t.BACKSLASH_ESCAPE,
          s,
          i
        ]
      }
    ]
  };
  i.contains.push(o);
  const a = {
    className: "meta",
    begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + t.UNDERSCORE_IDENT_RE + ")?"
  }, l = {
    className: "meta",
    begin: "@" + t.UNDERSCORE_IDENT_RE,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          t.inherit(o, { className: "string" }),
          "self"
        ]
      }
    ]
  }, u = b6, c = t.COMMENT(
    "/\\*",
    "\\*/",
    { contains: [t.C_BLOCK_COMMENT_MODE] }
  ), d = { variants: [
    {
      className: "type",
      begin: t.UNDERSCORE_IDENT_RE
    },
    {
      begin: /\(/,
      end: /\)/,
      contains: []
      // defined later
    }
  ] }, f = d;
  return f.variants[1].contains = [d], d.variants[1].contains = [f], {
    name: "Kotlin",
    aliases: [
      "kt",
      "kts"
    ],
    keywords: e,
    contains: [
      t.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      t.C_LINE_COMMENT_MODE,
      c,
      n,
      r,
      a,
      l,
      {
        className: "function",
        beginKeywords: "fun",
        end: "[(]|$",
        returnBegin: !0,
        excludeEnd: !0,
        keywords: e,
        relevance: 5,
        contains: [
          {
            begin: t.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: !0,
            relevance: 0,
            contains: [t.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "type",
            begin: /</,
            end: />/,
            keywords: "reified",
            relevance: 0
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: e,
            relevance: 0,
            contains: [
              {
                begin: /:/,
                end: /[=,\/]/,
                endsWithParent: !0,
                contains: [
                  d,
                  t.C_LINE_COMMENT_MODE,
                  c
                ],
                relevance: 0
              },
              t.C_LINE_COMMENT_MODE,
              c,
              a,
              l,
              o,
              t.C_NUMBER_MODE
            ]
          },
          c
        ]
      },
      {
        begin: [
          /class|interface|trait/,
          /\s+/,
          t.UNDERSCORE_IDENT_RE
        ],
        beginScope: {
          3: "title.class"
        },
        keywords: "class interface trait",
        end: /[:\{(]|$/,
        excludeEnd: !0,
        illegal: "extends implements",
        contains: [
          { beginKeywords: "public protected internal private constructor" },
          t.UNDERSCORE_TITLE_MODE,
          {
            className: "type",
            begin: /</,
            end: />/,
            excludeBegin: !0,
            excludeEnd: !0,
            relevance: 0
          },
          {
            className: "type",
            begin: /[,:]\s*/,
            end: /[<\(,){\s]|$/,
            excludeBegin: !0,
            returnEnd: !0
          },
          a,
          l
        ]
      },
      o,
      {
        className: "meta",
        begin: "^#!/usr/bin/env",
        end: "$",
        illegal: `
`
      },
      u
    ]
  };
}
const x6 = (t) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: t.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: t.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), k6 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], v6 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], wg = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], Sg = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], E6 = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse(), C6 = wg.concat(Sg);
function _6(t) {
  const e = x6(t), n = C6, r = "and or not only", i = "[\\w-]+", s = "(" + i + "|@\\{" + i + "\\})", o = [], a = [], l = function(k) {
    return {
      // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
      className: "string",
      begin: "~?" + k + ".*?" + k
    };
  }, u = function(k, b, E) {
    return {
      className: k,
      begin: b,
      relevance: E
    };
  }, c = {
    $pattern: /[a-z-]+/,
    keyword: r,
    attribute: v6.join(" ")
  }, d = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: "\\(",
    end: "\\)",
    contains: a,
    keywords: c,
    relevance: 0
  };
  a.push(
    t.C_LINE_COMMENT_MODE,
    t.C_BLOCK_COMMENT_MODE,
    l("'"),
    l('"'),
    e.CSS_NUMBER_MODE,
    // fixme: it does not include dot for numbers like .5em :(
    {
      begin: "(url|data-uri)\\(",
      starts: {
        className: "string",
        end: "[\\)\\n]",
        excludeEnd: !0
      }
    },
    e.HEXCOLOR,
    d,
    u("variable", "@@?" + i, 10),
    u("variable", "@\\{" + i + "\\}"),
    u("built_in", "~?`[^`]*?`"),
    // inline javascript (or whatever host language) *multiline* string
    {
      // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
      className: "attribute",
      begin: i + "\\s*:",
      end: ":",
      returnBegin: !0,
      excludeEnd: !0
    },
    e.IMPORTANT,
    { beginKeywords: "and not" },
    e.FUNCTION_DISPATCH
  );
  const f = a.concat({
    begin: /\{/,
    end: /\}/,
    contains: o
  }), h = {
    beginKeywords: "when",
    endsWithParent: !0,
    contains: [{ beginKeywords: "and not" }].concat(a)
    // using this form to override VALUE’s 'function' match
  }, p = {
    begin: s + "\\s*:",
    returnBegin: !0,
    end: /[;}]/,
    relevance: 0,
    contains: [
      { begin: /-(webkit|moz|ms|o)-/ },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + E6.join("|") + ")\\b",
        end: /(?=:)/,
        starts: {
          endsWithParent: !0,
          illegal: "[<=$]",
          relevance: 0,
          contains: a
        }
      }
    ]
  }, g = {
    className: "keyword",
    begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
    starts: {
      end: "[;{}]",
      keywords: c,
      returnEnd: !0,
      contains: a,
      relevance: 0
    }
  }, m = {
    className: "variable",
    variants: [
      // using more strict pattern for higher relevance to increase chances of Less detection.
      // this is *the only* Less specific statement used in most of the sources, so...
      // (we’ll still often loose to the css-parser unless there's '//' comment,
      // simply because 1 variable just can't beat 99 properties :)
      {
        begin: "@" + i + "\\s*:",
        relevance: 15
      },
      { begin: "@" + i }
    ],
    starts: {
      end: "[;}]",
      returnEnd: !0,
      contains: f
    }
  }, y = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [
      {
        begin: "[\\.#:&\\[>]",
        end: "[;{}]"
        // mixin calls end with ';'
      },
      {
        begin: s,
        end: /\{/
      }
    ],
    returnBegin: !0,
    returnEnd: !0,
    illegal: `[<='$"]`,
    relevance: 0,
    contains: [
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      h,
      u("keyword", "all\\b"),
      u("variable", "@\\{" + i + "\\}"),
      // otherwise it’s identified as tag
      {
        begin: "\\b(" + k6.join("|") + ")\\b",
        className: "selector-tag"
      },
      e.CSS_NUMBER_MODE,
      u("selector-tag", s, 0),
      u("selector-id", "#" + s),
      u("selector-class", "\\." + s, 0),
      u("selector-tag", "&", 0),
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        begin: ":(" + wg.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + Sg.join("|") + ")"
      },
      {
        begin: /\(/,
        end: /\)/,
        relevance: 0,
        contains: f
      },
      // argument list of parametric mixins
      { begin: "!important" },
      // eat !important after mixin call or it will be colored as tag
      e.FUNCTION_DISPATCH
    ]
  }, x = {
    begin: i + `:(:)?(${n.join("|")})`,
    returnBegin: !0,
    contains: [y]
  };
  return o.push(
    t.C_LINE_COMMENT_MODE,
    t.C_BLOCK_COMMENT_MODE,
    g,
    m,
    x,
    p,
    y,
    h,
    e.FUNCTION_DISPATCH
  ), {
    name: "Less",
    case_insensitive: !0,
    illegal: `[=>'/<($"]`,
    contains: o
  };
}
function w6(t) {
  const e = "\\[=*\\[", n = "\\]=*\\]", r = {
    begin: e,
    end: n,
    contains: ["self"]
  }, i = [
    t.COMMENT("--(?!" + e + ")", "$"),
    t.COMMENT(
      "--" + e,
      n,
      {
        contains: [r],
        relevance: 10
      }
    )
  ];
  return {
    name: "Lua",
    keywords: {
      $pattern: t.UNDERSCORE_IDENT_RE,
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in: (
        // Metatags and globals:
        "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
      )
    },
    contains: i.concat([
      {
        className: "function",
        beginKeywords: "function",
        end: "\\)",
        contains: [
          t.inherit(t.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
          {
            className: "params",
            begin: "\\(",
            endsWithParent: !0,
            contains: i
          }
        ].concat(i)
      },
      t.C_NUMBER_MODE,
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: e,
        end: n,
        contains: [r],
        relevance: 5
      }
    ])
  };
}
function S6(t) {
  const e = {
    className: "variable",
    variants: [
      {
        begin: "\\$\\(" + t.UNDERSCORE_IDENT_RE + "\\)",
        contains: [t.BACKSLASH_ESCAPE]
      },
      { begin: /\$[@%<?\^\+\*]/ }
    ]
  }, n = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      t.BACKSLASH_ESCAPE,
      e
    ]
  }, r = {
    className: "variable",
    begin: /\$\([\w-]+\s/,
    end: /\)/,
    keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
    contains: [e]
  }, i = { begin: "^" + t.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, s = {
    className: "meta",
    begin: /^\.PHONY:/,
    end: /$/,
    keywords: {
      $pattern: /[\.\w]+/,
      keyword: ".PHONY"
    }
  }, o = {
    className: "section",
    begin: /^[^\s]+:/,
    end: /$/,
    contains: [e]
  };
  return {
    name: "Makefile",
    aliases: [
      "mk",
      "mak",
      "make"
    ],
    keywords: {
      $pattern: /[\w-]+/,
      keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
    },
    contains: [
      t.HASH_COMMENT_MODE,
      e,
      n,
      r,
      i,
      s,
      o
    ]
  };
}
function A6(t) {
  const e = t.regex, n = {
    begin: /<\/?[A-Za-z_]/,
    end: ">",
    subLanguage: "xml",
    relevance: 0
  }, r = {
    begin: "^[-\\*]{3,}",
    end: "$"
  }, i = {
    className: "code",
    variants: [
      // TODO: fix to allow these to work with sublanguage also
      { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
      { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
      // needed to allow markdown as a sublanguage to work
      {
        begin: "```",
        end: "```+[ ]*$"
      },
      {
        begin: "~~~",
        end: "~~~+[ ]*$"
      },
      { begin: "`.+?`" },
      {
        begin: "(?=^( {4}|\\t))",
        // use contains to gobble up multiple lines to allow the block to be whatever size
        // but only have a single open/close tag vs one per line
        contains: [
          {
            begin: "^( {4}|\\t)",
            end: "(\\n)$"
          }
        ],
        relevance: 0
      }
    ]
  }, s = {
    className: "bullet",
    begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
    end: "\\s+",
    excludeEnd: !0
  }, o = {
    begin: /^\[[^\n]+\]:/,
    returnBegin: !0,
    contains: [
      {
        className: "symbol",
        begin: /\[/,
        end: /\]/,
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "link",
        begin: /:\s*/,
        end: /$/,
        excludeBegin: !0
      }
    ]
  }, a = /[A-Za-z][A-Za-z0-9+.-]*/, l = {
    variants: [
      // too much like nested array access in so many languages
      // to have any real relevance
      {
        begin: /\[.+?\]\[.*?\]/,
        relevance: 0
      },
      // popular internet URLs
      {
        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
        relevance: 2
      },
      {
        begin: e.concat(/\[.+?\]\(/, a, /:\/\/.*?\)/),
        relevance: 2
      },
      // relative urls
      {
        begin: /\[.+?\]\([./?&#].*?\)/,
        relevance: 1
      },
      // whatever else, lower relevance (might not be a link at all)
      {
        begin: /\[.*?\]\(.*?\)/,
        relevance: 0
      }
    ],
    returnBegin: !0,
    contains: [
      {
        // empty strings for alt or link text
        match: /\[(?=\])/
      },
      {
        className: "string",
        relevance: 0,
        begin: "\\[",
        end: "\\]",
        excludeBegin: !0,
        returnEnd: !0
      },
      {
        className: "link",
        relevance: 0,
        begin: "\\]\\(",
        end: "\\)",
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "symbol",
        relevance: 0,
        begin: "\\]\\[",
        end: "\\]",
        excludeBegin: !0,
        excludeEnd: !0
      }
    ]
  }, u = {
    className: "strong",
    contains: [],
    // defined later
    variants: [
      {
        begin: /_{2}(?!\s)/,
        end: /_{2}/
      },
      {
        begin: /\*{2}(?!\s)/,
        end: /\*{2}/
      }
    ]
  }, c = {
    className: "emphasis",
    contains: [],
    // defined later
    variants: [
      {
        begin: /\*(?![*\s])/,
        end: /\*/
      },
      {
        begin: /_(?![_\s])/,
        end: /_/,
        relevance: 0
      }
    ]
  }, d = t.inherit(u, { contains: [] }), f = t.inherit(c, { contains: [] });
  u.contains.push(f), c.contains.push(d);
  let h = [
    n,
    l
  ];
  return [
    u,
    c,
    d,
    f
  ].forEach((m) => {
    m.contains = m.contains.concat(h);
  }), h = h.concat(u, c), {
    name: "Markdown",
    aliases: [
      "md",
      "mkdown",
      "mkd"
    ],
    contains: [
      {
        className: "section",
        variants: [
          {
            begin: "^#{1,6}",
            end: "$",
            contains: h
          },
          {
            begin: "(?=^.+?\\n[=-]{2,}$)",
            contains: [
              { begin: "^[=-]*$" },
              {
                begin: "^",
                end: "\\n",
                contains: h
              }
            ]
          }
        ]
      },
      n,
      s,
      u,
      c,
      {
        className: "quote",
        begin: "^>\\s+",
        contains: h,
        end: "$"
      },
      i,
      r,
      l,
      o
    ]
  };
}
function M6(t) {
  const e = {
    className: "built_in",
    begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
  }, n = /[a-zA-Z@][a-zA-Z0-9_]*/, a = {
    "variable.language": [
      "this",
      "super"
    ],
    $pattern: n,
    keyword: [
      "while",
      "export",
      "sizeof",
      "typedef",
      "const",
      "struct",
      "for",
      "union",
      "volatile",
      "static",
      "mutable",
      "if",
      "do",
      "return",
      "goto",
      "enum",
      "else",
      "break",
      "extern",
      "asm",
      "case",
      "default",
      "register",
      "explicit",
      "typename",
      "switch",
      "continue",
      "inline",
      "readonly",
      "assign",
      "readwrite",
      "self",
      "@synchronized",
      "id",
      "typeof",
      "nonatomic",
      "IBOutlet",
      "IBAction",
      "strong",
      "weak",
      "copy",
      "in",
      "out",
      "inout",
      "bycopy",
      "byref",
      "oneway",
      "__strong",
      "__weak",
      "__block",
      "__autoreleasing",
      "@private",
      "@protected",
      "@public",
      "@try",
      "@property",
      "@end",
      "@throw",
      "@catch",
      "@finally",
      "@autoreleasepool",
      "@synthesize",
      "@dynamic",
      "@selector",
      "@optional",
      "@required",
      "@encode",
      "@package",
      "@import",
      "@defs",
      "@compatibility_alias",
      "__bridge",
      "__bridge_transfer",
      "__bridge_retained",
      "__bridge_retain",
      "__covariant",
      "__contravariant",
      "__kindof",
      "_Nonnull",
      "_Nullable",
      "_Null_unspecified",
      "__FUNCTION__",
      "__PRETTY_FUNCTION__",
      "__attribute__",
      "getter",
      "setter",
      "retain",
      "unsafe_unretained",
      "nonnull",
      "nullable",
      "null_unspecified",
      "null_resettable",
      "class",
      "instancetype",
      "NS_DESIGNATED_INITIALIZER",
      "NS_UNAVAILABLE",
      "NS_REQUIRES_SUPER",
      "NS_RETURNS_INNER_POINTER",
      "NS_INLINE",
      "NS_AVAILABLE",
      "NS_DEPRECATED",
      "NS_ENUM",
      "NS_OPTIONS",
      "NS_SWIFT_UNAVAILABLE",
      "NS_ASSUME_NONNULL_BEGIN",
      "NS_ASSUME_NONNULL_END",
      "NS_REFINED_FOR_SWIFT",
      "NS_SWIFT_NAME",
      "NS_SWIFT_NOTHROW",
      "NS_DURING",
      "NS_HANDLER",
      "NS_ENDHANDLER",
      "NS_VALUERETURN",
      "NS_VOIDRETURN"
    ],
    literal: [
      "false",
      "true",
      "FALSE",
      "TRUE",
      "nil",
      "YES",
      "NO",
      "NULL"
    ],
    built_in: [
      "dispatch_once_t",
      "dispatch_queue_t",
      "dispatch_sync",
      "dispatch_async",
      "dispatch_once"
    ],
    type: [
      "int",
      "float",
      "char",
      "unsigned",
      "signed",
      "short",
      "long",
      "double",
      "wchar_t",
      "unichar",
      "void",
      "bool",
      "BOOL",
      "id|0",
      "_Bool"
    ]
  }, l = {
    $pattern: n,
    keyword: [
      "@interface",
      "@class",
      "@protocol",
      "@implementation"
    ]
  };
  return {
    name: "Objective-C",
    aliases: [
      "mm",
      "objc",
      "obj-c",
      "obj-c++",
      "objective-c++"
    ],
    keywords: a,
    illegal: "</",
    contains: [
      e,
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      t.C_NUMBER_MODE,
      t.QUOTE_STRING_MODE,
      t.APOS_STRING_MODE,
      {
        className: "string",
        variants: [
          {
            begin: '@"',
            end: '"',
            illegal: "\\n",
            contains: [t.BACKSLASH_ESCAPE]
          }
        ]
      },
      {
        className: "meta",
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          t.inherit(t.QUOTE_STRING_MODE, { className: "string" }),
          {
            className: "string",
            begin: /<.*?>/,
            end: /$/,
            illegal: "\\n"
          },
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "class",
        begin: "(" + l.keyword.join("|") + ")\\b",
        end: /(\{|$)/,
        excludeEnd: !0,
        keywords: l,
        contains: [t.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: "\\." + t.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
}
function T6(t) {
  const e = t.regex, n = [
    "abs",
    "accept",
    "alarm",
    "and",
    "atan2",
    "bind",
    "binmode",
    "bless",
    "break",
    "caller",
    "chdir",
    "chmod",
    "chomp",
    "chop",
    "chown",
    "chr",
    "chroot",
    "close",
    "closedir",
    "connect",
    "continue",
    "cos",
    "crypt",
    "dbmclose",
    "dbmopen",
    "defined",
    "delete",
    "die",
    "do",
    "dump",
    "each",
    "else",
    "elsif",
    "endgrent",
    "endhostent",
    "endnetent",
    "endprotoent",
    "endpwent",
    "endservent",
    "eof",
    "eval",
    "exec",
    "exists",
    "exit",
    "exp",
    "fcntl",
    "fileno",
    "flock",
    "for",
    "foreach",
    "fork",
    "format",
    "formline",
    "getc",
    "getgrent",
    "getgrgid",
    "getgrnam",
    "gethostbyaddr",
    "gethostbyname",
    "gethostent",
    "getlogin",
    "getnetbyaddr",
    "getnetbyname",
    "getnetent",
    "getpeername",
    "getpgrp",
    "getpriority",
    "getprotobyname",
    "getprotobynumber",
    "getprotoent",
    "getpwent",
    "getpwnam",
    "getpwuid",
    "getservbyname",
    "getservbyport",
    "getservent",
    "getsockname",
    "getsockopt",
    "given",
    "glob",
    "gmtime",
    "goto",
    "grep",
    "gt",
    "hex",
    "if",
    "index",
    "int",
    "ioctl",
    "join",
    "keys",
    "kill",
    "last",
    "lc",
    "lcfirst",
    "length",
    "link",
    "listen",
    "local",
    "localtime",
    "log",
    "lstat",
    "lt",
    "ma",
    "map",
    "mkdir",
    "msgctl",
    "msgget",
    "msgrcv",
    "msgsnd",
    "my",
    "ne",
    "next",
    "no",
    "not",
    "oct",
    "open",
    "opendir",
    "or",
    "ord",
    "our",
    "pack",
    "package",
    "pipe",
    "pop",
    "pos",
    "print",
    "printf",
    "prototype",
    "push",
    "q|0",
    "qq",
    "quotemeta",
    "qw",
    "qx",
    "rand",
    "read",
    "readdir",
    "readline",
    "readlink",
    "readpipe",
    "recv",
    "redo",
    "ref",
    "rename",
    "require",
    "reset",
    "return",
    "reverse",
    "rewinddir",
    "rindex",
    "rmdir",
    "say",
    "scalar",
    "seek",
    "seekdir",
    "select",
    "semctl",
    "semget",
    "semop",
    "send",
    "setgrent",
    "sethostent",
    "setnetent",
    "setpgrp",
    "setpriority",
    "setprotoent",
    "setpwent",
    "setservent",
    "setsockopt",
    "shift",
    "shmctl",
    "shmget",
    "shmread",
    "shmwrite",
    "shutdown",
    "sin",
    "sleep",
    "socket",
    "socketpair",
    "sort",
    "splice",
    "split",
    "sprintf",
    "sqrt",
    "srand",
    "stat",
    "state",
    "study",
    "sub",
    "substr",
    "symlink",
    "syscall",
    "sysopen",
    "sysread",
    "sysseek",
    "system",
    "syswrite",
    "tell",
    "telldir",
    "tie",
    "tied",
    "time",
    "times",
    "tr",
    "truncate",
    "uc",
    "ucfirst",
    "umask",
    "undef",
    "unless",
    "unlink",
    "unpack",
    "unshift",
    "untie",
    "until",
    "use",
    "utime",
    "values",
    "vec",
    "wait",
    "waitpid",
    "wantarray",
    "warn",
    "when",
    "while",
    "write",
    "x|0",
    "xor",
    "y|0"
  ], r = /[dualxmsipngr]{0,12}/, i = {
    $pattern: /[\w.]+/,
    keyword: n.join(" ")
  }, s = {
    className: "subst",
    begin: "[$@]\\{",
    end: "\\}",
    keywords: i
  }, o = {
    begin: /->\{/,
    end: /\}/
    // contains defined later
  }, a = { variants: [
    { begin: /\$\d/ },
    { begin: e.concat(
      /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
      // negative look-ahead tries to avoid matching patterns that are not
      // Perl at all like $ident$, @ident@, etc.
      "(?![A-Za-z])(?![@$%])"
    ) },
    {
      begin: /[$%@][^\s\w{]/,
      relevance: 0
    }
  ] }, l = [
    t.BACKSLASH_ESCAPE,
    s,
    a
  ], u = [
    /!/,
    /\//,
    /\|/,
    /\?/,
    /'/,
    /"/,
    // valid but infrequent and weird
    /#/
    // valid but infrequent and weird
  ], c = (h, p, g = "\\1") => {
    const m = g === "\\1" ? g : e.concat(g, p);
    return e.concat(
      e.concat("(?:", h, ")"),
      p,
      /(?:\\.|[^\\\/])*?/,
      m,
      /(?:\\.|[^\\\/])*?/,
      g,
      r
    );
  }, d = (h, p, g) => e.concat(
    e.concat("(?:", h, ")"),
    p,
    /(?:\\.|[^\\\/])*?/,
    g,
    r
  ), f = [
    a,
    t.HASH_COMMENT_MODE,
    t.COMMENT(
      /^=\w/,
      /=cut/,
      { endsWithParent: !0 }
    ),
    o,
    {
      className: "string",
      contains: l,
      variants: [
        {
          begin: "q[qwxr]?\\s*\\(",
          end: "\\)",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\[",
          end: "\\]",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\{",
          end: "\\}",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\|",
          end: "\\|",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*<",
          end: ">",
          relevance: 5
        },
        {
          begin: "qw\\s+q",
          end: "q",
          relevance: 5
        },
        {
          begin: "'",
          end: "'",
          contains: [t.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "`",
          end: "`",
          contains: [t.BACKSLASH_ESCAPE]
        },
        {
          begin: /\{\w+\}/,
          relevance: 0
        },
        {
          begin: "-?\\w+\\s*=>",
          relevance: 0
        }
      ]
    },
    {
      className: "number",
      begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
      relevance: 0
    },
    {
      // regexp container
      begin: "(\\/\\/|" + t.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
      keywords: "split return print reverse grep",
      relevance: 0,
      contains: [
        t.HASH_COMMENT_MODE,
        {
          className: "regexp",
          variants: [
            // allow matching common delimiters
            { begin: c("s|tr|y", e.either(...u, { capture: !0 })) },
            // and then paired delmis
            { begin: c("s|tr|y", "\\(", "\\)") },
            { begin: c("s|tr|y", "\\[", "\\]") },
            { begin: c("s|tr|y", "\\{", "\\}") }
          ],
          relevance: 2
        },
        {
          className: "regexp",
          variants: [
            {
              // could be a comment in many languages so do not count
              // as relevant
              begin: /(m|qr)\/\//,
              relevance: 0
            },
            // prefix is optional with /regex/
            { begin: d("(?:m|qr)?", /\//, /\//) },
            // allow matching common delimiters
            { begin: d("m|qr", e.either(...u, { capture: !0 }), /\1/) },
            // allow common paired delmins
            { begin: d("m|qr", /\(/, /\)/) },
            { begin: d("m|qr", /\[/, /\]/) },
            { begin: d("m|qr", /\{/, /\}/) }
          ]
        }
      ]
    },
    {
      className: "function",
      beginKeywords: "sub",
      end: "(\\s*\\(.*?\\))?[;{]",
      excludeEnd: !0,
      relevance: 5,
      contains: [t.TITLE_MODE]
    },
    {
      begin: "-\\w\\b",
      relevance: 0
    },
    {
      begin: "^__DATA__$",
      end: "^__END__$",
      subLanguage: "mojolicious",
      contains: [
        {
          begin: "^@@.*",
          end: "$",
          className: "comment"
        }
      ]
    }
  ];
  return s.contains = f, o.contains = f, {
    name: "Perl",
    aliases: [
      "pl",
      "pm"
    ],
    keywords: i,
    contains: f
  };
}
function D6(t) {
  const e = t.regex, n = /(?![A-Za-z0-9])(?![$])/, r = e.concat(
    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
    n
  ), i = e.concat(
    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
    n
  ), s = {
    scope: "variable",
    match: "\\$+" + r
  }, o = {
    scope: "meta",
    variants: [
      { begin: /<\?php/, relevance: 10 },
      // boost for obvious PHP
      { begin: /<\?=/ },
      // less relevant per PSR-1 which says not to use short-tags
      { begin: /<\?/, relevance: 0.1 },
      { begin: /\?>/ }
      // end php tag
    ]
  }, a = {
    scope: "subst",
    variants: [
      { begin: /\$\w+/ },
      {
        begin: /\{\$/,
        end: /\}/
      }
    ]
  }, l = t.inherit(t.APOS_STRING_MODE, { illegal: null }), u = t.inherit(t.QUOTE_STRING_MODE, {
    illegal: null,
    contains: t.QUOTE_STRING_MODE.contains.concat(a)
  }), c = {
    begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
    end: /[ \t]*(\w+)\b/,
    contains: t.QUOTE_STRING_MODE.contains.concat(a),
    "on:begin": (U, W) => {
      W.data._beginMatch = U[1] || U[2];
    },
    "on:end": (U, W) => {
      W.data._beginMatch !== U[1] && W.ignoreMatch();
    }
  }, d = t.END_SAME_AS_BEGIN({
    begin: /<<<[ \t]*'(\w+)'\n/,
    end: /[ \t]*(\w+)\b/
  }), f = `[ 	
]`, h = {
    scope: "string",
    variants: [
      u,
      l,
      c,
      d
    ]
  }, p = {
    scope: "number",
    variants: [
      { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
      // Binary w/ underscore support
      { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
      // Octals w/ underscore support
      { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
      // Hex w/ underscore support
      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
      { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
    ],
    relevance: 0
  }, g = [
    "false",
    "null",
    "true"
  ], m = [
    // Magic constants:
    // <https://www.php.net/manual/en/language.constants.predefined.php>
    "__CLASS__",
    "__DIR__",
    "__FILE__",
    "__FUNCTION__",
    "__COMPILER_HALT_OFFSET__",
    "__LINE__",
    "__METHOD__",
    "__NAMESPACE__",
    "__TRAIT__",
    // Function that look like language construct or language construct that look like function:
    // List of keywords that may not require parenthesis
    "die",
    "echo",
    "exit",
    "include",
    "include_once",
    "print",
    "require",
    "require_once",
    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
    // Other keywords:
    // <https://www.php.net/manual/en/reserved.php>
    // <https://www.php.net/manual/en/language.types.type-juggling.php>
    "array",
    "abstract",
    "and",
    "as",
    "binary",
    "bool",
    "boolean",
    "break",
    "callable",
    "case",
    "catch",
    "class",
    "clone",
    "const",
    "continue",
    "declare",
    "default",
    "do",
    "double",
    "else",
    "elseif",
    "empty",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "enum",
    "eval",
    "extends",
    "final",
    "finally",
    "float",
    "for",
    "foreach",
    "from",
    "global",
    "goto",
    "if",
    "implements",
    "instanceof",
    "insteadof",
    "int",
    "integer",
    "interface",
    "isset",
    "iterable",
    "list",
    "match|0",
    "mixed",
    "new",
    "never",
    "object",
    "or",
    "private",
    "protected",
    "public",
    "readonly",
    "real",
    "return",
    "string",
    "switch",
    "throw",
    "trait",
    "try",
    "unset",
    "use",
    "var",
    "void",
    "while",
    "xor",
    "yield"
  ], y = [
    // Standard PHP library:
    // <https://www.php.net/manual/en/book.spl.php>
    "Error|0",
    "AppendIterator",
    "ArgumentCountError",
    "ArithmeticError",
    "ArrayIterator",
    "ArrayObject",
    "AssertionError",
    "BadFunctionCallException",
    "BadMethodCallException",
    "CachingIterator",
    "CallbackFilterIterator",
    "CompileError",
    "Countable",
    "DirectoryIterator",
    "DivisionByZeroError",
    "DomainException",
    "EmptyIterator",
    "ErrorException",
    "Exception",
    "FilesystemIterator",
    "FilterIterator",
    "GlobIterator",
    "InfiniteIterator",
    "InvalidArgumentException",
    "IteratorIterator",
    "LengthException",
    "LimitIterator",
    "LogicException",
    "MultipleIterator",
    "NoRewindIterator",
    "OutOfBoundsException",
    "OutOfRangeException",
    "OuterIterator",
    "OverflowException",
    "ParentIterator",
    "ParseError",
    "RangeException",
    "RecursiveArrayIterator",
    "RecursiveCachingIterator",
    "RecursiveCallbackFilterIterator",
    "RecursiveDirectoryIterator",
    "RecursiveFilterIterator",
    "RecursiveIterator",
    "RecursiveIteratorIterator",
    "RecursiveRegexIterator",
    "RecursiveTreeIterator",
    "RegexIterator",
    "RuntimeException",
    "SeekableIterator",
    "SplDoublyLinkedList",
    "SplFileInfo",
    "SplFileObject",
    "SplFixedArray",
    "SplHeap",
    "SplMaxHeap",
    "SplMinHeap",
    "SplObjectStorage",
    "SplObserver",
    "SplPriorityQueue",
    "SplQueue",
    "SplStack",
    "SplSubject",
    "SplTempFileObject",
    "TypeError",
    "UnderflowException",
    "UnexpectedValueException",
    "UnhandledMatchError",
    // Reserved interfaces:
    // <https://www.php.net/manual/en/reserved.interfaces.php>
    "ArrayAccess",
    "BackedEnum",
    "Closure",
    "Fiber",
    "Generator",
    "Iterator",
    "IteratorAggregate",
    "Serializable",
    "Stringable",
    "Throwable",
    "Traversable",
    "UnitEnum",
    "WeakReference",
    "WeakMap",
    // Reserved classes:
    // <https://www.php.net/manual/en/reserved.classes.php>
    "Directory",
    "__PHP_Incomplete_Class",
    "parent",
    "php_user_filter",
    "self",
    "static",
    "stdClass"
  ], k = {
    keyword: m,
    literal: ((U) => {
      const W = [];
      return U.forEach((z) => {
        W.push(z), z.toLowerCase() === z ? W.push(z.toUpperCase()) : W.push(z.toLowerCase());
      }), W;
    })(g),
    built_in: y
  }, b = (U) => U.map((W) => W.replace(/\|\d+$/, "")), E = { variants: [
    {
      match: [
        /new/,
        e.concat(f, "+"),
        // to prevent built ins from being confused as the class constructor call
        e.concat("(?!", b(y).join("\\b|"), "\\b)"),
        i
      ],
      scope: {
        1: "keyword",
        4: "title.class"
      }
    }
  ] }, v = e.concat(r, "\\b(?!\\()"), _ = { variants: [
    {
      match: [
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        v
      ],
      scope: { 2: "variable.constant" }
    },
    {
      match: [
        /::/,
        /class/
      ],
      scope: { 2: "variable.language" }
    },
    {
      match: [
        i,
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        v
      ],
      scope: {
        1: "title.class",
        3: "variable.constant"
      }
    },
    {
      match: [
        i,
        e.concat(
          "::",
          e.lookahead(/(?!class\b)/)
        )
      ],
      scope: { 1: "title.class" }
    },
    {
      match: [
        i,
        /::/,
        /class/
      ],
      scope: {
        1: "title.class",
        3: "variable.language"
      }
    }
  ] }, T = {
    scope: "attr",
    match: e.concat(r, e.lookahead(":"), e.lookahead(/(?!::)/))
  }, w = {
    relevance: 0,
    begin: /\(/,
    end: /\)/,
    keywords: k,
    contains: [
      T,
      s,
      _,
      t.C_BLOCK_COMMENT_MODE,
      h,
      p,
      E
    ]
  }, N = {
    relevance: 0,
    match: [
      /\b/,
      // to prevent keywords from being confused as the function title
      e.concat("(?!fn\\b|function\\b|", b(m).join("\\b|"), "|", b(y).join("\\b|"), "\\b)"),
      r,
      e.concat(f, "*"),
      e.lookahead(/(?=\()/)
    ],
    scope: { 3: "title.function.invoke" },
    contains: [w]
  };
  w.contains.push(N);
  const $ = [
    T,
    _,
    t.C_BLOCK_COMMENT_MODE,
    h,
    p,
    E
  ], K = {
    begin: e.concat(/#\[\s*/, i),
    beginScope: "meta",
    end: /]/,
    endScope: "meta",
    keywords: {
      literal: g,
      keyword: [
        "new",
        "array"
      ]
    },
    contains: [
      {
        begin: /\[/,
        end: /]/,
        keywords: {
          literal: g,
          keyword: [
            "new",
            "array"
          ]
        },
        contains: [
          "self",
          ...$
        ]
      },
      ...$,
      {
        scope: "meta",
        match: i
      }
    ]
  };
  return {
    case_insensitive: !1,
    keywords: k,
    contains: [
      K,
      t.HASH_COMMENT_MODE,
      t.COMMENT("//", "$"),
      t.COMMENT(
        "/\\*",
        "\\*/",
        { contains: [
          {
            scope: "doctag",
            match: "@[A-Za-z]+"
          }
        ] }
      ),
      {
        match: /__halt_compiler\(\);/,
        keywords: "__halt_compiler",
        starts: {
          scope: "comment",
          end: t.MATCH_NOTHING_RE,
          contains: [
            {
              match: /\?>/,
              scope: "meta",
              endsParent: !0
            }
          ]
        }
      },
      o,
      {
        scope: "variable.language",
        match: /\$this\b/
      },
      s,
      N,
      _,
      {
        match: [
          /const/,
          /\s/,
          r
        ],
        scope: {
          1: "keyword",
          3: "variable.constant"
        }
      },
      E,
      {
        scope: "function",
        relevance: 0,
        beginKeywords: "fn function",
        end: /[;{]/,
        excludeEnd: !0,
        illegal: "[$%\\[]",
        contains: [
          { beginKeywords: "use" },
          t.UNDERSCORE_TITLE_MODE,
          {
            begin: "=>",
            // No markup, just a relevance booster
            endsParent: !0
          },
          {
            scope: "params",
            begin: "\\(",
            end: "\\)",
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: k,
            contains: [
              "self",
              s,
              _,
              t.C_BLOCK_COMMENT_MODE,
              h,
              p
            ]
          }
        ]
      },
      {
        scope: "class",
        variants: [
          {
            beginKeywords: "enum",
            illegal: /[($"]/
          },
          {
            beginKeywords: "class interface trait",
            illegal: /[:($"]/
          }
        ],
        relevance: 0,
        end: /\{/,
        excludeEnd: !0,
        contains: [
          { beginKeywords: "extends implements" },
          t.UNDERSCORE_TITLE_MODE
        ]
      },
      // both use and namespace still use "old style" rules (vs multi-match)
      // because the namespace name can include `\` and we still want each
      // element to be treated as its own *individual* title
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: ";",
        illegal: /[.']/,
        contains: [t.inherit(t.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
      },
      {
        beginKeywords: "use",
        relevance: 0,
        end: ";",
        contains: [
          // TODO: title.function vs title.class
          {
            match: /\b(as|const|function)\b/,
            scope: "keyword"
          },
          // TODO: could be title.class or title.function
          t.UNDERSCORE_TITLE_MODE
        ]
      },
      h,
      p
    ]
  };
}
function O6(t) {
  return {
    name: "PHP template",
    subLanguage: "xml",
    contains: [
      {
        begin: /<\?(php|=)?/,
        end: /\?>/,
        subLanguage: "php",
        contains: [
          // We don't want the php closing tag ?> to close the PHP block when
          // inside any of the following blocks:
          {
            begin: "/\\*",
            end: "\\*/",
            skip: !0
          },
          {
            begin: 'b"',
            end: '"',
            skip: !0
          },
          {
            begin: "b'",
            end: "'",
            skip: !0
          },
          t.inherit(t.APOS_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          }),
          t.inherit(t.QUOTE_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          })
        ]
      }
    ]
  };
}
function N6(t) {
  return {
    name: "Plain text",
    aliases: [
      "text",
      "txt"
    ],
    disableAutodetect: !0
  };
}
function L6(t) {
  const e = t.regex, n = /[\p{XID_Start}_]\p{XID_Continue}*/u, r = [
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "case",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "match",
    "nonlocal|10",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ], a = {
    $pattern: /[A-Za-z]\w+|__\w+__/,
    keyword: r,
    built_in: [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ],
    literal: [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ],
    type: [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ]
  }, l = {
    className: "meta",
    begin: /^(>>>|\.\.\.) /
  }, u = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: a,
    illegal: /#/
  }, c = {
    begin: /\{\{/,
    relevance: 0
  }, d = {
    className: "string",
    contains: [t.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
        end: /'''/,
        contains: [
          t.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
        end: /"""/,
        contains: [
          t.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
        end: /'''/,
        contains: [
          t.BACKSLASH_ESCAPE,
          l,
          c,
          u
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
        end: /"""/,
        contains: [
          t.BACKSLASH_ESCAPE,
          l,
          c,
          u
        ]
      },
      {
        begin: /([uU]|[rR])'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /([uU]|[rR])"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])'/,
        end: /'/
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])"/,
        end: /"/
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'/,
        end: /'/,
        contains: [
          t.BACKSLASH_ESCAPE,
          c,
          u
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"/,
        end: /"/,
        contains: [
          t.BACKSLASH_ESCAPE,
          c,
          u
        ]
      },
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE
    ]
  }, f = "[0-9](_?[0-9])*", h = `(\\b(${f}))?\\.(${f})|\\b(${f})\\.`, p = `\\b|${r.join("|")}`, g = {
    className: "number",
    relevance: 0,
    variants: [
      // exponentfloat, pointfloat
      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
      // optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      // Note: no leading \b because floats can start with a decimal point
      // and we don't want to mishandle e.g. `fn(.5)`,
      // no trailing \b for pointfloat because it can end with a decimal point
      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
      // because both MUST contain a decimal point and so cannot be confused with
      // the interior part of an identifier
      {
        begin: `(\\b(${f})|(${h}))[eE][+-]?(${f})[jJ]?(?=${p})`
      },
      {
        begin: `(${h})[jJ]?`
      },
      // decinteger, bininteger, octinteger, hexinteger
      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
      // optionally "long" in Python 2
      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
      // decinteger is optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${p})`
      },
      {
        begin: `\\b0[bB](_?[01])+[lL]?(?=${p})`
      },
      {
        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${p})`
      },
      {
        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${p})`
      },
      // imagnumber (digitpart-based)
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b(${f})[jJ](?=${p})`
      }
    ]
  }, m = {
    className: "comment",
    begin: e.lookahead(/# type:/),
    end: /$/,
    keywords: a,
    contains: [
      {
        // prevent keywords from coloring `type`
        begin: /# type:/
      },
      // comment within a datatype comment includes no keywords
      {
        begin: /#/,
        end: /\b\B/,
        endsWithParent: !0
      }
    ]
  }, y = {
    className: "params",
    variants: [
      // Exclude params in functions without params
      {
        className: "",
        begin: /\(\s*\)/,
        skip: !0
      },
      {
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        keywords: a,
        contains: [
          "self",
          l,
          g,
          d,
          t.HASH_COMMENT_MODE
        ]
      }
    ]
  };
  return u.contains = [
    d,
    g,
    l
  ], {
    name: "Python",
    aliases: [
      "py",
      "gyp",
      "ipython"
    ],
    unicodeRegex: !0,
    keywords: a,
    illegal: /(<\/|\?)|=>/,
    contains: [
      l,
      g,
      {
        // very common convention
        begin: /\bself\b/
      },
      {
        // eat "if" prior to string so that it won't accidentally be
        // labeled as an f-string
        beginKeywords: "if",
        relevance: 0
      },
      d,
      m,
      t.HASH_COMMENT_MODE,
      {
        match: [
          /\bdef/,
          /\s+/,
          n
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [y]
      },
      {
        variants: [
          {
            match: [
              /\bclass/,
              /\s+/,
              n,
              /\s*/,
              /\(\s*/,
              n,
              /\s*\)/
            ]
          },
          {
            match: [
              /\bclass/,
              /\s+/,
              n
            ]
          }
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          6: "title.class.inherited"
        }
      },
      {
        className: "meta",
        begin: /^[\t ]*@/,
        end: /(?=#)|$/,
        contains: [
          g,
          y,
          d
        ]
      }
    ]
  };
}
function R6(t) {
  return {
    aliases: ["pycon"],
    contains: [
      {
        className: "meta.prompt",
        starts: {
          // a space separates the REPL prefix from the actual code
          // this is purely for cleaner HTML output
          end: / |$/,
          starts: {
            end: "$",
            subLanguage: "python"
          }
        },
        variants: [
          { begin: /^>>>(?=[ ]|$)/ },
          { begin: /^\.\.\.(?=[ ]|$)/ }
        ]
      }
    ]
  };
}
function I6(t) {
  const e = t.regex, n = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, r = e.either(
    // Special case: only hexadecimal binary powers can contain fractions
    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
    // Hexadecimal numbers without fraction and optional binary power
    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
    // Decimal numbers
    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
  ), i = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, s = e.either(
    /[()]/,
    /[{}]/,
    /\[\[/,
    /[[\]]/,
    /\\/,
    /,/
  );
  return {
    name: "R",
    keywords: {
      $pattern: n,
      keyword: "function if in break next repeat else for while",
      literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
      built_in: (
        // Builtin constants
        "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
      )
    },
    contains: [
      // Roxygen comments
      t.COMMENT(
        /#'/,
        /$/,
        { contains: [
          {
            // Handle `@examples` separately to cause all subsequent code
            // until the next `@`-tag on its own line to be kept as-is,
            // preventing highlighting. This code is example R code, so nested
            // doctags shouldn’t be treated as such. See
            // `test/markup/r/roxygen.txt` for an example.
            scope: "doctag",
            match: /@examples/,
            starts: {
              end: e.lookahead(e.either(
                // end if another doc comment
                /\n^#'\s*(?=@[a-zA-Z]+)/,
                // or a line with no comment
                /\n^(?!#')/
              )),
              endsParent: !0
            }
          },
          {
            // Handle `@param` to highlight the parameter name following
            // after.
            scope: "doctag",
            begin: "@param",
            end: /$/,
            contains: [
              {
                scope: "variable",
                variants: [
                  { match: n },
                  { match: /`(?:\\.|[^`\\])+`/ }
                ],
                endsParent: !0
              }
            ]
          },
          {
            scope: "doctag",
            match: /@[a-zA-Z]+/
          },
          {
            scope: "keyword",
            match: /\\[a-zA-Z]+/
          }
        ] }
      ),
      t.HASH_COMMENT_MODE,
      {
        scope: "string",
        contains: [t.BACKSLASH_ESCAPE],
        variants: [
          t.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\(/,
            end: /\)(-*)"/
          }),
          t.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\{/,
            end: /\}(-*)"/
          }),
          t.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\[/,
            end: /\](-*)"/
          }),
          t.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\(/,
            end: /\)(-*)'/
          }),
          t.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\{/,
            end: /\}(-*)'/
          }),
          t.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\[/,
            end: /\](-*)'/
          }),
          {
            begin: '"',
            end: '"',
            relevance: 0
          },
          {
            begin: "'",
            end: "'",
            relevance: 0
          }
        ]
      },
      // Matching numbers immediately following punctuation and operators is
      // tricky since we need to look at the character ahead of a number to
      // ensure the number is not part of an identifier, and we cannot use
      // negative look-behind assertions. So instead we explicitly handle all
      // possible combinations of (operator|punctuation), number.
      // TODO: replace with negative look-behind when available
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
      {
        relevance: 0,
        variants: [
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              i,
              r
            ]
          },
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              /%[^%]*%/,
              r
            ]
          },
          {
            scope: {
              1: "punctuation",
              2: "number"
            },
            match: [
              s,
              r
            ]
          },
          {
            scope: { 2: "number" },
            match: [
              /[^a-zA-Z0-9._]|^/,
              // not part of an identifier, or start of document
              r
            ]
          }
        ]
      },
      // Operators/punctuation when they're not directly followed by numbers
      {
        // Relevance boost for the most common assignment form.
        scope: { 3: "operator" },
        match: [
          n,
          /\s+/,
          /<-/,
          /\s+/
        ]
      },
      {
        scope: "operator",
        relevance: 0,
        variants: [
          { match: i },
          { match: /%[^%]*%/ }
        ]
      },
      {
        scope: "punctuation",
        relevance: 0,
        match: s
      },
      {
        // Escaped identifier
        begin: "`",
        end: "`",
        contains: [{ begin: /\\./ }]
      }
    ]
  };
}
function F6(t) {
  const e = t.regex, n = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", r = e.either(
    /\b([A-Z]+[a-z0-9]+)+/,
    // ends in caps
    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
  ), i = e.concat(r, /(::\w+)*/), o = {
    "variable.constant": [
      "__FILE__",
      "__LINE__",
      "__ENCODING__"
    ],
    "variable.language": [
      "self",
      "super"
    ],
    keyword: [
      "alias",
      "and",
      "begin",
      "BEGIN",
      "break",
      "case",
      "class",
      "defined",
      "do",
      "else",
      "elsif",
      "end",
      "END",
      "ensure",
      "for",
      "if",
      "in",
      "module",
      "next",
      "not",
      "or",
      "redo",
      "require",
      "rescue",
      "retry",
      "return",
      "then",
      "undef",
      "unless",
      "until",
      "when",
      "while",
      "yield",
      ...[
        "include",
        "extend",
        "prepend",
        "public",
        "private",
        "protected",
        "raise",
        "throw"
      ]
    ],
    built_in: [
      "proc",
      "lambda",
      "attr_accessor",
      "attr_reader",
      "attr_writer",
      "define_method",
      "private_constant",
      "module_function"
    ],
    literal: [
      "true",
      "false",
      "nil"
    ]
  }, a = {
    className: "doctag",
    begin: "@[A-Za-z]+"
  }, l = {
    begin: "#<",
    end: ">"
  }, u = [
    t.COMMENT(
      "#",
      "$",
      { contains: [a] }
    ),
    t.COMMENT(
      "^=begin",
      "^=end",
      {
        contains: [a],
        relevance: 10
      }
    ),
    t.COMMENT("^__END__", t.MATCH_NOTHING_RE)
  ], c = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: o
  }, d = {
    className: "string",
    contains: [
      t.BACKSLASH_ESCAPE,
      c
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /`/,
        end: /`/
      },
      {
        begin: /%[qQwWx]?\(/,
        end: /\)/
      },
      {
        begin: /%[qQwWx]?\[/,
        end: /\]/
      },
      {
        begin: /%[qQwWx]?\{/,
        end: /\}/
      },
      {
        begin: /%[qQwWx]?</,
        end: />/
      },
      {
        begin: /%[qQwWx]?\//,
        end: /\//
      },
      {
        begin: /%[qQwWx]?%/,
        end: /%/
      },
      {
        begin: /%[qQwWx]?-/,
        end: /-/
      },
      {
        begin: /%[qQwWx]?\|/,
        end: /\|/
      },
      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
      // where ? is the last character of a preceding identifier, as in: `func?4`
      { begin: /\B\?(\\\d{1,3})/ },
      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
      { begin: /\B\?\\?\S/ },
      // heredocs
      {
        // this guard makes sure that we have an entire heredoc and not a false
        // positive (auto-detect, etc.)
        begin: e.concat(
          /<<[-~]?'?/,
          e.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
        ),
        contains: [
          t.END_SAME_AS_BEGIN({
            begin: /(\w+)/,
            end: /(\w+)/,
            contains: [
              t.BACKSLASH_ESCAPE,
              c
            ]
          })
        ]
      }
    ]
  }, f = "[1-9](_?[0-9])*|0", h = "[0-9](_?[0-9])*", p = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal integer/float, optionally exponential or rational, optionally imaginary
      { begin: `\\b(${f})(\\.(${h}))?([eE][+-]?(${h})|r)?i?\\b` },
      // explicit decimal/binary/octal/hexadecimal integer,
      // optionally rational and/or imaginary
      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
      { begin: "\\b0(_?[0-7])+r?i?\\b" }
    ]
  }, g = {
    variants: [
      {
        match: /\(\)/
      },
      {
        className: "params",
        begin: /\(/,
        end: /(?=\))/,
        excludeBegin: !0,
        endsParent: !0,
        keywords: o
      }
    ]
  }, v = [
    d,
    {
      variants: [
        {
          match: [
            /class\s+/,
            i,
            /\s+<\s+/,
            i
          ]
        },
        {
          match: [
            /\b(class|module)\s+/,
            i
          ]
        }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: o
    },
    {
      match: [
        /(include|extend)\s+/,
        i
      ],
      scope: {
        2: "title.class"
      },
      keywords: o
    },
    {
      relevance: 0,
      match: [
        i,
        /\.new[. (]/
      ],
      scope: {
        1: "title.class"
      }
    },
    {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    },
    {
      relevance: 0,
      match: r,
      scope: "title.class"
    },
    {
      match: [
        /def/,
        /\s+/,
        n
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        g
      ]
    },
    {
      // swallow namespace qualifiers before symbols
      begin: t.IDENT_RE + "::"
    },
    {
      className: "symbol",
      begin: t.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
      relevance: 0
    },
    {
      className: "symbol",
      begin: ":(?!\\s)",
      contains: [
        d,
        { begin: n }
      ],
      relevance: 0
    },
    p,
    {
      // negative-look forward attempts to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    },
    {
      className: "params",
      begin: /\|/,
      end: /\|/,
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0,
      // this could be a lot of things (in other languages) other than params
      keywords: o
    },
    {
      // regexp container
      begin: "(" + t.RE_STARTERS_RE + "|unless)\\s*",
      keywords: "unless",
      contains: [
        {
          className: "regexp",
          contains: [
            t.BACKSLASH_ESCAPE,
            c
          ],
          illegal: /\n/,
          variants: [
            {
              begin: "/",
              end: "/[a-z]*"
            },
            {
              begin: /%r\{/,
              end: /\}[a-z]*/
            },
            {
              begin: "%r\\(",
              end: "\\)[a-z]*"
            },
            {
              begin: "%r!",
              end: "![a-z]*"
            },
            {
              begin: "%r\\[",
              end: "\\][a-z]*"
            }
          ]
        }
      ].concat(l, u),
      relevance: 0
    }
  ].concat(l, u);
  c.contains = v, g.contains = v;
  const _ = "[>?]>", T = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]", w = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>", N = [
    {
      begin: /^\s*=>/,
      starts: {
        end: "$",
        contains: v
      }
    },
    {
      className: "meta.prompt",
      begin: "^(" + _ + "|" + T + "|" + w + ")(?=[ ])",
      starts: {
        end: "$",
        keywords: o,
        contains: v
      }
    }
  ];
  return u.unshift(l), {
    name: "Ruby",
    aliases: [
      "rb",
      "gemspec",
      "podspec",
      "thor",
      "irb"
    ],
    keywords: o,
    illegal: /\/\*/,
    contains: [t.SHEBANG({ binary: "ruby" })].concat(N).concat(u).concat(v)
  };
}
function H6(t) {
  const e = t.regex, n = {
    className: "title.function.invoke",
    relevance: 0,
    begin: e.concat(
      /\b/,
      /(?!let|for|while|if|else|match\b)/,
      t.IDENT_RE,
      e.lookahead(/\s*\(/)
    )
  }, r = "([ui](8|16|32|64|128|size)|f(32|64))?", i = [
    "abstract",
    "as",
    "async",
    "await",
    "become",
    "box",
    "break",
    "const",
    "continue",
    "crate",
    "do",
    "dyn",
    "else",
    "enum",
    "extern",
    "false",
    "final",
    "fn",
    "for",
    "if",
    "impl",
    "in",
    "let",
    "loop",
    "macro",
    "match",
    "mod",
    "move",
    "mut",
    "override",
    "priv",
    "pub",
    "ref",
    "return",
    "self",
    "Self",
    "static",
    "struct",
    "super",
    "trait",
    "true",
    "try",
    "type",
    "typeof",
    "unsafe",
    "unsized",
    "use",
    "virtual",
    "where",
    "while",
    "yield"
  ], s = [
    "true",
    "false",
    "Some",
    "None",
    "Ok",
    "Err"
  ], o = [
    // functions
    "drop ",
    // traits
    "Copy",
    "Send",
    "Sized",
    "Sync",
    "Drop",
    "Fn",
    "FnMut",
    "FnOnce",
    "ToOwned",
    "Clone",
    "Debug",
    "PartialEq",
    "PartialOrd",
    "Eq",
    "Ord",
    "AsRef",
    "AsMut",
    "Into",
    "From",
    "Default",
    "Iterator",
    "Extend",
    "IntoIterator",
    "DoubleEndedIterator",
    "ExactSizeIterator",
    "SliceConcatExt",
    "ToString",
    // macros
    "assert!",
    "assert_eq!",
    "bitflags!",
    "bytes!",
    "cfg!",
    "col!",
    "concat!",
    "concat_idents!",
    "debug_assert!",
    "debug_assert_eq!",
    "env!",
    "eprintln!",
    "panic!",
    "file!",
    "format!",
    "format_args!",
    "include_bytes!",
    "include_str!",
    "line!",
    "local_data_key!",
    "module_path!",
    "option_env!",
    "print!",
    "println!",
    "select!",
    "stringify!",
    "try!",
    "unimplemented!",
    "unreachable!",
    "vec!",
    "write!",
    "writeln!",
    "macro_rules!",
    "assert_ne!",
    "debug_assert_ne!"
  ], a = [
    "i8",
    "i16",
    "i32",
    "i64",
    "i128",
    "isize",
    "u8",
    "u16",
    "u32",
    "u64",
    "u128",
    "usize",
    "f32",
    "f64",
    "str",
    "char",
    "bool",
    "Box",
    "Option",
    "Result",
    "String",
    "Vec"
  ];
  return {
    name: "Rust",
    aliases: ["rs"],
    keywords: {
      $pattern: t.IDENT_RE + "!?",
      type: a,
      keyword: i,
      literal: s,
      built_in: o
    },
    illegal: "</",
    contains: [
      t.C_LINE_COMMENT_MODE,
      t.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
      t.inherit(t.QUOTE_STRING_MODE, {
        begin: /b?"/,
        illegal: null
      }),
      {
        className: "string",
        variants: [
          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
        ]
      },
      {
        className: "symbol",
        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + r },
          { begin: "\\b0o([0-7_]+)" + r },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + r },
          { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + r }
        ],
        relevance: 0
      },
      {
        begin: [
          /fn/,
          /\s+/,
          t.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.function"
        }
      },
      {
        className: "meta",
        begin: "#!?\\[",
        end: "\\]",
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        begin: [
          /let/,
          /\s+/,
          /(?:mut\s+)?/,
          t.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "keyword",
          4: "variable"
        }
      },
      // must come before impl/for rule later
      {
        begin: [
          /for/,
          /\s+/,
          t.UNDERSCORE_IDENT_RE,
          /\s+/,
          /in/
        ],
        className: {
          1: "keyword",
          3: "variable",
          5: "keyword"
        }
      },
      {
        begin: [
          /type/,
          /\s+/,
          t.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: [
          /(?:trait|enum|struct|union|impl|for)/,
          /\s+/,
          t.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: t.IDENT_RE + "::",
        keywords: {
          keyword: "Self",
          built_in: o,
          type: a
        }
      },
      {
        className: "punctuation",
        begin: "->"
      },
      n
    ]
  };
}
const B6 = (t) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: t.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: t.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), P6 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], $6 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], z6 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], V6 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], U6 = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse();
function q6(t) {
  const e = B6(t), n = V6, r = z6, i = "@[a-z-]+", s = "and or not only", a = {
    className: "variable",
    begin: "(\\$" + "[a-zA-Z-][a-zA-Z0-9_-]*" + ")\\b",
    relevance: 0
  };
  return {
    name: "SCSS",
    case_insensitive: !0,
    illegal: "[=/|']",
    contains: [
      t.C_LINE_COMMENT_MODE,
      t.C_BLOCK_COMMENT_MODE,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      e.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: "#[A-Za-z0-9_-]+",
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\.[A-Za-z0-9_-]+",
        relevance: 0
      },
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-tag",
        begin: "\\b(" + P6.join("|") + ")\\b",
        // was there, before, but why?
        relevance: 0
      },
      {
        className: "selector-pseudo",
        begin: ":(" + r.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + n.join("|") + ")"
      },
      a,
      {
        // pseudo-selector params
        begin: /\(/,
        end: /\)/,
        contains: [e.CSS_NUMBER_MODE]
      },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + U6.join("|") + ")\\b"
      },
      { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
      {
        begin: /:/,
        end: /[;}{]/,
        relevance: 0,
        contains: [
          e.BLOCK_COMMENT,
          a,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE,
          t.QUOTE_STRING_MODE,
          t.APOS_STRING_MODE,
          e.IMPORTANT,
          e.FUNCTION_DISPATCH
        ]
      },
      // matching these here allows us to treat them more like regular CSS
      // rules so everything between the {} gets regular rule highlighting,
      // which is what we want for page and font-face
      {
        begin: "@(page|font-face)",
        keywords: {
          $pattern: i,
          keyword: "@page @font-face"
        }
      },
      {
        begin: "@",
        end: "[{;]",
        returnBegin: !0,
        keywords: {
          $pattern: /[a-z-]+/,
          keyword: s,
          attribute: $6.join(" ")
        },
        contains: [
          {
            begin: i,
            className: "keyword"
          },
          {
            begin: /[a-z-]+(?=:)/,
            className: "attribute"
          },
          a,
          t.QUOTE_STRING_MODE,
          t.APOS_STRING_MODE,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE
        ]
      },
      e.FUNCTION_DISPATCH
    ]
  };
}
function Z6(t) {
  return {
    name: "Shell Session",
    aliases: [
      "console",
      "shellsession"
    ],
    contains: [
      {
        className: "meta.prompt",
        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
        // echo /path/to/home > t.exe
        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
        starts: {
          end: /[^\\](?=\s*$)/,
          subLanguage: "bash"
        }
      }
    ]
  };
}
function K6(t) {
  const e = t.regex, n = t.COMMENT("--", "$"), r = {
    className: "string",
    variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [{ begin: /''/ }]
      }
    ]
  }, i = {
    begin: /"/,
    end: /"/,
    contains: [{ begin: /""/ }]
  }, s = [
    "true",
    "false",
    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
    // "null",
    "unknown"
  ], o = [
    "double precision",
    "large object",
    "with timezone",
    "without timezone"
  ], a = [
    "bigint",
    "binary",
    "blob",
    "boolean",
    "char",
    "character",
    "clob",
    "date",
    "dec",
    "decfloat",
    "decimal",
    "float",
    "int",
    "integer",
    "interval",
    "nchar",
    "nclob",
    "national",
    "numeric",
    "real",
    "row",
    "smallint",
    "time",
    "timestamp",
    "varchar",
    "varying",
    // modifier (character varying)
    "varbinary"
  ], l = [
    "add",
    "asc",
    "collation",
    "desc",
    "final",
    "first",
    "last",
    "view"
  ], u = [
    "abs",
    "acos",
    "all",
    "allocate",
    "alter",
    "and",
    "any",
    "are",
    "array",
    "array_agg",
    "array_max_cardinality",
    "as",
    "asensitive",
    "asin",
    "asymmetric",
    "at",
    "atan",
    "atomic",
    "authorization",
    "avg",
    "begin",
    "begin_frame",
    "begin_partition",
    "between",
    "bigint",
    "binary",
    "blob",
    "boolean",
    "both",
    "by",
    "call",
    "called",
    "cardinality",
    "cascaded",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char_length",
    "character",
    "character_length",
    "check",
    "classifier",
    "clob",
    "close",
    "coalesce",
    "collate",
    "collect",
    "column",
    "commit",
    "condition",
    "connect",
    "constraint",
    "contains",
    "convert",
    "copy",
    "corr",
    "corresponding",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "create",
    "cross",
    "cube",
    "cume_dist",
    "current",
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_row",
    "current_schema",
    "current_time",
    "current_timestamp",
    "current_path",
    "current_role",
    "current_transform_group_for_type",
    "current_user",
    "cursor",
    "cycle",
    "date",
    "day",
    "deallocate",
    "dec",
    "decimal",
    "decfloat",
    "declare",
    "default",
    "define",
    "delete",
    "dense_rank",
    "deref",
    "describe",
    "deterministic",
    "disconnect",
    "distinct",
    "double",
    "drop",
    "dynamic",
    "each",
    "element",
    "else",
    "empty",
    "end",
    "end_frame",
    "end_partition",
    "end-exec",
    "equals",
    "escape",
    "every",
    "except",
    "exec",
    "execute",
    "exists",
    "exp",
    "external",
    "extract",
    "false",
    "fetch",
    "filter",
    "first_value",
    "float",
    "floor",
    "for",
    "foreign",
    "frame_row",
    "free",
    "from",
    "full",
    "function",
    "fusion",
    "get",
    "global",
    "grant",
    "group",
    "grouping",
    "groups",
    "having",
    "hold",
    "hour",
    "identity",
    "in",
    "indicator",
    "initial",
    "inner",
    "inout",
    "insensitive",
    "insert",
    "int",
    "integer",
    "intersect",
    "intersection",
    "interval",
    "into",
    "is",
    "join",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "language",
    "large",
    "last_value",
    "lateral",
    "lead",
    "leading",
    "left",
    "like",
    "like_regex",
    "listagg",
    "ln",
    "local",
    "localtime",
    "localtimestamp",
    "log",
    "log10",
    "lower",
    "match",
    "match_number",
    "match_recognize",
    "matches",
    "max",
    "member",
    "merge",
    "method",
    "min",
    "minute",
    "mod",
    "modifies",
    "module",
    "month",
    "multiset",
    "national",
    "natural",
    "nchar",
    "nclob",
    "new",
    "no",
    "none",
    "normalize",
    "not",
    "nth_value",
    "ntile",
    "null",
    "nullif",
    "numeric",
    "octet_length",
    "occurrences_regex",
    "of",
    "offset",
    "old",
    "omit",
    "on",
    "one",
    "only",
    "open",
    "or",
    "order",
    "out",
    "outer",
    "over",
    "overlaps",
    "overlay",
    "parameter",
    "partition",
    "pattern",
    "per",
    "percent",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "period",
    "portion",
    "position",
    "position_regex",
    "power",
    "precedes",
    "precision",
    "prepare",
    "primary",
    "procedure",
    "ptf",
    "range",
    "rank",
    "reads",
    "real",
    "recursive",
    "ref",
    "references",
    "referencing",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "release",
    "result",
    "return",
    "returns",
    "revoke",
    "right",
    "rollback",
    "rollup",
    "row",
    "row_number",
    "rows",
    "running",
    "savepoint",
    "scope",
    "scroll",
    "search",
    "second",
    "seek",
    "select",
    "sensitive",
    "session_user",
    "set",
    "show",
    "similar",
    "sin",
    "sinh",
    "skip",
    "smallint",
    "some",
    "specific",
    "specifictype",
    "sql",
    "sqlexception",
    "sqlstate",
    "sqlwarning",
    "sqrt",
    "start",
    "static",
    "stddev_pop",
    "stddev_samp",
    "submultiset",
    "subset",
    "substring",
    "substring_regex",
    "succeeds",
    "sum",
    "symmetric",
    "system",
    "system_time",
    "system_user",
    "table",
    "tablesample",
    "tan",
    "tanh",
    "then",
    "time",
    "timestamp",
    "timezone_hour",
    "timezone_minute",
    "to",
    "trailing",
    "translate",
    "translate_regex",
    "translation",
    "treat",
    "trigger",
    "trim",
    "trim_array",
    "true",
    "truncate",
    "uescape",
    "union",
    "unique",
    "unknown",
    "unnest",
    "update",
    "upper",
    "user",
    "using",
    "value",
    "values",
    "value_of",
    "var_pop",
    "var_samp",
    "varbinary",
    "varchar",
    "varying",
    "versioning",
    "when",
    "whenever",
    "where",
    "width_bucket",
    "window",
    "with",
    "within",
    "without",
    "year"
  ], c = [
    "abs",
    "acos",
    "array_agg",
    "asin",
    "atan",
    "avg",
    "cast",
    "ceil",
    "ceiling",
    "coalesce",
    "corr",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "cume_dist",
    "dense_rank",
    "deref",
    "element",
    "exp",
    "extract",
    "first_value",
    "floor",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "last_value",
    "lead",
    "listagg",
    "ln",
    "log",
    "log10",
    "lower",
    "max",
    "min",
    "mod",
    "nth_value",
    "ntile",
    "nullif",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "position",
    "position_regex",
    "power",
    "rank",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "row_number",
    "sin",
    "sinh",
    "sqrt",
    "stddev_pop",
    "stddev_samp",
    "substring",
    "substring_regex",
    "sum",
    "tan",
    "tanh",
    "translate",
    "translate_regex",
    "treat",
    "trim",
    "trim_array",
    "unnest",
    "upper",
    "value_of",
    "var_pop",
    "var_samp",
    "width_bucket"
  ], d = [
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_schema",
    "current_transform_group_for_type",
    "current_user",
    "session_user",
    "system_time",
    "system_user",
    "current_time",
    "localtime",
    "current_timestamp",
    "localtimestamp"
  ], f = [
    "create table",
    "insert into",
    "primary key",
    "foreign key",
    "not null",
    "alter table",
    "add constraint",
    "grouping sets",
    "on overflow",
    "character set",
    "respect nulls",
    "ignore nulls",
    "nulls first",
    "nulls last",
    "depth first",
    "breadth first"
  ], h = c, p = [
    ...u,
    ...l
  ].filter((k) => !c.includes(k)), g = {
    className: "variable",
    begin: /@[a-z0-9][a-z0-9_]*/
  }, m = {
    className: "operator",
    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
    relevance: 0
  }, y = {
    begin: e.concat(/\b/, e.either(...h), /\s*\(/),
    relevance: 0,
    keywords: { built_in: h }
  };
  function x(k, {
    exceptions: b,
    when: E
  } = {}) {
    const v = E;
    return b = b || [], k.map((_) => _.match(/\|\d+$/) || b.includes(_) ? _ : v(_) ? `${_}|0` : _);
  }
  return {
    name: "SQL",
    case_insensitive: !0,
    // does not include {} or HTML tags `</`
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: x(p, { when: (k) => k.length < 3 }),
      literal: s,
      type: a,
      built_in: d
    },
    contains: [
      {
        begin: e.either(...f),
        relevance: 0,
        keywords: {
          $pattern: /[\w\.]+/,
          keyword: p.concat(f),
          literal: s,
          type: a
        }
      },
      {
        className: "type",
        begin: e.either(...o)
      },
      y,
      g,
      r,
      i,
      t.C_NUMBER_MODE,
      t.C_BLOCK_COMMENT_MODE,
      n,
      m
    ]
  };
}
function Ag(t) {
  return t ? typeof t == "string" ? t : t.source : null;
}
function Xs(t) {
  return _e("(?=", t, ")");
}
function _e(...t) {
  return t.map((n) => Ag(n)).join("");
}
function W6(t) {
  const e = t[t.length - 1];
  return typeof e == "object" && e.constructor === Object ? (t.splice(t.length - 1, 1), e) : {};
}
function dt(...t) {
  return "(" + (W6(t).capture ? "" : "?:") + t.map((r) => Ag(r)).join("|") + ")";
}
const Lc = (t) => _e(
  /\b/,
  t,
  /\w$/.test(t) ? /\b/ : /\B/
), j6 = [
  "Protocol",
  // contextual
  "Type"
  // contextual
].map(Lc), Mh = [
  "init",
  "self"
].map(Lc), G6 = [
  "Any",
  "Self"
], Dl = [
  // strings below will be fed into the regular `keywords` engine while regex
  // will result in additional modes being created to scan for those keywords to
  // avoid conflicts with other rules
  "actor",
  "any",
  // contextual
  "associatedtype",
  "async",
  "await",
  /as\?/,
  // operator
  /as!/,
  // operator
  "as",
  // operator
  "borrowing",
  // contextual
  "break",
  "case",
  "catch",
  "class",
  "consume",
  // contextual
  "consuming",
  // contextual
  "continue",
  "convenience",
  // contextual
  "copy",
  // contextual
  "default",
  "defer",
  "deinit",
  "didSet",
  // contextual
  "distributed",
  "do",
  "dynamic",
  // contextual
  "each",
  "else",
  "enum",
  "extension",
  "fallthrough",
  /fileprivate\(set\)/,
  "fileprivate",
  "final",
  // contextual
  "for",
  "func",
  "get",
  // contextual
  "guard",
  "if",
  "import",
  "indirect",
  // contextual
  "infix",
  // contextual
  /init\?/,
  /init!/,
  "inout",
  /internal\(set\)/,
  "internal",
  "in",
  "is",
  // operator
  "isolated",
  // contextual
  "nonisolated",
  // contextual
  "lazy",
  // contextual
  "let",
  "macro",
  "mutating",
  // contextual
  "nonmutating",
  // contextual
  /open\(set\)/,
  // contextual
  "open",
  // contextual
  "operator",
  "optional",
  // contextual
  "override",
  // contextual
  "postfix",
  // contextual
  "precedencegroup",
  "prefix",
  // contextual
  /private\(set\)/,
  "private",
  "protocol",
  /public\(set\)/,
  "public",
  "repeat",
  "required",
  // contextual
  "rethrows",
  "return",
  "set",
  // contextual
  "some",
  // contextual
  "static",
  "struct",
  "subscript",
  "super",
  "switch",
  "throws",
  "throw",
  /try\?/,
  // operator
  /try!/,
  // operator
  "try",
  // operator
  "typealias",
  /unowned\(safe\)/,
  // contextual
  /unowned\(unsafe\)/,
  // contextual
  "unowned",
  // contextual
  "var",
  "weak",
  // contextual
  "where",
  "while",
  "willSet"
  // contextual
], Th = [
  "false",
  "nil",
  "true"
], J6 = [
  "assignment",
  "associativity",
  "higherThan",
  "left",
  "lowerThan",
  "none",
  "right"
], Y6 = [
  "#colorLiteral",
  "#column",
  "#dsohandle",
  "#else",
  "#elseif",
  "#endif",
  "#error",
  "#file",
  "#fileID",
  "#fileLiteral",
  "#filePath",
  "#function",
  "#if",
  "#imageLiteral",
  "#keyPath",
  "#line",
  "#selector",
  "#sourceLocation",
  "#warning"
], Dh = [
  "abs",
  "all",
  "any",
  "assert",
  "assertionFailure",
  "debugPrint",
  "dump",
  "fatalError",
  "getVaList",
  "isKnownUniquelyReferenced",
  "max",
  "min",
  "numericCast",
  "pointwiseMax",
  "pointwiseMin",
  "precondition",
  "preconditionFailure",
  "print",
  "readLine",
  "repeatElement",
  "sequence",
  "stride",
  "swap",
  "swift_unboxFromSwiftValueWithType",
  "transcode",
  "type",
  "unsafeBitCast",
  "unsafeDowncast",
  "withExtendedLifetime",
  "withUnsafeMutablePointer",
  "withUnsafePointer",
  "withVaList",
  "withoutActuallyEscaping",
  "zip"
], Mg = dt(
  /[/=\-+!*%<>&|^~?]/,
  /[\u00A1-\u00A7]/,
  /[\u00A9\u00AB]/,
  /[\u00AC\u00AE]/,
  /[\u00B0\u00B1]/,
  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
  /[\u2016-\u2017]/,
  /[\u2020-\u2027]/,
  /[\u2030-\u203E]/,
  /[\u2041-\u2053]/,
  /[\u2055-\u205E]/,
  /[\u2190-\u23FF]/,
  /[\u2500-\u2775]/,
  /[\u2794-\u2BFF]/,
  /[\u2E00-\u2E7F]/,
  /[\u3001-\u3003]/,
  /[\u3008-\u3020]/,
  /[\u3030]/
), Tg = dt(
  Mg,
  /[\u0300-\u036F]/,
  /[\u1DC0-\u1DFF]/,
  /[\u20D0-\u20FF]/,
  /[\uFE00-\uFE0F]/,
  /[\uFE20-\uFE2F]/
  // TODO: The following characters are also allowed, but the regex isn't supported yet.
  // /[\u{E0100}-\u{E01EF}]/u
), Ol = _e(Mg, Tg, "*"), Dg = dt(
  /[a-zA-Z_]/,
  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
  /[\u1E00-\u1FFF]/,
  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
  /[\uFE47-\uFEFE\uFF00-\uFFFD]/
  // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
  // The following characters are also allowed, but the regexes aren't supported yet.
  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
), Yo = dt(
  Dg,
  /\d/,
  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
), mn = _e(Dg, Yo, "*"), Nl = _e(/[A-Z]/, Yo, "*"), X6 = [
  "attached",
  "autoclosure",
  _e(/convention\(/, dt("swift", "block", "c"), /\)/),
  "discardableResult",
  "dynamicCallable",
  "dynamicMemberLookup",
  "escaping",
  "freestanding",
  "frozen",
  "GKInspectable",
  "IBAction",
  "IBDesignable",
  "IBInspectable",
  "IBOutlet",
  "IBSegueAction",
  "inlinable",
  "main",
  "nonobjc",
  "NSApplicationMain",
  "NSCopying",
  "NSManaged",
  _e(/objc\(/, mn, /\)/),
  "objc",
  "objcMembers",
  "propertyWrapper",
  "requires_stored_property_inits",
  "resultBuilder",
  "Sendable",
  "testable",
  "UIApplicationMain",
  "unchecked",
  "unknown",
  "usableFromInline",
  "warn_unqualified_access"
], Q6 = [
  "iOS",
  "iOSApplicationExtension",
  "macOS",
  "macOSApplicationExtension",
  "macCatalyst",
  "macCatalystApplicationExtension",
  "watchOS",
  "watchOSApplicationExtension",
  "tvOS",
  "tvOSApplicationExtension",
  "swift"
];
function e5(t) {
  const e = {
    match: /\s+/,
    relevance: 0
  }, n = t.COMMENT(
    "/\\*",
    "\\*/",
    { contains: ["self"] }
  ), r = [
    t.C_LINE_COMMENT_MODE,
    n
  ], i = {
    match: [
      /\./,
      dt(...j6, ...Mh)
    ],
    className: { 2: "keyword" }
  }, s = {
    // Consume .keyword to prevent highlighting properties and methods as keywords.
    match: _e(/\./, dt(...Dl)),
    relevance: 0
  }, o = Dl.filter((he) => typeof he == "string").concat(["_|0"]), a = Dl.filter((he) => typeof he != "string").concat(G6).map(Lc), l = { variants: [
    {
      className: "keyword",
      match: dt(...a, ...Mh)
    }
  ] }, u = {
    $pattern: dt(
      /\b\w+/,
      // regular keywords
      /#\w+/
      // number keywords
    ),
    keyword: o.concat(Y6),
    literal: Th
  }, c = [
    i,
    s,
    l
  ], d = {
    // Consume .built_in to prevent highlighting properties and methods.
    match: _e(/\./, dt(...Dh)),
    relevance: 0
  }, f = {
    className: "built_in",
    match: _e(/\b/, dt(...Dh), /(?=\()/)
  }, h = [
    d,
    f
  ], p = {
    // Prevent -> from being highlighting as an operator.
    match: /->/,
    relevance: 0
  }, g = {
    className: "operator",
    relevance: 0,
    variants: [
      { match: Ol },
      {
        // dot-operator: only operators that start with a dot are allowed to use dots as
        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
        // characters that may also include dots.
        match: `\\.(\\.|${Tg})+`
      }
    ]
  }, m = [
    p,
    g
  ], y = "([0-9]_*)+", x = "([0-9a-fA-F]_*)+", k = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal floating-point-literal (subsumes decimal-literal)
      { match: `\\b(${y})(\\.(${y}))?([eE][+-]?(${y}))?\\b` },
      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
      { match: `\\b0x(${x})(\\.(${x}))?([pP][+-]?(${y}))?\\b` },
      // octal-literal
      { match: /\b0o([0-7]_*)+\b/ },
      // binary-literal
      { match: /\b0b([01]_*)+\b/ }
    ]
  }, b = (he = "") => ({
    className: "subst",
    variants: [
      { match: _e(/\\/, he, /[0\\tnr"']/) },
      { match: _e(/\\/, he, /u\{[0-9a-fA-F]{1,8}\}/) }
    ]
  }), E = (he = "") => ({
    className: "subst",
    match: _e(/\\/, he, /[\t ]*(?:[\r\n]|\r\n)/)
  }), v = (he = "") => ({
    className: "subst",
    label: "interpol",
    begin: _e(/\\/, he, /\(/),
    end: /\)/
  }), _ = (he = "") => ({
    begin: _e(he, /"""/),
    end: _e(/"""/, he),
    contains: [
      b(he),
      E(he),
      v(he)
    ]
  }), T = (he = "") => ({
    begin: _e(he, /"/),
    end: _e(/"/, he),
    contains: [
      b(he),
      v(he)
    ]
  }), w = {
    className: "string",
    variants: [
      _(),
      _("#"),
      _("##"),
      _("###"),
      T(),
      T("#"),
      T("##"),
      T("###")
    ]
  }, N = [
    t.BACKSLASH_ESCAPE,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [t.BACKSLASH_ESCAPE]
    }
  ], $ = {
    begin: /\/[^\s](?=[^/\n]*\/)/,
    end: /\//,
    contains: N
  }, K = (he) => {
    const De = _e(he, /\//), rt = _e(/\//, he);
    return {
      begin: De,
      end: rt,
      contains: [
        ...N,
        {
          scope: "comment",
          begin: `#(?!.*${rt})`,
          end: /$/
        }
      ]
    };
  }, U = {
    scope: "regexp",
    variants: [
      K("###"),
      K("##"),
      K("#"),
      $
    ]
  }, W = { match: _e(/`/, mn, /`/) }, z = {
    className: "variable",
    match: /\$\d+/
  }, A = {
    className: "variable",
    match: `\\$${Yo}+`
  }, C = [
    W,
    z,
    A
  ], S = {
    match: /(@|#(un)?)available/,
    scope: "keyword",
    starts: { contains: [
      {
        begin: /\(/,
        end: /\)/,
        keywords: Q6,
        contains: [
          ...m,
          k,
          w
        ]
      }
    ] }
  }, L = {
    scope: "keyword",
    match: _e(/@/, dt(...X6))
  }, F = {
    scope: "meta",
    match: _e(/@/, mn)
  }, j = [
    S,
    L,
    F
  ], Q = {
    match: Xs(/\b[A-Z]/),
    relevance: 0,
    contains: [
      {
        // Common Apple frameworks, for relevance boost
        className: "type",
        match: _e(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, Yo, "+")
      },
      {
        // Type identifier
        className: "type",
        match: Nl,
        relevance: 0
      },
      {
        // Optional type
        match: /[?!]+/,
        relevance: 0
      },
      {
        // Variadic parameter
        match: /\.\.\./,
        relevance: 0
      },
      {
        // Protocol composition
        match: _e(/\s+&\s+/, Xs(Nl)),
        relevance: 0
      }
    ]
  }, pe = {
    begin: /</,
    end: />/,
    keywords: u,
    contains: [
      ...r,
      ...c,
      ...j,
      p,
      Q
    ]
  };
  Q.contains.push(pe);
  const ke = {
    match: _e(mn, /\s*:/),
    keywords: "_|0",
    relevance: 0
  }, fe = {
    begin: /\(/,
    end: /\)/,
    relevance: 0,
    keywords: u,
    contains: [
      "self",
      ke,
      ...r,
      U,
      ...c,
      ...h,
      ...m,
      k,
      w,
      ...C,
      ...j,
      Q
    ]
  }, Se = {
    begin: /</,
    end: />/,
    keywords: "repeat each",
    contains: [
      ...r,
      Q
    ]
  }, ut = {
    begin: dt(
      Xs(_e(mn, /\s*:/)),
      Xs(_e(mn, /\s+/, mn, /\s*:/))
    ),
    end: /:/,
    relevance: 0,
    contains: [
      {
        className: "keyword",
        match: /\b_\b/
      },
      {
        className: "params",
        match: mn
      }
    ]
  }, We = {
    begin: /\(/,
    end: /\)/,
    keywords: u,
    contains: [
      ut,
      ...r,
      ...c,
      ...m,
      k,
      w,
      ...j,
      Q,
      fe
    ],
    endsParent: !0,
    illegal: /["']/
  }, yt = {
    match: [
      /(func|macro)/,
      /\s+/,
      dt(W.match, mn, Ol)
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      Se,
      We,
      e
    ],
    illegal: [
      /\[/,
      /%/
    ]
  }, ct = {
    match: [
      /\b(?:subscript|init[?!]?)/,
      /\s*(?=[<(])/
    ],
    className: { 1: "keyword" },
    contains: [
      Se,
      We,
      e
    ],
    illegal: /\[|%/
  }, At = {
    match: [
      /operator/,
      /\s+/,
      Ol
    ],
    className: {
      1: "keyword",
      3: "title"
    }
  }, xt = {
    begin: [
      /precedencegroup/,
      /\s+/,
      Nl
    ],
    className: {
      1: "keyword",
      3: "title"
    },
    contains: [Q],
    keywords: [
      ...J6,
      ...Th
    ],
    end: /}/
  };
  for (const he of w.variants) {
    const De = he.contains.find((Le) => Le.label === "interpol");
    De.keywords = u;
    const rt = [
      ...c,
      ...h,
      ...m,
      k,
      w,
      ...C
    ];
    De.contains = [
      ...rt,
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          "self",
          ...rt
        ]
      }
    ];
  }
  return {
    name: "Swift",
    keywords: u,
    contains: [
      ...r,
      yt,
      ct,
      {
        beginKeywords: "struct protocol class extension enum actor",
        end: "\\{",
        excludeEnd: !0,
        keywords: u,
        contains: [
          t.inherit(t.TITLE_MODE, {
            className: "title.class",
            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
          }),
          ...c
        ]
      },
      At,
      xt,
      {
        beginKeywords: "import",
        end: /$/,
        contains: [...r],
        relevance: 0
      },
      U,
      ...c,
      ...h,
      ...m,
      k,
      w,
      ...C,
      ...j,
      Q,
      fe
    ]
  };
}
const Xo = "[A-Za-z$_][0-9A-Za-z$_]*", Og = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
], Ng = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], Lg = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], Rg = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], Ig = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], Fg = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], Hg = [].concat(
  Ig,
  Lg,
  Rg
);
function t5(t) {
  const e = t.regex, n = (S, { after: L }) => {
    const F = "</" + S[0].slice(1);
    return S.input.indexOf(F, L) !== -1;
  }, r = Xo, i = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (S, L) => {
      const F = S[0].length + S.index, j = S.input[F];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        j === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        j === ","
      ) {
        L.ignoreMatch();
        return;
      }
      j === ">" && (n(S, { after: F }) || L.ignoreMatch());
      let Q;
      const pe = S.input.substring(F);
      if (Q = pe.match(/^\s*=/)) {
        L.ignoreMatch();
        return;
      }
      if ((Q = pe.match(/^\s+extends\s+/)) && Q.index === 0) {
        L.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: Xo,
    keyword: Og,
    literal: Ng,
    built_in: Hg,
    "variable.language": Fg
  }, l = "[0-9](_?[0-9])*", u = `\\.(${l})`, c = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", d = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${c})((${u})|\\.)?|(${u}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${c})\\b((${u})\\b|\\.)?|(${u})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, h = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, p = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, g = {
    begin: "gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        t.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, m = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      t.BACKSLASH_ESCAPE,
      f
    ]
  }, x = {
    className: "comment",
    variants: [
      t.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: r + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      t.C_BLOCK_COMMENT_MODE,
      t.C_LINE_COMMENT_MODE
    ]
  }, k = [
    t.APOS_STRING_MODE,
    t.QUOTE_STRING_MODE,
    h,
    p,
    g,
    m,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    d
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = k.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(k)
  });
  const b = [].concat(x, f.contains), E = b.concat([
    // eat recursive parens in sub expressions
    {
      begin: /\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(b)
    }
  ]), v = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: E
  }, _ = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          r,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(r, "(", e.concat(/\./, r), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          r
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...Lg,
        ...Rg
      ]
    }
  }, w = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, N = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          r,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [v],
    illegal: /%/
  }, $ = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function K(S) {
    return e.concat("(?!", S.join("|"), ")");
  }
  const U = {
    match: e.concat(
      /\b/,
      K([
        ...Ig,
        "super",
        "import"
      ]),
      r,
      e.lookahead(/\(/)
    ),
    className: "title.function",
    relevance: 0
  }, W = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(r, /(?![0-9A-Za-z$_(])/)
    )),
    end: r,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, z = {
    match: [
      /get|set/,
      /\s+/,
      r,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      v
    ]
  }, A = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + t.UNDERSCORE_IDENT_RE + ")\\s*=>", C = {
    match: [
      /const|var|let/,
      /\s+/,
      r,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(A)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      v
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: E, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      t.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      w,
      t.APOS_STRING_MODE,
      t.QUOTE_STRING_MODE,
      h,
      p,
      g,
      m,
      x,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      d,
      T,
      {
        className: "attr",
        begin: r + e.lookahead(":"),
        relevance: 0
      },
      C,
      {
        // "value" container
        begin: "(" + t.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          x,
          t.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: A,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: t.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: E
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: i.begin, end: i.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      N,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + t.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          v,
          t.inherit(t.TITLE_MODE, { begin: r, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      W,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + r,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [v]
      },
      U,
      $,
      _,
      z,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function n5(t) {
  const e = t5(t), n = Xo, r = [
    "any",
    "void",
    "number",
    "boolean",
    "string",
    "object",
    "never",
    "symbol",
    "bigint",
    "unknown"
  ], i = {
    beginKeywords: "namespace",
    end: /\{/,
    excludeEnd: !0,
    contains: [e.exports.CLASS_REFERENCE]
  }, s = {
    beginKeywords: "interface",
    end: /\{/,
    excludeEnd: !0,
    keywords: {
      keyword: "interface extends",
      built_in: r
    },
    contains: [e.exports.CLASS_REFERENCE]
  }, o = {
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use strict['"]/
  }, a = [
    "type",
    "namespace",
    "interface",
    "public",
    "private",
    "protected",
    "implements",
    "declare",
    "abstract",
    "readonly",
    "enum",
    "override"
  ], l = {
    $pattern: Xo,
    keyword: Og.concat(a),
    literal: Ng,
    built_in: Hg.concat(r),
    "variable.language": Fg
  }, u = {
    className: "meta",
    begin: "@" + n
  }, c = (f, h, p) => {
    const g = f.contains.findIndex((m) => m.label === h);
    if (g === -1)
      throw new Error("can not find mode to replace");
    f.contains.splice(g, 1, p);
  };
  Object.assign(e.keywords, l), e.exports.PARAMS_CONTAINS.push(u), e.contains = e.contains.concat([
    u,
    i,
    s
  ]), c(e, "shebang", t.SHEBANG()), c(e, "use_strict", o);
  const d = e.contains.find((f) => f.label === "func.def");
  return d.relevance = 0, Object.assign(e, {
    name: "TypeScript",
    aliases: [
      "ts",
      "tsx",
      "mts",
      "cts"
    ]
  }), e;
}
function r5(t) {
  const e = t.regex, n = {
    className: "string",
    begin: /"(""|[^/n])"C\b/
  }, r = {
    className: "string",
    begin: /"/,
    end: /"/,
    illegal: /\n/,
    contains: [
      {
        // double quote escape
        begin: /""/
      }
    ]
  }, i = /\d{1,2}\/\d{1,2}\/\d{4}/, s = /\d{4}-\d{1,2}-\d{1,2}/, o = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, a = /\d{1,2}(:\d{1,2}){1,2}/, l = {
    className: "literal",
    variants: [
      {
        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
        begin: e.concat(/# */, e.either(s, i), / *#/)
      },
      {
        // #H:mm[:ss]# (24h Time)
        begin: e.concat(/# */, a, / *#/)
      },
      {
        // #h[:mm[:ss]] A# (12h Time)
        begin: e.concat(/# */, o, / *#/)
      },
      {
        // date plus time
        begin: e.concat(
          /# */,
          e.either(s, i),
          / +/,
          e.either(o, a),
          / *#/
        )
      }
    ]
  }, u = {
    className: "number",
    relevance: 0,
    variants: [
      {
        // Float
        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
      },
      {
        // Integer (base 10)
        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 16)
        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 8)
        begin: /&O[0-7_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 2)
        begin: /&B[01_]+((U?[SIL])|[%&])?/
      }
    ]
  }, c = {
    className: "label",
    begin: /^\w+:/
  }, d = t.COMMENT(/'''/, /$/, { contains: [
    {
      className: "doctag",
      begin: /<\/?/,
      end: />/
    }
  ] }), f = t.COMMENT(null, /$/, { variants: [
    { begin: /'/ },
    {
      // TODO: Use multi-class for leading spaces
      begin: /([\t ]|^)REM(?=\s)/
    }
  ] });
  return {
    name: "Visual Basic .NET",
    aliases: ["vb"],
    case_insensitive: !0,
    classNameAliases: { label: "symbol" },
    keywords: {
      keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
      built_in: (
        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
        "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
      ),
      type: (
        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
        "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
      ),
      literal: "true false nothing"
    },
    illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
    contains: [
      n,
      r,
      l,
      u,
      c,
      d,
      f,
      {
        className: "meta",
        // TODO: Use multi-class for indentation once available
        begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
        end: /$/,
        keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
        contains: [f]
      }
    ]
  };
}
function i5(t) {
  t.regex;
  const e = t.COMMENT(/\(;/, /;\)/);
  e.contains.push("self");
  const n = t.COMMENT(/;;/, /$/), r = [
    "anyfunc",
    "block",
    "br",
    "br_if",
    "br_table",
    "call",
    "call_indirect",
    "data",
    "drop",
    "elem",
    "else",
    "end",
    "export",
    "func",
    "global.get",
    "global.set",
    "local.get",
    "local.set",
    "local.tee",
    "get_global",
    "get_local",
    "global",
    "if",
    "import",
    "local",
    "loop",
    "memory",
    "memory.grow",
    "memory.size",
    "module",
    "mut",
    "nop",
    "offset",
    "param",
    "result",
    "return",
    "select",
    "set_global",
    "set_local",
    "start",
    "table",
    "tee_local",
    "then",
    "type",
    "unreachable"
  ], i = {
    begin: [
      /(?:func|call|call_indirect)/,
      /\s+/,
      /\$[^\s)]+/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    }
  }, s = {
    className: "variable",
    begin: /\$[\w_]+/
  }, o = {
    match: /(\((?!;)|\))+/,
    className: "punctuation",
    relevance: 0
  }, a = {
    className: "number",
    relevance: 0,
    // borrowed from Prism, TODO: split out into variants
    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
  }, l = {
    // look-ahead prevents us from gobbling up opcodes
    match: /(i32|i64|f32|f64)(?!\.)/,
    className: "type"
  }, u = {
    className: "keyword",
    // borrowed from Prism, TODO: split out into variants
    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
  };
  return {
    name: "WebAssembly",
    keywords: {
      $pattern: /[\w.]+/,
      keyword: r
    },
    contains: [
      n,
      e,
      {
        match: [
          /(?:offset|align)/,
          /\s*/,
          /=/
        ],
        className: {
          1: "keyword",
          3: "operator"
        }
      },
      s,
      o,
      i,
      t.QUOTE_STRING_MODE,
      l,
      u,
      a
    ]
  };
}
function s5(t) {
  const e = t.regex, n = e.concat(/[\p{L}_]/u, e.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), r = /[\p{L}0-9._:-]+/u, i = {
    className: "symbol",
    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  }, s = {
    begin: /\s/,
    contains: [
      {
        className: "keyword",
        begin: /#?[a-z_][a-z1-9_-]+/,
        illegal: /\n/
      }
    ]
  }, o = t.inherit(s, {
    begin: /\(/,
    end: /\)/
  }), a = t.inherit(t.APOS_STRING_MODE, { className: "string" }), l = t.inherit(t.QUOTE_STRING_MODE, { className: "string" }), u = {
    endsWithParent: !0,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: r,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: "string",
            endsParent: !0,
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [i]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [i]
              },
              { begin: /[^\s"'=<>`]+/ }
            ]
          }
        ]
      }
    ]
  };
  return {
    name: "HTML, XML",
    aliases: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ],
    case_insensitive: !0,
    unicodeRegex: !0,
    contains: [
      {
        className: "meta",
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          s,
          l,
          a,
          o,
          {
            begin: /\[/,
            end: /\]/,
            contains: [
              {
                className: "meta",
                begin: /<![a-z]/,
                end: />/,
                contains: [
                  s,
                  o,
                  l,
                  a
                ]
              }
            ]
          }
        ]
      },
      t.COMMENT(
        /<!--/,
        /-->/,
        { relevance: 10 }
      ),
      {
        begin: /<!\[CDATA\[/,
        end: /\]\]>/,
        relevance: 10
      },
      i,
      // xml processing instructions
      {
        className: "meta",
        end: /\?>/,
        variants: [
          {
            begin: /<\?xml/,
            relevance: 10,
            contains: [
              l
            ]
          },
          {
            begin: /<\?[a-z][a-z0-9]+/
          }
        ]
      },
      {
        className: "tag",
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending bracket.
        */
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: { name: "style" },
        contains: [u],
        starts: {
          end: /<\/style>/,
          returnEnd: !0,
          subLanguage: [
            "css",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        // See the comment in the <style tag about the lookahead pattern
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: { name: "script" },
        contains: [u],
        starts: {
          end: /<\/script>/,
          returnEnd: !0,
          subLanguage: [
            "javascript",
            "handlebars",
            "xml"
          ]
        }
      },
      // we need this for now for jSX
      {
        className: "tag",
        begin: /<>|<\/>/
      },
      // open tag
      {
        className: "tag",
        begin: e.concat(
          /</,
          e.lookahead(e.concat(
            n,
            // <tag/>
            // <tag>
            // <tag ...
            e.either(/\/>/, />/, /\s/)
          ))
        ),
        end: /\/?>/,
        contains: [
          {
            className: "name",
            begin: n,
            relevance: 0,
            starts: u
          }
        ]
      },
      // close tag
      {
        className: "tag",
        begin: e.concat(
          /<\//,
          e.lookahead(e.concat(
            n,
            />/
          ))
        ),
        contains: [
          {
            className: "name",
            begin: n,
            relevance: 0
          },
          {
            begin: />/,
            relevance: 0,
            endsParent: !0
          }
        ]
      }
    ]
  };
}
function o5(t) {
  const e = "true false yes no null", n = "[\\w#;/?:@&=+$,.~*'()[\\]]+", r = {
    className: "attr",
    variants: [
      { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
      {
        // double quoted keys
        begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
      },
      {
        // single quoted keys
        begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
      }
    ]
  }, i = {
    className: "template-variable",
    variants: [
      {
        // jinja templates Ansible
        begin: /\{\{/,
        end: /\}\}/
      },
      {
        // Ruby i18n
        begin: /%\{/,
        end: /\}/
      }
    ]
  }, s = {
    className: "string",
    relevance: 0,
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /\S+/ }
    ],
    contains: [
      t.BACKSLASH_ESCAPE,
      i
    ]
  }, o = t.inherit(s, { variants: [
    {
      begin: /'/,
      end: /'/
    },
    {
      begin: /"/,
      end: /"/
    },
    { begin: /[^\s,{}[\]]+/ }
  ] }), a = "[0-9]{4}(-[0-9][0-9]){0,2}", l = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?", u = "(\\.[0-9]*)?", c = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?", d = {
    className: "number",
    begin: "\\b" + a + l + u + c + "\\b"
  }, f = {
    end: ",",
    endsWithParent: !0,
    excludeEnd: !0,
    keywords: e,
    relevance: 0
  }, h = {
    begin: /\{/,
    end: /\}/,
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, p = {
    begin: "\\[",
    end: "\\]",
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, g = [
    r,
    {
      className: "meta",
      begin: "^---\\s*$",
      relevance: 10
    },
    {
      // multi line string
      // Blocks start with a | or > followed by a newline
      //
      // Indentation of subsequent lines must be the same to
      // be considered part of the block
      className: "string",
      begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
    },
    {
      // Ruby/Rails erb
      begin: "<%[%=-]?",
      end: "[%-]?%>",
      subLanguage: "ruby",
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0
    },
    {
      // named tags
      className: "type",
      begin: "!\\w+!" + n
    },
    // https://yaml.org/spec/1.2/spec.html#id2784064
    {
      // verbatim tags
      className: "type",
      begin: "!<" + n + ">"
    },
    {
      // primary tags
      className: "type",
      begin: "!" + n
    },
    {
      // secondary tags
      className: "type",
      begin: "!!" + n
    },
    {
      // fragment id &ref
      className: "meta",
      begin: "&" + t.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // fragment reference *ref
      className: "meta",
      begin: "\\*" + t.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // array listing
      className: "bullet",
      // TODO: remove |$ hack when we have proper look-ahead support
      begin: "-(?=[ ]|$)",
      relevance: 0
    },
    t.HASH_COMMENT_MODE,
    {
      beginKeywords: e,
      keywords: { literal: e }
    },
    d,
    // numbers are any valid C-style number that
    // sit isolated from other words
    {
      className: "number",
      begin: t.C_NUMBER_RE + "\\b",
      relevance: 0
    },
    h,
    p,
    s
  ], m = [...g];
  return m.pop(), m.push(o), f.contains = m, {
    name: "YAML",
    case_insensitive: !0,
    aliases: ["yml"],
    contains: g
  };
}
const a5 = {
  arduino: j4,
  bash: G4,
  c: J4,
  cpp: Y4,
  csharp: X4,
  css: s6,
  diff: o6,
  go: a6,
  graphql: l6,
  ini: u6,
  java: c6,
  javascript: g6,
  json: m6,
  kotlin: y6,
  less: _6,
  lua: w6,
  makefile: S6,
  markdown: A6,
  objectivec: M6,
  perl: T6,
  php: D6,
  "php-template": O6,
  plaintext: N6,
  python: L6,
  "python-repl": R6,
  r: I6,
  ruby: F6,
  rust: H6,
  scss: q6,
  shell: Z6,
  sql: K6,
  swift: e5,
  typescript: n5,
  vbnet: r5,
  wasm: i5,
  xml: s5,
  yaml: o5
};
function Bg(t) {
  return t instanceof Map ? t.clear = t.delete = t.set = function() {
    throw new Error("map is read-only");
  } : t instanceof Set && (t.add = t.clear = t.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(t), Object.getOwnPropertyNames(t).forEach((e) => {
    const n = t[e], r = typeof n;
    (r === "object" || r === "function") && !Object.isFrozen(n) && Bg(n);
  }), t;
}
class Oh {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
}
function Pg(t) {
  return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Bn(t, ...e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const r in t)
    n[r] = t[r];
  return e.forEach(function(r) {
    for (const i in r)
      n[i] = r[i];
  }), /** @type {T} */
  n;
}
const l5 = "</span>", Nh = (t) => !!t.scope, u5 = (t, { prefix: e }) => {
  if (t.startsWith("language:"))
    return t.replace("language:", "language-");
  if (t.includes(".")) {
    const n = t.split(".");
    return [
      `${e}${n.shift()}`,
      ...n.map((r, i) => `${r}${"_".repeat(i + 1)}`)
    ].join(" ");
  }
  return `${e}${t}`;
};
class c5 {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, n) {
    this.buffer = "", this.classPrefix = n.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += Pg(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!Nh(e))
      return;
    const n = u5(
      e.scope,
      { prefix: this.classPrefix }
    );
    this.span(n);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    Nh(e) && (this.buffer += l5);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
}
const Lh = (t = {}) => {
  const e = { children: [] };
  return Object.assign(e, t), e;
};
class Rc {
  constructor() {
    this.rootNode = Lh(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const n = Lh({ scope: e });
    this.add(n), this.stack.push(n);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, n) {
    return typeof n == "string" ? e.addText(n) : n.children && (e.openNode(n), n.children.forEach((r) => this._walk(e, r)), e.closeNode(n)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((n) => typeof n == "string") ? e.children = [e.children.join("")] : e.children.forEach((n) => {
      Rc._collapse(n);
    }));
  }
}
class d5 extends Rc {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /** @param {string} scope */
  startScope(e) {
    this.openNode(e);
  }
  endScope() {
    this.closeNode();
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  __addSublanguage(e, n) {
    const r = e.root;
    n && (r.scope = `language:${n}`), this.add(r);
  }
  toHTML() {
    return new c5(this, this.options).value();
  }
  finalize() {
    return this.closeAllNodes(), !0;
  }
}
function is(t) {
  return t ? typeof t == "string" ? t : t.source : null;
}
function $g(t) {
  return wr("(?=", t, ")");
}
function f5(t) {
  return wr("(?:", t, ")*");
}
function h5(t) {
  return wr("(?:", t, ")?");
}
function wr(...t) {
  return t.map((n) => is(n)).join("");
}
function p5(t) {
  const e = t[t.length - 1];
  return typeof e == "object" && e.constructor === Object ? (t.splice(t.length - 1, 1), e) : {};
}
function Ic(...t) {
  return "(" + (p5(t).capture ? "" : "?:") + t.map((r) => is(r)).join("|") + ")";
}
function zg(t) {
  return new RegExp(t.toString() + "|").exec("").length - 1;
}
function g5(t, e) {
  const n = t && t.exec(e);
  return n && n.index === 0;
}
const m5 = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Fc(t, { joinWith: e }) {
  let n = 0;
  return t.map((r) => {
    n += 1;
    const i = n;
    let s = is(r), o = "";
    for (; s.length > 0; ) {
      const a = m5.exec(s);
      if (!a) {
        o += s;
        break;
      }
      o += s.substring(0, a.index), s = s.substring(a.index + a[0].length), a[0][0] === "\\" && a[1] ? o += "\\" + String(Number(a[1]) + i) : (o += a[0], a[0] === "(" && n++);
    }
    return o;
  }).map((r) => `(${r})`).join(e);
}
const b5 = /\b\B/, Vg = "[a-zA-Z]\\w*", Hc = "[a-zA-Z_]\\w*", Ug = "\\b\\d+(\\.\\d+)?", qg = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", Zg = "\\b(0b[01]+)", y5 = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", x5 = (t = {}) => {
  const e = /^#![ ]*\//;
  return t.binary && (t.begin = wr(
    e,
    /.*\b/,
    t.binary,
    /\b.*/
  )), Bn({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (n, r) => {
      n.index !== 0 && r.ignoreMatch();
    }
  }, t);
}, ss = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, k5 = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [ss]
}, v5 = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [ss]
}, E5 = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, Oa = function(t, e, n = {}) {
  const r = Bn(
    {
      scope: "comment",
      begin: t,
      end: e,
      contains: []
    },
    n
  );
  r.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const i = Ic(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return r.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: wr(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        i,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), r;
}, C5 = Oa("//", "$"), _5 = Oa("/\\*", "\\*/"), w5 = Oa("#", "$"), S5 = {
  scope: "number",
  begin: Ug,
  relevance: 0
}, A5 = {
  scope: "number",
  begin: qg,
  relevance: 0
}, M5 = {
  scope: "number",
  begin: Zg,
  relevance: 0
}, T5 = {
  scope: "regexp",
  begin: /\/(?=[^/\n]*\/)/,
  end: /\/[gimuy]*/,
  contains: [
    ss,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [ss]
    }
  ]
}, D5 = {
  scope: "title",
  begin: Vg,
  relevance: 0
}, O5 = {
  scope: "title",
  begin: Hc,
  relevance: 0
}, N5 = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + Hc,
  relevance: 0
}, L5 = function(t) {
  return Object.assign(
    t,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, n) => {
        n.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, n) => {
        n.data._beginMatch !== e[1] && n.ignoreMatch();
      }
    }
  );
};
var Qs = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  APOS_STRING_MODE: k5,
  BACKSLASH_ESCAPE: ss,
  BINARY_NUMBER_MODE: M5,
  BINARY_NUMBER_RE: Zg,
  COMMENT: Oa,
  C_BLOCK_COMMENT_MODE: _5,
  C_LINE_COMMENT_MODE: C5,
  C_NUMBER_MODE: A5,
  C_NUMBER_RE: qg,
  END_SAME_AS_BEGIN: L5,
  HASH_COMMENT_MODE: w5,
  IDENT_RE: Vg,
  MATCH_NOTHING_RE: b5,
  METHOD_GUARD: N5,
  NUMBER_MODE: S5,
  NUMBER_RE: Ug,
  PHRASAL_WORDS_MODE: E5,
  QUOTE_STRING_MODE: v5,
  REGEXP_MODE: T5,
  RE_STARTERS_RE: y5,
  SHEBANG: x5,
  TITLE_MODE: D5,
  UNDERSCORE_IDENT_RE: Hc,
  UNDERSCORE_TITLE_MODE: O5
});
function R5(t, e) {
  t.input[t.index - 1] === "." && e.ignoreMatch();
}
function I5(t, e) {
  t.className !== void 0 && (t.scope = t.className, delete t.className);
}
function F5(t, e) {
  e && t.beginKeywords && (t.begin = "\\b(" + t.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", t.__beforeBegin = R5, t.keywords = t.keywords || t.beginKeywords, delete t.beginKeywords, t.relevance === void 0 && (t.relevance = 0));
}
function H5(t, e) {
  Array.isArray(t.illegal) && (t.illegal = Ic(...t.illegal));
}
function B5(t, e) {
  if (t.match) {
    if (t.begin || t.end)
      throw new Error("begin & end are not supported with match");
    t.begin = t.match, delete t.match;
  }
}
function P5(t, e) {
  t.relevance === void 0 && (t.relevance = 1);
}
const $5 = (t, e) => {
  if (!t.beforeMatch)
    return;
  if (t.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const n = Object.assign({}, t);
  Object.keys(t).forEach((r) => {
    delete t[r];
  }), t.keywords = n.keywords, t.begin = wr(n.beforeMatch, $g(n.begin)), t.starts = {
    relevance: 0,
    contains: [
      Object.assign(n, { endsParent: !0 })
    ]
  }, t.relevance = 0, delete n.beforeMatch;
}, z5 = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], V5 = "keyword";
function Kg(t, e, n = V5) {
  const r = /* @__PURE__ */ Object.create(null);
  return typeof t == "string" ? i(n, t.split(" ")) : Array.isArray(t) ? i(n, t) : Object.keys(t).forEach(function(s) {
    Object.assign(
      r,
      Kg(t[s], e, s)
    );
  }), r;
  function i(s, o) {
    e && (o = o.map((a) => a.toLowerCase())), o.forEach(function(a) {
      const l = a.split("|");
      r[l[0]] = [s, U5(l[0], l[1])];
    });
  }
}
function U5(t, e) {
  return e ? Number(e) : q5(t) ? 0 : 1;
}
function q5(t) {
  return z5.includes(t.toLowerCase());
}
const Rh = {}, pr = (t) => {
  console.error(t);
}, Ih = (t, ...e) => {
  console.log(`WARN: ${t}`, ...e);
}, Ir = (t, e) => {
  Rh[`${t}/${e}`] || (console.log(`Deprecated as of ${t}. ${e}`), Rh[`${t}/${e}`] = !0);
}, Qo = new Error();
function Wg(t, e, { key: n }) {
  let r = 0;
  const i = t[n], s = {}, o = {};
  for (let a = 1; a <= e.length; a++)
    o[a + r] = i[a], s[a + r] = !0, r += zg(e[a - 1]);
  t[n] = o, t[n]._emit = s, t[n]._multi = !0;
}
function Z5(t) {
  if (Array.isArray(t.begin)) {
    if (t.skip || t.excludeBegin || t.returnBegin)
      throw pr("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), Qo;
    if (typeof t.beginScope != "object" || t.beginScope === null)
      throw pr("beginScope must be object"), Qo;
    Wg(t, t.begin, { key: "beginScope" }), t.begin = Fc(t.begin, { joinWith: "" });
  }
}
function K5(t) {
  if (Array.isArray(t.end)) {
    if (t.skip || t.excludeEnd || t.returnEnd)
      throw pr("skip, excludeEnd, returnEnd not compatible with endScope: {}"), Qo;
    if (typeof t.endScope != "object" || t.endScope === null)
      throw pr("endScope must be object"), Qo;
    Wg(t, t.end, { key: "endScope" }), t.end = Fc(t.end, { joinWith: "" });
  }
}
function W5(t) {
  t.scope && typeof t.scope == "object" && t.scope !== null && (t.beginScope = t.scope, delete t.scope);
}
function j5(t) {
  W5(t), typeof t.beginScope == "string" && (t.beginScope = { _wrap: t.beginScope }), typeof t.endScope == "string" && (t.endScope = { _wrap: t.endScope }), Z5(t), K5(t);
}
function G5(t) {
  function e(o, a) {
    return new RegExp(
      is(o),
      "m" + (t.case_insensitive ? "i" : "") + (t.unicodeRegex ? "u" : "") + (a ? "g" : "")
    );
  }
  class n {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      l.position = this.position++, this.matchIndexes[this.matchAt] = l, this.regexes.push([l, a]), this.matchAt += zg(a) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const a = this.regexes.map((l) => l[1]);
      this.matcherRe = e(Fc(a, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(a) {
      this.matcherRe.lastIndex = this.lastIndex;
      const l = this.matcherRe.exec(a);
      if (!l)
        return null;
      const u = l.findIndex((d, f) => f > 0 && d !== void 0), c = this.matchIndexes[u];
      return l.splice(0, u), Object.assign(l, c);
    }
  }
  class r {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(a) {
      if (this.multiRegexes[a])
        return this.multiRegexes[a];
      const l = new n();
      return this.rules.slice(a).forEach(([u, c]) => l.addRule(u, c)), l.compile(), this.multiRegexes[a] = l, l;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      this.rules.push([a, l]), l.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(a) {
      const l = this.getMatcher(this.regexIndex);
      l.lastIndex = this.lastIndex;
      let u = l.exec(a);
      if (this.resumingScanAtSamePosition() && !(u && u.index === this.lastIndex)) {
        const c = this.getMatcher(0);
        c.lastIndex = this.lastIndex + 1, u = c.exec(a);
      }
      return u && (this.regexIndex += u.position + 1, this.regexIndex === this.count && this.considerAll()), u;
    }
  }
  function i(o) {
    const a = new r();
    return o.contains.forEach((l) => a.addRule(l.begin, { rule: l, type: "begin" })), o.terminatorEnd && a.addRule(o.terminatorEnd, { type: "end" }), o.illegal && a.addRule(o.illegal, { type: "illegal" }), a;
  }
  function s(o, a) {
    const l = (
      /** @type CompiledMode */
      o
    );
    if (o.isCompiled)
      return l;
    [
      I5,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      B5,
      j5,
      $5
    ].forEach((c) => c(o, a)), t.compilerExtensions.forEach((c) => c(o, a)), o.__beforeBegin = null, [
      F5,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      H5,
      // default to 1 relevance if not specified
      P5
    ].forEach((c) => c(o, a)), o.isCompiled = !0;
    let u = null;
    return typeof o.keywords == "object" && o.keywords.$pattern && (o.keywords = Object.assign({}, o.keywords), u = o.keywords.$pattern, delete o.keywords.$pattern), u = u || /\w+/, o.keywords && (o.keywords = Kg(o.keywords, t.case_insensitive)), l.keywordPatternRe = e(u, !0), a && (o.begin || (o.begin = /\B|\b/), l.beginRe = e(l.begin), !o.end && !o.endsWithParent && (o.end = /\B|\b/), o.end && (l.endRe = e(l.end)), l.terminatorEnd = is(l.end) || "", o.endsWithParent && a.terminatorEnd && (l.terminatorEnd += (o.end ? "|" : "") + a.terminatorEnd)), o.illegal && (l.illegalRe = e(
      /** @type {RegExp | string} */
      o.illegal
    )), o.contains || (o.contains = []), o.contains = [].concat(...o.contains.map(function(c) {
      return J5(c === "self" ? o : c);
    })), o.contains.forEach(function(c) {
      s(
        /** @type Mode */
        c,
        l
      );
    }), o.starts && s(o.starts, a), l.matcher = i(l), l;
  }
  if (t.compilerExtensions || (t.compilerExtensions = []), t.contains && t.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return t.classNameAliases = Bn(t.classNameAliases || {}), s(
    /** @type Mode */
    t
  );
}
function jg(t) {
  return t ? t.endsWithParent || jg(t.starts) : !1;
}
function J5(t) {
  return t.variants && !t.cachedVariants && (t.cachedVariants = t.variants.map(function(e) {
    return Bn(t, { variants: null }, e);
  })), t.cachedVariants ? t.cachedVariants : jg(t) ? Bn(t, { starts: t.starts ? Bn(t.starts) : null }) : Object.isFrozen(t) ? Bn(t) : t;
}
var Y5 = "11.9.0";
class X5 extends Error {
  constructor(e, n) {
    super(e), this.name = "HTMLInjectionError", this.html = n;
  }
}
const Ll = Pg, Fh = Bn, Hh = Symbol("nomatch"), Q5 = 7, Gg = function(t) {
  const e = /* @__PURE__ */ Object.create(null), n = /* @__PURE__ */ Object.create(null), r = [];
  let i = !0;
  const s = "Could not find the language '{}', did you forget to load/include a language module?", o = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let a = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: d5
  };
  function l(C) {
    return a.noHighlightRe.test(C);
  }
  function u(C) {
    let S = C.className + " ";
    S += C.parentNode ? C.parentNode.className : "";
    const L = a.languageDetectRe.exec(S);
    if (L) {
      const F = w(L[1]);
      return F || (Ih(s.replace("{}", L[1])), Ih("Falling back to no-highlight mode for this block.", C)), F ? L[1] : "no-highlight";
    }
    return S.split(/\s+/).find((F) => l(F) || w(F));
  }
  function c(C, S, L) {
    let F = "", j = "";
    typeof S == "object" ? (F = C, L = S.ignoreIllegals, j = S.language) : (Ir("10.7.0", "highlight(lang, code, ...args) has been deprecated."), Ir("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), j = C, F = S), L === void 0 && (L = !0);
    const Q = {
      code: F,
      language: j
    };
    z("before:highlight", Q);
    const pe = Q.result ? Q.result : d(Q.language, Q.code, L);
    return pe.code = Q.code, z("after:highlight", pe), pe;
  }
  function d(C, S, L, F) {
    const j = /* @__PURE__ */ Object.create(null);
    function Q(D, R) {
      return D.keywords[R];
    }
    function pe() {
      if (!V.keywords) {
        be.addText(ce);
        return;
      }
      let D = 0;
      V.keywordPatternRe.lastIndex = 0;
      let R = V.keywordPatternRe.exec(ce), J = "";
      for (; R; ) {
        J += ce.substring(D, R.index);
        const ae = Le.case_insensitive ? R[0].toLowerCase() : R[0], Fe = Q(V, ae);
        if (Fe) {
          const [kt, Za] = Fe;
          if (be.addText(J), J = "", j[ae] = (j[ae] || 0) + 1, j[ae] <= Q5 && (Qe += Za), kt.startsWith("_"))
            J += R[0];
          else {
            const M = Le.classNameAliases[kt] || kt;
            Se(R[0], M);
          }
        } else
          J += R[0];
        D = V.keywordPatternRe.lastIndex, R = V.keywordPatternRe.exec(ce);
      }
      J += ce.substring(D), be.addText(J);
    }
    function ke() {
      if (ce === "")
        return;
      let D = null;
      if (typeof V.subLanguage == "string") {
        if (!e[V.subLanguage]) {
          be.addText(ce);
          return;
        }
        D = d(V.subLanguage, ce, !0, de[V.subLanguage]), de[V.subLanguage] = /** @type {CompiledMode} */
        D._top;
      } else
        D = h(ce, V.subLanguage.length ? V.subLanguage : null);
      V.relevance > 0 && (Qe += D.relevance), be.__addSublanguage(D._emitter, D.language);
    }
    function fe() {
      V.subLanguage != null ? ke() : pe(), ce = "";
    }
    function Se(D, R) {
      D !== "" && (be.startScope(R), be.addText(D), be.endScope());
    }
    function ut(D, R) {
      let J = 1;
      const ae = R.length - 1;
      for (; J <= ae; ) {
        if (!D._emit[J]) {
          J++;
          continue;
        }
        const Fe = Le.classNameAliases[D[J]] || D[J], kt = R[J];
        Fe ? Se(kt, Fe) : (ce = kt, pe(), ce = ""), J++;
      }
    }
    function We(D, R) {
      return D.scope && typeof D.scope == "string" && be.openNode(Le.classNameAliases[D.scope] || D.scope), D.beginScope && (D.beginScope._wrap ? (Se(ce, Le.classNameAliases[D.beginScope._wrap] || D.beginScope._wrap), ce = "") : D.beginScope._multi && (ut(D.beginScope, R), ce = "")), V = Object.create(D, { parent: { value: V } }), V;
    }
    function yt(D, R, J) {
      let ae = g5(D.endRe, J);
      if (ae) {
        if (D["on:end"]) {
          const Fe = new Oh(D);
          D["on:end"](R, Fe), Fe.isMatchIgnored && (ae = !1);
        }
        if (ae) {
          for (; D.endsParent && D.parent; )
            D = D.parent;
          return D;
        }
      }
      if (D.endsWithParent)
        return yt(D.parent, R, J);
    }
    function ct(D) {
      return V.matcher.regexIndex === 0 ? (ce += D[0], 1) : (q = !0, 0);
    }
    function At(D) {
      const R = D[0], J = D.rule, ae = new Oh(J), Fe = [J.__beforeBegin, J["on:begin"]];
      for (const kt of Fe)
        if (kt && (kt(D, ae), ae.isMatchIgnored))
          return ct(R);
      return J.skip ? ce += R : (J.excludeBegin && (ce += R), fe(), !J.returnBegin && !J.excludeBegin && (ce = R)), We(J, D), J.returnBegin ? 0 : R.length;
    }
    function xt(D) {
      const R = D[0], J = S.substring(D.index), ae = yt(V, D, J);
      if (!ae)
        return Hh;
      const Fe = V;
      V.endScope && V.endScope._wrap ? (fe(), Se(R, V.endScope._wrap)) : V.endScope && V.endScope._multi ? (fe(), ut(V.endScope, D)) : Fe.skip ? ce += R : (Fe.returnEnd || Fe.excludeEnd || (ce += R), fe(), Fe.excludeEnd && (ce = R));
      do
        V.scope && be.closeNode(), !V.skip && !V.subLanguage && (Qe += V.relevance), V = V.parent;
      while (V !== ae.parent);
      return ae.starts && We(ae.starts, D), Fe.returnEnd ? 0 : R.length;
    }
    function he() {
      const D = [];
      for (let R = V; R !== Le; R = R.parent)
        R.scope && D.unshift(R.scope);
      D.forEach((R) => be.openNode(R));
    }
    let De = {};
    function rt(D, R) {
      const J = R && R[0];
      if (ce += D, J == null)
        return fe(), 0;
      if (De.type === "begin" && R.type === "end" && De.index === R.index && J === "") {
        if (ce += S.slice(R.index, R.index + 1), !i) {
          const ae = new Error(`0 width match regex (${C})`);
          throw ae.languageName = C, ae.badRule = De.rule, ae;
        }
        return 1;
      }
      if (De = R, R.type === "begin")
        return At(R);
      if (R.type === "illegal" && !L) {
        const ae = new Error('Illegal lexeme "' + J + '" for mode "' + (V.scope || "<unnamed>") + '"');
        throw ae.mode = V, ae;
      } else if (R.type === "end") {
        const ae = xt(R);
        if (ae !== Hh)
          return ae;
      }
      if (R.type === "illegal" && J === "")
        return 1;
      if (H > 1e5 && H > R.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return ce += J, J.length;
    }
    const Le = w(C);
    if (!Le)
      throw pr(s.replace("{}", C)), new Error('Unknown language: "' + C + '"');
    const te = G5(Le);
    let Bt = "", V = F || te;
    const de = {}, be = new a.__emitter(a);
    he();
    let ce = "", Qe = 0, je = 0, H = 0, q = !1;
    try {
      if (Le.__emitTokens)
        Le.__emitTokens(S, be);
      else {
        for (V.matcher.considerAll(); ; ) {
          H++, q ? q = !1 : V.matcher.considerAll(), V.matcher.lastIndex = je;
          const D = V.matcher.exec(S);
          if (!D)
            break;
          const R = S.substring(je, D.index), J = rt(R, D);
          je = D.index + J;
        }
        rt(S.substring(je));
      }
      return be.finalize(), Bt = be.toHTML(), {
        language: C,
        value: Bt,
        relevance: Qe,
        illegal: !1,
        _emitter: be,
        _top: V
      };
    } catch (D) {
      if (D.message && D.message.includes("Illegal"))
        return {
          language: C,
          value: Ll(S),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: D.message,
            index: je,
            context: S.slice(je - 100, je + 100),
            mode: D.mode,
            resultSoFar: Bt
          },
          _emitter: be
        };
      if (i)
        return {
          language: C,
          value: Ll(S),
          illegal: !1,
          relevance: 0,
          errorRaised: D,
          _emitter: be,
          _top: V
        };
      throw D;
    }
  }
  function f(C) {
    const S = {
      value: Ll(C),
      illegal: !1,
      relevance: 0,
      _top: o,
      _emitter: new a.__emitter(a)
    };
    return S._emitter.addText(C), S;
  }
  function h(C, S) {
    S = S || a.languages || Object.keys(e);
    const L = f(C), F = S.filter(w).filter($).map(
      (fe) => d(fe, C, !1)
    );
    F.unshift(L);
    const j = F.sort((fe, Se) => {
      if (fe.relevance !== Se.relevance)
        return Se.relevance - fe.relevance;
      if (fe.language && Se.language) {
        if (w(fe.language).supersetOf === Se.language)
          return 1;
        if (w(Se.language).supersetOf === fe.language)
          return -1;
      }
      return 0;
    }), [Q, pe] = j, ke = Q;
    return ke.secondBest = pe, ke;
  }
  function p(C, S, L) {
    const F = S && n[S] || L;
    C.classList.add("hljs"), C.classList.add(`language-${F}`);
  }
  function g(C) {
    let S = null;
    const L = u(C);
    if (l(L))
      return;
    if (z(
      "before:highlightElement",
      { el: C, language: L }
    ), C.dataset.highlighted) {
      console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", C);
      return;
    }
    if (C.children.length > 0 && (a.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(C)), a.throwUnescapedHTML))
      throw new X5(
        "One of your code blocks includes unescaped HTML.",
        C.innerHTML
      );
    S = C;
    const F = S.textContent, j = L ? c(F, { language: L, ignoreIllegals: !0 }) : h(F);
    C.innerHTML = j.value, C.dataset.highlighted = "yes", p(C, L, j.language), C.result = {
      language: j.language,
      // TODO: remove with version 11.0
      re: j.relevance,
      relevance: j.relevance
    }, j.secondBest && (C.secondBest = {
      language: j.secondBest.language,
      relevance: j.secondBest.relevance
    }), z("after:highlightElement", { el: C, result: j, text: F });
  }
  function m(C) {
    a = Fh(a, C);
  }
  const y = () => {
    b(), Ir("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function x() {
    b(), Ir("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let k = !1;
  function b() {
    if (document.readyState === "loading") {
      k = !0;
      return;
    }
    document.querySelectorAll(a.cssSelector).forEach(g);
  }
  function E() {
    k && b();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", E, !1);
  function v(C, S) {
    let L = null;
    try {
      L = S(t);
    } catch (F) {
      if (pr("Language definition for '{}' could not be registered.".replace("{}", C)), i)
        pr(F);
      else
        throw F;
      L = o;
    }
    L.name || (L.name = C), e[C] = L, L.rawDefinition = S.bind(null, t), L.aliases && N(L.aliases, { languageName: C });
  }
  function _(C) {
    delete e[C];
    for (const S of Object.keys(n))
      n[S] === C && delete n[S];
  }
  function T() {
    return Object.keys(e);
  }
  function w(C) {
    return C = (C || "").toLowerCase(), e[C] || e[n[C]];
  }
  function N(C, { languageName: S }) {
    typeof C == "string" && (C = [C]), C.forEach((L) => {
      n[L.toLowerCase()] = S;
    });
  }
  function $(C) {
    const S = w(C);
    return S && !S.disableAutodetect;
  }
  function K(C) {
    C["before:highlightBlock"] && !C["before:highlightElement"] && (C["before:highlightElement"] = (S) => {
      C["before:highlightBlock"](
        Object.assign({ block: S.el }, S)
      );
    }), C["after:highlightBlock"] && !C["after:highlightElement"] && (C["after:highlightElement"] = (S) => {
      C["after:highlightBlock"](
        Object.assign({ block: S.el }, S)
      );
    });
  }
  function U(C) {
    K(C), r.push(C);
  }
  function W(C) {
    const S = r.indexOf(C);
    S !== -1 && r.splice(S, 1);
  }
  function z(C, S) {
    const L = C;
    r.forEach(function(F) {
      F[L] && F[L](S);
    });
  }
  function A(C) {
    return Ir("10.7.0", "highlightBlock will be removed entirely in v12.0"), Ir("10.7.0", "Please use highlightElement now."), g(C);
  }
  Object.assign(t, {
    highlight: c,
    highlightAuto: h,
    highlightAll: b,
    highlightElement: g,
    // TODO: Remove with v12 API
    highlightBlock: A,
    configure: m,
    initHighlighting: y,
    initHighlightingOnLoad: x,
    registerLanguage: v,
    unregisterLanguage: _,
    listLanguages: T,
    getLanguage: w,
    registerAliases: N,
    autoDetection: $,
    inherit: Fh,
    addPlugin: U,
    removePlugin: W
  }), t.debugMode = function() {
    i = !1;
  }, t.safeMode = function() {
    i = !0;
  }, t.versionString = Y5, t.regex = {
    concat: wr,
    lookahead: $g,
    either: Ic,
    optional: h5,
    anyNumberOfTimes: f5
  };
  for (const C in Qs)
    typeof Qs[C] == "object" && Bg(Qs[C]);
  return Object.assign(t, Qs), t;
}, ci = Gg({});
ci.newInstance = () => Gg({});
var eS = ci;
ci.HighlightJS = ci;
ci.default = ci;
const tS = /* @__PURE__ */ Cs(eS), Bh = {}, nS = "hljs-";
function rS(t) {
  const e = tS.newInstance();
  return t && s(t), {
    highlight: n,
    highlightAuto: r,
    listLanguages: i,
    register: s,
    registerAlias: o,
    registered: a
  };
  function n(l, u, c) {
    const d = c || Bh, f = typeof d.prefix == "string" ? d.prefix : nS;
    if (!e.getLanguage(l))
      throw new Error("Unknown language: `" + l + "` is not registered");
    e.configure({ __emitter: iS, classPrefix: f });
    const h = (
      /** @type {HighlightResult & {_emitter: HastEmitter}} */
      e.highlight(u, { ignoreIllegals: !0, language: l })
    );
    if (h.errorRaised)
      throw new Error("Could not highlight with `Highlight.js`", {
        cause: h.errorRaised
      });
    const p = h._emitter.root, g = (
      /** @type {RootData} */
      p.data
    );
    return g.language = h.language, g.relevance = h.relevance, p;
  }
  function r(l, u) {
    const d = (u || Bh).subset || i();
    let f = -1, h = 0, p;
    for (; ++f < d.length; ) {
      const g = d[f];
      if (!e.getLanguage(g))
        continue;
      const m = n(g, l, u);
      m.data && m.data.relevance !== void 0 && m.data.relevance > h && (h = m.data.relevance, p = m);
    }
    return p || {
      type: "root",
      children: [],
      data: { language: void 0, relevance: h }
    };
  }
  function i() {
    return e.listLanguages();
  }
  function s(l, u) {
    if (typeof l == "string")
      e.registerLanguage(l, u);
    else {
      let c;
      for (c in l)
        Object.hasOwn(l, c) && e.registerLanguage(c, l[c]);
    }
  }
  function o(l, u) {
    if (typeof l == "string")
      e.registerAliases(
        // Note: copy needed because hljs doesn’t accept readonly arrays yet.
        typeof u == "string" ? u : [...u],
        { languageName: l }
      );
    else {
      let c;
      for (c in l)
        if (Object.hasOwn(l, c)) {
          const d = l[c];
          e.registerAliases(
            // Note: copy needed because hljs doesn’t accept readonly arrays yet.
            typeof d == "string" ? d : [...d],
            { languageName: c }
          );
        }
    }
  }
  function a(l) {
    return !!e.getLanguage(l);
  }
}
class iS {
  /**
   * @param {Readonly<HljsOptions>} options
   *   Configuration.
   * @returns
   *   Instance.
   */
  constructor(e) {
    this.options = e, this.root = {
      type: "root",
      children: [],
      data: { language: void 0, relevance: 0 }
    }, this.stack = [this.root];
  }
  /**
   * @param {string} value
   *   Text to add.
   * @returns {undefined}
   *   Nothing.
   *
   */
  addText(e) {
    if (e === "")
      return;
    const n = this.stack[this.stack.length - 1], r = n.children[n.children.length - 1];
    r && r.type === "text" ? r.value += e : n.children.push({ type: "text", value: e });
  }
  /**
   *
   * @param {unknown} rawName
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  startScope(e) {
    this.openNode(String(e));
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  endScope() {
    this.closeNode();
  }
  /**
   * @param {HastEmitter} other
   *   Other emitter.
   * @param {string} name
   *   Name of the sublanguage.
   * @returns {undefined}
   *   Nothing.
   */
  __addSublanguage(e, n) {
    const r = this.stack[this.stack.length - 1], i = (
      /** @type {Array<ElementContent>} */
      e.root.children
    );
    n ? r.children.push({
      type: "element",
      tagName: "span",
      properties: { className: [n] },
      children: i
    }) : r.children.push(...i);
  }
  /**
   * @param {string} name
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  openNode(e) {
    const n = this, r = e.split(".").map(function(o, a) {
      return a ? o + "_".repeat(a) : n.options.classPrefix + o;
    }), i = this.stack[this.stack.length - 1], s = {
      type: "element",
      tagName: "span",
      properties: { className: r },
      children: []
    };
    i.children.push(s), this.stack.push(s);
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  closeNode() {
    this.stack.pop();
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  finalize() {
  }
  /**
   * @returns {string}
   *   Nothing.
   */
  toHTML() {
    return "";
  }
}
const sS = /!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\)/, Ph = new Te("aie-video-plugin"), wi = "video_action", oS = ue.create({
  name: "video",
  group: "block",
  addAttributes() {
    return {
      src: {
        default: null,
        parseHTML: (t) => {
          const e = t.getAttribute("src");
          if (e)
            return e;
          const n = t.querySelector("source");
          return n ? n.getAttribute("src") : null;
        },
        renderHTML: (t) => ({ src: t.src })
      },
      poster: {
        default: null,
        parseHTML: (t) => t.getAttribute("poster"),
        renderHTML: (t) => ({ poster: t.poster })
      },
      width: {
        default: 350
      },
      controls: {
        default: !0
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "video",
        getAttrs: (t) => ({
          src: t.getAttribute("src"),
          poster: t.getAttribute("poster")
        })
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return [
      "video",
      { controls: "true", ...t, src: null },
      ["source", { src: t.src }]
    ];
  },
  addCommands() {
    return {
      setVideo: (t) => ({ commands: e }) => e.insertContent(`<video controls="true" style="width: 100%" src="${t}" />`),
      toggleVideo: () => ({ commands: t }) => t.toggleNode(this.name, "paragraph"),
      uploadVideo: (t) => () => {
        const e = typeof this.options.uploadHeaders == "object" ? this.options.uploadHeaders : typeof this.options.uploadHeaders == "function" ? this.options.uploadHeaders() : {};
        if (this.options.uploaderEvent && this.options.uploaderEvent.onUploadBefore && this.options.uploaderEvent.onUploadBefore(t, this.options.uploadUrl, e) === !1)
          return !1;
        const n = Aa(), { state: { tr: r }, view: i, schema: s } = this.editor;
        r.selection.empty || r.deleteSelection(), i.dispatch(r.setMeta(wi, {
          type: "add",
          id: n,
          pos: r.selection.from
        }));
        const o = this.options.uploader || xc(this.options.uploadUrl), a = this.options.uploadFormName || "video";
        return o(t, this.options.uploadUrl, e, a).then((l) => {
          var u;
          if ((u = this.options.uploaderEvent) != null && u.onSuccess) {
            const c = this.options.uploaderEvent.onSuccess(t, l);
            if (typeof c == "boolean" && !c)
              return;
            typeof c == "object" && (l = c);
          }
          if (l.errorCode === 0 && l.data && l.data.src) {
            let d = Ph.getState(this.editor.state).find(void 0, void 0, (f) => f.id == n);
            i.dispatch(i.state.tr.insert(d[0].from, s.nodes.video.create({
              src: l.data.src,
              poster: l.data.poster
            })).setMeta(wi, { type: "remove", id: n }));
          } else
            i.dispatch(r.setMeta(wi, { type: "remove", id: n })), this.options.uploaderEvent && this.options.uploaderEvent.onFailed && this.options.uploaderEvent.onFailed(t, l);
        }).catch((l) => {
          const { state: { tr: u }, view: c } = this.editor;
          c.dispatch(u.setMeta(wi, { type: "remove", id: n })), this.options.uploaderEvent && this.options.uploaderEvent.onError && this.options.uploaderEvent.onError(t, l);
        }), !0;
      }
    };
  },
  addNodeView() {
    return (t) => {
      if (!this.editor.isEditable)
        return {};
      const e = document.createElement("div"), { src: n, width: r, align: i } = t.node.attrs;
      return e.classList.add(`align-${i}`), e.innerHTML = `
                  <div class="aie-resize-wrapper">
                      <div class="aie-resize">
                          <div class="aie-resize-btn-top-left" data-position="left" draggable="true"></div>
                          <div class="aie-resize-btn-top-right" data-position="right" draggable="true"></div>
                          <div class="aie-resize-btn-bottom-left" data-position="left" draggable="true"></div>
                          <div class="aie-resize-btn-bottom-right" data-position="right" draggable="true"></div>
                      </div>
                      <video controls="true" width="${r}" class="resize-obj">
                          <source src="${n}">
                      </video>
                  </div>
                `, Z1(e, t.editor.view.dom, (s) => t.editor.commands.updateAttributes("video", s)), {
        dom: e
      };
    };
  },
  addInputRules() {
    return [
      ac({
        find: sS,
        type: this.type,
        getAttributes: (t) => {
          const [, , e] = t;
          return { src: e };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const t = this.editor;
    return [
      new we({
        key: Ph,
        state: {
          init: () => ve.empty,
          apply: (e, n) => {
            const r = e.getMeta(wi);
            return n = n.map(e.mapping, e.doc), r && r.type === "add" ? n = n.add(e.doc, [q1(r)]) : r && r.type === "remove" && (n = n.remove(n.find(
              void 0,
              void 0,
              (i) => i.id == r.id
            ))), n;
          }
        },
        props: {
          decorations(e) {
            return this.getState(e);
          },
          handleDOMEvents: {
            drop(e, n) {
              if (!(n.dataTransfer && n.dataTransfer.files && n.dataTransfer.files.length))
                return !1;
              const i = Array.from(n.dataTransfer.files).filter((u) => /video/i.test(u.type));
              if (i.length === 0)
                return !1;
              n.preventDefault();
              const { state: { tr: s, doc: o }, dispatch: a } = e, l = e.posAtCoords({ left: n.clientX, top: n.clientY });
              return a(s.setSelection(X.create(o, l.pos)).scrollIntoView()), i.forEach((u) => {
                t.commands.uploadVideo(u);
              }), !0;
            }
          }
        }
      })
    ];
  }
}), aS = ue.create({
  name: "iframe",
  group: "block",
  atom: !0,
  addOptions() {
    return {
      allowFullscreen: !0,
      HTMLAttributes: {
        class: "iframe-wrapper"
      }
    };
  },
  addAttributes() {
    return {
      src: {
        default: null
      },
      width: {
        default: "100%"
      },
      frameborder: {
        default: 0
      },
      allowfullscreen: {
        default: this.options.allowFullscreen,
        parseHTML: () => this.options.allowFullscreen
      }
    };
  },
  parseHTML() {
    return [{
      tag: "iframe"
    }];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["div", this.options.HTMLAttributes, ["iframe", t]];
  },
  addCommands() {
    return {
      setIframe: (t) => ({ tr: e, dispatch: n }) => {
        const { selection: r } = e, i = this.type.create(t);
        return n && e.replaceRangeWith(r.from, r.to, i), !0;
      }
    };
  }
});
class lS {
  constructor({ editor: e, element: n, view: r, tippyOptions: i = {}, updateDelay: s = 250, shouldShow: o }) {
    this.preventHide = !1, this.shouldShow = ({ view: a, state: l, from: u, to: c }) => {
      const { doc: d, selection: f } = l, { empty: h } = f, p = !d.textBetween(u, c).length && rc(l.selection), g = this.element.contains(document.activeElement);
      return !(!(a.hasFocus() || g) || h || p || !this.editor.isEditable);
    }, this.mousedownHandler = () => {
      this.preventHide = !0;
    }, this.dragstartHandler = () => {
      this.hide();
    }, this.focusHandler = () => {
      setTimeout(() => this.update(this.editor.view));
    }, this.blurHandler = ({ event: a }) => {
      var l;
      if (this.preventHide) {
        this.preventHide = !1;
        return;
      }
      a != null && a.relatedTarget && (!((l = this.element.parentNode) === null || l === void 0) && l.contains(a.relatedTarget)) || this.hide();
    }, this.tippyBlurHandler = (a) => {
      this.blurHandler({ event: a });
    }, this.handleDebouncedUpdate = (a, l) => {
      const u = !(l != null && l.selection.eq(a.state.selection)), c = !(l != null && l.doc.eq(a.state.doc));
      !u && !c || (this.updateDebounceTimer && clearTimeout(this.updateDebounceTimer), this.updateDebounceTimer = window.setTimeout(() => {
        this.updateHandler(a, u, c, l);
      }, this.updateDelay));
    }, this.updateHandler = (a, l, u, c) => {
      var d, f, h;
      const { state: p, composing: g } = a, { selection: m } = p;
      if (g || !l && !u)
        return;
      this.createTooltip();
      const { ranges: x } = m, k = Math.min(...x.map((v) => v.$from.pos)), b = Math.max(...x.map((v) => v.$to.pos));
      if (!((d = this.shouldShow) === null || d === void 0 ? void 0 : d.call(this, {
        editor: this.editor,
        view: a,
        state: p,
        oldState: c,
        from: k,
        to: b
      }))) {
        this.hide();
        return;
      }
      (f = this.tippy) === null || f === void 0 || f.setProps({
        getReferenceClientRect: ((h = this.tippyOptions) === null || h === void 0 ? void 0 : h.getReferenceClientRect) || (() => {
          if (t1(p.selection)) {
            let v = a.nodeDOM(k);
            const _ = v.dataset.nodeViewWrapper ? v : v.querySelector("[data-node-view-wrapper]");
            if (_ && (v = _.firstChild), v)
              return v.getBoundingClientRect();
          }
          return ks(a, k, b);
        })
      }), this.show();
    }, this.editor = e, this.element = n, this.view = r, this.updateDelay = s, o && (this.shouldShow = o), this.element.addEventListener("mousedown", this.mousedownHandler, { capture: !0 }), this.view.dom.addEventListener("dragstart", this.dragstartHandler), this.editor.on("focus", this.focusHandler), this.editor.on("blur", this.blurHandler), this.tippyOptions = i, this.element.remove(), this.element.style.visibility = "visible";
  }
  createTooltip() {
    const { element: e } = this.editor.options, n = !!e.parentElement;
    this.tippy || !n || (this.tippy = Ke(e, {
      duration: 0,
      getReferenceClientRect: null,
      content: this.element,
      interactive: !0,
      trigger: "manual",
      placement: "top",
      hideOnClick: "toggle",
      ...this.tippyOptions
    }), this.tippy.popper.firstChild && this.tippy.popper.firstChild.addEventListener("blur", this.tippyBlurHandler));
  }
  update(e, n) {
    const { state: r } = e, i = r.selection.$from.pos !== r.selection.$to.pos;
    if (this.updateDelay > 0 && i) {
      this.handleDebouncedUpdate(e, n);
      return;
    }
    const s = !(n != null && n.selection.eq(e.state.selection)), o = !(n != null && n.doc.eq(e.state.doc));
    this.updateHandler(e, s, o, n);
  }
  show() {
    var e;
    (e = this.tippy) === null || e === void 0 || e.show();
  }
  hide() {
    var e;
    (e = this.tippy) === null || e === void 0 || e.hide();
  }
  destroy() {
    var e, n;
    !((e = this.tippy) === null || e === void 0) && e.popper.firstChild && this.tippy.popper.firstChild.removeEventListener("blur", this.tippyBlurHandler), (n = this.tippy) === null || n === void 0 || n.destroy(), this.element.removeEventListener("mousedown", this.mousedownHandler, { capture: !0 }), this.view.dom.removeEventListener("dragstart", this.dragstartHandler), this.editor.off("focus", this.focusHandler), this.editor.off("blur", this.blurHandler);
  }
}
const Jg = (t) => new we({
  key: typeof t.pluginKey == "string" ? new Te(t.pluginKey) : t.pluginKey,
  view: (e) => new lS({ view: e, ...t })
});
xe.create({
  name: "bubbleMenu",
  addOptions() {
    return {
      element: null,
      tippyOptions: {},
      pluginKey: "bubbleMenu",
      updateDelay: void 0,
      shouldShow: null
    };
  },
  addProseMirrorPlugins() {
    return this.options.element ? [
      Jg({
        pluginKey: this.options.pluginKey,
        editor: this.editor,
        element: this.options.element,
        tippyOptions: this.options.tippyOptions,
        updateDelay: this.options.updateDelay,
        shouldShow: this.options.shouldShow
      })
    ] : [];
  }
});
class Na extends HTMLElement {
  constructor() {
    super();
    P(this, "editor");
    P(this, "items", []);
    P(this, "tippyInstance");
  }
  isActive(n) {
    var r;
    return (r = this.editor) == null ? void 0 : r.isActive(n);
  }
  connectedCallback() {
    var n;
    this.innerHTML = `
            <div class="aie-bubble-menu">
               ${this.items.map((r) => `<div class="aie-bubble-menu-item ${this.isActive(r.id) ? "active" : ""}" id="${r.id}">${r.content}</div>`).join("")}
            </div>
        `;
    for (let r of this.items)
      r.holder = (n = r.onInit) == null ? void 0 : n.call(r, this.editor, this.tippyInstance, this);
    this.querySelector("div").addEventListener("click", (r) => {
      this.items.forEach((i) => {
        const s = r.target.closest(`#${i.id}`);
        s && (s.classList.contains("active") ? s.classList.remove("active") : s.classList.add("active"), this.onItemClick(i));
      });
    }), this.querySelectorAll(".aie-bubble-menu-item").forEach((r, i) => {
      const s = this.items[i].title;
      s && Ke(r, {
        appendTo: this.closest(".aie-container"),
        content: s,
        theme: "aietip",
        arrow: !0
        // trigger:"click",
        // interactive:true,
      });
    });
  }
  set instance(n) {
    this.tippyInstance = n;
  }
  initItemsByOptions(n, r) {
    if (r && r.length > 0)
      for (let i of r) {
        const s = n.getItem(i);
        s && this.items.push(s);
      }
    else
      this.items = n.getAllItem();
  }
  onCreate(n, r) {
    this.editor = n.editor;
  }
  onItemClick(n) {
    var r;
    (r = n.onClick) == null || r.call(n, this.editor, this.tippyInstance, this, n.holder);
  }
  onTransaction(n) {
  }
}
const uS = {
  id: "edit",
  title: re("edit-link"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.41421 15.89L16.5563 5.74786L15.1421 4.33365L5 14.4758V15.89H6.41421ZM7.24264 17.89H3V13.6474L14.435 2.21233C14.8256 1.8218 15.4587 1.8218 15.8492 2.21233L18.6777 5.04075C19.0682 5.43128 19.0682 6.06444 18.6777 6.45497L7.24264 17.89ZM3 19.89H21V21.89H3V19.89Z"></path></svg>',
  onInit: (t, e, n) => {
    const r = new bc();
    r.setContent(`
            <div style="width: 250px">${re("link-address")} </div>
             <div style="width: 250px">
             <input type="text" id="href" style="width: 250px">
            </div>
            
            <div style="margin-top: 10px">${re("link-open-type")}</div>
            <div>
            <select id="target" style="width: 250px">
                <option value="">${re("default")}</option>
                <option value="_blank">${re("link-open-blank")}</option>
            </select>
            </div>
        `), r.onConfirmClick((i) => {
      const s = i.popper.querySelector("#href").value;
      if (s.trim() === "") {
        t == null || t.chain().focus().extendMarkRange("link").unsetLink().run();
        return;
      }
      let o = i.popper.querySelector("#target").value;
      o.trim() === "" && (o = null), t == null || t.chain().focus().extendMarkRange("link").setLink({
        href: s,
        target: o,
        rel: null
      }).run();
    }), r.onShow((i) => {
      const s = t == null ? void 0 : t.getAttributes("link");
      s && s.href && (i.popper.querySelector("#href").value = s.href), s && s.target && (i.popper.querySelector("#target").value = s.target);
    }), r.setTrigger(n.querySelector("#edit"), "right");
  }
}, cS = {
  id: "unlink",
  title: re("unlink"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17 17H22V19H19V22H17V17ZM7 7H2V5H5V2H7V7ZM18.364 15.5355L16.9497 14.1213L18.364 12.7071C20.3166 10.7545 20.3166 7.58866 18.364 5.63604C16.4113 3.68342 13.2455 3.68342 11.2929 5.63604L9.87868 7.05025L8.46447 5.63604L9.87868 4.22183C12.6123 1.48816 17.0445 1.48816 19.7782 4.22183C22.5118 6.9555 22.5118 11.3877 19.7782 14.1213L18.364 15.5355ZM15.5355 18.364L14.1213 19.7782C11.3877 22.5118 6.9555 22.5118 4.22183 19.7782C1.48816 17.0445 1.48816 12.6123 4.22183 9.87868L5.63604 8.46447L7.05025 9.87868L5.63604 11.2929C3.68342 13.2455 3.68342 16.4113 5.63604 18.364C7.58866 20.3166 10.7545 20.3166 12.7071 18.364L14.1213 16.9497L15.5355 18.364ZM14.8284 7.75736L16.2426 9.17157L9.17157 16.2426L7.75736 14.8284L14.8284 7.75736Z"></path></svg>',
  onClick: (t) => {
    t.chain().focus().unsetLink().run();
  }
}, dS = {
  id: "visit",
  title: re("visit-link"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"></path></svg>',
  onClick: (t) => {
    window.open(t.getAttributes("link").href, "_blank");
  }
};
class Bc {
  constructor(e) {
    P(this, "record", {});
    for (let n of e)
      this.push(n);
  }
  push(e) {
    this.record[e.id.toLowerCase()] = e;
  }
  getItem(e) {
    return this.record[e.toLowerCase()];
  }
  getAllItem() {
    return Object.values(this.record);
  }
}
const fS = new Bc(
  [uS, cS, dS]
);
class hS extends Na {
  constructor() {
    super();
  }
  onCreate(e, n) {
    var r;
    super.onCreate(e, n), this.initItemsByOptions(fS, (r = n == null ? void 0 : n.link) == null ? void 0 : r.bubbleMenuItems);
  }
}
const pS = {
  id: "AlignLeft",
  title: re("align-left"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z"></path></svg>',
  onClick: (t) => {
    const e = t == null ? void 0 : t.getAttributes("image");
    e.align = "left", t == null || t.chain().setImage(e).run();
  }
}, gS = {
  id: "AlignCenter",
  title: re("align-center"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z"></path></svg>',
  onClick: (t) => {
    const e = t == null ? void 0 : t.getAttributes("image");
    e.align = "center", t == null || t.chain().setImage(e).run();
  }
}, mS = {
  id: "AlignRight",
  title: re("align-right"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z"></path></svg>',
  onClick: (t) => {
    const e = t == null ? void 0 : t.getAttributes("image");
    e.align = "right", t == null || t.chain().setImage(e).run();
  }
}, bS = {
  id: "delete",
  title: re("delete"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 4V2H17V4H22V6H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V6H2V4H7ZM6 6V20H18V6H6ZM9 9H11V17H9V9ZM13 9H15V17H13V9Z"></path></svg>',
  onClick: (t) => {
    t.commands.deleteSelection();
  }
}, yS = new Bc(
  [pS, gS, mS, bS]
);
class xS extends Na {
  constructor() {
    super();
  }
  onCreate(e, n) {
    var r;
    super.onCreate(e, n), this.initItemsByOptions(yS, (r = n == null ? void 0 : n.image) == null ? void 0 : r.bubbleMenuItems);
  }
}
class kS extends Na {
  constructor() {
    super(), this.items = [
      {
        id: "insert-column-left",
        title: re("insert-column-left"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H14C13.4477 21 13 20.5523 13 20V4C13 3.44772 13.4477 3 14 3H20ZM19 5H15V19H19V5ZM6 7C8.76142 7 11 9.23858 11 12C11 14.7614 8.76142 17 6 17C3.23858 17 1 14.7614 1 12C1 9.23858 3.23858 7 6 7ZM7 9H5V10.999L3 11V13L5 12.999V15H7V12.999L9 13V11L7 10.999V9Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().addColumnBefore().run();
        }
      },
      {
        id: "insert-column-right",
        title: re("insert-column-right"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M10 3C10.5523 3 11 3.44772 11 4V20C11 20.5523 10.5523 21 10 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H10ZM9 5H5V19H9V5ZM18 7C20.7614 7 23 9.23858 23 12C23 14.7614 20.7614 17 18 17C15.2386 17 13 14.7614 13 12C13 9.23858 15.2386 7 18 7ZM19 9H17V10.999L15 11V13L17 12.999V15H19V12.999L21 13V11L19 10.999V9Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().addColumnAfter().run();
        }
      },
      {
        id: "insert-row-top",
        title: re("insert-row-top"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 13C20.5523 13 21 13.4477 21 14V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V14C3 13.4477 3.44772 13 4 13H20ZM19 15H5V19H19V15ZM12 1C14.7614 1 17 3.23858 17 6C17 8.76142 14.7614 11 12 11C9.23858 11 7 8.76142 7 6C7 3.23858 9.23858 1 12 1ZM13 3H11V4.999L9 5V7L11 6.999V9H13V6.999L15 7V5L13 4.999V3Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().addRowBefore().run();
        }
      },
      {
        id: "insert-row-bottom",
        title: re("insert-row-bottom"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 13C14.7614 13 17 15.2386 17 18C17 20.7614 14.7614 23 12 23C9.23858 23 7 20.7614 7 18C7 15.2386 9.23858 13 12 13ZM13 15H11V16.999L9 17V19L11 18.999V21H13V18.999L15 19V17L13 16.999V15ZM20 3C20.5523 3 21 3.44772 21 4V10C21 10.5523 20.5523 11 20 11H4C3.44772 11 3 10.5523 3 10V4C3 3.44772 3.44772 3 4 3H20ZM5 5V9H19V5H5Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().addRowAfter().run();
        }
      },
      {
        id: "delete-column",
        title: re("delete-column"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C12.5523 3 13 3.44772 13 4L12.9998 11.9998C13.8355 11.372 14.8743 11 16 11C18.7614 11 21 13.2386 21 16C21 18.7614 18.7614 21 16 21C14.9681 21 14.0092 20.6874 13.2129 20.1518L13 20C13 20.5523 12.5523 21 12 21H6C5.44772 21 5 20.5523 5 20V4C5 3.44772 5.44772 3 6 3H12ZM11 5H7V19H11V5ZM19 15H13V17H19V15Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().deleteColumn().run();
        }
      },
      {
        id: "delete-row",
        title: re("delete-row"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 5C20.5523 5 21 5.44772 21 6V12C21 12.5523 20.5523 13 20 13C20.628 13.8355 21 14.8743 21 16C21 18.7614 18.7614 21 16 21C13.2386 21 11 18.7614 11 16C11 14.8743 11.372 13.8355 11.9998 12.9998L4 13C3.44772 13 3 12.5523 3 12V6C3 5.44772 3.44772 5 4 5H20ZM13 15V17H19V15H13ZM19 7H5V11H19V7Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().deleteRow().run();
        }
      },
      {
        id: "merge-cells-horizontal",
        title: re("merge-cells-horizontal"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM11 5H5V10.999H7V9L10 12L7 15V13H5V19H11V17H13V19H19V13H17V15L14 12L17 9V10.999H19V5H13V7H11V5ZM13 13V15H11V13H13ZM13 9V11H11V9H13Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().mergeCells().run();
        }
      },
      {
        id: "merge-cells-vertical",
        title: re("merge-cells-vertical"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20C20.5523 3 21 3.44772 21 4V20ZM19 11V5H13.001V7H15L12 10L9 7H11V5H5V11H7V13H5V19H11V17H9L12 14L15 17H13.001V19H19V13H17V11H19ZM11 13H9V11H11V13ZM15 13H13V11H15V13Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().mergeCells().run();
        }
      },
      {
        id: "split-cells-horizontal",
        title: re("split-cells-horizontal"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM11 5H5V19H11V15H13V19H19V5H13V9H11V5ZM15 9L18 12L15 15V13H9V15L6 12L9 9V11H15V9Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().splitCell().run();
        }
      },
      {
        id: "split-cells-vertical",
        title: re("split-cells-vertical"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM19 5H5V10.999L9 11V13H5V19H19V13H15V11L19 10.999V5ZM12 6L15 9H13V15H15L12 18L9 15H11V9H9L12 6Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().splitCell().run();
        }
      },
      {
        id: "delete",
        title: re("delete-table"),
        content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 4V2H17V4H22V6H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V6H2V4H7ZM6 6V20H18V6H6ZM9 9H11V17H9V9ZM13 9H15V17H13V9Z"></path></svg>',
        onClick: (e) => {
          e == null || e.chain().focus().deleteTable().run();
        }
      }
    ];
  }
  connectedCallback() {
    this.style.display = "none", super.connectedCallback();
  }
  show(e) {
    !e || e.length == 0 ? this.style.display = "none" : this.style.display = "", this.querySelectorAll(".aie-bubble-menu-item").forEach((n) => {
      n.style.display = "none";
    }), e.forEach((n) => {
      const r = this.querySelector(`#${n}`);
      r && (r.style.display = "");
    });
  }
  onTransaction(e) {
    if (!e.editor.isActive("table"))
      return;
    const { state: { selection: n }, view: r } = e.editor;
    if (n instanceof Ce)
      if (this.isOneCellSelected(n)) {
        const i = ["insert-column-left", "insert-column-right", "delete-column", "insert-row-top", "insert-row-bottom", "delete-row"];
        if (e.editor.can().splitCell()) {
          const s = r.nodeDOM(n.$anchorCell.pos), o = s.getAttribute("colspan"), a = s.getAttribute("rowspan");
          o && Number(o) > 1 ? i.push("split-cells-horizontal") : a && Number(a) > 1 && i.push("split-cells-vertical");
        }
        this.show(i);
      } else
        this.isAllTableSelected(n) ? this.show(["delete"]) : this.isColumnSelected(n, r) ? this.show(["insert-column-left", "insert-column-right", "delete-column", "merge-cells-vertical"]) : this.isRowSelected(n, r) ? this.show(["insert-row-top", "insert-row-bottom", "delete-row", "merge-cells-horizontal"]) : this.show(["merge-cells-horizontal"]);
    else
      this.show(["insert-column-left", "insert-column-right", "delete-column", "insert-row-top", "insert-row-bottom", "delete-row"]);
  }
  isAllTableSelected(e) {
    const n = Ne.get(e.$anchorCell.node(-1)), r = n.cellsInRect({
      top: 0,
      left: 0,
      right: n.width,
      bottom: n.height
    });
    return e.ranges.length == r.length;
  }
  isOneCellSelected(e) {
    return e.ranges.length == 1;
  }
  isColumnSelected(e, n) {
    let r = -1;
    for (let i of e.ranges)
      if (r == -1)
        r = n.coordsAtPos(i.$from.pos).left;
      else if (r != n.coordsAtPos(i.$from.pos).left)
        return !1;
    return !0;
  }
  isRowSelected(e, n) {
    let r = -1;
    for (let i of e.ranges)
      if (r == -1)
        r = n.coordsAtPos(i.$from.pos).bottom;
      else if (r != n.coordsAtPos(i.$from.pos).bottom)
        return !1;
    return !0;
  }
}
const ea = {
  check: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M10.0007 15.1709L19.1931 5.97852L20.6073 7.39273L10.0007 17.9993L3.63672 11.6354L5.05093 10.2212L10.0007 15.1709Z"></path></svg>',
  refresh: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.46257 4.43262C7.21556 2.91688 9.5007 2 12 2C17.5228 2 22 6.47715 22 12C22 14.1361 21.3302 16.1158 20.1892 17.7406L17 12H20C20 7.58172 16.4183 4 12 4C9.84982 4 7.89777 4.84827 6.46023 6.22842L5.46257 4.43262ZM18.5374 19.5674C16.7844 21.0831 14.4993 22 12 22C6.47715 22 2 17.5228 2 12C2 9.86386 2.66979 7.88416 3.8108 6.25944L7 12H4C4 16.4183 7.58172 20 12 20C14.1502 20 16.1022 19.1517 17.5398 17.7716L18.5374 19.5674Z" fill="currentColor"></path></svg>',
  aiPanelStart: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16.1716 10.9999L10.8076 5.63589L12.2218 4.22168L20 11.9999L12.2218 19.778L10.8076 18.3638L16.1716 12.9999H4V10.9999H16.1716Z"></path></svg>',
  aiPanelStop: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6 7V17C6 17.5523 6.44772 18 7 18H17C17.5523 18 18 17.5523 18 17V7C18 6.44772 17.5523 6 17 6H7C6.44772 6 6 6.44772 6 7Z"></path></svg>'
}, $h = (t, e, n) => {
  var r, i;
  if (t.aiClient)
    t.aiClient.stop();
  else {
    const s = e.querySelector("textarea");
    s.value = "";
    const { selection: o, doc: a } = t.editor.state, l = a.textBetween(o.from, o.to), u = t.editor.userOptions, c = Er.get((r = u.ai) == null ? void 0 : r.bubblePanelModel);
    c ? c.chat(l, n, {
      onStart(d) {
        t.aiClient = d, e.querySelector(".aie-ai-panel-actions").style.display = "none", e.querySelector(".loader").style.display = "block", e.querySelector(".aie-ai-panel-body-content").style.display = "block", e.querySelector("#go").innerHTML = ea.aiPanelStop;
      },
      onStop() {
        t.aiClient = void 0, e.querySelector("#go").innerHTML = ea.aiPanelStart, e.querySelector(".aie-ai-panel-footer").style.display = "block", e.querySelector(".loader").style.display = "none", e.querySelector(".aie-ai-panel-actions").style.display = "none";
      },
      onMessage(d) {
        s.value = (s == null ? void 0 : s.value) + d.content;
      }
    }) : console.error('AI model name config error. can not get AI model by name: "' + ((i = u.ai) == null ? void 0 : i.bubblePanelModel) + '", please check config "options.ai.bubblePanelModel"');
  }
}, vS = (t) => {
  const e = document.createElement("div");
  return e.classList.add("aie-ai-panel"), e.innerHTML = `
        <div class="aie-ai-panel-body">
            <div class="aie-ai-panel-body-content" style="display: none"><div class="loader">${ea.refresh}</div><textarea readonly></textarea></div>
            <div class="aie-ai-panel-body-input"><input id="prompt" placeholder="告诉 AI 下一步应该如何？比如：帮我翻译成英语" type="text" />
            <button type="button" id="go" style="width: 30px;height: 30px">${ea.aiPanelStart}</button></div>
            <div class="aie-ai-panel-body-tips"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M9 17C9 17 16 18 19 21H20C20.5523 21 21 20.5523 21 20V13.937C21.8626 13.715 22.5 12.9319 22.5 12C22.5 11.0681 21.8626 10.285 21 10.063V4C21 3.44772 20.5523 3 20 3H19C16 6 9 7 9 7H5C3.89543 7 3 7.89543 3 9V15C3 16.1046 3.89543 17 5 17H6L7 22H9V17ZM11 8.6612C11.6833 8.5146 12.5275 8.31193 13.4393 8.04373C15.1175 7.55014 17.25 6.77262 19 5.57458V18.4254C17.25 17.2274 15.1175 16.4499 13.4393 15.9563C12.5275 15.6881 11.6833 15.4854 11 15.3388V8.6612ZM5 9H9V15H5V9Z" fill="currentColor"></path></svg>
            提示：您可以在上面输入文字或者选择下方的操作</div>
        </div>
        <div class="aie-ai-panel-footer" style="display: none">
        <div class="aie-ai-panel-footer-tips">您可以进行以下操作:</div>
        <p id="insert"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2 18H12V20H2V18ZM2 11H22V13H2V11ZM2 4H22V6H2V4ZM18 18V15H20V18H23V20H20V23H18V20H15V18H18Z" fill="currentColor"></path></svg> 追加</p>
        <p id="replace"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M10.071 4.92902L11.4852 6.34323L6.82834 11.0001L16.0002 11.0002L16.0002 13.0002L6.82839 13.0001L11.4852 17.6569L10.071 19.0712L2.99994 12.0001L10.071 4.92902ZM18.0001 19V5.00003H20.0001V19H18.0001Z" fill="currentColor"></path></svg> 替换</p>
        <hr/>
        <p id="hide"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17 6H22V8H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V8H2V6H7V3C7 2.44772 7.44772 2 8 2H16C16.5523 2 17 2.44772 17 3V6ZM18 8H6V20H18V8ZM9 4V6H15V4H9Z" fill="currentColor"></path></svg> 放弃</p>
        </div>
        
        <!--aie-ai-panel-actions-->
        <div class="aie-ai-panel-footer aie-ai-panel-actions" >
        <div class="aie-ai-panel-footer-tips">您可以进行以下操作:</div>
        <p data-prompt="请帮我优化一下这段内容，并直接返回优化后的结果。">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M15.1986 9.94447C14.7649 9.5337 14.4859 8.98613 14.4085 8.39384L14.0056 5.31138L11.275 6.79724C10.7503 7.08274 10.1433 7.17888 9.55608 7.06948L6.49998 6.50015L7.06931 9.55625C7.17871 10.1435 7.08257 10.7505 6.79707 11.2751L5.31121 14.0057L8.39367 14.4086C8.98596 14.4861 9.53353 14.7651 9.94431 15.1987L12.0821 17.4557L13.4178 14.6486C13.6745 14.1092 14.109 13.6747 14.6484 13.418L17.4555 12.0823L15.1986 9.94447ZM15.2238 15.5079L13.0111 20.1581C12.8687 20.4573 12.5107 20.5844 12.2115 20.442C12.1448 20.4103 12.0845 20.3665 12.0337 20.3129L8.49229 16.5741C8.39749 16.474 8.27113 16.4096 8.13445 16.3918L3.02816 15.7243C2.69958 15.6814 2.46804 15.3802 2.51099 15.0516C2.52056 14.9784 2.54359 14.9075 2.5789 14.8426L5.04031 10.3192C5.1062 10.1981 5.12839 10.058 5.10314 9.92253L4.16 4.85991C4.09931 4.53414 4.3142 4.22086 4.63997 4.16017C4.7126 4.14664 4.78711 4.14664 4.85974 4.16017L9.92237 5.10331C10.0579 5.12855 10.198 5.10637 10.319 5.04048L14.8424 2.57907C15.1335 2.42068 15.4979 2.52825 15.6562 2.81931C15.6916 2.88421 15.7146 2.95507 15.7241 3.02833L16.3916 8.13462C16.4095 8.2713 16.4739 8.39766 16.5739 8.49245L20.3127 12.0338C20.5533 12.2617 20.5636 12.6415 20.3357 12.8821C20.2849 12.9357 20.2246 12.9795 20.1579 13.0112L15.5078 15.224C15.3833 15.2832 15.283 15.3835 15.2238 15.5079ZM16.0206 17.435L17.4348 16.0208L21.6775 20.2634L20.2633 21.6776L16.0206 17.435Z"></path></svg>
            改进写作
        </p>
        <p data-prompt="请帮我检查一下这段内容，是否有拼写错误或者语法上的错误。">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 19C12.8284 19 13.5 19.6716 13.5 20.5C13.5 21.3284 12.8284 22 12 22C11.1716 22 10.5 21.3284 10.5 20.5C10.5 19.6716 11.1716 19 12 19ZM6.5 19C7.32843 19 8 19.6716 8 20.5C8 21.3284 7.32843 22 6.5 22C5.67157 22 5 21.3284 5 20.5C5 19.6716 5.67157 19 6.5 19ZM17.5 19C18.3284 19 19 19.6716 19 20.5C19 21.3284 18.3284 22 17.5 22C16.6716 22 16 21.3284 16 20.5C16 19.6716 16.6716 19 17.5 19ZM13 2V4H19V6L17.0322 6.0006C16.2423 8.3666 14.9984 10.5065 13.4107 12.302C14.9544 13.6737 16.7616 14.7204 18.7379 15.3443L18.2017 17.2736C15.8917 16.5557 13.787 15.3326 12.0005 13.7257C10.214 15.332 8.10914 16.5553 5.79891 17.2734L5.26257 15.3442C7.2385 14.7203 9.04543 13.6737 10.5904 12.3021C9.46307 11.0285 8.50916 9.58052 7.76789 8.00128L10.0074 8.00137C10.5706 9.03952 11.2401 10.0037 11.9998 10.8772C13.2283 9.46508 14.2205 7.81616 14.9095 6.00101L5 6V4H11V2H13Z"></path></svg>
            检查拼写和语法
        </p>
        <p data-prompt="这句话的内容较长，帮我简化一下这个内容，并直接返回简化后的内容结果">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M21 6.75736L19 8.75736V4H10V9H5V20H19V17.2426L21 15.2426V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V6.75736ZM21.7782 8.80761L23.1924 10.2218L15.4142 18L13.9979 17.9979L14 16.5858L21.7782 8.80761Z"></path></svg>
            简化内容
        </p>
        <p data-prompt="这句话的内容较剪短，帮我简单的优化和丰富一下内容，并直接返回优化后的结果。注意：优化的内容不能超过原来内容的 2 倍。">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20 2C20.5523 2 21 2.44772 21 3V6.757L19 8.757V4H5V20H19V17.242L21 15.242V21C21 21.5523 20.5523 22 20 22H4C3.44772 22 3 21.5523 3 21V3C3 2.44772 3.44772 2 4 2H20ZM21.7782 8.80761L23.1924 10.2218L15.4142 18L13.9979 17.9979L14 16.5858L21.7782 8.80761ZM13 12V14H8V12H13ZM16 8V10H8V8H16Z"></path></svg>
            丰富内容
        </p>
        <hr/>
        <p data-prompt="请帮我翻译以上内容，在翻译之前，想先判断一下这个内容是不是中文，如果是中文，则翻译问英文，如果是其他语言，则需要翻译为中文，注意，你只需要返回翻译的结果，不需要对此进行任何解释，不需要除了翻译结果以外的其他任何内容。">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M5 15V17C5 18.0544 5.81588 18.9182 6.85074 18.9945L7 19H10V21H7C4.79086 21 3 19.2091 3 17V15H5ZM18 10L22.4 21H20.245L19.044 18H14.954L13.755 21H11.601L16 10H18ZM17 12.8852L15.753 16H18.245L17 12.8852ZM8 2V4H12V11H8V14H6V11H2V4H6V2H8ZM17 3C19.2091 3 21 4.79086 21 7V9H19V7C19 5.89543 18.1046 5 17 5H14V3H17ZM6 6H4V9H6V6ZM10 6H8V9H10V6Z"></path></svg>
            翻译
        </p>
        <p data-prompt="请帮我总结以上内容，并直接返回总结的结果">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M18 3C19.6569 3 21 4.34315 21 6C21 7.65685 19.6569 9 18 9H15C13.6941 9 12.5831 8.16562 12.171 7.0009L11 7C9.9 7 9 7.9 9 9L9.0009 9.17102C10.1656 9.58312 11 10.6941 11 12C11 13.3059 10.1656 14.4169 9.0009 14.829L9 15C9 16.1 9.9 17 11 17L12.1707 17.0001C12.5825 15.8349 13.6937 15 15 15H18C19.6569 15 21 16.3431 21 18C21 19.6569 19.6569 21 18 21H15C13.6941 21 12.5831 20.1656 12.171 19.0009L11 19C8.79 19 7 17.21 7 15H5C3.34315 15 2 13.6569 2 12C2 10.3431 3.34315 9 5 9H7C7 6.79086 8.79086 5 11 5L12.1707 5.00009C12.5825 3.83485 13.6937 3 15 3H18ZM18 17H15C14.4477 17 14 17.4477 14 18C14 18.5523 14.4477 19 15 19H18C18.5523 19 19 18.5523 19 18C19 17.4477 18.5523 17 18 17ZM8 11H5C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13H8C8.55228 13 9 12.5523 9 12C9 11.4477 8.55228 11 8 11ZM18 5H15C14.4477 5 14 5.44772 14 6C14 6.55228 14.4477 7 15 7H18C18.5523 7 19 6.55228 19 6C19 5.44772 18.5523 5 18 5Z"></path></svg>
            总结
        </p>
        </div>
        `, e.querySelector("#replace").addEventListener("click", () => {
    var r, i;
    const n = e.querySelector("textarea");
    if (n.value) {
      const { state: { selection: s, tr: o }, view: { dispatch: a }, schema: l } = t.editor, u = l.text(n.value);
      a(o.replaceRangeWith(s.from, s.to, u)), (r = t.aiPanelInstance) == null || r.hide(), (i = t.tippyInstance) == null || i.show();
    }
  }), e.querySelector("#insert").addEventListener("click", () => {
    var r, i;
    const n = e.querySelector("textarea");
    if (n.value) {
      const { state: { selection: s, tr: o }, view: { dispatch: a } } = t.editor;
      a(o.insertText(n.value, s.to)), (r = t.aiPanelInstance) == null || r.hide(), (i = t.tippyInstance) == null || i.show();
    }
  }), e.querySelector("#hide").addEventListener("click", () => {
    var n, r;
    (n = t.aiPanelInstance) == null || n.hide(), (r = t.tippyInstance) == null || r.show();
  }), e.querySelector("#go").addEventListener("click", () => {
    const n = e.querySelector("#prompt").value;
    $h(t, e, n);
  }), e.querySelectorAll(".aie-ai-panel-actions p").forEach((n) => {
    const r = n.getAttribute("data-prompt");
    n.addEventListener("click", () => {
      $h(t, e, r);
    });
  }), e;
}, ES = {
  aaa: "",
  id: "ai",
  title: re("ai"),
  content: `<div style="display: flex;height: 20px">
                     <div style="line-height: 20px"> AI </div>
                     <div style="width: 18px;height: 18px;display: inline-block" >
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
                     </div>
                 </div>
                `,
  onInit: (t, e, n) => {
    const r = { editor: t, tippyInstance: e };
    return r.aiPanelInstance = Ke(n.querySelector("#ai"), {
      content: vS(r),
      appendTo: t.view.dom.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1,
      getReferenceClientRect: () => {
        const { state: i, view: s } = t, { ranges: o } = i.selection, a = Math.min(...o.map((u) => u.$from.pos)), l = Math.max(...o.map((u) => u.$to.pos));
        if (t1(i.selection)) {
          let u = s.nodeDOM(a);
          const c = u.dataset.nodeViewWrapper ? u : u.querySelector("[data-node-view-wrapper]");
          if (c && (u = c.firstChild), u)
            return u.getBoundingClientRect();
        }
        return ks(s, a, l);
      },
      onShow: (i) => {
        window.setTimeout(() => {
          var s;
          return (s = i.popper.querySelector("#prompt")) == null ? void 0 : s.focus();
        }, 0);
      }
    }), r;
  },
  onClick: (t, e, n, r) => {
    var i;
    (i = r.tippyInstance) == null || i.hide();
  }
}, CS = {
  id: "bold",
  title: re("bold"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z"></path></svg>',
  onClick: (t) => {
    t.chain().toggleBold().run();
  }
}, _S = {
  id: "underline",
  title: re("underline"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z"></path></svg>',
  onClick: (t) => {
    t.chain().toggleUnderline().run();
  }
}, wS = {
  id: "code",
  title: re("code"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 11.9998L15.9289 19.0708L14.5147 17.6566L20.1716 11.9998L14.5147 6.34292L15.9289 4.92871L23 11.9998ZM3.82843 11.9998L9.48528 17.6566L8.07107 19.0708L1 11.9998L8.07107 4.92871L9.48528 6.34292L3.82843 11.9998Z"></path></svg>',
  onClick: (t) => {
    t.chain().toggleCode().run();
  }
}, SS = {
  id: "strike",
  title: re("strike"),
  content: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z"></path></svg>',
  onClick: (t) => {
    t.chain().toggleStrike().run();
  }
}, AS = {
  id: "italic",
  title: re("italic"),
  content: ' <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z"></path></svg>',
  onClick: (t) => {
    t.chain().toggleItalic().run();
  }
}, MS = new Bc(
  [ES, CS, AS, _S, SS, wS]
), TS = (t, e) => {
  if (!t || t.length === 0)
    return t;
  let n = 0;
  for (; n < t.length; )
    e(t[n], n, t) ? t.splice(n, 1) : ++n;
  return t;
};
class DS extends Na {
  constructor() {
    super();
  }
  onCreate(e, n) {
    var r, i;
    super.onCreate(e, n), this.initItemsByOptions(MS, (r = n == null ? void 0 : n.textSelectionBubbleMenu) == null ? void 0 : r.items), ((i = n.ai) == null ? void 0 : i.bubblePanelEnable) === !1 && TS(this.items, (s) => s.id === "ai");
  }
}
se("aie-bubble-link", hS);
se("aie-bubble-image", xS);
se("aie-bubble-table", kS);
se("aie-bubble-text", DS);
function La(t, e) {
  return xe.create({
    name: t,
    addOptions() {
      return {
        ...e
      };
    },
    addProseMirrorPlugins() {
      return this.options.element ? [
        Jg({
          pluginKey: this.options.pluginKey,
          editor: this.editor,
          element: this.options.element,
          tippyOptions: this.options.tippyOptions,
          updateDelay: this.options.updateDelay,
          shouldShow: this.options.shouldShow
        })
      ] : [];
    }
  });
}
const OS = (t) => {
  var r;
  const e = ((r = t.options.textSelectionBubbleMenu) == null ? void 0 : r.elementTagName) || "aie-bubble-text", n = document.createElement(e);
  return t.eventComponents.push(n), La("textSelectionBubble", {
    pluginKey: "textSelectionBubble",
    element: n,
    tippyOptions: {
      appendTo: t.container,
      arrow: !1,
      getReferenceClientRect: () => {
        const i = t.innerEditor.state.selection, { ranges: s } = i, o = Math.min(...s.map((h) => h.$from.pos)), a = Math.max(...s.map((h) => h.$to.pos)), { view: l } = t.innerEditor, u = ks(l, o, a), c = l.coordsAtPos(0), d = l.coordsAtPos(o), f = d.top - c.top > 30 ? d.top : d.bottom + 65;
        return {
          ...u,
          top: f
        };
      },
      onCreate(i) {
        n.instance = i;
      }
    },
    shouldShow: ({ editor: i }) => {
      if (!i.isEditable)
        return !1;
      const { state: { selection: s } } = i;
      return !s.empty && ka(i.state.doc, {
        from: s.from,
        to: s.to
      }).trim().length > 0 && !i.isActive("link") && !i.isActive("image") && !(s instanceof Ce);
    }
  });
}, NS = (t) => {
  const e = document.createElement("aie-bubble-link");
  return t.eventComponents.push(e), La("linkBubble", {
    pluginKey: "textSelectionBubble",
    element: e,
    tippyOptions: {
      appendTo: t.container,
      placement: "bottom",
      arrow: !1,
      onCreate(n) {
        e.instance = n;
      }
    },
    shouldShow: ({ editor: n }) => n.isEditable && n.isActive("link")
  });
}, LS = (t) => {
  const e = document.createElement("aie-bubble-image");
  return t.eventComponents.push(e), La("imageBubble", {
    pluginKey: "imageBubble",
    element: e,
    tippyOptions: {
      appendTo: t.container,
      placement: "top-start",
      arrow: !1,
      getReferenceClientRect: () => {
        const { ranges: n } = t.innerEditor.state.selection, r = Math.min(...n.map((c) => c.$from.pos)), i = Math.max(...n.map((c) => c.$to.pos)), { view: s } = t.innerEditor, a = s.nodeDOM(r).querySelector("img"), l = ks(s, r, i), u = a.getBoundingClientRect();
        return {
          ...l,
          left: u.left + u.width * 0.25
        };
      },
      onCreate(n) {
        e.instance = n;
      }
    },
    shouldShow: ({ editor: n }) => n.isEditable && n.isActive("image")
  });
}, RS = (t) => {
  const e = document.createElement("aie-bubble-table");
  return t.eventComponents.push(e), La("tableBubble", {
    pluginKey: "tableBubble",
    element: e,
    tippyOptions: {
      placement: "top",
      appendTo: t.container,
      arrow: !1,
      getReferenceClientRect: () => {
        const n = t.innerEditor.state.selection, { ranges: r } = n, i = Math.min(...r.map((d) => d.$from.pos)), s = Math.max(...r.map((d) => d.$to.pos)), { view: o, state: a } = t.innerEditor, l = ks(o, i, s), u = a.selection.$from.posAtIndex(0, 1), c = o.coordsAtPos(u);
        return {
          ...l,
          top: c.top
        };
      }
    },
    shouldShow: ({ editor: n }) => {
      const { state: { selection: r } } = n;
      return n.isEditable && n.isActive("table") && r instanceof Ce;
    }
  });
}, IS = (t) => {
  var r;
  const e = [];
  return t.options.editable === !1 || (((r = t == null ? void 0 : t.options.textSelectionBubbleMenu) == null ? void 0 : r.enable) !== !1 && e.push(OS(t)), e.push(NS(t)), e.push(LS(t)), e.push(RS(t))), e;
}, FS = xe.create({
  name: "placeholder",
  addOptions() {
    return {
      emptyEditorClass: "is-editor-empty",
      emptyNodeClass: "is-empty",
      placeholder: "Write something …",
      showOnlyWhenEditable: !0,
      considerAnyAsEmpty: !1,
      showOnlyCurrent: !0,
      includeChildren: !1
    };
  },
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("placeholder"),
        props: {
          decorations: ({ doc: t, selection: e }) => {
            var n;
            const r = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: i } = e, s = [];
            if (!r)
              return null;
            const { firstChild: o } = t.content, a = o && o.type.isLeaf, l = o && o.isAtom, u = this.options.considerAnyAsEmpty ? !0 : o && o.type.name === ((n = t.type.contentMatch.defaultType) === null || n === void 0 ? void 0 : n.name), c = t.content.childCount <= 1 && o && u && o.nodeSize <= 2 && (!a || !l);
            return t.descendants((d, f) => {
              const h = i >= f && i <= f + d.nodeSize, p = !d.isLeaf && !d.childCount;
              if ((h || !this.options.showOnlyCurrent) && p) {
                const g = [this.options.emptyNodeClass];
                c && g.push(this.options.emptyEditorClass);
                const m = Be.node(f, f + d.nodeSize, {
                  class: g.join(" "),
                  "data-placeholder": typeof this.options.placeholder == "function" ? this.options.placeholder({
                    editor: this.editor,
                    node: d,
                    pos: f,
                    hasAnchor: h
                  }) : this.options.placeholder
                });
                s.push(m);
              }
              return this.options.includeChildren;
            }), ve.create(t, s);
          }
        }
      })
    ];
  }
});
function HS(t) {
  var e;
  const { char: n, allowSpaces: r, allowedPrefixes: i, startOfLine: s, $position: o } = t, a = L3(n), l = new RegExp(`\\s${a}$`), u = s ? "^" : "", c = r ? new RegExp(`${u}${a}.*?(?=\\s${a}|$)`, "gm") : new RegExp(`${u}(?:^)?${a}[^\\s${a}]*`, "gm"), d = ((e = o.nodeBefore) === null || e === void 0 ? void 0 : e.isText) && o.nodeBefore.text;
  if (!d)
    return null;
  const f = o.pos - d.length, h = Array.from(d.matchAll(c)).pop();
  if (!h || h.input === void 0 || h.index === void 0)
    return null;
  const p = h.input.slice(Math.max(0, h.index - 1), h.index), g = new RegExp(`^[${i == null ? void 0 : i.join("")}\0]?$`).test(p);
  if (i !== null && !g)
    return null;
  const m = f + h.index;
  let y = m + h[0].length;
  return r && l.test(d.slice(y - 1, y + 1)) && (h[0] += " ", y += 1), m < o.pos && y >= o.pos ? {
    range: {
      from: m,
      to: y
    },
    query: h[0].slice(n.length),
    text: h[0]
  } : null;
}
const BS = new Te("suggestion");
function Yg({ pluginKey: t = BS, editor: e, char: n = "@", allowSpaces: r = !1, allowedPrefixes: i = [" "], startOfLine: s = !1, decorationTag: o = "span", decorationClass: a = "suggestion", command: l = () => null, items: u = () => [], render: c = () => ({}), allow: d = () => !0, findSuggestionMatch: f = HS }) {
  let h;
  const p = c == null ? void 0 : c(), g = new we({
    key: t,
    view() {
      return {
        update: async (m, y) => {
          var x, k, b, E, v, _, T;
          const w = (x = this.key) === null || x === void 0 ? void 0 : x.getState(y), N = (k = this.key) === null || k === void 0 ? void 0 : k.getState(m.state), $ = w.active && N.active && w.range.from !== N.range.from, K = !w.active && N.active, U = w.active && !N.active, W = !K && !U && w.query !== N.query, z = K || $, A = W && !$, C = U || $;
          if (!z && !A && !C)
            return;
          const S = C && !z ? w : N, L = m.dom.querySelector(`[data-decoration-id="${S.decorationId}"]`);
          h = {
            editor: e,
            range: S.range,
            query: S.query,
            text: S.text,
            items: [],
            command: (F) => l({
              editor: e,
              range: S.range,
              props: F
            }),
            decorationNode: L,
            // virtual node for popper.js or tippy.js
            // this can be used for building popups without a DOM node
            clientRect: L ? () => {
              var F;
              const { decorationId: j } = (F = this.key) === null || F === void 0 ? void 0 : F.getState(e.state), Q = m.dom.querySelector(`[data-decoration-id="${j}"]`);
              return (Q == null ? void 0 : Q.getBoundingClientRect()) || null;
            } : null
          }, z && ((b = p == null ? void 0 : p.onBeforeStart) === null || b === void 0 || b.call(p, h)), A && ((E = p == null ? void 0 : p.onBeforeUpdate) === null || E === void 0 || E.call(p, h)), (A || z) && (h.items = await u({
            editor: e,
            query: S.query
          })), C && ((v = p == null ? void 0 : p.onExit) === null || v === void 0 || v.call(p, h)), A && ((_ = p == null ? void 0 : p.onUpdate) === null || _ === void 0 || _.call(p, h)), z && ((T = p == null ? void 0 : p.onStart) === null || T === void 0 || T.call(p, h));
        },
        destroy: () => {
          var m;
          h && ((m = p == null ? void 0 : p.onExit) === null || m === void 0 || m.call(p, h));
        }
      };
    },
    state: {
      // Initialize the plugin's internal state.
      init() {
        return {
          active: !1,
          range: {
            from: 0,
            to: 0
          },
          query: null,
          text: null,
          composing: !1
        };
      },
      // Apply changes to the plugin state from a view transaction.
      apply(m, y, x, k) {
        const { isEditable: b } = e, { composing: E } = e.view, { selection: v } = m, { empty: _, from: T } = v, w = { ...y };
        if (w.composing = E, b && (_ || e.view.composing)) {
          (T < y.range.from || T > y.range.to) && !E && !y.composing && (w.active = !1);
          const N = f({
            char: n,
            allowSpaces: r,
            allowedPrefixes: i,
            startOfLine: s,
            $position: v.$from
          }), $ = `id_${Math.floor(Math.random() * 4294967295)}`;
          N && d({ editor: e, state: k, range: N.range }) ? (w.active = !0, w.decorationId = y.decorationId ? y.decorationId : $, w.range = N.range, w.query = N.query, w.text = N.text) : w.active = !1;
        } else
          w.active = !1;
        return w.active || (w.decorationId = null, w.range = { from: 0, to: 0 }, w.query = null, w.text = null), w;
      }
    },
    props: {
      // Call the keydown hook if suggestion is active.
      handleKeyDown(m, y) {
        var x;
        const { active: k, range: b } = g.getState(m.state);
        return k && ((x = p == null ? void 0 : p.onKeyDown) === null || x === void 0 ? void 0 : x.call(p, { view: m, event: y, range: b })) || !1;
      },
      // Setup decorator on the currently active suggestion.
      decorations(m) {
        const { active: y, range: x, decorationId: k } = g.getState(m);
        return y ? ve.create(m.doc, [
          Be.inline(x.from, x.to, {
            nodeName: o,
            class: a,
            "data-decoration-id": k
          })
        ]) : null;
      }
    }
  });
  return g;
}
const PS = new Te("mention"), $S = ue.create({
  name: "mention",
  addOptions() {
    return {
      HTMLAttributes: {},
      renderText({ options: t, node: e }) {
        var n;
        return `${t.suggestion.char}${(n = e.attrs.label) !== null && n !== void 0 ? n : e.attrs.id}`;
      },
      deleteTriggerWithBackspace: !1,
      renderHTML({ options: t, node: e }) {
        var n;
        return [
          "span",
          le(this.HTMLAttributes, t.HTMLAttributes),
          `${t.suggestion.char}${(n = e.attrs.label) !== null && n !== void 0 ? n : e.attrs.id}`
        ];
      },
      suggestion: {
        char: "@",
        pluginKey: PS,
        command: ({ editor: t, range: e, props: n }) => {
          var r, i;
          const s = t.view.state.selection.$to.nodeAfter;
          ((r = s == null ? void 0 : s.text) === null || r === void 0 ? void 0 : r.startsWith(" ")) && (e.to += 1), t.chain().focus().insertContentAt(e, [
            {
              type: this.name,
              attrs: n
            },
            {
              type: "text",
              text: " "
            }
          ]).run(), (i = window.getSelection()) === null || i === void 0 || i.collapseToEnd();
        },
        allow: ({ state: t, range: e }) => {
          const n = t.doc.resolve(e.from), r = t.schema.nodes[this.name];
          return !!n.parent.type.contentMatch.matchType(r);
        }
      }
    };
  },
  group: "inline",
  inline: !0,
  selectable: !1,
  atom: !0,
  addAttributes() {
    return {
      id: {
        default: null,
        parseHTML: (t) => t.getAttribute("data-id"),
        renderHTML: (t) => t.id ? {
          "data-id": t.id
        } : {}
      },
      label: {
        default: null,
        parseHTML: (t) => t.getAttribute("data-label"),
        renderHTML: (t) => t.label ? {
          "data-label": t.label
        } : {}
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: `span[data-type="${this.name}"]`
      }
    ];
  },
  renderHTML({ node: t, HTMLAttributes: e }) {
    if (this.options.renderLabel !== void 0)
      return console.warn("renderLabel is deprecated use renderText and renderHTML instead"), [
        "span",
        le({ "data-type": this.name }, this.options.HTMLAttributes, e),
        this.options.renderLabel({
          options: this.options,
          node: t
        })
      ];
    const n = { ...this.options };
    n.HTMLAttributes = le({ "data-type": this.name }, this.options.HTMLAttributes, e);
    const r = this.options.renderHTML({
      options: n,
      node: t
    });
    return typeof r == "string" ? [
      "span",
      le({ "data-type": this.name }, this.options.HTMLAttributes, e),
      r
    ] : r;
  },
  renderText({ node: t }) {
    return this.options.renderLabel !== void 0 ? (console.warn("renderLabel is deprecated use renderText and renderHTML instead"), this.options.renderLabel({
      options: this.options,
      node: t
    })) : this.options.renderText({
      options: this.options,
      node: t
    });
  },
  addKeyboardShortcuts() {
    return {
      Backspace: () => this.editor.commands.command(({ tr: t, state: e }) => {
        let n = !1;
        const { selection: r } = e, { empty: i, anchor: s } = r;
        return i ? (e.doc.nodesBetween(s - 1, s, (o, a) => {
          if (o.type.name === this.name)
            return n = !0, t.insertText(this.options.deleteTriggerWithBackspace ? "" : this.options.suggestion.char || "", a, a + o.nodeSize), !1;
        }), n) : !1;
      })
    };
  },
  addProseMirrorPlugins() {
    return [
      Yg({
        editor: this.editor,
        ...this.options.suggestion
      })
    ];
  }
}), zS = (t) => $S.configure({
  HTMLAttributes: {
    class: "mention"
  },
  suggestion: {
    items: ({ query: e }) => t(e),
    render: () => {
      let e, n, r = 0, i;
      const s = () => {
        e.innerHTML = `
                            <div class="items">
                             ${i.items.map((o, a) => `<button type="button" class="item ${a === r ? "item-selected" : ""}" data-index="${a}"> @${o.name ? o.name : o}</button>`).join("")}
                            </div>
                            `, e.addEventListener("click", (o) => {
          const a = o.target.closest(".item");
          if (a) {
            const l = Number(a.getAttribute("data-index")), u = i.items[l];
            u && u.id ? i.command(u) : i.command({ id: u });
          }
        });
      };
      return {
        onStart: (o) => {
          e = document.createElement("div"), e.classList.add("suggestion"), i = o, o.clientRect && (s(), n = Ke("body", {
            getReferenceClientRect: o.clientRect,
            appendTo: () => o.editor.view.dom.closest(".aie-container"),
            content: e,
            showOnCreate: !0,
            interactive: !0,
            allowHTML: !0,
            trigger: "manual",
            placement: "bottom-start",
            arrow: !1
          }));
        },
        onUpdate(o) {
          i = o, o.clientRect && (s(), n[0].setProps({
            getReferenceClientRect: o.clientRect
          }));
        },
        onKeyDown(o) {
          if (o.event.key === "Escape")
            return n[0].hide(), !0;
          if (o.event.key === "ArrowUp")
            return r = (r + i.items.length - 1) % i.items.length, s(), !0;
          if (o.event.key === "ArrowDown")
            return r = (r + 1) % i.items.length, s(), !0;
          if (o.event.key === "Enter") {
            const a = i.items[r];
            return a && a.id ? i.command(a) : i.command({ id: a }), !0;
          }
          return !1;
        },
        onExit() {
          n[0].destroy(), e.remove();
        }
      };
    }
  }
}), VS = [
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21 19V21H19V19H21ZM17 19V21H15V19H17ZM13 19V21H11V19H13ZM9 19V21H7V19H9ZM5 19V21H3V19H5ZM21 15V17H19V15H21ZM5 15V17H3V15H5ZM5 11V13H3V11H5ZM16 3C18.6874 3 20.8817 5.12366 20.9954 7.78322L21 8V13H19V8C19 6.40893 17.7447 5.09681 16.1756 5.00512L16 5H11V3H16ZM5 7V9H3V7H5ZM5 3V5H3V3H5ZM9 3V5H7V3H9Z" fill="currentColor"></path></svg>',
    name: "AI 续写",
    prompt: "请帮我继续扩展一些这段话的内容",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 5.25C16.7949 5.25 18.25 3.79493 18.25 2H19.75C19.75 3.79493 21.2051 5.25 23 5.25V6.75C21.2051 6.75 19.75 8.20507 19.75 10H18.25C18.25 8.20507 16.7949 6.75 15 6.75V5.25ZM4 7C4 5.89543 4.89543 5 6 5H13V3H6C3.79086 3 2 4.79086 2 7V17C2 19.2091 3.79086 21 6 21H18C20.2091 21 22 19.2091 22 17V12H20V17C20 18.1046 19.1046 19 18 19H6C4.89543 19 4 18.1046 4 17V7Z" fill="currentColor"></path></svg>',
    name: "AI 提问",
    prompt: "",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 15V17C5 18.0544 5.81588 18.9182 6.85074 18.9945L7 19H10V21H7C4.79086 21 3 19.2091 3 17V15H5ZM18 10L22.4 21H20.245L19.044 18H14.954L13.755 21H11.601L16 10H18ZM17 12.8852L15.753 16H18.245L17 12.8852ZM8 2V4H12V11H8V14H6V11H2V4H6V2H8ZM17 3C19.2091 3 21 4.79086 21 7V9H19V7C19 5.89543 18.1046 5 17 5H14V3H17ZM6 6H4V9H6V6ZM10 6H8V9H10V6Z" fill="currentColor"></path></svg>',
    name: "AI 翻译",
    prompt: "请帮我翻译以上内容，在翻译之前，想先判断一下这个内容是不是中文，如果是中文，则翻译问英文，如果是其他语言，则需要翻译为中文，注意，你只需要返回翻译的结果，不需要对此进行任何解释，不需要除了翻译结果以外的其他任何内容。",
    model: "auto"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M20 3C20.5523 3 21 3.44772 21 4V5.757L19 7.757V5H5V13.1L9 9.1005L13.328 13.429L11.9132 14.8422L9 11.9289L5 15.928V19H15.533L16.2414 19.0012L17.57 17.671L18.8995 19H19V16.242L21 14.242V20C21 20.5523 20.5523 21 20 21H4C3.45 21 3 20.55 3 20V4C3 3.44772 3.44772 3 4 3H20ZM21.7782 7.80761L23.1924 9.22183L15.4142 17L13.9979 16.9979L14 15.5858L21.7782 7.80761ZM15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7Z" fill="currentColor"></path></svg>',
    name: "AI 生图",
    prompt: "请根据以上的内容，生成一张图片，并把图片返回给我",
    model: "auto"
  }
], US = xe.create({
  name: "aiCommand",
  // @ts-ignore
  addOptions() {
    return {
      suggestion: {
        char: "/",
        command: ({ editor: t, range: e, props: n }) => {
          if (t.chain().focus().deleteRange(e).run(), n && n.aiItem) {
            let r = n.aiItem;
            const i = t.state.selection.$head.parent.textContent;
            let s = r.model;
            const o = Er.get(r.model);
            o ? o == null || o.chat(i, r.prompt, new Lo(t)) : console.error("Ai model config error. can not find the type:" + s + " at command menu");
          } else
            switch (n.index) {
              case 0:
                t.chain().setParagraph().run();
                return;
              case 1:
                t.chain().setHeading({ level: 1 }).run();
                return;
              case 2:
                t.chain().setHeading({ level: 2 }).run();
                return;
              case 3:
                t.chain().setHeading({ level: 3 }).run();
                return;
              case 4:
                t.chain().toggleContainer("warning").run();
                return;
              case 5:
                t.chain().toggleBlockquote().run();
                return;
              case 6:
                t.chain().toggleBulletList().run();
                return;
              case 7:
                t.chain().toggleOrderedList().run();
                return;
              case 8:
                t.chain().setTextAlign("left").run();
                return;
              case 9:
                t.chain().setTextAlign("center").run();
                return;
              case 10:
                t.chain().toggleTaskList().run();
                return;
              case 11:
                t.chain().toggleCodeBlock().run();
                return;
            }
        },
        render: () => {
          let t, e, n = 0, r;
          const i = () => {
            t.innerHTML = `
                            <div class="ai-command-container">
                                <div class="ai-command-container-header">
                                    <div class="ai-command-container-header-item item ${n === 0 ? "active" : ""}" data-index="0">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 6V21H11V6H5V4H19V6H13Z" fill="currentColor"></path></svg>        
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 1 ? "active" : ""}" data-index="1">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 20H11V13H4V20H2V4H4V11H11V4H13V20ZM21.0005 8V20H19.0005L19 10.204L17 10.74V8.67L19.5005 8H21.0005Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 2 ? "active" : ""}" data-index="2">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 4V11H11V4H13V20H11V13H4V20H2V4H4ZM18.5 8C20.5711 8 22.25 9.67893 22.25 11.75C22.25 12.6074 21.9623 13.3976 21.4781 14.0292L21.3302 14.2102L18.0343 18H22V20H15L14.9993 18.444L19.8207 12.8981C20.0881 12.5908 20.25 12.1893 20.25 11.75C20.25 10.7835 19.4665 10 18.5 10C17.5818 10 16.8288 10.7071 16.7558 11.6065L16.75 11.75H14.75C14.75 9.67893 16.4289 8 18.5 8Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 3 ? "active" : ""}" data-index="3">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 8L21.9984 10L19.4934 12.883C21.0823 13.3184 22.25 14.7728 22.25 16.5C22.25 18.5711 20.5711 20.25 18.5 20.25C16.674 20.25 15.1528 18.9449 14.8184 17.2166L16.7821 16.8352C16.9384 17.6413 17.6481 18.25 18.5 18.25C19.4665 18.25 20.25 17.4665 20.25 16.5C20.25 15.5335 19.4665 14.75 18.5 14.75C18.214 14.75 17.944 14.8186 17.7056 14.9403L16.3992 13.3932L19.3484 10H15V8H22ZM4 4V11H11V4H13V20H11V13H4V20H2V4H4Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 4 ? "active" : ""}" data-index="4">
                                     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M21 3C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H21ZM20 5H4V19H20V5ZM18 15V17H6V15H18Z"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 5 ? "active" : ""}" data-index="5">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4.58341 17.3211C3.55316 16.2274 3 15 3 13.0103C3 9.51086 5.45651 6.37366 9.03059 4.82318L9.92328 6.20079C6.58804 8.00539 5.93618 10.346 5.67564 11.822C6.21263 11.5443 6.91558 11.4466 7.60471 11.5105C9.40908 11.6778 10.8312 13.159 10.8312 15C10.8312 16.933 9.26416 18.5 7.33116 18.5C6.2581 18.5 5.23196 18.0095 4.58341 17.3211ZM14.5834 17.3211C13.5532 16.2274 13 15 13 13.0103C13 9.51086 15.4565 6.37366 19.0306 4.82318L19.9233 6.20079C16.588 8.00539 15.9362 10.346 15.6756 11.822C16.2126 11.5443 16.9156 11.4466 17.6047 11.5105C19.4091 11.6778 20.8312 13.159 20.8312 15C20.8312 16.933 19.2642 18.5 17.3312 18.5C16.2581 18.5 15.232 18.0095 14.5834 17.3211Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 6 ? "active" : ""}" data-index="6">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM3 3.5H6V6.5H3V3.5ZM3 10.5H6V13.5H3V10.5ZM3 17.5H6V20.5H3V17.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 7 ? "active" : ""}" data-index="7">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z" fill="currentColor"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 8 ? "active" : ""}" data-index="8">
                                    <div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z"></path></svg></div>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 9 ? "active" : ""}" data-index="9">
                                    <div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z"></path></svg></div>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 10 ? "active" : ""}" data-index="10">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM5 5V19H19V5H5ZM11.0026 16L6.75999 11.7574L8.17421 10.3431L11.0026 13.1716L16.6595 7.51472L18.0737 8.92893L11.0026 16Z"></path></svg>
                                    </div>
                                    <div class="ai-command-container-header-item item ${n === 11 ? "active" : ""}" data-index="11">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3ZM4 5V19H20V5H4ZM20 12L16.4645 15.5355L15.0503 14.1213L17.1716 12L15.0503 9.87868L16.4645 8.46447L20 12ZM6.82843 12L8.94975 14.1213L7.53553 15.5355L4 12L7.53553 8.46447L8.94975 9.87868L6.82843 12ZM11.2443 17H9.11597L12.7557 7H14.884L11.2443 17Z"></path></svg>
                                    </div>
                                </div>
                                <hr/>
                                ${r.items.map((s, o) => `<div class="ai-command-container-item item ${n === 12 + o ? "active" : ""}" data-index="${12 + o}">${s.icon} ${s.name}</div>`).join("")}
                            </div>
                            `, t.addEventListener("click", (s) => {
              const o = s.target.closest(".item");
              if (o) {
                const a = Number(o.getAttribute("data-index"));
                r.command({
                  index: a,
                  aiItem: a > 11 ? r.items[a - 12] : null
                });
              }
            });
          };
          return {
            onStart: (s) => {
              t = document.createElement("div"), t.classList.add("suggestion"), r = s, s.clientRect && (i(), e = Ke("body", {
                getReferenceClientRect: s.clientRect,
                appendTo: () => s.editor.view.dom.closest(".aie-container"),
                content: t,
                showOnCreate: !0,
                interactive: !0,
                allowHTML: !0,
                trigger: "manual",
                placement: "right-start",
                arrow: !1
              }));
            },
            onUpdate(s) {
              r = s, s.clientRect && e[0].setProps({
                getReferenceClientRect: s.clientRect
              });
            },
            onKeyDown(s) {
              return s.event.key === "Escape" ? (e[0].hide(), !0) : s.event.key === "ArrowUp" ? (n < 6 ? n = 11 + r.items.length : n <= 11 ? n -= 6 : (n -= 1, n < 0 && (n = 11 + r.items.length)), i(), !0) : s.event.key === "ArrowDown" ? (n < 6 ? n += 6 : n < 11 ? n = 12 : (n += 1, n > 11 + r.items.length && (n = 0)), i(), !0) : s.event.key === "ArrowLeft" ? (n -= 1, n < 0 && (n = 11 + r.items.length), i(), !0) : s.event.key === "ArrowRight" ? (n += 1, n > 11 + r.items.length && (n = 0), i(), !0) : s.event.key === "Enter" ? (r.command({
                index: n,
                aiItem: n > 11 ? r.items[n - 12] : null
              }), !0) : !1;
            },
            onExit() {
              e[0].destroy(), t.remove();
            }
          };
        }
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      Yg({
        editor: this.editor,
        ...this.options.suggestion
      })
    ];
  }
}), qS = xe.create({
  addProseMirrorPlugins() {
    return [
      new we({
        key: new Te("selection-marker"),
        state: {
          init: () => ve.empty,
          apply: (t, e, n) => {
            const { selection: r } = t;
            if (r) {
              const i = [Be.inline(
                r.$from.pos,
                r.$to.pos,
                { class: "selection-marker" },
                { inclusiveLeft: !0, inclusiveRight: !0 }
              )];
              return ve.create(n.doc, i);
            }
            return e;
          }
        },
        props: {
          decorations(t) {
            return this.getState(t);
          }
        }
      })
    ];
  }
}), zh = {};
function ZS(t) {
  let e = zh[t];
  if (e)
    return e;
  e = zh[t] = [];
  for (let n = 0; n < 128; n++) {
    const r = String.fromCharCode(n);
    e.push(r);
  }
  for (let n = 0; n < t.length; n++) {
    const r = t.charCodeAt(n);
    e[r] = "%" + ("0" + r.toString(16).toUpperCase()).slice(-2);
  }
  return e;
}
function di(t, e) {
  typeof e != "string" && (e = di.defaultChars);
  const n = ZS(e);
  return t.replace(/(%[a-f0-9]{2})+/gi, function(r) {
    let i = "";
    for (let s = 0, o = r.length; s < o; s += 3) {
      const a = parseInt(r.slice(s + 1, s + 3), 16);
      if (a < 128) {
        i += n[a];
        continue;
      }
      if ((a & 224) === 192 && s + 3 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16);
        if ((l & 192) === 128) {
          const u = a << 6 & 1984 | l & 63;
          u < 128 ? i += "��" : i += String.fromCharCode(u), s += 3;
          continue;
        }
      }
      if ((a & 240) === 224 && s + 6 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16), u = parseInt(r.slice(s + 7, s + 9), 16);
        if ((l & 192) === 128 && (u & 192) === 128) {
          const c = a << 12 & 61440 | l << 6 & 4032 | u & 63;
          c < 2048 || c >= 55296 && c <= 57343 ? i += "���" : i += String.fromCharCode(c), s += 6;
          continue;
        }
      }
      if ((a & 248) === 240 && s + 9 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16), u = parseInt(r.slice(s + 7, s + 9), 16), c = parseInt(r.slice(s + 10, s + 12), 16);
        if ((l & 192) === 128 && (u & 192) === 128 && (c & 192) === 128) {
          let d = a << 18 & 1835008 | l << 12 & 258048 | u << 6 & 4032 | c & 63;
          d < 65536 || d > 1114111 ? i += "����" : (d -= 65536, i += String.fromCharCode(55296 + (d >> 10), 56320 + (d & 1023))), s += 9;
          continue;
        }
      }
      i += "�";
    }
    return i;
  });
}
di.defaultChars = ";/?:@&=+$,#";
di.componentChars = "";
const Vh = {};
function KS(t) {
  let e = Vh[t];
  if (e)
    return e;
  e = Vh[t] = [];
  for (let n = 0; n < 128; n++) {
    const r = String.fromCharCode(n);
    /^[0-9a-z]$/i.test(r) ? e.push(r) : e.push("%" + ("0" + n.toString(16).toUpperCase()).slice(-2));
  }
  for (let n = 0; n < t.length; n++)
    e[t.charCodeAt(n)] = t[n];
  return e;
}
function _s(t, e, n) {
  typeof e != "string" && (n = e, e = _s.defaultChars), typeof n > "u" && (n = !0);
  const r = KS(e);
  let i = "";
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t.charCodeAt(s);
    if (n && a === 37 && s + 2 < o && /^[0-9a-f]{2}$/i.test(t.slice(s + 1, s + 3))) {
      i += t.slice(s, s + 3), s += 2;
      continue;
    }
    if (a < 128) {
      i += r[a];
      continue;
    }
    if (a >= 55296 && a <= 57343) {
      if (a >= 55296 && a <= 56319 && s + 1 < o) {
        const l = t.charCodeAt(s + 1);
        if (l >= 56320 && l <= 57343) {
          i += encodeURIComponent(t[s] + t[s + 1]), s++;
          continue;
        }
      }
      i += "%EF%BF%BD";
      continue;
    }
    i += encodeURIComponent(t[s]);
  }
  return i;
}
_s.defaultChars = ";/?:@&=+$,-_.!~*'()#";
_s.componentChars = "-_.!~*'()";
function Pc(t) {
  let e = "";
  return e += t.protocol || "", e += t.slashes ? "//" : "", e += t.auth ? t.auth + "@" : "", t.hostname && t.hostname.indexOf(":") !== -1 ? e += "[" + t.hostname + "]" : e += t.hostname || "", e += t.port ? ":" + t.port : "", e += t.pathname || "", e += t.search || "", e += t.hash || "", e;
}
function ta() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
const WS = /^([a-z0-9.+-]+:)/i, jS = /:[0-9]*$/, GS = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, JS = ["<", ">", '"', "`", " ", "\r", `
`, "	"], YS = ["{", "}", "|", "\\", "^", "`"].concat(JS), XS = ["'"].concat(YS), Uh = ["%", "/", "?", ";", "#"].concat(XS), qh = ["/", "?", "#"], QS = 255, Zh = /^[+a-z0-9A-Z_-]{0,63}$/, e8 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, Kh = {
  javascript: !0,
  "javascript:": !0
}, Wh = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
};
function $c(t, e) {
  if (t && t instanceof ta)
    return t;
  const n = new ta();
  return n.parse(t, e), n;
}
ta.prototype.parse = function(t, e) {
  let n, r, i, s = t;
  if (s = s.trim(), !e && t.split("#").length === 1) {
    const u = GS.exec(s);
    if (u)
      return this.pathname = u[1], u[2] && (this.search = u[2]), this;
  }
  let o = WS.exec(s);
  if (o && (o = o[0], n = o.toLowerCase(), this.protocol = o, s = s.substr(o.length)), (e || o || s.match(/^\/\/[^@\/]+@[^@\/]+/)) && (i = s.substr(0, 2) === "//", i && !(o && Kh[o]) && (s = s.substr(2), this.slashes = !0)), !Kh[o] && (i || o && !Wh[o])) {
    let u = -1;
    for (let p = 0; p < qh.length; p++)
      r = s.indexOf(qh[p]), r !== -1 && (u === -1 || r < u) && (u = r);
    let c, d;
    u === -1 ? d = s.lastIndexOf("@") : d = s.lastIndexOf("@", u), d !== -1 && (c = s.slice(0, d), s = s.slice(d + 1), this.auth = c), u = -1;
    for (let p = 0; p < Uh.length; p++)
      r = s.indexOf(Uh[p]), r !== -1 && (u === -1 || r < u) && (u = r);
    u === -1 && (u = s.length), s[u - 1] === ":" && u--;
    const f = s.slice(0, u);
    s = s.slice(u), this.parseHost(f), this.hostname = this.hostname || "";
    const h = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!h) {
      const p = this.hostname.split(/\./);
      for (let g = 0, m = p.length; g < m; g++) {
        const y = p[g];
        if (y && !y.match(Zh)) {
          let x = "";
          for (let k = 0, b = y.length; k < b; k++)
            y.charCodeAt(k) > 127 ? x += "x" : x += y[k];
          if (!x.match(Zh)) {
            const k = p.slice(0, g), b = p.slice(g + 1), E = y.match(e8);
            E && (k.push(E[1]), b.unshift(E[2])), b.length && (s = b.join(".") + s), this.hostname = k.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > QS && (this.hostname = ""), h && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  const a = s.indexOf("#");
  a !== -1 && (this.hash = s.substr(a), s = s.slice(0, a));
  const l = s.indexOf("?");
  return l !== -1 && (this.search = s.substr(l), s = s.slice(0, l)), s && (this.pathname = s), Wh[n] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
ta.prototype.parseHost = function(t) {
  let e = jS.exec(t);
  e && (e = e[0], e !== ":" && (this.port = e.substr(1)), t = t.substr(0, t.length - e.length)), t && (this.hostname = t);
};
const t8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: di,
  encode: _s,
  format: Pc,
  parse: $c
}, Symbol.toStringTag, { value: "Module" })), Xg = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, Qg = /[\0-\x1F\x7F-\x9F]/, n8 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/, zc = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, em = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/, tm = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, r8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Any: Xg,
  Cc: Qg,
  Cf: n8,
  P: zc,
  S: em,
  Z: tm
}, Symbol.toStringTag, { value: "Module" })), i8 = new Uint16Array(
  // prettier-ignore
  'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((t) => t.charCodeAt(0))
), s8 = new Uint16Array(
  // prettier-ignore
  "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((t) => t.charCodeAt(0))
);
var Rl;
const o8 = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]), a8 = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (Rl = String.fromCodePoint) !== null && Rl !== void 0 ? Rl : function(t) {
    let e = "";
    return t > 65535 && (t -= 65536, e += String.fromCharCode(t >>> 10 & 1023 | 55296), t = 56320 | t & 1023), e += String.fromCharCode(t), e;
  }
);
function l8(t) {
  var e;
  return t >= 55296 && t <= 57343 || t > 1114111 ? 65533 : (e = o8.get(t)) !== null && e !== void 0 ? e : t;
}
var Ve;
(function(t) {
  t[t.NUM = 35] = "NUM", t[t.SEMI = 59] = "SEMI", t[t.EQUALS = 61] = "EQUALS", t[t.ZERO = 48] = "ZERO", t[t.NINE = 57] = "NINE", t[t.LOWER_A = 97] = "LOWER_A", t[t.LOWER_F = 102] = "LOWER_F", t[t.LOWER_X = 120] = "LOWER_X", t[t.LOWER_Z = 122] = "LOWER_Z", t[t.UPPER_A = 65] = "UPPER_A", t[t.UPPER_F = 70] = "UPPER_F", t[t.UPPER_Z = 90] = "UPPER_Z";
})(Ve || (Ve = {}));
const u8 = 32;
var Pn;
(function(t) {
  t[t.VALUE_LENGTH = 49152] = "VALUE_LENGTH", t[t.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", t[t.JUMP_TABLE = 127] = "JUMP_TABLE";
})(Pn || (Pn = {}));
function Ru(t) {
  return t >= Ve.ZERO && t <= Ve.NINE;
}
function c8(t) {
  return t >= Ve.UPPER_A && t <= Ve.UPPER_F || t >= Ve.LOWER_A && t <= Ve.LOWER_F;
}
function d8(t) {
  return t >= Ve.UPPER_A && t <= Ve.UPPER_Z || t >= Ve.LOWER_A && t <= Ve.LOWER_Z || Ru(t);
}
function f8(t) {
  return t === Ve.EQUALS || d8(t);
}
var $e;
(function(t) {
  t[t.EntityStart = 0] = "EntityStart", t[t.NumericStart = 1] = "NumericStart", t[t.NumericDecimal = 2] = "NumericDecimal", t[t.NumericHex = 3] = "NumericHex", t[t.NamedEntity = 4] = "NamedEntity";
})($e || ($e = {}));
var Nn;
(function(t) {
  t[t.Legacy = 0] = "Legacy", t[t.Strict = 1] = "Strict", t[t.Attribute = 2] = "Attribute";
})(Nn || (Nn = {}));
class h8 {
  constructor(e, n, r) {
    this.decodeTree = e, this.emitCodePoint = n, this.errors = r, this.state = $e.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = Nn.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(e) {
    this.decodeMode = e, this.state = $e.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(e, n) {
    switch (this.state) {
      case $e.EntityStart:
        return e.charCodeAt(n) === Ve.NUM ? (this.state = $e.NumericStart, this.consumed += 1, this.stateNumericStart(e, n + 1)) : (this.state = $e.NamedEntity, this.stateNamedEntity(e, n));
      case $e.NumericStart:
        return this.stateNumericStart(e, n);
      case $e.NumericDecimal:
        return this.stateNumericDecimal(e, n);
      case $e.NumericHex:
        return this.stateNumericHex(e, n);
      case $e.NamedEntity:
        return this.stateNamedEntity(e, n);
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(e, n) {
    return n >= e.length ? -1 : (e.charCodeAt(n) | u8) === Ve.LOWER_X ? (this.state = $e.NumericHex, this.consumed += 1, this.stateNumericHex(e, n + 1)) : (this.state = $e.NumericDecimal, this.stateNumericDecimal(e, n));
  }
  addToNumericResult(e, n, r, i) {
    if (n !== r) {
      const s = r - n;
      this.result = this.result * Math.pow(i, s) + parseInt(e.substr(n, s), i), this.consumed += s;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(e, n) {
    const r = n;
    for (; n < e.length; ) {
      const i = e.charCodeAt(n);
      if (Ru(i) || c8(i))
        n += 1;
      else
        return this.addToNumericResult(e, r, n, 16), this.emitNumericEntity(i, 3);
    }
    return this.addToNumericResult(e, r, n, 16), -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(e, n) {
    const r = n;
    for (; n < e.length; ) {
      const i = e.charCodeAt(n);
      if (Ru(i))
        n += 1;
      else
        return this.addToNumericResult(e, r, n, 10), this.emitNumericEntity(i, 2);
    }
    return this.addToNumericResult(e, r, n, 10), -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(e, n) {
    var r;
    if (this.consumed <= n)
      return (r = this.errors) === null || r === void 0 || r.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
    if (e === Ve.SEMI)
      this.consumed += 1;
    else if (this.decodeMode === Nn.Strict)
      return 0;
    return this.emitCodePoint(l8(this.result), this.consumed), this.errors && (e !== Ve.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(e, n) {
    const { decodeTree: r } = this;
    let i = r[this.treeIndex], s = (i & Pn.VALUE_LENGTH) >> 14;
    for (; n < e.length; n++, this.excess++) {
      const o = e.charCodeAt(n);
      if (this.treeIndex = p8(r, i, this.treeIndex + Math.max(1, s), o), this.treeIndex < 0)
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === Nn.Attribute && // We shouldn't have consumed any characters after the entity,
        (s === 0 || // And there should be no invalid characters.
        f8(o)) ? 0 : this.emitNotTerminatedNamedEntity();
      if (i = r[this.treeIndex], s = (i & Pn.VALUE_LENGTH) >> 14, s !== 0) {
        if (o === Ve.SEMI)
          return this.emitNamedEntityData(this.treeIndex, s, this.consumed + this.excess);
        this.decodeMode !== Nn.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var e;
    const { result: n, decodeTree: r } = this, i = (r[n] & Pn.VALUE_LENGTH) >> 14;
    return this.emitNamedEntityData(n, i, this.consumed), (e = this.errors) === null || e === void 0 || e.missingSemicolonAfterCharacterReference(), this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(e, n, r) {
    const { decodeTree: i } = this;
    return this.emitCodePoint(n === 1 ? i[e] & ~Pn.VALUE_LENGTH : i[e + 1], r), n === 3 && this.emitCodePoint(i[e + 2], r), r;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var e;
    switch (this.state) {
      case $e.NamedEntity:
        return this.result !== 0 && (this.decodeMode !== Nn.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      case $e.NumericDecimal:
        return this.emitNumericEntity(0, 2);
      case $e.NumericHex:
        return this.emitNumericEntity(0, 3);
      case $e.NumericStart:
        return (e = this.errors) === null || e === void 0 || e.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
      case $e.EntityStart:
        return 0;
    }
  }
}
function nm(t) {
  let e = "";
  const n = new h8(t, (r) => e += a8(r));
  return function(i, s) {
    let o = 0, a = 0;
    for (; (a = i.indexOf("&", a)) >= 0; ) {
      e += i.slice(o, a), n.startEntity(s);
      const u = n.write(
        i,
        // Skip the "&"
        a + 1
      );
      if (u < 0) {
        o = a + n.end();
        break;
      }
      o = a + u, a = u === 0 ? o + 1 : o;
    }
    const l = e + i.slice(o);
    return e = "", l;
  };
}
function p8(t, e, n, r) {
  const i = (e & Pn.BRANCH_LENGTH) >> 7, s = e & Pn.JUMP_TABLE;
  if (i === 0)
    return s !== 0 && r === s ? n : -1;
  if (s) {
    const l = r - s;
    return l < 0 || l >= i ? -1 : t[n + l] - 1;
  }
  let o = n, a = o + i - 1;
  for (; o <= a; ) {
    const l = o + a >>> 1, u = t[l];
    if (u < r)
      o = l + 1;
    else if (u > r)
      a = l - 1;
    else
      return t[l + i];
  }
  return -1;
}
const g8 = nm(i8);
nm(s8);
function Ra(t, e = Nn.Legacy) {
  return g8(t, e);
}
function m8(t) {
  return Object.prototype.toString.call(t);
}
function Vc(t) {
  return m8(t) === "[object String]";
}
const b8 = Object.prototype.hasOwnProperty;
function y8(t, e) {
  return b8.call(t, e);
}
function Ia(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    if (n) {
      if (typeof n != "object")
        throw new TypeError(n + "must be object");
      Object.keys(n).forEach(function(r) {
        t[r] = n[r];
      });
    }
  }), t;
}
function rm(t, e, n) {
  return [].concat(t.slice(0, e), n, t.slice(e + 1));
}
function Uc(t) {
  return !(t >= 55296 && t <= 57343 || t >= 64976 && t <= 65007 || (t & 65535) === 65535 || (t & 65535) === 65534 || t >= 0 && t <= 8 || t === 11 || t >= 14 && t <= 31 || t >= 127 && t <= 159 || t > 1114111);
}
function na(t) {
  if (t > 65535) {
    t -= 65536;
    const e = 55296 + (t >> 10), n = 56320 + (t & 1023);
    return String.fromCharCode(e, n);
  }
  return String.fromCharCode(t);
}
const im = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g, x8 = /&([a-z#][a-z0-9]{1,31});/gi, k8 = new RegExp(im.source + "|" + x8.source, "gi"), v8 = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
function E8(t, e) {
  if (e.charCodeAt(0) === 35 && v8.test(e)) {
    const r = e[1].toLowerCase() === "x" ? parseInt(e.slice(2), 16) : parseInt(e.slice(1), 10);
    return Uc(r) ? na(r) : t;
  }
  const n = Ra(t);
  return n !== t ? n : t;
}
function C8(t) {
  return t.indexOf("\\") < 0 ? t : t.replace(im, "$1");
}
function fi(t) {
  return t.indexOf("\\") < 0 && t.indexOf("&") < 0 ? t : t.replace(k8, function(e, n, r) {
    return n || E8(e, r);
  });
}
const _8 = /[&<>"]/, w8 = /[&<>"]/g, S8 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function A8(t) {
  return S8[t];
}
function Kn(t) {
  return _8.test(t) ? t.replace(w8, A8) : t;
}
const M8 = /[.?*+^$[\]\\(){}|-]/g;
function T8(t) {
  return t.replace(M8, "\\$&");
}
function Ae(t) {
  switch (t) {
    case 9:
    case 32:
      return !0;
  }
  return !1;
}
function as(t) {
  if (t >= 8192 && t <= 8202)
    return !0;
  switch (t) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
    case 160:
    case 5760:
    case 8239:
    case 8287:
    case 12288:
      return !0;
  }
  return !1;
}
function ls(t) {
  return zc.test(t) || em.test(t);
}
function us(t) {
  switch (t) {
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 124:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function Fa(t) {
  return t = t.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (t = t.replace(/ẞ/g, "ß")), t.toLowerCase().toUpperCase();
}
const D8 = { mdurl: t8, ucmicro: r8 }, O8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arrayReplaceAt: rm,
  assign: Ia,
  escapeHtml: Kn,
  escapeRE: T8,
  fromCodePoint: na,
  has: y8,
  isMdAsciiPunct: us,
  isPunctChar: ls,
  isSpace: Ae,
  isString: Vc,
  isValidEntityCode: Uc,
  isWhiteSpace: as,
  lib: D8,
  normalizeReference: Fa,
  unescapeAll: fi,
  unescapeMd: C8
}, Symbol.toStringTag, { value: "Module" }));
function N8(t, e, n) {
  let r, i, s, o;
  const a = t.posMax, l = t.pos;
  for (t.pos = e + 1, r = 1; t.pos < a; ) {
    if (s = t.src.charCodeAt(t.pos), s === 93 && (r--, r === 0)) {
      i = !0;
      break;
    }
    if (o = t.pos, t.md.inline.skipToken(t), s === 91) {
      if (o === t.pos - 1)
        r++;
      else if (n)
        return t.pos = l, -1;
    }
  }
  let u = -1;
  return i && (u = t.pos), t.pos = l, u;
}
function L8(t, e, n) {
  let r, i = e;
  const s = {
    ok: !1,
    pos: 0,
    str: ""
  };
  if (t.charCodeAt(i) === 60) {
    for (i++; i < n; ) {
      if (r = t.charCodeAt(i), r === 10 || r === 60)
        return s;
      if (r === 62)
        return s.pos = i + 1, s.str = fi(t.slice(e + 1, i)), s.ok = !0, s;
      if (r === 92 && i + 1 < n) {
        i += 2;
        continue;
      }
      i++;
    }
    return s;
  }
  let o = 0;
  for (; i < n && (r = t.charCodeAt(i), !(r === 32 || r < 32 || r === 127)); ) {
    if (r === 92 && i + 1 < n) {
      if (t.charCodeAt(i + 1) === 32)
        break;
      i += 2;
      continue;
    }
    if (r === 40 && (o++, o > 32))
      return s;
    if (r === 41) {
      if (o === 0)
        break;
      o--;
    }
    i++;
  }
  return e === i || o !== 0 || (s.str = fi(t.slice(e, i)), s.pos = i, s.ok = !0), s;
}
function R8(t, e, n, r) {
  let i, s = e;
  const o = {
    // if `true`, this is a valid link title
    ok: !1,
    // if `true`, this link can be continued on the next line
    can_continue: !1,
    // if `ok`, it's the position of the first character after the closing marker
    pos: 0,
    // if `ok`, it's the unescaped title
    str: "",
    // expected closing marker character code
    marker: 0
  };
  if (r)
    o.str = r.str, o.marker = r.marker;
  else {
    if (s >= n)
      return o;
    let a = t.charCodeAt(s);
    if (a !== 34 && a !== 39 && a !== 40)
      return o;
    e++, s++, a === 40 && (a = 41), o.marker = a;
  }
  for (; s < n; ) {
    if (i = t.charCodeAt(s), i === o.marker)
      return o.pos = s + 1, o.str += fi(t.slice(e, s)), o.ok = !0, o;
    if (i === 40 && o.marker === 41)
      return o;
    i === 92 && s + 1 < n && s++, s++;
  }
  return o.can_continue = !0, o.str += fi(t.slice(e, s)), o;
}
const I8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  parseLinkDestination: L8,
  parseLinkLabel: N8,
  parseLinkTitle: R8
}, Symbol.toStringTag, { value: "Module" })), ln = {};
ln.code_inline = function(t, e, n, r, i) {
  const s = t[e];
  return "<code" + i.renderAttrs(s) + ">" + Kn(s.content) + "</code>";
};
ln.code_block = function(t, e, n, r, i) {
  const s = t[e];
  return "<pre" + i.renderAttrs(s) + "><code>" + Kn(t[e].content) + `</code></pre>
`;
};
ln.fence = function(t, e, n, r, i) {
  const s = t[e], o = s.info ? fi(s.info).trim() : "";
  let a = "", l = "";
  if (o) {
    const c = o.split(/(\s+)/g);
    a = c[0], l = c.slice(2).join("");
  }
  let u;
  if (n.highlight ? u = n.highlight(s.content, a, l) || Kn(s.content) : u = Kn(s.content), u.indexOf("<pre") === 0)
    return u + `
`;
  if (o) {
    const c = s.attrIndex("class"), d = s.attrs ? s.attrs.slice() : [];
    c < 0 ? d.push(["class", n.langPrefix + a]) : (d[c] = d[c].slice(), d[c][1] += " " + n.langPrefix + a);
    const f = {
      attrs: d
    };
    return `<pre><code${i.renderAttrs(f)}>${u}</code></pre>
`;
  }
  return `<pre><code${i.renderAttrs(s)}>${u}</code></pre>
`;
};
ln.image = function(t, e, n, r, i) {
  const s = t[e];
  return s.attrs[s.attrIndex("alt")][1] = i.renderInlineAsText(s.children, n, r), i.renderToken(t, e, n);
};
ln.hardbreak = function(t, e, n) {
  return n.xhtmlOut ? `<br />
` : `<br>
`;
};
ln.softbreak = function(t, e, n) {
  return n.breaks ? n.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
ln.text = function(t, e) {
  return Kn(t[e].content);
};
ln.html_block = function(t, e) {
  return t[e].content;
};
ln.html_inline = function(t, e) {
  return t[e].content;
};
function yi() {
  this.rules = Ia({}, ln);
}
yi.prototype.renderAttrs = function(e) {
  let n, r, i;
  if (!e.attrs)
    return "";
  for (i = "", n = 0, r = e.attrs.length; n < r; n++)
    i += " " + Kn(e.attrs[n][0]) + '="' + Kn(e.attrs[n][1]) + '"';
  return i;
};
yi.prototype.renderToken = function(e, n, r) {
  const i = e[n];
  let s = "";
  if (i.hidden)
    return "";
  i.block && i.nesting !== -1 && n && e[n - 1].hidden && (s += `
`), s += (i.nesting === -1 ? "</" : "<") + i.tag, s += this.renderAttrs(i), i.nesting === 0 && r.xhtmlOut && (s += " /");
  let o = !1;
  if (i.block && (o = !0, i.nesting === 1 && n + 1 < e.length)) {
    const a = e[n + 1];
    (a.type === "inline" || a.hidden || a.nesting === -1 && a.tag === i.tag) && (o = !1);
  }
  return s += o ? `>
` : ">", s;
};
yi.prototype.renderInline = function(t, e, n) {
  let r = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    typeof i[a] < "u" ? r += i[a](t, s, e, n, this) : r += this.renderToken(t, s, e);
  }
  return r;
};
yi.prototype.renderInlineAsText = function(t, e, n) {
  let r = "";
  for (let i = 0, s = t.length; i < s; i++)
    switch (t[i].type) {
      case "text":
        r += t[i].content;
        break;
      case "image":
        r += this.renderInlineAsText(t[i].children, e, n);
        break;
      case "html_inline":
      case "html_block":
        r += t[i].content;
        break;
      case "softbreak":
      case "hardbreak":
        r += `
`;
        break;
    }
  return r;
};
yi.prototype.render = function(t, e, n) {
  let r = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    a === "inline" ? r += this.renderInline(t[s].children, e, n) : typeof i[a] < "u" ? r += i[a](t, s, e, n, this) : r += this.renderToken(t, s, e, n);
  }
  return r;
};
function mt() {
  this.__rules__ = [], this.__cache__ = null;
}
mt.prototype.__find__ = function(t) {
  for (let e = 0; e < this.__rules__.length; e++)
    if (this.__rules__[e].name === t)
      return e;
  return -1;
};
mt.prototype.__compile__ = function() {
  const t = this, e = [""];
  t.__rules__.forEach(function(n) {
    n.enabled && n.alt.forEach(function(r) {
      e.indexOf(r) < 0 && e.push(r);
    });
  }), t.__cache__ = {}, e.forEach(function(n) {
    t.__cache__[n] = [], t.__rules__.forEach(function(r) {
      r.enabled && (n && r.alt.indexOf(n) < 0 || t.__cache__[n].push(r.fn));
    });
  });
};
mt.prototype.at = function(t, e, n) {
  const r = this.__find__(t), i = n || {};
  if (r === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__[r].fn = e, this.__rules__[r].alt = i.alt || [], this.__cache__ = null;
};
mt.prototype.before = function(t, e, n, r) {
  const i = this.__find__(t), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i, 0, {
    name: e,
    enabled: !0,
    fn: n,
    alt: s.alt || []
  }), this.__cache__ = null;
};
mt.prototype.after = function(t, e, n, r) {
  const i = this.__find__(t), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i + 1, 0, {
    name: e,
    enabled: !0,
    fn: n,
    alt: s.alt || []
  }), this.__cache__ = null;
};
mt.prototype.push = function(t, e, n) {
  const r = n || {};
  this.__rules__.push({
    name: t,
    enabled: !0,
    fn: e,
    alt: r.alt || []
  }), this.__cache__ = null;
};
mt.prototype.enable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const n = [];
  return t.forEach(function(r) {
    const i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !0, n.push(r);
  }, this), this.__cache__ = null, n;
};
mt.prototype.enableOnly = function(t, e) {
  Array.isArray(t) || (t = [t]), this.__rules__.forEach(function(n) {
    n.enabled = !1;
  }), this.enable(t, e);
};
mt.prototype.disable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const n = [];
  return t.forEach(function(r) {
    const i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !1, n.push(r);
  }, this), this.__cache__ = null, n;
};
mt.prototype.getRules = function(t) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[t] || [];
};
function Ut(t, e, n) {
  this.type = t, this.tag = e, this.attrs = null, this.map = null, this.nesting = n, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = !1, this.hidden = !1;
}
Ut.prototype.attrIndex = function(e) {
  if (!this.attrs)
    return -1;
  const n = this.attrs;
  for (let r = 0, i = n.length; r < i; r++)
    if (n[r][0] === e)
      return r;
  return -1;
};
Ut.prototype.attrPush = function(e) {
  this.attrs ? this.attrs.push(e) : this.attrs = [e];
};
Ut.prototype.attrSet = function(e, n) {
  const r = this.attrIndex(e), i = [e, n];
  r < 0 ? this.attrPush(i) : this.attrs[r] = i;
};
Ut.prototype.attrGet = function(e) {
  const n = this.attrIndex(e);
  let r = null;
  return n >= 0 && (r = this.attrs[n][1]), r;
};
Ut.prototype.attrJoin = function(e, n) {
  const r = this.attrIndex(e);
  r < 0 ? this.attrPush([e, n]) : this.attrs[r][1] = this.attrs[r][1] + " " + n;
};
function sm(t, e, n) {
  this.src = t, this.env = n, this.tokens = [], this.inlineMode = !1, this.md = e;
}
sm.prototype.Token = Ut;
const F8 = /\r\n?|\n/g, H8 = /\0/g;
function B8(t) {
  let e;
  e = t.src.replace(F8, `
`), e = e.replace(H8, "�"), t.src = e;
}
function P8(t) {
  let e;
  t.inlineMode ? (e = new t.Token("inline", "", 0), e.content = t.src, e.map = [0, 1], e.children = [], t.tokens.push(e)) : t.md.block.parse(t.src, t.md, t.env, t.tokens);
}
function $8(t) {
  const e = t.tokens;
  for (let n = 0, r = e.length; n < r; n++) {
    const i = e[n];
    i.type === "inline" && t.md.inline.parse(i.content, t.md, t.env, i.children);
  }
}
function z8(t) {
  return /^<a[>\s]/i.test(t);
}
function V8(t) {
  return /^<\/a\s*>/i.test(t);
}
function U8(t) {
  const e = t.tokens;
  if (t.md.options.linkify)
    for (let n = 0, r = e.length; n < r; n++) {
      if (e[n].type !== "inline" || !t.md.linkify.pretest(e[n].content))
        continue;
      let i = e[n].children, s = 0;
      for (let o = i.length - 1; o >= 0; o--) {
        const a = i[o];
        if (a.type === "link_close") {
          for (o--; i[o].level !== a.level && i[o].type !== "link_open"; )
            o--;
          continue;
        }
        if (a.type === "html_inline" && (z8(a.content) && s > 0 && s--, V8(a.content) && s++), !(s > 0) && a.type === "text" && t.md.linkify.test(a.content)) {
          const l = a.content;
          let u = t.md.linkify.match(l);
          const c = [];
          let d = a.level, f = 0;
          u.length > 0 && u[0].index === 0 && o > 0 && i[o - 1].type === "text_special" && (u = u.slice(1));
          for (let h = 0; h < u.length; h++) {
            const p = u[h].url, g = t.md.normalizeLink(p);
            if (!t.md.validateLink(g))
              continue;
            let m = u[h].text;
            u[h].schema ? u[h].schema === "mailto:" && !/^mailto:/i.test(m) ? m = t.md.normalizeLinkText("mailto:" + m).replace(/^mailto:/, "") : m = t.md.normalizeLinkText(m) : m = t.md.normalizeLinkText("http://" + m).replace(/^http:\/\//, "");
            const y = u[h].index;
            if (y > f) {
              const E = new t.Token("text", "", 0);
              E.content = l.slice(f, y), E.level = d, c.push(E);
            }
            const x = new t.Token("link_open", "a", 1);
            x.attrs = [["href", g]], x.level = d++, x.markup = "linkify", x.info = "auto", c.push(x);
            const k = new t.Token("text", "", 0);
            k.content = m, k.level = d, c.push(k);
            const b = new t.Token("link_close", "a", -1);
            b.level = --d, b.markup = "linkify", b.info = "auto", c.push(b), f = u[h].lastIndex;
          }
          if (f < l.length) {
            const h = new t.Token("text", "", 0);
            h.content = l.slice(f), h.level = d, c.push(h);
          }
          e[n].children = i = rm(i, o, c);
        }
      }
    }
}
const om = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, q8 = /\((c|tm|r)\)/i, Z8 = /\((c|tm|r)\)/ig, K8 = {
  c: "©",
  r: "®",
  tm: "™"
};
function W8(t, e) {
  return K8[e.toLowerCase()];
}
function j8(t) {
  let e = 0;
  for (let n = t.length - 1; n >= 0; n--) {
    const r = t[n];
    r.type === "text" && !e && (r.content = r.content.replace(Z8, W8)), r.type === "link_open" && r.info === "auto" && e--, r.type === "link_close" && r.info === "auto" && e++;
  }
}
function G8(t) {
  let e = 0;
  for (let n = t.length - 1; n >= 0; n--) {
    const r = t[n];
    r.type === "text" && !e && om.test(r.content) && (r.content = r.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), r.type === "link_open" && r.info === "auto" && e--, r.type === "link_close" && r.info === "auto" && e++;
  }
}
function J8(t) {
  let e;
  if (t.md.options.typographer)
    for (e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type === "inline" && (q8.test(t.tokens[e].content) && j8(t.tokens[e].children), om.test(t.tokens[e].content) && G8(t.tokens[e].children));
}
const Y8 = /['"]/, jh = /['"]/g, Gh = "’";
function eo(t, e, n) {
  return t.slice(0, e) + n + t.slice(e + 1);
}
function X8(t, e) {
  let n;
  const r = [];
  for (let i = 0; i < t.length; i++) {
    const s = t[i], o = t[i].level;
    for (n = r.length - 1; n >= 0 && !(r[n].level <= o); n--)
      ;
    if (r.length = n + 1, s.type !== "text")
      continue;
    let a = s.content, l = 0, u = a.length;
    e:
      for (; l < u; ) {
        jh.lastIndex = l;
        const c = jh.exec(a);
        if (!c)
          break;
        let d = !0, f = !0;
        l = c.index + 1;
        const h = c[0] === "'";
        let p = 32;
        if (c.index - 1 >= 0)
          p = a.charCodeAt(c.index - 1);
        else
          for (n = i - 1; n >= 0 && !(t[n].type === "softbreak" || t[n].type === "hardbreak"); n--)
            if (t[n].content) {
              p = t[n].content.charCodeAt(t[n].content.length - 1);
              break;
            }
        let g = 32;
        if (l < u)
          g = a.charCodeAt(l);
        else
          for (n = i + 1; n < t.length && !(t[n].type === "softbreak" || t[n].type === "hardbreak"); n++)
            if (t[n].content) {
              g = t[n].content.charCodeAt(0);
              break;
            }
        const m = us(p) || ls(String.fromCharCode(p)), y = us(g) || ls(String.fromCharCode(g)), x = as(p), k = as(g);
        if (k ? d = !1 : y && (x || m || (d = !1)), x ? f = !1 : m && (k || y || (f = !1)), g === 34 && c[0] === '"' && p >= 48 && p <= 57 && (f = d = !1), d && f && (d = m, f = y), !d && !f) {
          h && (s.content = eo(s.content, c.index, Gh));
          continue;
        }
        if (f)
          for (n = r.length - 1; n >= 0; n--) {
            let b = r[n];
            if (r[n].level < o)
              break;
            if (b.single === h && r[n].level === o) {
              b = r[n];
              let E, v;
              h ? (E = e.md.options.quotes[2], v = e.md.options.quotes[3]) : (E = e.md.options.quotes[0], v = e.md.options.quotes[1]), s.content = eo(s.content, c.index, v), t[b.token].content = eo(
                t[b.token].content,
                b.pos,
                E
              ), l += v.length - 1, b.token === i && (l += E.length - 1), a = s.content, u = a.length, r.length = n;
              continue e;
            }
          }
        d ? r.push({
          token: i,
          pos: c.index,
          single: h,
          level: o
        }) : f && h && (s.content = eo(s.content, c.index, Gh));
      }
  }
}
function Q8(t) {
  if (t.md.options.typographer)
    for (let e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type !== "inline" || !Y8.test(t.tokens[e].content) || X8(t.tokens[e].children, t);
}
function eA(t) {
  let e, n;
  const r = t.tokens, i = r.length;
  for (let s = 0; s < i; s++) {
    if (r[s].type !== "inline")
      continue;
    const o = r[s].children, a = o.length;
    for (e = 0; e < a; e++)
      o[e].type === "text_special" && (o[e].type = "text");
    for (e = n = 0; e < a; e++)
      o[e].type === "text" && e + 1 < a && o[e + 1].type === "text" ? o[e + 1].content = o[e].content + o[e + 1].content : (e !== n && (o[n] = o[e]), n++);
    e !== n && (o.length = n);
  }
}
const Il = [
  ["normalize", B8],
  ["block", P8],
  ["inline", $8],
  ["linkify", U8],
  ["replacements", J8],
  ["smartquotes", Q8],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", eA]
];
function qc() {
  this.ruler = new mt();
  for (let t = 0; t < Il.length; t++)
    this.ruler.push(Il[t][0], Il[t][1]);
}
qc.prototype.process = function(t) {
  const e = this.ruler.getRules("");
  for (let n = 0, r = e.length; n < r; n++)
    e[n](t);
};
qc.prototype.State = sm;
function un(t, e, n, r) {
  this.src = t, this.md = e, this.env = n, this.tokens = r, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0;
  const i = this.src;
  for (let s = 0, o = 0, a = 0, l = 0, u = i.length, c = !1; o < u; o++) {
    const d = i.charCodeAt(o);
    if (!c)
      if (Ae(d)) {
        a++, d === 9 ? l += 4 - l % 4 : l++;
        continue;
      } else
        c = !0;
    (d === 10 || o === u - 1) && (d !== 10 && o++, this.bMarks.push(s), this.eMarks.push(o), this.tShift.push(a), this.sCount.push(l), this.bsCount.push(0), c = !1, a = 0, l = 0, s = o + 1);
  }
  this.bMarks.push(i.length), this.eMarks.push(i.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
un.prototype.push = function(t, e, n) {
  const r = new Ut(t, e, n);
  return r.block = !0, n < 0 && this.level--, r.level = this.level, n > 0 && this.level++, this.tokens.push(r), r;
};
un.prototype.isEmpty = function(e) {
  return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
};
un.prototype.skipEmptyLines = function(e) {
  for (let n = this.lineMax; e < n && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++)
    ;
  return e;
};
un.prototype.skipSpaces = function(e) {
  for (let n = this.src.length; e < n; e++) {
    const r = this.src.charCodeAt(e);
    if (!Ae(r))
      break;
  }
  return e;
};
un.prototype.skipSpacesBack = function(e, n) {
  if (e <= n)
    return e;
  for (; e > n; )
    if (!Ae(this.src.charCodeAt(--e)))
      return e + 1;
  return e;
};
un.prototype.skipChars = function(e, n) {
  for (let r = this.src.length; e < r && this.src.charCodeAt(e) === n; e++)
    ;
  return e;
};
un.prototype.skipCharsBack = function(e, n, r) {
  if (e <= r)
    return e;
  for (; e > r; )
    if (n !== this.src.charCodeAt(--e))
      return e + 1;
  return e;
};
un.prototype.getLines = function(e, n, r, i) {
  if (e >= n)
    return "";
  const s = new Array(n - e);
  for (let o = 0, a = e; a < n; a++, o++) {
    let l = 0;
    const u = this.bMarks[a];
    let c = u, d;
    for (a + 1 < n || i ? d = this.eMarks[a] + 1 : d = this.eMarks[a]; c < d && l < r; ) {
      const f = this.src.charCodeAt(c);
      if (Ae(f))
        f === 9 ? l += 4 - (l + this.bsCount[a]) % 4 : l++;
      else if (c - u < this.tShift[a])
        l++;
      else
        break;
      c++;
    }
    l > r ? s[o] = new Array(l - r + 1).join(" ") + this.src.slice(c, d) : s[o] = this.src.slice(c, d);
  }
  return s.join("");
};
un.prototype.Token = Ut;
const tA = 65536;
function Fl(t, e) {
  const n = t.bMarks[e] + t.tShift[e], r = t.eMarks[e];
  return t.src.slice(n, r);
}
function Jh(t) {
  const e = [], n = t.length;
  let r = 0, i = t.charCodeAt(r), s = !1, o = 0, a = "";
  for (; r < n; )
    i === 124 && (s ? (a += t.substring(o, r - 1), o = r) : (e.push(a + t.substring(o, r)), a = "", o = r + 1)), s = i === 92, r++, i = t.charCodeAt(r);
  return e.push(a + t.substring(o)), e;
}
function nA(t, e, n, r) {
  if (e + 2 > n)
    return !1;
  let i = e + 1;
  if (t.sCount[i] < t.blkIndent || t.sCount[i] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[i] + t.tShift[i];
  if (s >= t.eMarks[i])
    return !1;
  const o = t.src.charCodeAt(s++);
  if (o !== 124 && o !== 45 && o !== 58 || s >= t.eMarks[i])
    return !1;
  const a = t.src.charCodeAt(s++);
  if (a !== 124 && a !== 45 && a !== 58 && !Ae(a) || o === 45 && Ae(a))
    return !1;
  for (; s < t.eMarks[i]; ) {
    const b = t.src.charCodeAt(s);
    if (b !== 124 && b !== 45 && b !== 58 && !Ae(b))
      return !1;
    s++;
  }
  let l = Fl(t, e + 1), u = l.split("|");
  const c = [];
  for (let b = 0; b < u.length; b++) {
    const E = u[b].trim();
    if (!E) {
      if (b === 0 || b === u.length - 1)
        continue;
      return !1;
    }
    if (!/^:?-+:?$/.test(E))
      return !1;
    E.charCodeAt(E.length - 1) === 58 ? c.push(E.charCodeAt(0) === 58 ? "center" : "right") : E.charCodeAt(0) === 58 ? c.push("left") : c.push("");
  }
  if (l = Fl(t, e).trim(), l.indexOf("|") === -1 || t.sCount[e] - t.blkIndent >= 4)
    return !1;
  u = Jh(l), u.length && u[0] === "" && u.shift(), u.length && u[u.length - 1] === "" && u.pop();
  const d = u.length;
  if (d === 0 || d !== c.length)
    return !1;
  if (r)
    return !0;
  const f = t.parentType;
  t.parentType = "table";
  const h = t.md.block.ruler.getRules("blockquote"), p = t.push("table_open", "table", 1), g = [e, 0];
  p.map = g;
  const m = t.push("thead_open", "thead", 1);
  m.map = [e, e + 1];
  const y = t.push("tr_open", "tr", 1);
  y.map = [e, e + 1];
  for (let b = 0; b < u.length; b++) {
    const E = t.push("th_open", "th", 1);
    c[b] && (E.attrs = [["style", "text-align:" + c[b]]]);
    const v = t.push("inline", "", 0);
    v.content = u[b].trim(), v.children = [], t.push("th_close", "th", -1);
  }
  t.push("tr_close", "tr", -1), t.push("thead_close", "thead", -1);
  let x, k = 0;
  for (i = e + 2; i < n && !(t.sCount[i] < t.blkIndent); i++) {
    let b = !1;
    for (let v = 0, _ = h.length; v < _; v++)
      if (h[v](t, i, n, !0)) {
        b = !0;
        break;
      }
    if (b || (l = Fl(t, i).trim(), !l) || t.sCount[i] - t.blkIndent >= 4 || (u = Jh(l), u.length && u[0] === "" && u.shift(), u.length && u[u.length - 1] === "" && u.pop(), k += d - u.length, k > tA))
      break;
    if (i === e + 2) {
      const v = t.push("tbody_open", "tbody", 1);
      v.map = x = [e + 2, 0];
    }
    const E = t.push("tr_open", "tr", 1);
    E.map = [i, i + 1];
    for (let v = 0; v < d; v++) {
      const _ = t.push("td_open", "td", 1);
      c[v] && (_.attrs = [["style", "text-align:" + c[v]]]);
      const T = t.push("inline", "", 0);
      T.content = u[v] ? u[v].trim() : "", T.children = [], t.push("td_close", "td", -1);
    }
    t.push("tr_close", "tr", -1);
  }
  return x && (t.push("tbody_close", "tbody", -1), x[1] = i), t.push("table_close", "table", -1), g[1] = i, t.parentType = f, t.line = i, !0;
}
function rA(t, e, n) {
  if (t.sCount[e] - t.blkIndent < 4)
    return !1;
  let r = e + 1, i = r;
  for (; r < n; ) {
    if (t.isEmpty(r)) {
      r++;
      continue;
    }
    if (t.sCount[r] - t.blkIndent >= 4) {
      r++, i = r;
      continue;
    }
    break;
  }
  t.line = i;
  const s = t.push("code_block", "code", 0);
  return s.content = t.getLines(e, i, 4 + t.blkIndent, !1) + `
`, s.map = [e, t.line], !0;
}
function iA(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || i + 3 > s)
    return !1;
  const o = t.src.charCodeAt(i);
  if (o !== 126 && o !== 96)
    return !1;
  let a = i;
  i = t.skipChars(i, o);
  let l = i - a;
  if (l < 3)
    return !1;
  const u = t.src.slice(a, i), c = t.src.slice(i, s);
  if (o === 96 && c.indexOf(String.fromCharCode(o)) >= 0)
    return !1;
  if (r)
    return !0;
  let d = e, f = !1;
  for (; d++, !(d >= n || (i = a = t.bMarks[d] + t.tShift[d], s = t.eMarks[d], i < s && t.sCount[d] < t.blkIndent)); )
    if (t.src.charCodeAt(i) === o && !(t.sCount[d] - t.blkIndent >= 4) && (i = t.skipChars(i, o), !(i - a < l) && (i = t.skipSpaces(i), !(i < s)))) {
      f = !0;
      break;
    }
  l = t.sCount[e], t.line = d + (f ? 1 : 0);
  const h = t.push("fence", "code", 0);
  return h.info = c, h.content = t.getLines(e + 1, d, l, !0), h.markup = u, h.map = [e, t.line], !0;
}
function sA(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  const o = t.lineMax;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(i) !== 62)
    return !1;
  if (r)
    return !0;
  const a = [], l = [], u = [], c = [], d = t.md.block.ruler.getRules("blockquote"), f = t.parentType;
  t.parentType = "blockquote";
  let h = !1, p;
  for (p = e; p < n; p++) {
    const k = t.sCount[p] < t.blkIndent;
    if (i = t.bMarks[p] + t.tShift[p], s = t.eMarks[p], i >= s)
      break;
    if (t.src.charCodeAt(i++) === 62 && !k) {
      let E = t.sCount[p] + 1, v, _;
      t.src.charCodeAt(i) === 32 ? (i++, E++, _ = !1, v = !0) : t.src.charCodeAt(i) === 9 ? (v = !0, (t.bsCount[p] + E) % 4 === 3 ? (i++, E++, _ = !1) : _ = !0) : v = !1;
      let T = E;
      for (a.push(t.bMarks[p]), t.bMarks[p] = i; i < s; ) {
        const w = t.src.charCodeAt(i);
        if (Ae(w))
          w === 9 ? T += 4 - (T + t.bsCount[p] + (_ ? 1 : 0)) % 4 : T++;
        else
          break;
        i++;
      }
      h = i >= s, l.push(t.bsCount[p]), t.bsCount[p] = t.sCount[p] + 1 + (v ? 1 : 0), u.push(t.sCount[p]), t.sCount[p] = T - E, c.push(t.tShift[p]), t.tShift[p] = i - t.bMarks[p];
      continue;
    }
    if (h)
      break;
    let b = !1;
    for (let E = 0, v = d.length; E < v; E++)
      if (d[E](t, p, n, !0)) {
        b = !0;
        break;
      }
    if (b) {
      t.lineMax = p, t.blkIndent !== 0 && (a.push(t.bMarks[p]), l.push(t.bsCount[p]), c.push(t.tShift[p]), u.push(t.sCount[p]), t.sCount[p] -= t.blkIndent);
      break;
    }
    a.push(t.bMarks[p]), l.push(t.bsCount[p]), c.push(t.tShift[p]), u.push(t.sCount[p]), t.sCount[p] = -1;
  }
  const g = t.blkIndent;
  t.blkIndent = 0;
  const m = t.push("blockquote_open", "blockquote", 1);
  m.markup = ">";
  const y = [e, 0];
  m.map = y, t.md.block.tokenize(t, e, p);
  const x = t.push("blockquote_close", "blockquote", -1);
  x.markup = ">", t.lineMax = o, t.parentType = f, y[1] = t.line;
  for (let k = 0; k < c.length; k++)
    t.bMarks[k + e] = a[k], t.tShift[k + e] = c[k], t.sCount[k + e] = u[k], t.bsCount[k + e] = l[k];
  return t.blkIndent = g, !0;
}
function oA(t, e, n, r) {
  const i = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[e] + t.tShift[e];
  const o = t.src.charCodeAt(s++);
  if (o !== 42 && o !== 45 && o !== 95)
    return !1;
  let a = 1;
  for (; s < i; ) {
    const u = t.src.charCodeAt(s++);
    if (u !== o && !Ae(u))
      return !1;
    u === o && a++;
  }
  if (a < 3)
    return !1;
  if (r)
    return !0;
  t.line = e + 1;
  const l = t.push("hr", "hr", 0);
  return l.map = [e, t.line], l.markup = Array(a + 1).join(String.fromCharCode(o)), !0;
}
function Yh(t, e) {
  const n = t.eMarks[e];
  let r = t.bMarks[e] + t.tShift[e];
  const i = t.src.charCodeAt(r++);
  if (i !== 42 && i !== 45 && i !== 43)
    return -1;
  if (r < n) {
    const s = t.src.charCodeAt(r);
    if (!Ae(s))
      return -1;
  }
  return r;
}
function Xh(t, e) {
  const n = t.bMarks[e] + t.tShift[e], r = t.eMarks[e];
  let i = n;
  if (i + 1 >= r)
    return -1;
  let s = t.src.charCodeAt(i++);
  if (s < 48 || s > 57)
    return -1;
  for (; ; ) {
    if (i >= r)
      return -1;
    if (s = t.src.charCodeAt(i++), s >= 48 && s <= 57) {
      if (i - n >= 10)
        return -1;
      continue;
    }
    if (s === 41 || s === 46)
      break;
    return -1;
  }
  return i < r && (s = t.src.charCodeAt(i), !Ae(s)) ? -1 : i;
}
function aA(t, e) {
  const n = t.level + 2;
  for (let r = e + 2, i = t.tokens.length - 2; r < i; r++)
    t.tokens[r].level === n && t.tokens[r].type === "paragraph_open" && (t.tokens[r + 2].hidden = !0, t.tokens[r].hidden = !0, r += 2);
}
function lA(t, e, n, r) {
  let i, s, o, a, l = e, u = !0;
  if (t.sCount[l] - t.blkIndent >= 4 || t.listIndent >= 0 && t.sCount[l] - t.listIndent >= 4 && t.sCount[l] < t.blkIndent)
    return !1;
  let c = !1;
  r && t.parentType === "paragraph" && t.sCount[l] >= t.blkIndent && (c = !0);
  let d, f, h;
  if ((h = Xh(t, l)) >= 0) {
    if (d = !0, o = t.bMarks[l] + t.tShift[l], f = Number(t.src.slice(o, h - 1)), c && f !== 1)
      return !1;
  } else if ((h = Yh(t, l)) >= 0)
    d = !1;
  else
    return !1;
  if (c && t.skipSpaces(h) >= t.eMarks[l])
    return !1;
  if (r)
    return !0;
  const p = t.src.charCodeAt(h - 1), g = t.tokens.length;
  d ? (a = t.push("ordered_list_open", "ol", 1), f !== 1 && (a.attrs = [["start", f]])) : a = t.push("bullet_list_open", "ul", 1);
  const m = [l, 0];
  a.map = m, a.markup = String.fromCharCode(p);
  let y = !1;
  const x = t.md.block.ruler.getRules("list"), k = t.parentType;
  for (t.parentType = "list"; l < n; ) {
    s = h, i = t.eMarks[l];
    const b = t.sCount[l] + h - (t.bMarks[l] + t.tShift[l]);
    let E = b;
    for (; s < i; ) {
      const z = t.src.charCodeAt(s);
      if (z === 9)
        E += 4 - (E + t.bsCount[l]) % 4;
      else if (z === 32)
        E++;
      else
        break;
      s++;
    }
    const v = s;
    let _;
    v >= i ? _ = 1 : _ = E - b, _ > 4 && (_ = 1);
    const T = b + _;
    a = t.push("list_item_open", "li", 1), a.markup = String.fromCharCode(p);
    const w = [l, 0];
    a.map = w, d && (a.info = t.src.slice(o, h - 1));
    const N = t.tight, $ = t.tShift[l], K = t.sCount[l], U = t.listIndent;
    if (t.listIndent = t.blkIndent, t.blkIndent = T, t.tight = !0, t.tShift[l] = v - t.bMarks[l], t.sCount[l] = E, v >= i && t.isEmpty(l + 1) ? t.line = Math.min(t.line + 2, n) : t.md.block.tokenize(t, l, n, !0), (!t.tight || y) && (u = !1), y = t.line - l > 1 && t.isEmpty(t.line - 1), t.blkIndent = t.listIndent, t.listIndent = U, t.tShift[l] = $, t.sCount[l] = K, t.tight = N, a = t.push("list_item_close", "li", -1), a.markup = String.fromCharCode(p), l = t.line, w[1] = l, l >= n || t.sCount[l] < t.blkIndent || t.sCount[l] - t.blkIndent >= 4)
      break;
    let W = !1;
    for (let z = 0, A = x.length; z < A; z++)
      if (x[z](t, l, n, !0)) {
        W = !0;
        break;
      }
    if (W)
      break;
    if (d) {
      if (h = Xh(t, l), h < 0)
        break;
      o = t.bMarks[l] + t.tShift[l];
    } else if (h = Yh(t, l), h < 0)
      break;
    if (p !== t.src.charCodeAt(h - 1))
      break;
  }
  return d ? a = t.push("ordered_list_close", "ol", -1) : a = t.push("bullet_list_close", "ul", -1), a.markup = String.fromCharCode(p), m[1] = l, t.line = l, t.parentType = k, u && aA(t, g), !0;
}
function uA(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e], o = e + 1;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(i) !== 91)
    return !1;
  function a(x) {
    const k = t.lineMax;
    if (x >= k || t.isEmpty(x))
      return null;
    let b = !1;
    if (t.sCount[x] - t.blkIndent > 3 && (b = !0), t.sCount[x] < 0 && (b = !0), !b) {
      const _ = t.md.block.ruler.getRules("reference"), T = t.parentType;
      t.parentType = "reference";
      let w = !1;
      for (let N = 0, $ = _.length; N < $; N++)
        if (_[N](t, x, k, !0)) {
          w = !0;
          break;
        }
      if (t.parentType = T, w)
        return null;
    }
    const E = t.bMarks[x] + t.tShift[x], v = t.eMarks[x];
    return t.src.slice(E, v + 1);
  }
  let l = t.src.slice(i, s + 1);
  s = l.length;
  let u = -1;
  for (i = 1; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 91)
      return !1;
    if (x === 93) {
      u = i;
      break;
    } else if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (x === 92 && (i++, i < s && l.charCodeAt(i) === 10)) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    }
  }
  if (u < 0 || l.charCodeAt(u + 1) !== 58)
    return !1;
  for (i = u + 2; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (!Ae(x))
      break;
  }
  const c = t.md.helpers.parseLinkDestination(l, i, s);
  if (!c.ok)
    return !1;
  const d = t.md.normalizeLink(c.str);
  if (!t.md.validateLink(d))
    return !1;
  i = c.pos;
  const f = i, h = o, p = i;
  for (; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (!Ae(x))
      break;
  }
  let g = t.md.helpers.parseLinkTitle(l, i, s);
  for (; g.can_continue; ) {
    const x = a(o);
    if (x === null)
      break;
    l += x, i = s, s = l.length, o++, g = t.md.helpers.parseLinkTitle(l, i, s, g);
  }
  let m;
  for (i < s && p !== i && g.ok ? (m = g.str, i = g.pos) : (m = "", i = f, o = h); i < s; ) {
    const x = l.charCodeAt(i);
    if (!Ae(x))
      break;
    i++;
  }
  if (i < s && l.charCodeAt(i) !== 10 && m)
    for (m = "", i = f, o = h; i < s; ) {
      const x = l.charCodeAt(i);
      if (!Ae(x))
        break;
      i++;
    }
  if (i < s && l.charCodeAt(i) !== 10)
    return !1;
  const y = Fa(l.slice(1, u));
  return y ? (r || (typeof t.env.references > "u" && (t.env.references = {}), typeof t.env.references[y] > "u" && (t.env.references[y] = { title: m, href: d }), t.line = o), !0) : !1;
}
const cA = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], dA = "[a-zA-Z_:][a-zA-Z0-9:._-]*", fA = "[^\"'=<>`\\x00-\\x20]+", hA = "'[^']*'", pA = '"[^"]*"', gA = "(?:" + fA + "|" + hA + "|" + pA + ")", mA = "(?:\\s+" + dA + "(?:\\s*=\\s*" + gA + ")?)", am = "<[A-Za-z][A-Za-z0-9\\-]*" + mA + "*\\s*\\/?>", lm = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", bA = "<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->", yA = "<[?][\\s\\S]*?[?]>", xA = "<![A-Za-z][^>]*>", kA = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", vA = new RegExp("^(?:" + am + "|" + lm + "|" + bA + "|" + yA + "|" + xA + "|" + kA + ")"), EA = new RegExp("^(?:" + am + "|" + lm + ")"), Fr = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, !0],
  [/^<!--/, /-->/, !0],
  [/^<\?/, /\?>/, !0],
  [/^<![A-Z]/, />/, !0],
  [/^<!\[CDATA\[/, /\]\]>/, !0],
  [new RegExp("^</?(" + cA.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, !0],
  [new RegExp(EA.source + "\\s*$"), /^$/, !1]
];
function CA(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || !t.md.options.html || t.src.charCodeAt(i) !== 60)
    return !1;
  let o = t.src.slice(i, s), a = 0;
  for (; a < Fr.length && !Fr[a][0].test(o); a++)
    ;
  if (a === Fr.length)
    return !1;
  if (r)
    return Fr[a][2];
  let l = e + 1;
  if (!Fr[a][1].test(o)) {
    for (; l < n && !(t.sCount[l] < t.blkIndent); l++)
      if (i = t.bMarks[l] + t.tShift[l], s = t.eMarks[l], o = t.src.slice(i, s), Fr[a][1].test(o)) {
        o.length !== 0 && l++;
        break;
      }
  }
  t.line = l;
  const u = t.push("html_block", "", 0);
  return u.map = [e, l], u.content = t.getLines(e, l, t.blkIndent, !0), !0;
}
function _A(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let o = t.src.charCodeAt(i);
  if (o !== 35 || i >= s)
    return !1;
  let a = 1;
  for (o = t.src.charCodeAt(++i); o === 35 && i < s && a <= 6; )
    a++, o = t.src.charCodeAt(++i);
  if (a > 6 || i < s && !Ae(o))
    return !1;
  if (r)
    return !0;
  s = t.skipSpacesBack(s, i);
  const l = t.skipCharsBack(s, 35, i);
  l > i && Ae(t.src.charCodeAt(l - 1)) && (s = l), t.line = e + 1;
  const u = t.push("heading_open", "h" + String(a), 1);
  u.markup = "########".slice(0, a), u.map = [e, t.line];
  const c = t.push("inline", "", 0);
  c.content = t.src.slice(i, s).trim(), c.map = [e, t.line], c.children = [];
  const d = t.push("heading_close", "h" + String(a), -1);
  return d.markup = "########".slice(0, a), !0;
}
function wA(t, e, n) {
  const r = t.md.block.ruler.getRules("paragraph");
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  const i = t.parentType;
  t.parentType = "paragraph";
  let s = 0, o, a = e + 1;
  for (; a < n && !t.isEmpty(a); a++) {
    if (t.sCount[a] - t.blkIndent > 3)
      continue;
    if (t.sCount[a] >= t.blkIndent) {
      let h = t.bMarks[a] + t.tShift[a];
      const p = t.eMarks[a];
      if (h < p && (o = t.src.charCodeAt(h), (o === 45 || o === 61) && (h = t.skipChars(h, o), h = t.skipSpaces(h), h >= p))) {
        s = o === 61 ? 1 : 2;
        break;
      }
    }
    if (t.sCount[a] < 0)
      continue;
    let f = !1;
    for (let h = 0, p = r.length; h < p; h++)
      if (r[h](t, a, n, !0)) {
        f = !0;
        break;
      }
    if (f)
      break;
  }
  if (!s)
    return !1;
  const l = t.getLines(e, a, t.blkIndent, !1).trim();
  t.line = a + 1;
  const u = t.push("heading_open", "h" + String(s), 1);
  u.markup = String.fromCharCode(o), u.map = [e, t.line];
  const c = t.push("inline", "", 0);
  c.content = l, c.map = [e, t.line - 1], c.children = [];
  const d = t.push("heading_close", "h" + String(s), -1);
  return d.markup = String.fromCharCode(o), t.parentType = i, !0;
}
function SA(t, e, n) {
  const r = t.md.block.ruler.getRules("paragraph"), i = t.parentType;
  let s = e + 1;
  for (t.parentType = "paragraph"; s < n && !t.isEmpty(s); s++) {
    if (t.sCount[s] - t.blkIndent > 3 || t.sCount[s] < 0)
      continue;
    let u = !1;
    for (let c = 0, d = r.length; c < d; c++)
      if (r[c](t, s, n, !0)) {
        u = !0;
        break;
      }
    if (u)
      break;
  }
  const o = t.getLines(e, s, t.blkIndent, !1).trim();
  t.line = s;
  const a = t.push("paragraph_open", "p", 1);
  a.map = [e, t.line];
  const l = t.push("inline", "", 0);
  return l.content = o, l.map = [e, t.line], l.children = [], t.push("paragraph_close", "p", -1), t.parentType = i, !0;
}
const to = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", nA, ["paragraph", "reference"]],
  ["code", rA],
  ["fence", iA, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", sA, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", oA, ["paragraph", "reference", "blockquote", "list"]],
  ["list", lA, ["paragraph", "reference", "blockquote"]],
  ["reference", uA],
  ["html_block", CA, ["paragraph", "reference", "blockquote"]],
  ["heading", _A, ["paragraph", "reference", "blockquote"]],
  ["lheading", wA],
  ["paragraph", SA]
];
function Ha() {
  this.ruler = new mt();
  for (let t = 0; t < to.length; t++)
    this.ruler.push(to[t][0], to[t][1], { alt: (to[t][2] || []).slice() });
}
Ha.prototype.tokenize = function(t, e, n) {
  const r = this.ruler.getRules(""), i = r.length, s = t.md.options.maxNesting;
  let o = e, a = !1;
  for (; o < n && (t.line = o = t.skipEmptyLines(o), !(o >= n || t.sCount[o] < t.blkIndent)); ) {
    if (t.level >= s) {
      t.line = n;
      break;
    }
    const l = t.line;
    let u = !1;
    for (let c = 0; c < i; c++)
      if (u = r[c](t, o, n, !1), u) {
        if (l >= t.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!u)
      throw new Error("none of the block rules matched");
    t.tight = !a, t.isEmpty(t.line - 1) && (a = !0), o = t.line, o < n && t.isEmpty(o) && (a = !0, o++, t.line = o);
  }
};
Ha.prototype.parse = function(t, e, n, r) {
  if (!t)
    return;
  const i = new this.State(t, e, n, r);
  this.tokenize(i, i.line, i.lineMax);
};
Ha.prototype.State = un;
function ws(t, e, n, r) {
  this.src = t, this.env = n, this.md = e, this.tokens = r, this.tokens_meta = Array(r.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = !1, this.linkLevel = 0;
}
ws.prototype.pushPending = function() {
  const t = new Ut("text", "", 0);
  return t.content = this.pending, t.level = this.pendingLevel, this.tokens.push(t), this.pending = "", t;
};
ws.prototype.push = function(t, e, n) {
  this.pending && this.pushPending();
  const r = new Ut(t, e, n);
  let i = null;
  return n < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), r.level = this.level, n > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], i = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(r), this.tokens_meta.push(i), r;
};
ws.prototype.scanDelims = function(t, e) {
  const n = this.posMax, r = this.src.charCodeAt(t), i = t > 0 ? this.src.charCodeAt(t - 1) : 32;
  let s = t;
  for (; s < n && this.src.charCodeAt(s) === r; )
    s++;
  const o = s - t, a = s < n ? this.src.charCodeAt(s) : 32, l = us(i) || ls(String.fromCharCode(i)), u = us(a) || ls(String.fromCharCode(a)), c = as(i), d = as(a), f = !d && (!u || c || l), h = !c && (!l || d || u);
  return { can_open: f && (e || !h || l), can_close: h && (e || !f || u), length: o };
};
ws.prototype.Token = Ut;
function AA(t) {
  switch (t) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function MA(t, e) {
  let n = t.pos;
  for (; n < t.posMax && !AA(t.src.charCodeAt(n)); )
    n++;
  return n === t.pos ? !1 : (e || (t.pending += t.src.slice(t.pos, n)), t.pos = n, !0);
}
const TA = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function DA(t, e) {
  if (!t.md.options.linkify || t.linkLevel > 0)
    return !1;
  const n = t.pos, r = t.posMax;
  if (n + 3 > r || t.src.charCodeAt(n) !== 58 || t.src.charCodeAt(n + 1) !== 47 || t.src.charCodeAt(n + 2) !== 47)
    return !1;
  const i = t.pending.match(TA);
  if (!i)
    return !1;
  const s = i[1], o = t.md.linkify.matchAtStart(t.src.slice(n - s.length));
  if (!o)
    return !1;
  let a = o.url;
  if (a.length <= s.length)
    return !1;
  a = a.replace(/\*+$/, "");
  const l = t.md.normalizeLink(a);
  if (!t.md.validateLink(l))
    return !1;
  if (!e) {
    t.pending = t.pending.slice(0, -s.length);
    const u = t.push("link_open", "a", 1);
    u.attrs = [["href", l]], u.markup = "linkify", u.info = "auto";
    const c = t.push("text", "", 0);
    c.content = t.md.normalizeLinkText(a);
    const d = t.push("link_close", "a", -1);
    d.markup = "linkify", d.info = "auto";
  }
  return t.pos += a.length - s.length, !0;
}
function OA(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 10)
    return !1;
  const r = t.pending.length - 1, i = t.posMax;
  if (!e)
    if (r >= 0 && t.pending.charCodeAt(r) === 32)
      if (r >= 1 && t.pending.charCodeAt(r - 1) === 32) {
        let s = r - 1;
        for (; s >= 1 && t.pending.charCodeAt(s - 1) === 32; )
          s--;
        t.pending = t.pending.slice(0, s), t.push("hardbreak", "br", 0);
      } else
        t.pending = t.pending.slice(0, -1), t.push("softbreak", "br", 0);
    else
      t.push("softbreak", "br", 0);
  for (n++; n < i && Ae(t.src.charCodeAt(n)); )
    n++;
  return t.pos = n, !0;
}
const Zc = [];
for (let t = 0; t < 256; t++)
  Zc.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t) {
  Zc[t.charCodeAt(0)] = 1;
});
function NA(t, e) {
  let n = t.pos;
  const r = t.posMax;
  if (t.src.charCodeAt(n) !== 92 || (n++, n >= r))
    return !1;
  let i = t.src.charCodeAt(n);
  if (i === 10) {
    for (e || t.push("hardbreak", "br", 0), n++; n < r && (i = t.src.charCodeAt(n), !!Ae(i)); )
      n++;
    return t.pos = n, !0;
  }
  let s = t.src[n];
  if (i >= 55296 && i <= 56319 && n + 1 < r) {
    const a = t.src.charCodeAt(n + 1);
    a >= 56320 && a <= 57343 && (s += t.src[n + 1], n++);
  }
  const o = "\\" + s;
  if (!e) {
    const a = t.push("text_special", "", 0);
    i < 256 && Zc[i] !== 0 ? a.content = s : a.content = o, a.markup = o, a.info = "escape";
  }
  return t.pos = n + 1, !0;
}
function LA(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 96)
    return !1;
  const i = n;
  n++;
  const s = t.posMax;
  for (; n < s && t.src.charCodeAt(n) === 96; )
    n++;
  const o = t.src.slice(i, n), a = o.length;
  if (t.backticksScanned && (t.backticks[a] || 0) <= i)
    return e || (t.pending += o), t.pos += a, !0;
  let l = n, u;
  for (; (u = t.src.indexOf("`", l)) !== -1; ) {
    for (l = u + 1; l < s && t.src.charCodeAt(l) === 96; )
      l++;
    const c = l - u;
    if (c === a) {
      if (!e) {
        const d = t.push("code_inline", "code", 0);
        d.markup = o, d.content = t.src.slice(n, u).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      return t.pos = l, !0;
    }
    t.backticks[c] = u;
  }
  return t.backticksScanned = !0, e || (t.pending += o), t.pos += a, !0;
}
function RA(t, e) {
  const n = t.pos, r = t.src.charCodeAt(n);
  if (e || r !== 126)
    return !1;
  const i = t.scanDelims(t.pos, !0);
  let s = i.length;
  const o = String.fromCharCode(r);
  if (s < 2)
    return !1;
  let a;
  s % 2 && (a = t.push("text", "", 0), a.content = o, s--);
  for (let l = 0; l < s; l += 2)
    a = t.push("text", "", 0), a.content = o + o, t.delimiters.push({
      marker: r,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: t.tokens.length - 1,
      end: -1,
      open: i.can_open,
      close: i.can_close
    });
  return t.pos += i.length, !0;
}
function Qh(t, e) {
  let n;
  const r = [], i = e.length;
  for (let s = 0; s < i; s++) {
    const o = e[s];
    if (o.marker !== 126 || o.end === -1)
      continue;
    const a = e[o.end];
    n = t.tokens[o.token], n.type = "s_open", n.tag = "s", n.nesting = 1, n.markup = "~~", n.content = "", n = t.tokens[a.token], n.type = "s_close", n.tag = "s", n.nesting = -1, n.markup = "~~", n.content = "", t.tokens[a.token - 1].type === "text" && t.tokens[a.token - 1].content === "~" && r.push(a.token - 1);
  }
  for (; r.length; ) {
    const s = r.pop();
    let o = s + 1;
    for (; o < t.tokens.length && t.tokens[o].type === "s_close"; )
      o++;
    o--, s !== o && (n = t.tokens[o], t.tokens[o] = t.tokens[s], t.tokens[s] = n);
  }
}
function IA(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  Qh(t, t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && Qh(t, e[r].delimiters);
}
const um = {
  tokenize: RA,
  postProcess: IA
};
function FA(t, e) {
  const n = t.pos, r = t.src.charCodeAt(n);
  if (e || r !== 95 && r !== 42)
    return !1;
  const i = t.scanDelims(t.pos, r === 42);
  for (let s = 0; s < i.length; s++) {
    const o = t.push("text", "", 0);
    o.content = String.fromCharCode(r), t.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: r,
      // Total length of these series of delimiters.
      //
      length: i.length,
      // A position of the token this delimiter corresponds to.
      //
      token: t.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: i.can_open,
      close: i.can_close
    });
  }
  return t.pos += i.length, !0;
}
function ep(t, e) {
  const n = e.length;
  for (let r = n - 1; r >= 0; r--) {
    const i = e[r];
    if (i.marker !== 95 && i.marker !== 42 || i.end === -1)
      continue;
    const s = e[i.end], o = r > 0 && e[r - 1].end === i.end + 1 && // check that first two markers match and adjacent
    e[r - 1].marker === i.marker && e[r - 1].token === i.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e[i.end + 1].token === s.token + 1, a = String.fromCharCode(i.marker), l = t.tokens[i.token];
    l.type = o ? "strong_open" : "em_open", l.tag = o ? "strong" : "em", l.nesting = 1, l.markup = o ? a + a : a, l.content = "";
    const u = t.tokens[s.token];
    u.type = o ? "strong_close" : "em_close", u.tag = o ? "strong" : "em", u.nesting = -1, u.markup = o ? a + a : a, u.content = "", o && (t.tokens[e[r - 1].token].content = "", t.tokens[e[i.end + 1].token].content = "", r--);
  }
}
function HA(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  ep(t, t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && ep(t, e[r].delimiters);
}
const cm = {
  tokenize: FA,
  postProcess: HA
};
function BA(t, e) {
  let n, r, i, s, o = "", a = "", l = t.pos, u = !0;
  if (t.src.charCodeAt(t.pos) !== 91)
    return !1;
  const c = t.pos, d = t.posMax, f = t.pos + 1, h = t.md.helpers.parseLinkLabel(t, t.pos, !0);
  if (h < 0)
    return !1;
  let p = h + 1;
  if (p < d && t.src.charCodeAt(p) === 40) {
    for (u = !1, p++; p < d && (n = t.src.charCodeAt(p), !(!Ae(n) && n !== 10)); p++)
      ;
    if (p >= d)
      return !1;
    if (l = p, i = t.md.helpers.parseLinkDestination(t.src, p, t.posMax), i.ok) {
      for (o = t.md.normalizeLink(i.str), t.md.validateLink(o) ? p = i.pos : o = "", l = p; p < d && (n = t.src.charCodeAt(p), !(!Ae(n) && n !== 10)); p++)
        ;
      if (i = t.md.helpers.parseLinkTitle(t.src, p, t.posMax), p < d && l !== p && i.ok)
        for (a = i.str, p = i.pos; p < d && (n = t.src.charCodeAt(p), !(!Ae(n) && n !== 10)); p++)
          ;
    }
    (p >= d || t.src.charCodeAt(p) !== 41) && (u = !0), p++;
  }
  if (u) {
    if (typeof t.env.references > "u")
      return !1;
    if (p < d && t.src.charCodeAt(p) === 91 ? (l = p + 1, p = t.md.helpers.parseLinkLabel(t, p), p >= 0 ? r = t.src.slice(l, p++) : p = h + 1) : p = h + 1, r || (r = t.src.slice(f, h)), s = t.env.references[Fa(r)], !s)
      return t.pos = c, !1;
    o = s.href, a = s.title;
  }
  if (!e) {
    t.pos = f, t.posMax = h;
    const g = t.push("link_open", "a", 1), m = [["href", o]];
    g.attrs = m, a && m.push(["title", a]), t.linkLevel++, t.md.inline.tokenize(t), t.linkLevel--, t.push("link_close", "a", -1);
  }
  return t.pos = p, t.posMax = d, !0;
}
function PA(t, e) {
  let n, r, i, s, o, a, l, u, c = "";
  const d = t.pos, f = t.posMax;
  if (t.src.charCodeAt(t.pos) !== 33 || t.src.charCodeAt(t.pos + 1) !== 91)
    return !1;
  const h = t.pos + 2, p = t.md.helpers.parseLinkLabel(t, t.pos + 1, !1);
  if (p < 0)
    return !1;
  if (s = p + 1, s < f && t.src.charCodeAt(s) === 40) {
    for (s++; s < f && (n = t.src.charCodeAt(s), !(!Ae(n) && n !== 10)); s++)
      ;
    if (s >= f)
      return !1;
    for (u = s, a = t.md.helpers.parseLinkDestination(t.src, s, t.posMax), a.ok && (c = t.md.normalizeLink(a.str), t.md.validateLink(c) ? s = a.pos : c = ""), u = s; s < f && (n = t.src.charCodeAt(s), !(!Ae(n) && n !== 10)); s++)
      ;
    if (a = t.md.helpers.parseLinkTitle(t.src, s, t.posMax), s < f && u !== s && a.ok)
      for (l = a.str, s = a.pos; s < f && (n = t.src.charCodeAt(s), !(!Ae(n) && n !== 10)); s++)
        ;
    else
      l = "";
    if (s >= f || t.src.charCodeAt(s) !== 41)
      return t.pos = d, !1;
    s++;
  } else {
    if (typeof t.env.references > "u")
      return !1;
    if (s < f && t.src.charCodeAt(s) === 91 ? (u = s + 1, s = t.md.helpers.parseLinkLabel(t, s), s >= 0 ? i = t.src.slice(u, s++) : s = p + 1) : s = p + 1, i || (i = t.src.slice(h, p)), o = t.env.references[Fa(i)], !o)
      return t.pos = d, !1;
    c = o.href, l = o.title;
  }
  if (!e) {
    r = t.src.slice(h, p);
    const g = [];
    t.md.inline.parse(
      r,
      t.md,
      t.env,
      g
    );
    const m = t.push("image", "img", 0), y = [["src", c], ["alt", ""]];
    m.attrs = y, m.children = g, m.content = r, l && y.push(["title", l]);
  }
  return t.pos = s, t.posMax = f, !0;
}
const $A = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, zA = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function VA(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 60)
    return !1;
  const r = t.pos, i = t.posMax;
  for (; ; ) {
    if (++n >= i)
      return !1;
    const o = t.src.charCodeAt(n);
    if (o === 60)
      return !1;
    if (o === 62)
      break;
  }
  const s = t.src.slice(r + 1, n);
  if (zA.test(s)) {
    const o = t.md.normalizeLink(s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const u = t.push("link_close", "a", -1);
      u.markup = "autolink", u.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  if ($A.test(s)) {
    const o = t.md.normalizeLink("mailto:" + s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const u = t.push("link_close", "a", -1);
      u.markup = "autolink", u.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  return !1;
}
function UA(t) {
  return /^<a[>\s]/i.test(t);
}
function qA(t) {
  return /^<\/a\s*>/i.test(t);
}
function ZA(t) {
  const e = t | 32;
  return e >= 97 && e <= 122;
}
function KA(t, e) {
  if (!t.md.options.html)
    return !1;
  const n = t.posMax, r = t.pos;
  if (t.src.charCodeAt(r) !== 60 || r + 2 >= n)
    return !1;
  const i = t.src.charCodeAt(r + 1);
  if (i !== 33 && i !== 63 && i !== 47 && !ZA(i))
    return !1;
  const s = t.src.slice(r).match(vA);
  if (!s)
    return !1;
  if (!e) {
    const o = t.push("html_inline", "", 0);
    o.content = s[0], UA(o.content) && t.linkLevel++, qA(o.content) && t.linkLevel--;
  }
  return t.pos += s[0].length, !0;
}
const WA = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, jA = /^&([a-z][a-z0-9]{1,31});/i;
function GA(t, e) {
  const n = t.pos, r = t.posMax;
  if (t.src.charCodeAt(n) !== 38 || n + 1 >= r)
    return !1;
  if (t.src.charCodeAt(n + 1) === 35) {
    const s = t.src.slice(n).match(WA);
    if (s) {
      if (!e) {
        const o = s[1][0].toLowerCase() === "x" ? parseInt(s[1].slice(1), 16) : parseInt(s[1], 10), a = t.push("text_special", "", 0);
        a.content = Uc(o) ? na(o) : na(65533), a.markup = s[0], a.info = "entity";
      }
      return t.pos += s[0].length, !0;
    }
  } else {
    const s = t.src.slice(n).match(jA);
    if (s) {
      const o = Ra(s[0]);
      if (o !== s[0]) {
        if (!e) {
          const a = t.push("text_special", "", 0);
          a.content = o, a.markup = s[0], a.info = "entity";
        }
        return t.pos += s[0].length, !0;
      }
    }
  }
  return !1;
}
function tp(t) {
  const e = {}, n = t.length;
  if (!n)
    return;
  let r = 0, i = -2;
  const s = [];
  for (let o = 0; o < n; o++) {
    const a = t[o];
    if (s.push(0), (t[r].marker !== a.marker || i !== a.token - 1) && (r = o), i = a.token, a.length = a.length || 0, !a.close)
      continue;
    e.hasOwnProperty(a.marker) || (e[a.marker] = [-1, -1, -1, -1, -1, -1]);
    const l = e[a.marker][(a.open ? 3 : 0) + a.length % 3];
    let u = r - s[r] - 1, c = u;
    for (; u > l; u -= s[u] + 1) {
      const d = t[u];
      if (d.marker === a.marker && d.open && d.end < 0) {
        let f = !1;
        if ((d.close || a.open) && (d.length + a.length) % 3 === 0 && (d.length % 3 !== 0 || a.length % 3 !== 0) && (f = !0), !f) {
          const h = u > 0 && !t[u - 1].open ? s[u - 1] + 1 : 0;
          s[o] = o - u + h, s[u] = h, a.open = !1, d.end = o, d.close = !1, c = -1, i = -2;
          break;
        }
      }
    }
    c !== -1 && (e[a.marker][(a.open ? 3 : 0) + (a.length || 0) % 3] = c);
  }
}
function JA(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  tp(t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && tp(e[r].delimiters);
}
function YA(t) {
  let e, n, r = 0;
  const i = t.tokens, s = t.tokens.length;
  for (e = n = 0; e < s; e++)
    i[e].nesting < 0 && r--, i[e].level = r, i[e].nesting > 0 && r++, i[e].type === "text" && e + 1 < s && i[e + 1].type === "text" ? i[e + 1].content = i[e].content + i[e + 1].content : (e !== n && (i[n] = i[e]), n++);
  e !== n && (i.length = n);
}
const Hl = [
  ["text", MA],
  ["linkify", DA],
  ["newline", OA],
  ["escape", NA],
  ["backticks", LA],
  ["strikethrough", um.tokenize],
  ["emphasis", cm.tokenize],
  ["link", BA],
  ["image", PA],
  ["autolink", VA],
  ["html_inline", KA],
  ["entity", GA]
], Bl = [
  ["balance_pairs", JA],
  ["strikethrough", um.postProcess],
  ["emphasis", cm.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", YA]
];
function Ss() {
  this.ruler = new mt();
  for (let t = 0; t < Hl.length; t++)
    this.ruler.push(Hl[t][0], Hl[t][1]);
  this.ruler2 = new mt();
  for (let t = 0; t < Bl.length; t++)
    this.ruler2.push(Bl[t][0], Bl[t][1]);
}
Ss.prototype.skipToken = function(t) {
  const e = t.pos, n = this.ruler.getRules(""), r = n.length, i = t.md.options.maxNesting, s = t.cache;
  if (typeof s[e] < "u") {
    t.pos = s[e];
    return;
  }
  let o = !1;
  if (t.level < i) {
    for (let a = 0; a < r; a++)
      if (t.level++, o = n[a](t, !0), t.level--, o) {
        if (e >= t.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    t.pos = t.posMax;
  o || t.pos++, s[e] = t.pos;
};
Ss.prototype.tokenize = function(t) {
  const e = this.ruler.getRules(""), n = e.length, r = t.posMax, i = t.md.options.maxNesting;
  for (; t.pos < r; ) {
    const s = t.pos;
    let o = !1;
    if (t.level < i) {
      for (let a = 0; a < n; a++)
        if (o = e[a](t, !1), o) {
          if (s >= t.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (o) {
      if (t.pos >= r)
        break;
      continue;
    }
    t.pending += t.src[t.pos++];
  }
  t.pending && t.pushPending();
};
Ss.prototype.parse = function(t, e, n, r) {
  const i = new this.State(t, e, n, r);
  this.tokenize(i);
  const s = this.ruler2.getRules(""), o = s.length;
  for (let a = 0; a < o; a++)
    s[a](i);
};
Ss.prototype.State = ws;
function XA(t) {
  const e = {};
  t = t || {}, e.src_Any = Xg.source, e.src_Cc = Qg.source, e.src_Z = tm.source, e.src_P = zc.source, e.src_ZPCc = [e.src_Z, e.src_P, e.src_Cc].join("|"), e.src_ZCc = [e.src_Z, e.src_Cc].join("|");
  const n = "[><｜]";
  return e.src_pseudo_letter = "(?:(?!" + n + "|" + e.src_ZPCc + ")" + e.src_Any + ")", e.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e.src_auth = "(?:(?:(?!" + e.src_ZCc + "|[@/\\[\\]()]).)+@)?", e.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e.src_host_terminator = "(?=$|" + n + "|" + e.src_ZPCc + ")(?!" + (t["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e.src_ZPCc + "))", e.src_path = "(?:[/?#](?:(?!" + e.src_ZCc + "|" + n + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e.src_ZCc + "|[']).)+\\'|\\'(?=" + e.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e.src_ZCc + "|[.]|$)|" + (t["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + // allow `,,,` in paths
  ",(?!" + e.src_ZCc + "|$)|;(?!" + e.src_ZCc + "|$)|\\!+(?!" + e.src_ZCc + "|[!]|$)|\\?(?!" + e.src_ZCc + "|[?]|$))+|\\/)?", e.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e.src_xn = "xn--[a-z0-9\\-]{1,59}", e.src_domain_root = // Allow letters & digits (http://test1)
  "(?:" + e.src_xn + "|" + e.src_pseudo_letter + "{1,63})", e.src_domain = "(?:" + e.src_xn + "|(?:" + e.src_pseudo_letter + ")|(?:" + e.src_pseudo_letter + "(?:-|" + e.src_pseudo_letter + "){0,61}" + e.src_pseudo_letter + "))", e.src_host = "(?:(?:(?:(?:" + e.src_domain + ")\\.)*" + e.src_domain + "))", e.tpl_host_fuzzy = "(?:" + e.src_ip4 + "|(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%)))", e.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%))", e.src_host_strict = e.src_host + e.src_host_terminator, e.tpl_host_fuzzy_strict = e.tpl_host_fuzzy + e.src_host_terminator, e.src_host_port_strict = e.src_host + e.src_port + e.src_host_terminator, e.tpl_host_port_fuzzy_strict = e.tpl_host_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_port_no_ip_fuzzy_strict = e.tpl_host_no_ip_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e.src_ZPCc + "|>|$))", e.tpl_email_fuzzy = "(^|" + n + '|"|\\(|' + e.src_ZCc + ")(" + e.src_email_name + "@" + e.tpl_host_fuzzy_strict + ")", e.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_fuzzy_strict + e.src_path + ")", e.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_no_ip_fuzzy_strict + e.src_path + ")", e;
}
function Iu(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    n && Object.keys(n).forEach(function(r) {
      t[r] = n[r];
    });
  }), t;
}
function Ba(t) {
  return Object.prototype.toString.call(t);
}
function QA(t) {
  return Ba(t) === "[object String]";
}
function e9(t) {
  return Ba(t) === "[object Object]";
}
function t9(t) {
  return Ba(t) === "[object RegExp]";
}
function np(t) {
  return Ba(t) === "[object Function]";
}
function n9(t) {
  return t.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
const dm = {
  fuzzyLink: !0,
  fuzzyEmail: !0,
  fuzzyIP: !1
};
function r9(t) {
  return Object.keys(t || {}).reduce(function(e, n) {
    return e || dm.hasOwnProperty(n);
  }, !1);
}
const i9 = {
  "http:": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.http || (n.re.http = new RegExp(
        "^\\/\\/" + n.re.src_auth + n.re.src_host_port_strict + n.re.src_path,
        "i"
      )), n.re.http.test(r) ? r.match(n.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.no_http || (n.re.no_http = new RegExp(
        "^" + n.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + n.re.src_domain + ")\\.)+" + n.re.src_domain_root + ")" + n.re.src_port + n.re.src_host_terminator + n.re.src_path,
        "i"
      )), n.re.no_http.test(r) ? e >= 3 && t[e - 3] === ":" || e >= 3 && t[e - 3] === "/" ? 0 : r.match(n.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.mailto || (n.re.mailto = new RegExp(
        "^" + n.re.src_email_name + "@" + n.re.src_host_strict,
        "i"
      )), n.re.mailto.test(r) ? r.match(n.re.mailto)[0].length : 0;
    }
  }
}, s9 = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", o9 = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function a9(t) {
  t.__index__ = -1, t.__text_cache__ = "";
}
function l9(t) {
  return function(e, n) {
    const r = e.slice(n);
    return t.test(r) ? r.match(t)[0].length : 0;
  };
}
function rp() {
  return function(t, e) {
    e.normalize(t);
  };
}
function ra(t) {
  const e = t.re = XA(t.__opts__), n = t.__tlds__.slice();
  t.onCompile(), t.__tlds_replaced__ || n.push(s9), n.push(e.src_xn), e.src_tlds = n.join("|");
  function r(a) {
    return a.replace("%TLDS%", e.src_tlds);
  }
  e.email_fuzzy = RegExp(r(e.tpl_email_fuzzy), "i"), e.link_fuzzy = RegExp(r(e.tpl_link_fuzzy), "i"), e.link_no_ip_fuzzy = RegExp(r(e.tpl_link_no_ip_fuzzy), "i"), e.host_fuzzy_test = RegExp(r(e.tpl_host_fuzzy_test), "i");
  const i = [];
  t.__compiled__ = {};
  function s(a, l) {
    throw new Error('(LinkifyIt) Invalid schema "' + a + '": ' + l);
  }
  Object.keys(t.__schemas__).forEach(function(a) {
    const l = t.__schemas__[a];
    if (l === null)
      return;
    const u = { validate: null, link: null };
    if (t.__compiled__[a] = u, e9(l)) {
      t9(l.validate) ? u.validate = l9(l.validate) : np(l.validate) ? u.validate = l.validate : s(a, l), np(l.normalize) ? u.normalize = l.normalize : l.normalize ? s(a, l) : u.normalize = rp();
      return;
    }
    if (QA(l)) {
      i.push(a);
      return;
    }
    s(a, l);
  }), i.forEach(function(a) {
    t.__compiled__[t.__schemas__[a]] && (t.__compiled__[a].validate = t.__compiled__[t.__schemas__[a]].validate, t.__compiled__[a].normalize = t.__compiled__[t.__schemas__[a]].normalize);
  }), t.__compiled__[""] = { validate: null, normalize: rp() };
  const o = Object.keys(t.__compiled__).filter(function(a) {
    return a.length > 0 && t.__compiled__[a];
  }).map(n9).join("|");
  t.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "i"), t.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "ig"), t.re.schema_at_start = RegExp("^" + t.re.schema_search.source, "i"), t.re.pretest = RegExp(
    "(" + t.re.schema_test.source + ")|(" + t.re.host_fuzzy_test.source + ")|@",
    "i"
  ), a9(t);
}
function u9(t, e) {
  const n = t.__index__, r = t.__last_index__, i = t.__text_cache__.slice(n, r);
  this.schema = t.__schema__.toLowerCase(), this.index = n + e, this.lastIndex = r + e, this.raw = i, this.text = i, this.url = i;
}
function Fu(t, e) {
  const n = new u9(t, e);
  return t.__compiled__[n.schema].normalize(n, t), n;
}
function _t(t, e) {
  if (!(this instanceof _t))
    return new _t(t, e);
  e || r9(t) && (e = t, t = {}), this.__opts__ = Iu({}, dm, e), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = Iu({}, i9, t), this.__compiled__ = {}, this.__tlds__ = o9, this.__tlds_replaced__ = !1, this.re = {}, ra(this);
}
_t.prototype.add = function(e, n) {
  return this.__schemas__[e] = n, ra(this), this;
};
_t.prototype.set = function(e) {
  return this.__opts__ = Iu(this.__opts__, e), this;
};
_t.prototype.test = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return !1;
  let n, r, i, s, o, a, l, u, c;
  if (this.re.schema_test.test(e)) {
    for (l = this.re.schema_search, l.lastIndex = 0; (n = l.exec(e)) !== null; )
      if (s = this.testSchemaAt(e, n[2], l.lastIndex), s) {
        this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + s;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (u = e.search(this.re.host_fuzzy_test), u >= 0 && (this.__index__ < 0 || u < this.__index__) && (r = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (o = r.index + r[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = "", this.__index__ = o, this.__last_index__ = r.index + r[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (c = e.indexOf("@"), c >= 0 && (i = e.match(this.re.email_fuzzy)) !== null && (o = i.index + i[1].length, a = i.index + i[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && a > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = o, this.__last_index__ = a))), this.__index__ >= 0;
};
_t.prototype.pretest = function(e) {
  return this.re.pretest.test(e);
};
_t.prototype.testSchemaAt = function(e, n, r) {
  return this.__compiled__[n.toLowerCase()] ? this.__compiled__[n.toLowerCase()].validate(e, r, this) : 0;
};
_t.prototype.match = function(e) {
  const n = [];
  let r = 0;
  this.__index__ >= 0 && this.__text_cache__ === e && (n.push(Fu(this, r)), r = this.__last_index__);
  let i = r ? e.slice(r) : e;
  for (; this.test(i); )
    n.push(Fu(this, r)), i = i.slice(this.__last_index__), r += this.__last_index__;
  return n.length ? n : null;
};
_t.prototype.matchAtStart = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return null;
  const n = this.re.schema_at_start.exec(e);
  if (!n)
    return null;
  const r = this.testSchemaAt(e, n[2], n[0].length);
  return r ? (this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + r, Fu(this, 0)) : null;
};
_t.prototype.tlds = function(e, n) {
  return e = Array.isArray(e) ? e : [e], n ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function(r, i, s) {
    return r !== s[i - 1];
  }).reverse(), ra(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, ra(this), this);
};
_t.prototype.normalize = function(e) {
  e.schema || (e.url = "http://" + e.url), e.schema === "mailto:" && !/^mailto:/i.test(e.url) && (e.url = "mailto:" + e.url);
};
_t.prototype.onCompile = function() {
};
const Qr = 2147483647, en = 36, Kc = 1, cs = 26, c9 = 38, d9 = 700, fm = 72, hm = 128, pm = "-", f9 = /^xn--/, h9 = /[^\0-\x7F]/, p9 = /[\x2E\u3002\uFF0E\uFF61]/g, g9 = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, Pl = en - Kc, tn = Math.floor, $l = String.fromCharCode;
function Mn(t) {
  throw new RangeError(g9[t]);
}
function m9(t, e) {
  const n = [];
  let r = t.length;
  for (; r--; )
    n[r] = e(t[r]);
  return n;
}
function gm(t, e) {
  const n = t.split("@");
  let r = "";
  n.length > 1 && (r = n[0] + "@", t = n[1]), t = t.replace(p9, ".");
  const i = t.split("."), s = m9(i, e).join(".");
  return r + s;
}
function mm(t) {
  const e = [];
  let n = 0;
  const r = t.length;
  for (; n < r; ) {
    const i = t.charCodeAt(n++);
    if (i >= 55296 && i <= 56319 && n < r) {
      const s = t.charCodeAt(n++);
      (s & 64512) == 56320 ? e.push(((i & 1023) << 10) + (s & 1023) + 65536) : (e.push(i), n--);
    } else
      e.push(i);
  }
  return e;
}
const b9 = (t) => String.fromCodePoint(...t), y9 = function(t) {
  return t >= 48 && t < 58 ? 26 + (t - 48) : t >= 65 && t < 91 ? t - 65 : t >= 97 && t < 123 ? t - 97 : en;
}, ip = function(t, e) {
  return t + 22 + 75 * (t < 26) - ((e != 0) << 5);
}, bm = function(t, e, n) {
  let r = 0;
  for (t = n ? tn(t / d9) : t >> 1, t += tn(t / e); t > Pl * cs >> 1; r += en)
    t = tn(t / Pl);
  return tn(r + (Pl + 1) * t / (t + c9));
}, ym = function(t) {
  const e = [], n = t.length;
  let r = 0, i = hm, s = fm, o = t.lastIndexOf(pm);
  o < 0 && (o = 0);
  for (let a = 0; a < o; ++a)
    t.charCodeAt(a) >= 128 && Mn("not-basic"), e.push(t.charCodeAt(a));
  for (let a = o > 0 ? o + 1 : 0; a < n; ) {
    const l = r;
    for (let c = 1, d = en; ; d += en) {
      a >= n && Mn("invalid-input");
      const f = y9(t.charCodeAt(a++));
      f >= en && Mn("invalid-input"), f > tn((Qr - r) / c) && Mn("overflow"), r += f * c;
      const h = d <= s ? Kc : d >= s + cs ? cs : d - s;
      if (f < h)
        break;
      const p = en - h;
      c > tn(Qr / p) && Mn("overflow"), c *= p;
    }
    const u = e.length + 1;
    s = bm(r - l, u, l == 0), tn(r / u) > Qr - i && Mn("overflow"), i += tn(r / u), r %= u, e.splice(r++, 0, i);
  }
  return String.fromCodePoint(...e);
}, xm = function(t) {
  const e = [];
  t = mm(t);
  const n = t.length;
  let r = hm, i = 0, s = fm;
  for (const l of t)
    l < 128 && e.push($l(l));
  const o = e.length;
  let a = o;
  for (o && e.push(pm); a < n; ) {
    let l = Qr;
    for (const c of t)
      c >= r && c < l && (l = c);
    const u = a + 1;
    l - r > tn((Qr - i) / u) && Mn("overflow"), i += (l - r) * u, r = l;
    for (const c of t)
      if (c < r && ++i > Qr && Mn("overflow"), c === r) {
        let d = i;
        for (let f = en; ; f += en) {
          const h = f <= s ? Kc : f >= s + cs ? cs : f - s;
          if (d < h)
            break;
          const p = d - h, g = en - h;
          e.push(
            $l(ip(h + p % g, 0))
          ), d = tn(p / g);
        }
        e.push($l(ip(d, 0))), s = bm(i, u, a === o), i = 0, ++a;
      }
    ++i, ++r;
  }
  return e.join("");
}, x9 = function(t) {
  return gm(t, function(e) {
    return f9.test(e) ? ym(e.slice(4).toLowerCase()) : e;
  });
}, k9 = function(t) {
  return gm(t, function(e) {
    return h9.test(e) ? "xn--" + xm(e) : e;
  });
}, Pa = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: mm,
    encode: b9
  },
  decode: ym,
  encode: xm,
  toASCII: k9,
  toUnicode: x9
}, v9 = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, E9 = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, C9 = {
  options: {
    // Enable HTML tags in source
    html: !0,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !0,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, _9 = {
  default: v9,
  zero: E9,
  commonmark: C9
}, w9 = /^(vbscript|javascript|file|data):/, S9 = /^data:image\/(gif|png|jpeg|webp);/;
function A9(t) {
  const e = t.trim().toLowerCase();
  return w9.test(e) ? S9.test(e) : !0;
}
const km = ["http:", "https:", "mailto:"];
function M9(t) {
  const e = $c(t, !0);
  if (e.hostname && (!e.protocol || km.indexOf(e.protocol) >= 0))
    try {
      e.hostname = Pa.toASCII(e.hostname);
    } catch {
    }
  return _s(Pc(e));
}
function T9(t) {
  const e = $c(t, !0);
  if (e.hostname && (!e.protocol || km.indexOf(e.protocol) >= 0))
    try {
      e.hostname = Pa.toUnicode(e.hostname);
    } catch {
    }
  return di(Pc(e), di.defaultChars + "%");
}
function Ht(t, e) {
  if (!(this instanceof Ht))
    return new Ht(t, e);
  e || Vc(t) || (e = t || {}, t = "default"), this.inline = new Ss(), this.block = new Ha(), this.core = new qc(), this.renderer = new yi(), this.linkify = new _t(), this.validateLink = A9, this.normalizeLink = M9, this.normalizeLinkText = T9, this.utils = O8, this.helpers = Ia({}, I8), this.options = {}, this.configure(t), e && this.set(e);
}
Ht.prototype.set = function(t) {
  return Ia(this.options, t), this;
};
Ht.prototype.configure = function(t) {
  const e = this;
  if (Vc(t)) {
    const n = t;
    if (t = _9[n], !t)
      throw new Error('Wrong `markdown-it` preset "' + n + '", check name');
  }
  if (!t)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return t.options && e.set(t.options), t.components && Object.keys(t.components).forEach(function(n) {
    t.components[n].rules && e[n].ruler.enableOnly(t.components[n].rules), t.components[n].rules2 && e[n].ruler2.enableOnly(t.components[n].rules2);
  }), this;
};
Ht.prototype.enable = function(t, e) {
  let n = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    n = n.concat(this[i].ruler.enable(t, !0));
  }, this), n = n.concat(this.inline.ruler2.enable(t, !0));
  const r = t.filter(function(i) {
    return n.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + r);
  return this;
};
Ht.prototype.disable = function(t, e) {
  let n = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    n = n.concat(this[i].ruler.disable(t, !0));
  }, this), n = n.concat(this.inline.ruler2.disable(t, !0));
  const r = t.filter(function(i) {
    return n.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + r);
  return this;
};
Ht.prototype.use = function(t) {
  const e = [this].concat(Array.prototype.slice.call(arguments, 1));
  return t.apply(t, e), this;
};
Ht.prototype.parse = function(t, e) {
  if (typeof t != "string")
    throw new Error("Input data should be a String");
  const n = new this.core.State(t, this, e);
  return this.core.process(n), n.tokens;
};
Ht.prototype.render = function(t, e) {
  return e = e || {}, this.renderer.render(this.parse(t, e), this.options, e);
};
Ht.prototype.parseInline = function(t, e) {
  const n = new this.core.State(t, this, e);
  return n.inlineMode = !0, this.core.process(n), n.tokens;
};
Ht.prototype.renderInline = function(t, e) {
  return e = e || {}, this.renderer.render(this.parseInline(t, e), this.options, e);
};
const D9 = new Up({
  nodes: {
    doc: {
      content: "block+"
    },
    paragraph: {
      content: "inline*",
      group: "block",
      parseDOM: [{ tag: "p" }],
      toDOM() {
        return ["p", 0];
      }
    },
    blockquote: {
      content: "block+",
      group: "block",
      parseDOM: [{ tag: "blockquote" }],
      toDOM() {
        return ["blockquote", 0];
      }
    },
    horizontal_rule: {
      group: "block",
      parseDOM: [{ tag: "hr" }],
      toDOM() {
        return ["div", ["hr"]];
      }
    },
    heading: {
      attrs: { level: { default: 1 } },
      content: "(text | image)*",
      group: "block",
      defining: !0,
      parseDOM: [
        { tag: "h1", attrs: { level: 1 } },
        { tag: "h2", attrs: { level: 2 } },
        { tag: "h3", attrs: { level: 3 } },
        { tag: "h4", attrs: { level: 4 } },
        { tag: "h5", attrs: { level: 5 } },
        { tag: "h6", attrs: { level: 6 } }
      ],
      toDOM(t) {
        return ["h" + t.attrs.level, 0];
      }
    },
    code_block: {
      content: "text*",
      group: "block",
      code: !0,
      defining: !0,
      marks: "",
      attrs: { params: { default: "" } },
      parseDOM: [{ tag: "pre", preserveWhitespace: "full", getAttrs: (t) => ({ params: t.getAttribute("data-params") || "" }) }],
      toDOM(t) {
        return ["pre", t.attrs.params ? { "data-params": t.attrs.params } : {}, ["code", 0]];
      }
    },
    ordered_list: {
      content: "list_item+",
      group: "block",
      attrs: { order: { default: 1 }, tight: { default: !1 } },
      parseDOM: [{ tag: "ol", getAttrs(t) {
        return {
          order: t.hasAttribute("start") ? +t.getAttribute("start") : 1,
          tight: t.hasAttribute("data-tight")
        };
      } }],
      toDOM(t) {
        return ["ol", {
          start: t.attrs.order == 1 ? null : t.attrs.order,
          "data-tight": t.attrs.tight ? "true" : null
        }, 0];
      }
    },
    bullet_list: {
      content: "list_item+",
      group: "block",
      attrs: { tight: { default: !1 } },
      parseDOM: [{ tag: "ul", getAttrs: (t) => ({ tight: t.hasAttribute("data-tight") }) }],
      toDOM(t) {
        return ["ul", { "data-tight": t.attrs.tight ? "true" : null }, 0];
      }
    },
    list_item: {
      content: "block+",
      defining: !0,
      parseDOM: [{ tag: "li" }],
      toDOM() {
        return ["li", 0];
      }
    },
    text: {
      group: "inline"
    },
    image: {
      inline: !0,
      attrs: {
        src: {},
        alt: { default: null },
        title: { default: null }
      },
      group: "inline",
      draggable: !0,
      parseDOM: [{ tag: "img[src]", getAttrs(t) {
        return {
          src: t.getAttribute("src"),
          title: t.getAttribute("title"),
          alt: t.getAttribute("alt")
        };
      } }],
      toDOM(t) {
        return ["img", t.attrs];
      }
    },
    hard_break: {
      inline: !0,
      group: "inline",
      selectable: !1,
      parseDOM: [{ tag: "br" }],
      toDOM() {
        return ["br"];
      }
    }
  },
  marks: {
    em: {
      parseDOM: [
        { tag: "i" },
        { tag: "em" },
        { style: "font-style=italic" },
        { style: "font-style=normal", clearMark: (t) => t.type.name == "em" }
      ],
      toDOM() {
        return ["em"];
      }
    },
    strong: {
      parseDOM: [
        { tag: "strong" },
        { tag: "b", getAttrs: (t) => t.style.fontWeight != "normal" && null },
        { style: "font-weight=400", clearMark: (t) => t.type.name == "strong" },
        { style: "font-weight", getAttrs: (t) => /^(bold(er)?|[5-9]\d{2,})$/.test(t) && null }
      ],
      toDOM() {
        return ["strong"];
      }
    },
    link: {
      attrs: {
        href: {},
        title: { default: null }
      },
      inclusive: !1,
      parseDOM: [{ tag: "a[href]", getAttrs(t) {
        return { href: t.getAttribute("href"), title: t.getAttribute("title") };
      } }],
      toDOM(t) {
        return ["a", t.attrs];
      }
    },
    code: {
      parseDOM: [{ tag: "code" }],
      toDOM() {
        return ["code"];
      }
    }
  }
});
function O9(t, e) {
  if (t.isText && e.isText && ye.sameSet(t.marks, e.marks))
    return t.withText(t.text + e.text);
}
class N9 {
  constructor(e, n) {
    this.schema = e, this.tokenHandlers = n, this.stack = [{ type: e.topNodeType, attrs: null, content: [], marks: ye.none }];
  }
  top() {
    return this.stack[this.stack.length - 1];
  }
  push(e) {
    this.stack.length && this.top().content.push(e);
  }
  // Adds the given text to the current position in the document,
  // using the current marks as styling.
  addText(e) {
    if (!e)
      return;
    let n = this.top(), r = n.content, i = r[r.length - 1], s = this.schema.text(e, n.marks), o;
    i && (o = O9(i, s)) ? r[r.length - 1] = o : r.push(s);
  }
  // Adds the given mark to the set of active marks.
  openMark(e) {
    let n = this.top();
    n.marks = e.addToSet(n.marks);
  }
  // Removes the given mark from the set of active marks.
  closeMark(e) {
    let n = this.top();
    n.marks = e.removeFromSet(n.marks);
  }
  parseTokens(e) {
    for (let n = 0; n < e.length; n++) {
      let r = e[n], i = this.tokenHandlers[r.type];
      if (!i)
        throw new Error("Token type `" + r.type + "` not supported by Markdown parser");
      i(this, r, e, n);
    }
  }
  // Add a node at the current position.
  addNode(e, n, r) {
    let i = this.top(), s = e.createAndFill(n, r, i ? i.marks : []);
    return s ? (this.push(s), s) : null;
  }
  // Wrap subsequent content in a node of the given type.
  openNode(e, n) {
    this.stack.push({ type: e, attrs: n, content: [], marks: ye.none });
  }
  // Close and return the node that is currently on top of the stack.
  closeNode() {
    let e = this.stack.pop();
    return this.addNode(e.type, e.attrs, e.content);
  }
}
function Si(t, e, n, r) {
  return t.getAttrs ? t.getAttrs(e, n, r) : t.attrs instanceof Function ? t.attrs(e) : t.attrs;
}
function zl(t, e) {
  return t.noCloseToken || e == "code_inline" || e == "code_block" || e == "fence";
}
function sp(t) {
  return t[t.length - 1] == `
` ? t.slice(0, t.length - 1) : t;
}
function Vl() {
}
function L9(t, e) {
  let n = /* @__PURE__ */ Object.create(null);
  for (let r in e) {
    let i = e[r];
    if (i.block) {
      let s = t.nodeType(i.block);
      zl(i, r) ? n[r] = (o, a, l, u) => {
        o.openNode(s, Si(i, a, l, u)), o.addText(sp(a.content)), o.closeNode();
      } : (n[r + "_open"] = (o, a, l, u) => o.openNode(s, Si(i, a, l, u)), n[r + "_close"] = (o) => o.closeNode());
    } else if (i.node) {
      let s = t.nodeType(i.node);
      n[r] = (o, a, l, u) => o.addNode(s, Si(i, a, l, u));
    } else if (i.mark) {
      let s = t.marks[i.mark];
      zl(i, r) ? n[r] = (o, a, l, u) => {
        o.openMark(s.create(Si(i, a, l, u))), o.addText(sp(a.content)), o.closeMark(s);
      } : (n[r + "_open"] = (o, a, l, u) => o.openMark(s.create(Si(i, a, l, u))), n[r + "_close"] = (o) => o.closeMark(s));
    } else if (i.ignore)
      zl(i, r) ? n[r] = Vl : (n[r + "_open"] = Vl, n[r + "_close"] = Vl);
    else
      throw new RangeError("Unrecognized parsing spec " + JSON.stringify(i));
  }
  return n.text = (r, i) => r.addText(i.content), n.inline = (r, i) => r.parseTokens(i.children), n.softbreak = n.softbreak || ((r) => r.addText(" ")), n;
}
let R9 = class {
  /**
  Create a parser with the given configuration. You can configure
  the markdown-it parser to parse the dialect you want, and provide
  a description of the ProseMirror entities those tokens map to in
  the `tokens` object, which maps token names to descriptions of
  what to do with them. Such a description is an object, and may
  have the following properties:
  */
  constructor(e, n, r) {
    this.schema = e, this.tokenizer = n, this.tokens = r, this.tokenHandlers = L9(e, r);
  }
  /**
  Parse a string as [CommonMark](http://commonmark.org/) markup,
  and create a ProseMirror document as prescribed by this parser's
  rules.
  
  The second argument, when given, is passed through to the
  [Markdown
  parser](https://markdown-it.github.io/markdown-it/#MarkdownIt.parse).
  */
  parse(e, n = {}) {
    let r = new N9(this.schema, this.tokenHandlers), i;
    r.parseTokens(this.tokenizer.parse(e, n));
    do
      i = r.closeNode();
    while (r.stack.length);
    return i || this.schema.topNodeType.createAndFill();
  }
};
function op(t, e) {
  for (; ++e < t.length; )
    if (t[e].type != "list_item_open")
      return t[e].hidden;
  return !1;
}
new R9(D9, Ht("commonmark", { html: !1 }), {
  blockquote: { block: "blockquote" },
  paragraph: { block: "paragraph" },
  list_item: { block: "list_item" },
  bullet_list: { block: "bullet_list", getAttrs: (t, e, n) => ({ tight: op(e, n) }) },
  ordered_list: { block: "ordered_list", getAttrs: (t, e, n) => ({
    order: +t.attrGet("start") || 1,
    tight: op(e, n)
  }) },
  heading: { block: "heading", getAttrs: (t) => ({ level: +t.tag.slice(1) }) },
  code_block: { block: "code_block", noCloseToken: !0 },
  fence: { block: "code_block", getAttrs: (t) => ({ params: t.info || "" }), noCloseToken: !0 },
  hr: { node: "horizontal_rule" },
  image: { node: "image", getAttrs: (t) => ({
    src: t.attrGet("src"),
    title: t.attrGet("title") || null,
    alt: t.children[0] && t.children[0].content || null
  }) },
  hardbreak: { node: "hard_break" },
  em: { mark: "em" },
  strong: { mark: "strong" },
  link: { mark: "link", getAttrs: (t) => ({
    href: t.attrGet("href"),
    title: t.attrGet("title") || null
  }) },
  code_inline: { mark: "code", noCloseToken: !0 }
});
let I9 = class {
  /**
  Construct a serializer with the given configuration. The `nodes`
  object should map node names in a given schema to function that
  take a serializer state and such a node, and serialize the node.
  */
  constructor(e, n, r = {}) {
    this.nodes = e, this.marks = n, this.options = r;
  }
  /**
  Serialize the content of the given node to
  [CommonMark](http://commonmark.org/).
  */
  serialize(e, n = {}) {
    n = Object.assign({}, this.options, n);
    let r = new vm(this.nodes, this.marks, n);
    return r.renderContent(e), r.out;
  }
};
const cn = new I9({
  blockquote(t, e) {
    t.wrapBlock("> ", null, e, () => t.renderContent(e));
  },
  code_block(t, e) {
    const n = e.textContent.match(/`{3,}/gm), r = n ? n.sort().slice(-1)[0] + "`" : "```";
    t.write(r + (e.attrs.params || "") + `
`), t.text(e.textContent, !1), t.write(`
`), t.write(r), t.closeBlock(e);
  },
  heading(t, e) {
    t.write(t.repeat("#", e.attrs.level) + " "), t.renderInline(e, !1), t.closeBlock(e);
  },
  horizontal_rule(t, e) {
    t.write(e.attrs.markup || "---"), t.closeBlock(e);
  },
  bullet_list(t, e) {
    t.renderList(e, "  ", () => (e.attrs.bullet || "*") + " ");
  },
  ordered_list(t, e) {
    let n = e.attrs.order || 1, r = String(n + e.childCount - 1).length, i = t.repeat(" ", r + 2);
    t.renderList(e, i, (s) => {
      let o = String(n + s);
      return t.repeat(" ", r - o.length) + o + ". ";
    });
  },
  list_item(t, e) {
    t.renderContent(e);
  },
  paragraph(t, e) {
    t.renderInline(e), t.closeBlock(e);
  },
  image(t, e) {
    t.write("![" + t.esc(e.attrs.alt || "") + "](" + e.attrs.src.replace(/[\(\)]/g, "\\$&") + (e.attrs.title ? ' "' + e.attrs.title.replace(/"/g, '\\"') + '"' : "") + ")");
  },
  hard_break(t, e, n, r) {
    for (let i = r + 1; i < n.childCount; i++)
      if (n.child(i).type != e.type) {
        t.write(`\\
`);
        return;
      }
  },
  text(t, e) {
    t.text(e.text, !t.inAutolink);
  }
}, {
  em: { open: "*", close: "*", mixable: !0, expelEnclosingWhitespace: !0 },
  strong: { open: "**", close: "**", mixable: !0, expelEnclosingWhitespace: !0 },
  link: {
    open(t, e, n, r) {
      return t.inAutolink = F9(e, n, r), t.inAutolink ? "<" : "[";
    },
    close(t, e, n, r) {
      let { inAutolink: i } = t;
      return t.inAutolink = void 0, i ? ">" : "](" + e.attrs.href.replace(/[\(\)"]/g, "\\$&") + (e.attrs.title ? ` "${e.attrs.title.replace(/"/g, '\\"')}"` : "") + ")";
    },
    mixable: !0
  },
  code: {
    open(t, e, n, r) {
      return ap(n.child(r), -1);
    },
    close(t, e, n, r) {
      return ap(n.child(r - 1), 1);
    },
    escape: !1
  }
});
function ap(t, e) {
  let n = /`+/g, r, i = 0;
  if (t.isText)
    for (; r = n.exec(t.text); )
      i = Math.max(i, r[0].length);
  let s = i > 0 && e > 0 ? " `" : "`";
  for (let o = 0; o < i; o++)
    s += "`";
  return i > 0 && e < 0 && (s += " "), s;
}
function F9(t, e, n) {
  if (t.attrs.title || !/^\w+:/.test(t.attrs.href))
    return !1;
  let r = e.child(n);
  return !r.isText || r.text != t.attrs.href || r.marks[r.marks.length - 1] != t ? !1 : n == e.childCount - 1 || !t.isInSet(e.child(n + 1).marks);
}
let vm = class {
  /**
  @internal
  */
  constructor(e, n, r) {
    this.nodes = e, this.marks = n, this.options = r, this.delim = "", this.out = "", this.closed = null, this.inAutolink = void 0, this.atBlockStart = !1, this.inTightList = !1, typeof this.options.tightLists > "u" && (this.options.tightLists = !1), typeof this.options.hardBreakNodeName > "u" && (this.options.hardBreakNodeName = "hard_break");
  }
  /**
  @internal
  */
  flushClose(e = 2) {
    if (this.closed) {
      if (this.atBlank() || (this.out += `
`), e > 1) {
        let n = this.delim, r = /\s+$/.exec(n);
        r && (n = n.slice(0, n.length - r[0].length));
        for (let i = 1; i < e; i++)
          this.out += n + `
`;
      }
      this.closed = null;
    }
  }
  /**
  Render a block, prefixing each line with `delim`, and the first
  line in `firstDelim`. `node` should be the node that is closed at
  the end of the block, and `f` is a function that renders the
  content of the block.
  */
  wrapBlock(e, n, r, i) {
    let s = this.delim;
    this.write(n ?? e), this.delim += e, i(), this.delim = s, this.closeBlock(r);
  }
  /**
  @internal
  */
  atBlank() {
    return /(^|\n)$/.test(this.out);
  }
  /**
  Ensure the current content ends with a newline.
  */
  ensureNewLine() {
    this.atBlank() || (this.out += `
`);
  }
  /**
  Prepare the state for writing output (closing closed paragraphs,
  adding delimiters, and so on), and then optionally add content
  (unescaped) to the output.
  */
  write(e) {
    this.flushClose(), this.delim && this.atBlank() && (this.out += this.delim), e && (this.out += e);
  }
  /**
  Close the block for the given node.
  */
  closeBlock(e) {
    this.closed = e;
  }
  /**
  Add the given text to the document. When escape is not `false`,
  it will be escaped.
  */
  text(e, n = !0) {
    let r = e.split(`
`);
    for (let i = 0; i < r.length; i++)
      this.write(), !n && r[i][0] == "[" && /(^|[^\\])\!$/.test(this.out) && (this.out = this.out.slice(0, this.out.length - 1) + "\\!"), this.out += n ? this.esc(r[i], this.atBlockStart) : r[i], i != r.length - 1 && (this.out += `
`);
  }
  /**
  Render the given node as a block.
  */
  render(e, n, r) {
    if (!this.nodes[e.type.name])
      throw new Error("Token type `" + e.type.name + "` not supported by Markdown renderer");
    this.nodes[e.type.name](this, e, n, r);
  }
  /**
  Render the contents of `parent` as block nodes.
  */
  renderContent(e) {
    e.forEach((n, r, i) => this.render(n, e, i));
  }
  /**
  Render the contents of `parent` as inline content.
  */
  renderInline(e, n = !0) {
    this.atBlockStart = n;
    let r = [], i = "", s = (o, a, l) => {
      let u = o ? o.marks : [];
      o && o.type.name === this.options.hardBreakNodeName && (u = u.filter((g) => {
        if (l + 1 == e.childCount)
          return !1;
        let m = e.child(l + 1);
        return g.isInSet(m.marks) && (!m.isText || /\S/.test(m.text));
      }));
      let c = i;
      if (i = "", o && o.isText && u.some((g) => {
        let m = this.marks[g.type.name];
        return m && m.expelEnclosingWhitespace && !g.isInSet(r);
      })) {
        let [g, m, y] = /^(\s*)(.*)$/m.exec(o.text);
        m && (c += m, o = y ? o.withText(y) : null, o || (u = r));
      }
      if (o && o.isText && u.some((g) => {
        let m = this.marks[g.type.name];
        return m && m.expelEnclosingWhitespace && (l == e.childCount - 1 || !g.isInSet(e.child(l + 1).marks));
      })) {
        let [g, m, y] = /^(.*?)(\s*)$/m.exec(o.text);
        y && (i = y, o = m ? o.withText(m) : null, o || (u = r));
      }
      let d = u.length ? u[u.length - 1] : null, f = d && this.marks[d.type.name].escape === !1, h = u.length - (f ? 1 : 0);
      e:
        for (let g = 0; g < h; g++) {
          let m = u[g];
          if (!this.marks[m.type.name].mixable)
            break;
          for (let y = 0; y < r.length; y++) {
            let x = r[y];
            if (!this.marks[x.type.name].mixable)
              break;
            if (m.eq(x)) {
              g > y ? u = u.slice(0, y).concat(m).concat(u.slice(y, g)).concat(u.slice(g + 1, h)) : y > g && (u = u.slice(0, g).concat(u.slice(g + 1, y)).concat(m).concat(u.slice(y, h)));
              continue e;
            }
          }
        }
      let p = 0;
      for (; p < Math.min(r.length, h) && u[p].eq(r[p]); )
        ++p;
      for (; p < r.length; )
        this.text(this.markString(r.pop(), !1, e, l), !1);
      if (c && this.text(c), o) {
        for (; r.length < h; ) {
          let g = u[r.length];
          r.push(g), this.text(this.markString(g, !0, e, l), !1), this.atBlockStart = !1;
        }
        f && o.isText ? this.text(this.markString(d, !0, e, l) + o.text + this.markString(d, !1, e, l + 1), !1) : this.render(o, e, l), this.atBlockStart = !1;
      }
      o != null && o.isText && o.nodeSize > 0 && (this.atBlockStart = !1);
    };
    e.forEach(s), s(null, 0, e.childCount), this.atBlockStart = !1;
  }
  /**
  Render a node's content as a list. `delim` should be the extra
  indentation added to all lines except the first in an item,
  `firstDelim` is a function going from an item index to a
  delimiter for the first line of the item.
  */
  renderList(e, n, r) {
    this.closed && this.closed.type == e.type ? this.flushClose(3) : this.inTightList && this.flushClose(1);
    let i = typeof e.attrs.tight < "u" ? e.attrs.tight : this.options.tightLists, s = this.inTightList;
    this.inTightList = i, e.forEach((o, a, l) => {
      l && i && this.flushClose(1), this.wrapBlock(n, r(l), e, () => this.render(o, e, l));
    }), this.inTightList = s;
  }
  /**
  Escape the given string so that it can safely appear in Markdown
  content. If `startOfLine` is true, also escape characters that
  have special meaning only at the start of the line.
  */
  esc(e, n = !1) {
    return e = e.replace(/[`*\\~\[\]_]/g, (r, i) => r == "_" && i > 0 && i + 1 < e.length && e[i - 1].match(/\w/) && e[i + 1].match(/\w/) ? r : "\\" + r), n && (e = e.replace(/^(\+[ ]|[\-*>])/, "\\$&").replace(/^(\s*)(#{1,6})(\s|$)/, "$1\\$2$3").replace(/^(\s*\d+)\.\s/, "$1\\. ")), this.options.escapeExtraCharacters && (e = e.replace(this.options.escapeExtraCharacters, "\\$&")), e;
  }
  /**
  @internal
  */
  quote(e) {
    let n = e.indexOf('"') == -1 ? '""' : e.indexOf("'") == -1 ? "''" : "()";
    return n[0] + e + n[1];
  }
  /**
  Repeat the given string `n` times.
  */
  repeat(e, n) {
    let r = "";
    for (let i = 0; i < n; i++)
      r += e;
    return r;
  }
  /**
  Get the markdown string for a given opening or closing mark.
  */
  markString(e, n, r, i) {
    let s = this.marks[e.type.name], o = n ? s.open : s.close;
    return typeof o == "string" ? o : o(this, e, r, i);
  }
  /**
  Get leading and trailing whitespace from a string. Values of
  leading or trailing property of the return object will be undefined
  if there is no match.
  */
  getEnclosingWhitespace(e) {
    return {
      leading: (e.match(/^(\s+)/) || [void 0])[0],
      trailing: (e.match(/(\s+)$/) || [void 0])[0]
    };
  }
};
const lp = {};
function H9(t) {
  let e = lp[t];
  if (e)
    return e;
  e = lp[t] = [];
  for (let n = 0; n < 128; n++) {
    const r = String.fromCharCode(n);
    e.push(r);
  }
  for (let n = 0; n < t.length; n++) {
    const r = t.charCodeAt(n);
    e[r] = "%" + ("0" + r.toString(16).toUpperCase()).slice(-2);
  }
  return e;
}
function hi(t, e) {
  typeof e != "string" && (e = hi.defaultChars);
  const n = H9(e);
  return t.replace(/(%[a-f0-9]{2})+/gi, function(r) {
    let i = "";
    for (let s = 0, o = r.length; s < o; s += 3) {
      const a = parseInt(r.slice(s + 1, s + 3), 16);
      if (a < 128) {
        i += n[a];
        continue;
      }
      if ((a & 224) === 192 && s + 3 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16);
        if ((l & 192) === 128) {
          const u = a << 6 & 1984 | l & 63;
          u < 128 ? i += "��" : i += String.fromCharCode(u), s += 3;
          continue;
        }
      }
      if ((a & 240) === 224 && s + 6 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16), u = parseInt(r.slice(s + 7, s + 9), 16);
        if ((l & 192) === 128 && (u & 192) === 128) {
          const c = a << 12 & 61440 | l << 6 & 4032 | u & 63;
          c < 2048 || c >= 55296 && c <= 57343 ? i += "���" : i += String.fromCharCode(c), s += 6;
          continue;
        }
      }
      if ((a & 248) === 240 && s + 9 < o) {
        const l = parseInt(r.slice(s + 4, s + 6), 16), u = parseInt(r.slice(s + 7, s + 9), 16), c = parseInt(r.slice(s + 10, s + 12), 16);
        if ((l & 192) === 128 && (u & 192) === 128 && (c & 192) === 128) {
          let d = a << 18 & 1835008 | l << 12 & 258048 | u << 6 & 4032 | c & 63;
          d < 65536 || d > 1114111 ? i += "����" : (d -= 65536, i += String.fromCharCode(55296 + (d >> 10), 56320 + (d & 1023))), s += 9;
          continue;
        }
      }
      i += "�";
    }
    return i;
  });
}
hi.defaultChars = ";/?:@&=+$,#";
hi.componentChars = "";
const up = {};
function B9(t) {
  let e = up[t];
  if (e)
    return e;
  e = up[t] = [];
  for (let n = 0; n < 128; n++) {
    const r = String.fromCharCode(n);
    /^[0-9a-z]$/i.test(r) ? e.push(r) : e.push("%" + ("0" + n.toString(16).toUpperCase()).slice(-2));
  }
  for (let n = 0; n < t.length; n++)
    e[t.charCodeAt(n)] = t[n];
  return e;
}
function As(t, e, n) {
  typeof e != "string" && (n = e, e = As.defaultChars), typeof n > "u" && (n = !0);
  const r = B9(e);
  let i = "";
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t.charCodeAt(s);
    if (n && a === 37 && s + 2 < o && /^[0-9a-f]{2}$/i.test(t.slice(s + 1, s + 3))) {
      i += t.slice(s, s + 3), s += 2;
      continue;
    }
    if (a < 128) {
      i += r[a];
      continue;
    }
    if (a >= 55296 && a <= 57343) {
      if (a >= 55296 && a <= 56319 && s + 1 < o) {
        const l = t.charCodeAt(s + 1);
        if (l >= 56320 && l <= 57343) {
          i += encodeURIComponent(t[s] + t[s + 1]), s++;
          continue;
        }
      }
      i += "%EF%BF%BD";
      continue;
    }
    i += encodeURIComponent(t[s]);
  }
  return i;
}
As.defaultChars = ";/?:@&=+$,-_.!~*'()#";
As.componentChars = "-_.!~*'()";
function Wc(t) {
  let e = "";
  return e += t.protocol || "", e += t.slashes ? "//" : "", e += t.auth ? t.auth + "@" : "", t.hostname && t.hostname.indexOf(":") !== -1 ? e += "[" + t.hostname + "]" : e += t.hostname || "", e += t.port ? ":" + t.port : "", e += t.pathname || "", e += t.search || "", e += t.hash || "", e;
}
function ia() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
const P9 = /^([a-z0-9.+-]+:)/i, $9 = /:[0-9]*$/, z9 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, V9 = ["<", ">", '"', "`", " ", "\r", `
`, "	"], U9 = ["{", "}", "|", "\\", "^", "`"].concat(V9), q9 = ["'"].concat(U9), cp = ["%", "/", "?", ";", "#"].concat(q9), dp = ["/", "?", "#"], Z9 = 255, fp = /^[+a-z0-9A-Z_-]{0,63}$/, K9 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, hp = {
  javascript: !0,
  "javascript:": !0
}, pp = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
};
function jc(t, e) {
  if (t && t instanceof ia)
    return t;
  const n = new ia();
  return n.parse(t, e), n;
}
ia.prototype.parse = function(t, e) {
  let n, r, i, s = t;
  if (s = s.trim(), !e && t.split("#").length === 1) {
    const u = z9.exec(s);
    if (u)
      return this.pathname = u[1], u[2] && (this.search = u[2]), this;
  }
  let o = P9.exec(s);
  if (o && (o = o[0], n = o.toLowerCase(), this.protocol = o, s = s.substr(o.length)), (e || o || s.match(/^\/\/[^@\/]+@[^@\/]+/)) && (i = s.substr(0, 2) === "//", i && !(o && hp[o]) && (s = s.substr(2), this.slashes = !0)), !hp[o] && (i || o && !pp[o])) {
    let u = -1;
    for (let p = 0; p < dp.length; p++)
      r = s.indexOf(dp[p]), r !== -1 && (u === -1 || r < u) && (u = r);
    let c, d;
    u === -1 ? d = s.lastIndexOf("@") : d = s.lastIndexOf("@", u), d !== -1 && (c = s.slice(0, d), s = s.slice(d + 1), this.auth = c), u = -1;
    for (let p = 0; p < cp.length; p++)
      r = s.indexOf(cp[p]), r !== -1 && (u === -1 || r < u) && (u = r);
    u === -1 && (u = s.length), s[u - 1] === ":" && u--;
    const f = s.slice(0, u);
    s = s.slice(u), this.parseHost(f), this.hostname = this.hostname || "";
    const h = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!h) {
      const p = this.hostname.split(/\./);
      for (let g = 0, m = p.length; g < m; g++) {
        const y = p[g];
        if (y && !y.match(fp)) {
          let x = "";
          for (let k = 0, b = y.length; k < b; k++)
            y.charCodeAt(k) > 127 ? x += "x" : x += y[k];
          if (!x.match(fp)) {
            const k = p.slice(0, g), b = p.slice(g + 1), E = y.match(K9);
            E && (k.push(E[1]), b.unshift(E[2])), b.length && (s = b.join(".") + s), this.hostname = k.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > Z9 && (this.hostname = ""), h && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  const a = s.indexOf("#");
  a !== -1 && (this.hash = s.substr(a), s = s.slice(0, a));
  const l = s.indexOf("?");
  return l !== -1 && (this.search = s.substr(l), s = s.slice(0, l)), s && (this.pathname = s), pp[n] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
ia.prototype.parseHost = function(t) {
  let e = $9.exec(t);
  e && (e = e[0], e !== ":" && (this.port = e.substr(1)), t = t.substr(0, t.length - e.length)), t && (this.hostname = t);
};
const W9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: hi,
  encode: As,
  format: Wc,
  parse: jc
}, Symbol.toStringTag, { value: "Module" })), Em = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, Cm = /[\0-\x1F\x7F-\x9F]/, j9 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/, Gc = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, _m = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/, wm = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, G9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Any: Em,
  Cc: Cm,
  Cf: j9,
  P: Gc,
  S: _m,
  Z: wm
}, Symbol.toStringTag, { value: "Module" }));
function J9(t) {
  return Object.prototype.toString.call(t);
}
function Jc(t) {
  return J9(t) === "[object String]";
}
const Y9 = Object.prototype.hasOwnProperty;
function X9(t, e) {
  return Y9.call(t, e);
}
function $a(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    if (n) {
      if (typeof n != "object")
        throw new TypeError(n + "must be object");
      Object.keys(n).forEach(function(r) {
        t[r] = n[r];
      });
    }
  }), t;
}
function Sm(t, e, n) {
  return [].concat(t.slice(0, e), n, t.slice(e + 1));
}
function Yc(t) {
  return !(t >= 55296 && t <= 57343 || t >= 64976 && t <= 65007 || (t & 65535) === 65535 || (t & 65535) === 65534 || t >= 0 && t <= 8 || t === 11 || t >= 14 && t <= 31 || t >= 127 && t <= 159 || t > 1114111);
}
function sa(t) {
  if (t > 65535) {
    t -= 65536;
    const e = 55296 + (t >> 10), n = 56320 + (t & 1023);
    return String.fromCharCode(e, n);
  }
  return String.fromCharCode(t);
}
const Am = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g, Q9 = /&([a-z#][a-z0-9]{1,31});/gi, eM = new RegExp(Am.source + "|" + Q9.source, "gi"), tM = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
function nM(t, e) {
  if (e.charCodeAt(0) === 35 && tM.test(e)) {
    const r = e[1].toLowerCase() === "x" ? parseInt(e.slice(2), 16) : parseInt(e.slice(1), 10);
    return Yc(r) ? sa(r) : t;
  }
  const n = Ra(t);
  return n !== t ? n : t;
}
function rM(t) {
  return t.indexOf("\\") < 0 ? t : t.replace(Am, "$1");
}
function pi(t) {
  return t.indexOf("\\") < 0 && t.indexOf("&") < 0 ? t : t.replace(eM, function(e, n, r) {
    return n || nM(e, r);
  });
}
const iM = /[&<>"]/, sM = /[&<>"]/g, oM = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function aM(t) {
  return oM[t];
}
function Wn(t) {
  return iM.test(t) ? t.replace(sM, aM) : t;
}
const lM = /[.?*+^$[\]\\(){}|-]/g;
function uM(t) {
  return t.replace(lM, "\\$&");
}
function Me(t) {
  switch (t) {
    case 9:
    case 32:
      return !0;
  }
  return !1;
}
function ds(t) {
  if (t >= 8192 && t <= 8202)
    return !0;
  switch (t) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
    case 160:
    case 5760:
    case 8239:
    case 8287:
    case 12288:
      return !0;
  }
  return !1;
}
function fs(t) {
  return Gc.test(t) || _m.test(t);
}
function hs(t) {
  switch (t) {
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 124:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function za(t) {
  return t = t.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (t = t.replace(/ẞ/g, "ß")), t.toLowerCase().toUpperCase();
}
const cM = { mdurl: W9, ucmicro: G9 }, dM = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arrayReplaceAt: Sm,
  assign: $a,
  escapeHtml: Wn,
  escapeRE: uM,
  fromCodePoint: sa,
  has: X9,
  isMdAsciiPunct: hs,
  isPunctChar: fs,
  isSpace: Me,
  isString: Jc,
  isValidEntityCode: Yc,
  isWhiteSpace: ds,
  lib: cM,
  normalizeReference: za,
  unescapeAll: pi,
  unescapeMd: rM
}, Symbol.toStringTag, { value: "Module" }));
function fM(t, e, n) {
  let r, i, s, o;
  const a = t.posMax, l = t.pos;
  for (t.pos = e + 1, r = 1; t.pos < a; ) {
    if (s = t.src.charCodeAt(t.pos), s === 93 && (r--, r === 0)) {
      i = !0;
      break;
    }
    if (o = t.pos, t.md.inline.skipToken(t), s === 91) {
      if (o === t.pos - 1)
        r++;
      else if (n)
        return t.pos = l, -1;
    }
  }
  let u = -1;
  return i && (u = t.pos), t.pos = l, u;
}
function hM(t, e, n) {
  let r, i = e;
  const s = {
    ok: !1,
    pos: 0,
    str: ""
  };
  if (t.charCodeAt(i) === 60) {
    for (i++; i < n; ) {
      if (r = t.charCodeAt(i), r === 10 || r === 60)
        return s;
      if (r === 62)
        return s.pos = i + 1, s.str = pi(t.slice(e + 1, i)), s.ok = !0, s;
      if (r === 92 && i + 1 < n) {
        i += 2;
        continue;
      }
      i++;
    }
    return s;
  }
  let o = 0;
  for (; i < n && (r = t.charCodeAt(i), !(r === 32 || r < 32 || r === 127)); ) {
    if (r === 92 && i + 1 < n) {
      if (t.charCodeAt(i + 1) === 32)
        break;
      i += 2;
      continue;
    }
    if (r === 40 && (o++, o > 32))
      return s;
    if (r === 41) {
      if (o === 0)
        break;
      o--;
    }
    i++;
  }
  return e === i || o !== 0 || (s.str = pi(t.slice(e, i)), s.pos = i, s.ok = !0), s;
}
function pM(t, e, n, r) {
  let i, s = e;
  const o = {
    // if `true`, this is a valid link title
    ok: !1,
    // if `true`, this link can be continued on the next line
    can_continue: !1,
    // if `ok`, it's the position of the first character after the closing marker
    pos: 0,
    // if `ok`, it's the unescaped title
    str: "",
    // expected closing marker character code
    marker: 0
  };
  if (r)
    o.str = r.str, o.marker = r.marker;
  else {
    if (s >= n)
      return o;
    let a = t.charCodeAt(s);
    if (a !== 34 && a !== 39 && a !== 40)
      return o;
    e++, s++, a === 40 && (a = 41), o.marker = a;
  }
  for (; s < n; ) {
    if (i = t.charCodeAt(s), i === o.marker)
      return o.pos = s + 1, o.str += pi(t.slice(e, s)), o.ok = !0, o;
    if (i === 40 && o.marker === 41)
      return o;
    i === 92 && s + 1 < n && s++, s++;
  }
  return o.can_continue = !0, o.str += pi(t.slice(e, s)), o;
}
const gM = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  parseLinkDestination: hM,
  parseLinkLabel: fM,
  parseLinkTitle: pM
}, Symbol.toStringTag, { value: "Module" })), dn = {};
dn.code_inline = function(t, e, n, r, i) {
  const s = t[e];
  return "<code" + i.renderAttrs(s) + ">" + Wn(s.content) + "</code>";
};
dn.code_block = function(t, e, n, r, i) {
  const s = t[e];
  return "<pre" + i.renderAttrs(s) + "><code>" + Wn(t[e].content) + `</code></pre>
`;
};
dn.fence = function(t, e, n, r, i) {
  const s = t[e], o = s.info ? pi(s.info).trim() : "";
  let a = "", l = "";
  if (o) {
    const c = o.split(/(\s+)/g);
    a = c[0], l = c.slice(2).join("");
  }
  let u;
  if (n.highlight ? u = n.highlight(s.content, a, l) || Wn(s.content) : u = Wn(s.content), u.indexOf("<pre") === 0)
    return u + `
`;
  if (o) {
    const c = s.attrIndex("class"), d = s.attrs ? s.attrs.slice() : [];
    c < 0 ? d.push(["class", n.langPrefix + a]) : (d[c] = d[c].slice(), d[c][1] += " " + n.langPrefix + a);
    const f = {
      attrs: d
    };
    return `<pre><code${i.renderAttrs(f)}>${u}</code></pre>
`;
  }
  return `<pre><code${i.renderAttrs(s)}>${u}</code></pre>
`;
};
dn.image = function(t, e, n, r, i) {
  const s = t[e];
  return s.attrs[s.attrIndex("alt")][1] = i.renderInlineAsText(s.children, n, r), i.renderToken(t, e, n);
};
dn.hardbreak = function(t, e, n) {
  return n.xhtmlOut ? `<br />
` : `<br>
`;
};
dn.softbreak = function(t, e, n) {
  return n.breaks ? n.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
dn.text = function(t, e) {
  return Wn(t[e].content);
};
dn.html_block = function(t, e) {
  return t[e].content;
};
dn.html_inline = function(t, e) {
  return t[e].content;
};
function xi() {
  this.rules = $a({}, dn);
}
xi.prototype.renderAttrs = function(e) {
  let n, r, i;
  if (!e.attrs)
    return "";
  for (i = "", n = 0, r = e.attrs.length; n < r; n++)
    i += " " + Wn(e.attrs[n][0]) + '="' + Wn(e.attrs[n][1]) + '"';
  return i;
};
xi.prototype.renderToken = function(e, n, r) {
  const i = e[n];
  let s = "";
  if (i.hidden)
    return "";
  i.block && i.nesting !== -1 && n && e[n - 1].hidden && (s += `
`), s += (i.nesting === -1 ? "</" : "<") + i.tag, s += this.renderAttrs(i), i.nesting === 0 && r.xhtmlOut && (s += " /");
  let o = !1;
  if (i.block && (o = !0, i.nesting === 1 && n + 1 < e.length)) {
    const a = e[n + 1];
    (a.type === "inline" || a.hidden || a.nesting === -1 && a.tag === i.tag) && (o = !1);
  }
  return s += o ? `>
` : ">", s;
};
xi.prototype.renderInline = function(t, e, n) {
  let r = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    typeof i[a] < "u" ? r += i[a](t, s, e, n, this) : r += this.renderToken(t, s, e);
  }
  return r;
};
xi.prototype.renderInlineAsText = function(t, e, n) {
  let r = "";
  for (let i = 0, s = t.length; i < s; i++)
    switch (t[i].type) {
      case "text":
        r += t[i].content;
        break;
      case "image":
        r += this.renderInlineAsText(t[i].children, e, n);
        break;
      case "html_inline":
      case "html_block":
        r += t[i].content;
        break;
      case "softbreak":
      case "hardbreak":
        r += `
`;
        break;
    }
  return r;
};
xi.prototype.render = function(t, e, n) {
  let r = "";
  const i = this.rules;
  for (let s = 0, o = t.length; s < o; s++) {
    const a = t[s].type;
    a === "inline" ? r += this.renderInline(t[s].children, e, n) : typeof i[a] < "u" ? r += i[a](t, s, e, n, this) : r += this.renderToken(t, s, e, n);
  }
  return r;
};
function bt() {
  this.__rules__ = [], this.__cache__ = null;
}
bt.prototype.__find__ = function(t) {
  for (let e = 0; e < this.__rules__.length; e++)
    if (this.__rules__[e].name === t)
      return e;
  return -1;
};
bt.prototype.__compile__ = function() {
  const t = this, e = [""];
  t.__rules__.forEach(function(n) {
    n.enabled && n.alt.forEach(function(r) {
      e.indexOf(r) < 0 && e.push(r);
    });
  }), t.__cache__ = {}, e.forEach(function(n) {
    t.__cache__[n] = [], t.__rules__.forEach(function(r) {
      r.enabled && (n && r.alt.indexOf(n) < 0 || t.__cache__[n].push(r.fn));
    });
  });
};
bt.prototype.at = function(t, e, n) {
  const r = this.__find__(t), i = n || {};
  if (r === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__[r].fn = e, this.__rules__[r].alt = i.alt || [], this.__cache__ = null;
};
bt.prototype.before = function(t, e, n, r) {
  const i = this.__find__(t), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i, 0, {
    name: e,
    enabled: !0,
    fn: n,
    alt: s.alt || []
  }), this.__cache__ = null;
};
bt.prototype.after = function(t, e, n, r) {
  const i = this.__find__(t), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + t);
  this.__rules__.splice(i + 1, 0, {
    name: e,
    enabled: !0,
    fn: n,
    alt: s.alt || []
  }), this.__cache__ = null;
};
bt.prototype.push = function(t, e, n) {
  const r = n || {};
  this.__rules__.push({
    name: t,
    enabled: !0,
    fn: e,
    alt: r.alt || []
  }), this.__cache__ = null;
};
bt.prototype.enable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const n = [];
  return t.forEach(function(r) {
    const i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !0, n.push(r);
  }, this), this.__cache__ = null, n;
};
bt.prototype.enableOnly = function(t, e) {
  Array.isArray(t) || (t = [t]), this.__rules__.forEach(function(n) {
    n.enabled = !1;
  }), this.enable(t, e);
};
bt.prototype.disable = function(t, e) {
  Array.isArray(t) || (t = [t]);
  const n = [];
  return t.forEach(function(r) {
    const i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !1, n.push(r);
  }, this), this.__cache__ = null, n;
};
bt.prototype.getRules = function(t) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[t] || [];
};
function qt(t, e, n) {
  this.type = t, this.tag = e, this.attrs = null, this.map = null, this.nesting = n, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = !1, this.hidden = !1;
}
qt.prototype.attrIndex = function(e) {
  if (!this.attrs)
    return -1;
  const n = this.attrs;
  for (let r = 0, i = n.length; r < i; r++)
    if (n[r][0] === e)
      return r;
  return -1;
};
qt.prototype.attrPush = function(e) {
  this.attrs ? this.attrs.push(e) : this.attrs = [e];
};
qt.prototype.attrSet = function(e, n) {
  const r = this.attrIndex(e), i = [e, n];
  r < 0 ? this.attrPush(i) : this.attrs[r] = i;
};
qt.prototype.attrGet = function(e) {
  const n = this.attrIndex(e);
  let r = null;
  return n >= 0 && (r = this.attrs[n][1]), r;
};
qt.prototype.attrJoin = function(e, n) {
  const r = this.attrIndex(e);
  r < 0 ? this.attrPush([e, n]) : this.attrs[r][1] = this.attrs[r][1] + " " + n;
};
function Mm(t, e, n) {
  this.src = t, this.env = n, this.tokens = [], this.inlineMode = !1, this.md = e;
}
Mm.prototype.Token = qt;
const mM = /\r\n?|\n/g, bM = /\0/g;
function yM(t) {
  let e;
  e = t.src.replace(mM, `
`), e = e.replace(bM, "�"), t.src = e;
}
function xM(t) {
  let e;
  t.inlineMode ? (e = new t.Token("inline", "", 0), e.content = t.src, e.map = [0, 1], e.children = [], t.tokens.push(e)) : t.md.block.parse(t.src, t.md, t.env, t.tokens);
}
function kM(t) {
  const e = t.tokens;
  for (let n = 0, r = e.length; n < r; n++) {
    const i = e[n];
    i.type === "inline" && t.md.inline.parse(i.content, t.md, t.env, i.children);
  }
}
function vM(t) {
  return /^<a[>\s]/i.test(t);
}
function EM(t) {
  return /^<\/a\s*>/i.test(t);
}
function CM(t) {
  const e = t.tokens;
  if (t.md.options.linkify)
    for (let n = 0, r = e.length; n < r; n++) {
      if (e[n].type !== "inline" || !t.md.linkify.pretest(e[n].content))
        continue;
      let i = e[n].children, s = 0;
      for (let o = i.length - 1; o >= 0; o--) {
        const a = i[o];
        if (a.type === "link_close") {
          for (o--; i[o].level !== a.level && i[o].type !== "link_open"; )
            o--;
          continue;
        }
        if (a.type === "html_inline" && (vM(a.content) && s > 0 && s--, EM(a.content) && s++), !(s > 0) && a.type === "text" && t.md.linkify.test(a.content)) {
          const l = a.content;
          let u = t.md.linkify.match(l);
          const c = [];
          let d = a.level, f = 0;
          u.length > 0 && u[0].index === 0 && o > 0 && i[o - 1].type === "text_special" && (u = u.slice(1));
          for (let h = 0; h < u.length; h++) {
            const p = u[h].url, g = t.md.normalizeLink(p);
            if (!t.md.validateLink(g))
              continue;
            let m = u[h].text;
            u[h].schema ? u[h].schema === "mailto:" && !/^mailto:/i.test(m) ? m = t.md.normalizeLinkText("mailto:" + m).replace(/^mailto:/, "") : m = t.md.normalizeLinkText(m) : m = t.md.normalizeLinkText("http://" + m).replace(/^http:\/\//, "");
            const y = u[h].index;
            if (y > f) {
              const E = new t.Token("text", "", 0);
              E.content = l.slice(f, y), E.level = d, c.push(E);
            }
            const x = new t.Token("link_open", "a", 1);
            x.attrs = [["href", g]], x.level = d++, x.markup = "linkify", x.info = "auto", c.push(x);
            const k = new t.Token("text", "", 0);
            k.content = m, k.level = d, c.push(k);
            const b = new t.Token("link_close", "a", -1);
            b.level = --d, b.markup = "linkify", b.info = "auto", c.push(b), f = u[h].lastIndex;
          }
          if (f < l.length) {
            const h = new t.Token("text", "", 0);
            h.content = l.slice(f), h.level = d, c.push(h);
          }
          e[n].children = i = Sm(i, o, c);
        }
      }
    }
}
const Tm = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, _M = /\((c|tm|r)\)/i, wM = /\((c|tm|r)\)/ig, SM = {
  c: "©",
  r: "®",
  tm: "™"
};
function AM(t, e) {
  return SM[e.toLowerCase()];
}
function MM(t) {
  let e = 0;
  for (let n = t.length - 1; n >= 0; n--) {
    const r = t[n];
    r.type === "text" && !e && (r.content = r.content.replace(wM, AM)), r.type === "link_open" && r.info === "auto" && e--, r.type === "link_close" && r.info === "auto" && e++;
  }
}
function TM(t) {
  let e = 0;
  for (let n = t.length - 1; n >= 0; n--) {
    const r = t[n];
    r.type === "text" && !e && Tm.test(r.content) && (r.content = r.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), r.type === "link_open" && r.info === "auto" && e--, r.type === "link_close" && r.info === "auto" && e++;
  }
}
function DM(t) {
  let e;
  if (t.md.options.typographer)
    for (e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type === "inline" && (_M.test(t.tokens[e].content) && MM(t.tokens[e].children), Tm.test(t.tokens[e].content) && TM(t.tokens[e].children));
}
const OM = /['"]/, gp = /['"]/g, mp = "’";
function no(t, e, n) {
  return t.slice(0, e) + n + t.slice(e + 1);
}
function NM(t, e) {
  let n;
  const r = [];
  for (let i = 0; i < t.length; i++) {
    const s = t[i], o = t[i].level;
    for (n = r.length - 1; n >= 0 && !(r[n].level <= o); n--)
      ;
    if (r.length = n + 1, s.type !== "text")
      continue;
    let a = s.content, l = 0, u = a.length;
    e:
      for (; l < u; ) {
        gp.lastIndex = l;
        const c = gp.exec(a);
        if (!c)
          break;
        let d = !0, f = !0;
        l = c.index + 1;
        const h = c[0] === "'";
        let p = 32;
        if (c.index - 1 >= 0)
          p = a.charCodeAt(c.index - 1);
        else
          for (n = i - 1; n >= 0 && !(t[n].type === "softbreak" || t[n].type === "hardbreak"); n--)
            if (t[n].content) {
              p = t[n].content.charCodeAt(t[n].content.length - 1);
              break;
            }
        let g = 32;
        if (l < u)
          g = a.charCodeAt(l);
        else
          for (n = i + 1; n < t.length && !(t[n].type === "softbreak" || t[n].type === "hardbreak"); n++)
            if (t[n].content) {
              g = t[n].content.charCodeAt(0);
              break;
            }
        const m = hs(p) || fs(String.fromCharCode(p)), y = hs(g) || fs(String.fromCharCode(g)), x = ds(p), k = ds(g);
        if (k ? d = !1 : y && (x || m || (d = !1)), x ? f = !1 : m && (k || y || (f = !1)), g === 34 && c[0] === '"' && p >= 48 && p <= 57 && (f = d = !1), d && f && (d = m, f = y), !d && !f) {
          h && (s.content = no(s.content, c.index, mp));
          continue;
        }
        if (f)
          for (n = r.length - 1; n >= 0; n--) {
            let b = r[n];
            if (r[n].level < o)
              break;
            if (b.single === h && r[n].level === o) {
              b = r[n];
              let E, v;
              h ? (E = e.md.options.quotes[2], v = e.md.options.quotes[3]) : (E = e.md.options.quotes[0], v = e.md.options.quotes[1]), s.content = no(s.content, c.index, v), t[b.token].content = no(
                t[b.token].content,
                b.pos,
                E
              ), l += v.length - 1, b.token === i && (l += E.length - 1), a = s.content, u = a.length, r.length = n;
              continue e;
            }
          }
        d ? r.push({
          token: i,
          pos: c.index,
          single: h,
          level: o
        }) : f && h && (s.content = no(s.content, c.index, mp));
      }
  }
}
function LM(t) {
  if (t.md.options.typographer)
    for (let e = t.tokens.length - 1; e >= 0; e--)
      t.tokens[e].type !== "inline" || !OM.test(t.tokens[e].content) || NM(t.tokens[e].children, t);
}
function RM(t) {
  let e, n;
  const r = t.tokens, i = r.length;
  for (let s = 0; s < i; s++) {
    if (r[s].type !== "inline")
      continue;
    const o = r[s].children, a = o.length;
    for (e = 0; e < a; e++)
      o[e].type === "text_special" && (o[e].type = "text");
    for (e = n = 0; e < a; e++)
      o[e].type === "text" && e + 1 < a && o[e + 1].type === "text" ? o[e + 1].content = o[e].content + o[e + 1].content : (e !== n && (o[n] = o[e]), n++);
    e !== n && (o.length = n);
  }
}
const Ul = [
  ["normalize", yM],
  ["block", xM],
  ["inline", kM],
  ["linkify", CM],
  ["replacements", DM],
  ["smartquotes", LM],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", RM]
];
function Xc() {
  this.ruler = new bt();
  for (let t = 0; t < Ul.length; t++)
    this.ruler.push(Ul[t][0], Ul[t][1]);
}
Xc.prototype.process = function(t) {
  const e = this.ruler.getRules("");
  for (let n = 0, r = e.length; n < r; n++)
    e[n](t);
};
Xc.prototype.State = Mm;
function fn(t, e, n, r) {
  this.src = t, this.md = e, this.env = n, this.tokens = r, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0;
  const i = this.src;
  for (let s = 0, o = 0, a = 0, l = 0, u = i.length, c = !1; o < u; o++) {
    const d = i.charCodeAt(o);
    if (!c)
      if (Me(d)) {
        a++, d === 9 ? l += 4 - l % 4 : l++;
        continue;
      } else
        c = !0;
    (d === 10 || o === u - 1) && (d !== 10 && o++, this.bMarks.push(s), this.eMarks.push(o), this.tShift.push(a), this.sCount.push(l), this.bsCount.push(0), c = !1, a = 0, l = 0, s = o + 1);
  }
  this.bMarks.push(i.length), this.eMarks.push(i.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
fn.prototype.push = function(t, e, n) {
  const r = new qt(t, e, n);
  return r.block = !0, n < 0 && this.level--, r.level = this.level, n > 0 && this.level++, this.tokens.push(r), r;
};
fn.prototype.isEmpty = function(e) {
  return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
};
fn.prototype.skipEmptyLines = function(e) {
  for (let n = this.lineMax; e < n && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++)
    ;
  return e;
};
fn.prototype.skipSpaces = function(e) {
  for (let n = this.src.length; e < n; e++) {
    const r = this.src.charCodeAt(e);
    if (!Me(r))
      break;
  }
  return e;
};
fn.prototype.skipSpacesBack = function(e, n) {
  if (e <= n)
    return e;
  for (; e > n; )
    if (!Me(this.src.charCodeAt(--e)))
      return e + 1;
  return e;
};
fn.prototype.skipChars = function(e, n) {
  for (let r = this.src.length; e < r && this.src.charCodeAt(e) === n; e++)
    ;
  return e;
};
fn.prototype.skipCharsBack = function(e, n, r) {
  if (e <= r)
    return e;
  for (; e > r; )
    if (n !== this.src.charCodeAt(--e))
      return e + 1;
  return e;
};
fn.prototype.getLines = function(e, n, r, i) {
  if (e >= n)
    return "";
  const s = new Array(n - e);
  for (let o = 0, a = e; a < n; a++, o++) {
    let l = 0;
    const u = this.bMarks[a];
    let c = u, d;
    for (a + 1 < n || i ? d = this.eMarks[a] + 1 : d = this.eMarks[a]; c < d && l < r; ) {
      const f = this.src.charCodeAt(c);
      if (Me(f))
        f === 9 ? l += 4 - (l + this.bsCount[a]) % 4 : l++;
      else if (c - u < this.tShift[a])
        l++;
      else
        break;
      c++;
    }
    l > r ? s[o] = new Array(l - r + 1).join(" ") + this.src.slice(c, d) : s[o] = this.src.slice(c, d);
  }
  return s.join("");
};
fn.prototype.Token = qt;
const IM = 65536;
function ql(t, e) {
  const n = t.bMarks[e] + t.tShift[e], r = t.eMarks[e];
  return t.src.slice(n, r);
}
function bp(t) {
  const e = [], n = t.length;
  let r = 0, i = t.charCodeAt(r), s = !1, o = 0, a = "";
  for (; r < n; )
    i === 124 && (s ? (a += t.substring(o, r - 1), o = r) : (e.push(a + t.substring(o, r)), a = "", o = r + 1)), s = i === 92, r++, i = t.charCodeAt(r);
  return e.push(a + t.substring(o)), e;
}
function FM(t, e, n, r) {
  if (e + 2 > n)
    return !1;
  let i = e + 1;
  if (t.sCount[i] < t.blkIndent || t.sCount[i] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[i] + t.tShift[i];
  if (s >= t.eMarks[i])
    return !1;
  const o = t.src.charCodeAt(s++);
  if (o !== 124 && o !== 45 && o !== 58 || s >= t.eMarks[i])
    return !1;
  const a = t.src.charCodeAt(s++);
  if (a !== 124 && a !== 45 && a !== 58 && !Me(a) || o === 45 && Me(a))
    return !1;
  for (; s < t.eMarks[i]; ) {
    const b = t.src.charCodeAt(s);
    if (b !== 124 && b !== 45 && b !== 58 && !Me(b))
      return !1;
    s++;
  }
  let l = ql(t, e + 1), u = l.split("|");
  const c = [];
  for (let b = 0; b < u.length; b++) {
    const E = u[b].trim();
    if (!E) {
      if (b === 0 || b === u.length - 1)
        continue;
      return !1;
    }
    if (!/^:?-+:?$/.test(E))
      return !1;
    E.charCodeAt(E.length - 1) === 58 ? c.push(E.charCodeAt(0) === 58 ? "center" : "right") : E.charCodeAt(0) === 58 ? c.push("left") : c.push("");
  }
  if (l = ql(t, e).trim(), l.indexOf("|") === -1 || t.sCount[e] - t.blkIndent >= 4)
    return !1;
  u = bp(l), u.length && u[0] === "" && u.shift(), u.length && u[u.length - 1] === "" && u.pop();
  const d = u.length;
  if (d === 0 || d !== c.length)
    return !1;
  if (r)
    return !0;
  const f = t.parentType;
  t.parentType = "table";
  const h = t.md.block.ruler.getRules("blockquote"), p = t.push("table_open", "table", 1), g = [e, 0];
  p.map = g;
  const m = t.push("thead_open", "thead", 1);
  m.map = [e, e + 1];
  const y = t.push("tr_open", "tr", 1);
  y.map = [e, e + 1];
  for (let b = 0; b < u.length; b++) {
    const E = t.push("th_open", "th", 1);
    c[b] && (E.attrs = [["style", "text-align:" + c[b]]]);
    const v = t.push("inline", "", 0);
    v.content = u[b].trim(), v.children = [], t.push("th_close", "th", -1);
  }
  t.push("tr_close", "tr", -1), t.push("thead_close", "thead", -1);
  let x, k = 0;
  for (i = e + 2; i < n && !(t.sCount[i] < t.blkIndent); i++) {
    let b = !1;
    for (let v = 0, _ = h.length; v < _; v++)
      if (h[v](t, i, n, !0)) {
        b = !0;
        break;
      }
    if (b || (l = ql(t, i).trim(), !l) || t.sCount[i] - t.blkIndent >= 4 || (u = bp(l), u.length && u[0] === "" && u.shift(), u.length && u[u.length - 1] === "" && u.pop(), k += d - u.length, k > IM))
      break;
    if (i === e + 2) {
      const v = t.push("tbody_open", "tbody", 1);
      v.map = x = [e + 2, 0];
    }
    const E = t.push("tr_open", "tr", 1);
    E.map = [i, i + 1];
    for (let v = 0; v < d; v++) {
      const _ = t.push("td_open", "td", 1);
      c[v] && (_.attrs = [["style", "text-align:" + c[v]]]);
      const T = t.push("inline", "", 0);
      T.content = u[v] ? u[v].trim() : "", T.children = [], t.push("td_close", "td", -1);
    }
    t.push("tr_close", "tr", -1);
  }
  return x && (t.push("tbody_close", "tbody", -1), x[1] = i), t.push("table_close", "table", -1), g[1] = i, t.parentType = f, t.line = i, !0;
}
function HM(t, e, n) {
  if (t.sCount[e] - t.blkIndent < 4)
    return !1;
  let r = e + 1, i = r;
  for (; r < n; ) {
    if (t.isEmpty(r)) {
      r++;
      continue;
    }
    if (t.sCount[r] - t.blkIndent >= 4) {
      r++, i = r;
      continue;
    }
    break;
  }
  t.line = i;
  const s = t.push("code_block", "code", 0);
  return s.content = t.getLines(e, i, 4 + t.blkIndent, !1) + `
`, s.map = [e, t.line], !0;
}
function BM(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || i + 3 > s)
    return !1;
  const o = t.src.charCodeAt(i);
  if (o !== 126 && o !== 96)
    return !1;
  let a = i;
  i = t.skipChars(i, o);
  let l = i - a;
  if (l < 3)
    return !1;
  const u = t.src.slice(a, i), c = t.src.slice(i, s);
  if (o === 96 && c.indexOf(String.fromCharCode(o)) >= 0)
    return !1;
  if (r)
    return !0;
  let d = e, f = !1;
  for (; d++, !(d >= n || (i = a = t.bMarks[d] + t.tShift[d], s = t.eMarks[d], i < s && t.sCount[d] < t.blkIndent)); )
    if (t.src.charCodeAt(i) === o && !(t.sCount[d] - t.blkIndent >= 4) && (i = t.skipChars(i, o), !(i - a < l) && (i = t.skipSpaces(i), !(i < s)))) {
      f = !0;
      break;
    }
  l = t.sCount[e], t.line = d + (f ? 1 : 0);
  const h = t.push("fence", "code", 0);
  return h.info = c, h.content = t.getLines(e + 1, d, l, !0), h.markup = u, h.map = [e, t.line], !0;
}
function PM(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  const o = t.lineMax;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(i) !== 62)
    return !1;
  if (r)
    return !0;
  const a = [], l = [], u = [], c = [], d = t.md.block.ruler.getRules("blockquote"), f = t.parentType;
  t.parentType = "blockquote";
  let h = !1, p;
  for (p = e; p < n; p++) {
    const k = t.sCount[p] < t.blkIndent;
    if (i = t.bMarks[p] + t.tShift[p], s = t.eMarks[p], i >= s)
      break;
    if (t.src.charCodeAt(i++) === 62 && !k) {
      let E = t.sCount[p] + 1, v, _;
      t.src.charCodeAt(i) === 32 ? (i++, E++, _ = !1, v = !0) : t.src.charCodeAt(i) === 9 ? (v = !0, (t.bsCount[p] + E) % 4 === 3 ? (i++, E++, _ = !1) : _ = !0) : v = !1;
      let T = E;
      for (a.push(t.bMarks[p]), t.bMarks[p] = i; i < s; ) {
        const w = t.src.charCodeAt(i);
        if (Me(w))
          w === 9 ? T += 4 - (T + t.bsCount[p] + (_ ? 1 : 0)) % 4 : T++;
        else
          break;
        i++;
      }
      h = i >= s, l.push(t.bsCount[p]), t.bsCount[p] = t.sCount[p] + 1 + (v ? 1 : 0), u.push(t.sCount[p]), t.sCount[p] = T - E, c.push(t.tShift[p]), t.tShift[p] = i - t.bMarks[p];
      continue;
    }
    if (h)
      break;
    let b = !1;
    for (let E = 0, v = d.length; E < v; E++)
      if (d[E](t, p, n, !0)) {
        b = !0;
        break;
      }
    if (b) {
      t.lineMax = p, t.blkIndent !== 0 && (a.push(t.bMarks[p]), l.push(t.bsCount[p]), c.push(t.tShift[p]), u.push(t.sCount[p]), t.sCount[p] -= t.blkIndent);
      break;
    }
    a.push(t.bMarks[p]), l.push(t.bsCount[p]), c.push(t.tShift[p]), u.push(t.sCount[p]), t.sCount[p] = -1;
  }
  const g = t.blkIndent;
  t.blkIndent = 0;
  const m = t.push("blockquote_open", "blockquote", 1);
  m.markup = ">";
  const y = [e, 0];
  m.map = y, t.md.block.tokenize(t, e, p);
  const x = t.push("blockquote_close", "blockquote", -1);
  x.markup = ">", t.lineMax = o, t.parentType = f, y[1] = t.line;
  for (let k = 0; k < c.length; k++)
    t.bMarks[k + e] = a[k], t.tShift[k + e] = c[k], t.sCount[k + e] = u[k], t.bsCount[k + e] = l[k];
  return t.blkIndent = g, !0;
}
function $M(t, e, n, r) {
  const i = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let s = t.bMarks[e] + t.tShift[e];
  const o = t.src.charCodeAt(s++);
  if (o !== 42 && o !== 45 && o !== 95)
    return !1;
  let a = 1;
  for (; s < i; ) {
    const u = t.src.charCodeAt(s++);
    if (u !== o && !Me(u))
      return !1;
    u === o && a++;
  }
  if (a < 3)
    return !1;
  if (r)
    return !0;
  t.line = e + 1;
  const l = t.push("hr", "hr", 0);
  return l.map = [e, t.line], l.markup = Array(a + 1).join(String.fromCharCode(o)), !0;
}
function yp(t, e) {
  const n = t.eMarks[e];
  let r = t.bMarks[e] + t.tShift[e];
  const i = t.src.charCodeAt(r++);
  if (i !== 42 && i !== 45 && i !== 43)
    return -1;
  if (r < n) {
    const s = t.src.charCodeAt(r);
    if (!Me(s))
      return -1;
  }
  return r;
}
function xp(t, e) {
  const n = t.bMarks[e] + t.tShift[e], r = t.eMarks[e];
  let i = n;
  if (i + 1 >= r)
    return -1;
  let s = t.src.charCodeAt(i++);
  if (s < 48 || s > 57)
    return -1;
  for (; ; ) {
    if (i >= r)
      return -1;
    if (s = t.src.charCodeAt(i++), s >= 48 && s <= 57) {
      if (i - n >= 10)
        return -1;
      continue;
    }
    if (s === 41 || s === 46)
      break;
    return -1;
  }
  return i < r && (s = t.src.charCodeAt(i), !Me(s)) ? -1 : i;
}
function zM(t, e) {
  const n = t.level + 2;
  for (let r = e + 2, i = t.tokens.length - 2; r < i; r++)
    t.tokens[r].level === n && t.tokens[r].type === "paragraph_open" && (t.tokens[r + 2].hidden = !0, t.tokens[r].hidden = !0, r += 2);
}
function VM(t, e, n, r) {
  let i, s, o, a, l = e, u = !0;
  if (t.sCount[l] - t.blkIndent >= 4 || t.listIndent >= 0 && t.sCount[l] - t.listIndent >= 4 && t.sCount[l] < t.blkIndent)
    return !1;
  let c = !1;
  r && t.parentType === "paragraph" && t.sCount[l] >= t.blkIndent && (c = !0);
  let d, f, h;
  if ((h = xp(t, l)) >= 0) {
    if (d = !0, o = t.bMarks[l] + t.tShift[l], f = Number(t.src.slice(o, h - 1)), c && f !== 1)
      return !1;
  } else if ((h = yp(t, l)) >= 0)
    d = !1;
  else
    return !1;
  if (c && t.skipSpaces(h) >= t.eMarks[l])
    return !1;
  if (r)
    return !0;
  const p = t.src.charCodeAt(h - 1), g = t.tokens.length;
  d ? (a = t.push("ordered_list_open", "ol", 1), f !== 1 && (a.attrs = [["start", f]])) : a = t.push("bullet_list_open", "ul", 1);
  const m = [l, 0];
  a.map = m, a.markup = String.fromCharCode(p);
  let y = !1;
  const x = t.md.block.ruler.getRules("list"), k = t.parentType;
  for (t.parentType = "list"; l < n; ) {
    s = h, i = t.eMarks[l];
    const b = t.sCount[l] + h - (t.bMarks[l] + t.tShift[l]);
    let E = b;
    for (; s < i; ) {
      const z = t.src.charCodeAt(s);
      if (z === 9)
        E += 4 - (E + t.bsCount[l]) % 4;
      else if (z === 32)
        E++;
      else
        break;
      s++;
    }
    const v = s;
    let _;
    v >= i ? _ = 1 : _ = E - b, _ > 4 && (_ = 1);
    const T = b + _;
    a = t.push("list_item_open", "li", 1), a.markup = String.fromCharCode(p);
    const w = [l, 0];
    a.map = w, d && (a.info = t.src.slice(o, h - 1));
    const N = t.tight, $ = t.tShift[l], K = t.sCount[l], U = t.listIndent;
    if (t.listIndent = t.blkIndent, t.blkIndent = T, t.tight = !0, t.tShift[l] = v - t.bMarks[l], t.sCount[l] = E, v >= i && t.isEmpty(l + 1) ? t.line = Math.min(t.line + 2, n) : t.md.block.tokenize(t, l, n, !0), (!t.tight || y) && (u = !1), y = t.line - l > 1 && t.isEmpty(t.line - 1), t.blkIndent = t.listIndent, t.listIndent = U, t.tShift[l] = $, t.sCount[l] = K, t.tight = N, a = t.push("list_item_close", "li", -1), a.markup = String.fromCharCode(p), l = t.line, w[1] = l, l >= n || t.sCount[l] < t.blkIndent || t.sCount[l] - t.blkIndent >= 4)
      break;
    let W = !1;
    for (let z = 0, A = x.length; z < A; z++)
      if (x[z](t, l, n, !0)) {
        W = !0;
        break;
      }
    if (W)
      break;
    if (d) {
      if (h = xp(t, l), h < 0)
        break;
      o = t.bMarks[l] + t.tShift[l];
    } else if (h = yp(t, l), h < 0)
      break;
    if (p !== t.src.charCodeAt(h - 1))
      break;
  }
  return d ? a = t.push("ordered_list_close", "ol", -1) : a = t.push("bullet_list_close", "ul", -1), a.markup = String.fromCharCode(p), m[1] = l, t.line = l, t.parentType = k, u && zM(t, g), !0;
}
function UM(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e], o = e + 1;
  if (t.sCount[e] - t.blkIndent >= 4 || t.src.charCodeAt(i) !== 91)
    return !1;
  function a(x) {
    const k = t.lineMax;
    if (x >= k || t.isEmpty(x))
      return null;
    let b = !1;
    if (t.sCount[x] - t.blkIndent > 3 && (b = !0), t.sCount[x] < 0 && (b = !0), !b) {
      const _ = t.md.block.ruler.getRules("reference"), T = t.parentType;
      t.parentType = "reference";
      let w = !1;
      for (let N = 0, $ = _.length; N < $; N++)
        if (_[N](t, x, k, !0)) {
          w = !0;
          break;
        }
      if (t.parentType = T, w)
        return null;
    }
    const E = t.bMarks[x] + t.tShift[x], v = t.eMarks[x];
    return t.src.slice(E, v + 1);
  }
  let l = t.src.slice(i, s + 1);
  s = l.length;
  let u = -1;
  for (i = 1; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 91)
      return !1;
    if (x === 93) {
      u = i;
      break;
    } else if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (x === 92 && (i++, i < s && l.charCodeAt(i) === 10)) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    }
  }
  if (u < 0 || l.charCodeAt(u + 1) !== 58)
    return !1;
  for (i = u + 2; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (!Me(x))
      break;
  }
  const c = t.md.helpers.parseLinkDestination(l, i, s);
  if (!c.ok)
    return !1;
  const d = t.md.normalizeLink(c.str);
  if (!t.md.validateLink(d))
    return !1;
  i = c.pos;
  const f = i, h = o, p = i;
  for (; i < s; i++) {
    const x = l.charCodeAt(i);
    if (x === 10) {
      const k = a(o);
      k !== null && (l += k, s = l.length, o++);
    } else if (!Me(x))
      break;
  }
  let g = t.md.helpers.parseLinkTitle(l, i, s);
  for (; g.can_continue; ) {
    const x = a(o);
    if (x === null)
      break;
    l += x, i = s, s = l.length, o++, g = t.md.helpers.parseLinkTitle(l, i, s, g);
  }
  let m;
  for (i < s && p !== i && g.ok ? (m = g.str, i = g.pos) : (m = "", i = f, o = h); i < s; ) {
    const x = l.charCodeAt(i);
    if (!Me(x))
      break;
    i++;
  }
  if (i < s && l.charCodeAt(i) !== 10 && m)
    for (m = "", i = f, o = h; i < s; ) {
      const x = l.charCodeAt(i);
      if (!Me(x))
        break;
      i++;
    }
  if (i < s && l.charCodeAt(i) !== 10)
    return !1;
  const y = za(l.slice(1, u));
  return y ? (r || (typeof t.env.references > "u" && (t.env.references = {}), typeof t.env.references[y] > "u" && (t.env.references[y] = { title: m, href: d }), t.line = o), !0) : !1;
}
const qM = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], ZM = "[a-zA-Z_:][a-zA-Z0-9:._-]*", KM = "[^\"'=<>`\\x00-\\x20]+", WM = "'[^']*'", jM = '"[^"]*"', GM = "(?:" + KM + "|" + WM + "|" + jM + ")", JM = "(?:\\s+" + ZM + "(?:\\s*=\\s*" + GM + ")?)", Dm = "<[A-Za-z][A-Za-z0-9\\-]*" + JM + "*\\s*\\/?>", Om = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", YM = "<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->", XM = "<[?][\\s\\S]*?[?]>", QM = "<![A-Za-z][^>]*>", e7 = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", t7 = new RegExp("^(?:" + Dm + "|" + Om + "|" + YM + "|" + XM + "|" + QM + "|" + e7 + ")"), n7 = new RegExp("^(?:" + Dm + "|" + Om + ")"), Hr = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, !0],
  [/^<!--/, /-->/, !0],
  [/^<\?/, /\?>/, !0],
  [/^<![A-Z]/, />/, !0],
  [/^<!\[CDATA\[/, /\]\]>/, !0],
  [new RegExp("^</?(" + qM.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, !0],
  [new RegExp(n7.source + "\\s*$"), /^$/, !1]
];
function r7(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4 || !t.md.options.html || t.src.charCodeAt(i) !== 60)
    return !1;
  let o = t.src.slice(i, s), a = 0;
  for (; a < Hr.length && !Hr[a][0].test(o); a++)
    ;
  if (a === Hr.length)
    return !1;
  if (r)
    return Hr[a][2];
  let l = e + 1;
  if (!Hr[a][1].test(o)) {
    for (; l < n && !(t.sCount[l] < t.blkIndent); l++)
      if (i = t.bMarks[l] + t.tShift[l], s = t.eMarks[l], o = t.src.slice(i, s), Hr[a][1].test(o)) {
        o.length !== 0 && l++;
        break;
      }
  }
  t.line = l;
  const u = t.push("html_block", "", 0);
  return u.map = [e, l], u.content = t.getLines(e, l, t.blkIndent, !0), !0;
}
function i7(t, e, n, r) {
  let i = t.bMarks[e] + t.tShift[e], s = t.eMarks[e];
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  let o = t.src.charCodeAt(i);
  if (o !== 35 || i >= s)
    return !1;
  let a = 1;
  for (o = t.src.charCodeAt(++i); o === 35 && i < s && a <= 6; )
    a++, o = t.src.charCodeAt(++i);
  if (a > 6 || i < s && !Me(o))
    return !1;
  if (r)
    return !0;
  s = t.skipSpacesBack(s, i);
  const l = t.skipCharsBack(s, 35, i);
  l > i && Me(t.src.charCodeAt(l - 1)) && (s = l), t.line = e + 1;
  const u = t.push("heading_open", "h" + String(a), 1);
  u.markup = "########".slice(0, a), u.map = [e, t.line];
  const c = t.push("inline", "", 0);
  c.content = t.src.slice(i, s).trim(), c.map = [e, t.line], c.children = [];
  const d = t.push("heading_close", "h" + String(a), -1);
  return d.markup = "########".slice(0, a), !0;
}
function s7(t, e, n) {
  const r = t.md.block.ruler.getRules("paragraph");
  if (t.sCount[e] - t.blkIndent >= 4)
    return !1;
  const i = t.parentType;
  t.parentType = "paragraph";
  let s = 0, o, a = e + 1;
  for (; a < n && !t.isEmpty(a); a++) {
    if (t.sCount[a] - t.blkIndent > 3)
      continue;
    if (t.sCount[a] >= t.blkIndent) {
      let h = t.bMarks[a] + t.tShift[a];
      const p = t.eMarks[a];
      if (h < p && (o = t.src.charCodeAt(h), (o === 45 || o === 61) && (h = t.skipChars(h, o), h = t.skipSpaces(h), h >= p))) {
        s = o === 61 ? 1 : 2;
        break;
      }
    }
    if (t.sCount[a] < 0)
      continue;
    let f = !1;
    for (let h = 0, p = r.length; h < p; h++)
      if (r[h](t, a, n, !0)) {
        f = !0;
        break;
      }
    if (f)
      break;
  }
  if (!s)
    return !1;
  const l = t.getLines(e, a, t.blkIndent, !1).trim();
  t.line = a + 1;
  const u = t.push("heading_open", "h" + String(s), 1);
  u.markup = String.fromCharCode(o), u.map = [e, t.line];
  const c = t.push("inline", "", 0);
  c.content = l, c.map = [e, t.line - 1], c.children = [];
  const d = t.push("heading_close", "h" + String(s), -1);
  return d.markup = String.fromCharCode(o), t.parentType = i, !0;
}
function o7(t, e, n) {
  const r = t.md.block.ruler.getRules("paragraph"), i = t.parentType;
  let s = e + 1;
  for (t.parentType = "paragraph"; s < n && !t.isEmpty(s); s++) {
    if (t.sCount[s] - t.blkIndent > 3 || t.sCount[s] < 0)
      continue;
    let u = !1;
    for (let c = 0, d = r.length; c < d; c++)
      if (r[c](t, s, n, !0)) {
        u = !0;
        break;
      }
    if (u)
      break;
  }
  const o = t.getLines(e, s, t.blkIndent, !1).trim();
  t.line = s;
  const a = t.push("paragraph_open", "p", 1);
  a.map = [e, t.line];
  const l = t.push("inline", "", 0);
  return l.content = o, l.map = [e, t.line], l.children = [], t.push("paragraph_close", "p", -1), t.parentType = i, !0;
}
const ro = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", FM, ["paragraph", "reference"]],
  ["code", HM],
  ["fence", BM, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", PM, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", $M, ["paragraph", "reference", "blockquote", "list"]],
  ["list", VM, ["paragraph", "reference", "blockquote"]],
  ["reference", UM],
  ["html_block", r7, ["paragraph", "reference", "blockquote"]],
  ["heading", i7, ["paragraph", "reference", "blockquote"]],
  ["lheading", s7],
  ["paragraph", o7]
];
function Va() {
  this.ruler = new bt();
  for (let t = 0; t < ro.length; t++)
    this.ruler.push(ro[t][0], ro[t][1], { alt: (ro[t][2] || []).slice() });
}
Va.prototype.tokenize = function(t, e, n) {
  const r = this.ruler.getRules(""), i = r.length, s = t.md.options.maxNesting;
  let o = e, a = !1;
  for (; o < n && (t.line = o = t.skipEmptyLines(o), !(o >= n || t.sCount[o] < t.blkIndent)); ) {
    if (t.level >= s) {
      t.line = n;
      break;
    }
    const l = t.line;
    let u = !1;
    for (let c = 0; c < i; c++)
      if (u = r[c](t, o, n, !1), u) {
        if (l >= t.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!u)
      throw new Error("none of the block rules matched");
    t.tight = !a, t.isEmpty(t.line - 1) && (a = !0), o = t.line, o < n && t.isEmpty(o) && (a = !0, o++, t.line = o);
  }
};
Va.prototype.parse = function(t, e, n, r) {
  if (!t)
    return;
  const i = new this.State(t, e, n, r);
  this.tokenize(i, i.line, i.lineMax);
};
Va.prototype.State = fn;
function Ms(t, e, n, r) {
  this.src = t, this.env = n, this.md = e, this.tokens = r, this.tokens_meta = Array(r.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = !1, this.linkLevel = 0;
}
Ms.prototype.pushPending = function() {
  const t = new qt("text", "", 0);
  return t.content = this.pending, t.level = this.pendingLevel, this.tokens.push(t), this.pending = "", t;
};
Ms.prototype.push = function(t, e, n) {
  this.pending && this.pushPending();
  const r = new qt(t, e, n);
  let i = null;
  return n < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), r.level = this.level, n > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], i = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(r), this.tokens_meta.push(i), r;
};
Ms.prototype.scanDelims = function(t, e) {
  const n = this.posMax, r = this.src.charCodeAt(t), i = t > 0 ? this.src.charCodeAt(t - 1) : 32;
  let s = t;
  for (; s < n && this.src.charCodeAt(s) === r; )
    s++;
  const o = s - t, a = s < n ? this.src.charCodeAt(s) : 32, l = hs(i) || fs(String.fromCharCode(i)), u = hs(a) || fs(String.fromCharCode(a)), c = ds(i), d = ds(a), f = !d && (!u || c || l), h = !c && (!l || d || u);
  return { can_open: f && (e || !h || l), can_close: h && (e || !f || u), length: o };
};
Ms.prototype.Token = qt;
function a7(t) {
  switch (t) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
function l7(t, e) {
  let n = t.pos;
  for (; n < t.posMax && !a7(t.src.charCodeAt(n)); )
    n++;
  return n === t.pos ? !1 : (e || (t.pending += t.src.slice(t.pos, n)), t.pos = n, !0);
}
const u7 = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function c7(t, e) {
  if (!t.md.options.linkify || t.linkLevel > 0)
    return !1;
  const n = t.pos, r = t.posMax;
  if (n + 3 > r || t.src.charCodeAt(n) !== 58 || t.src.charCodeAt(n + 1) !== 47 || t.src.charCodeAt(n + 2) !== 47)
    return !1;
  const i = t.pending.match(u7);
  if (!i)
    return !1;
  const s = i[1], o = t.md.linkify.matchAtStart(t.src.slice(n - s.length));
  if (!o)
    return !1;
  let a = o.url;
  if (a.length <= s.length)
    return !1;
  a = a.replace(/\*+$/, "");
  const l = t.md.normalizeLink(a);
  if (!t.md.validateLink(l))
    return !1;
  if (!e) {
    t.pending = t.pending.slice(0, -s.length);
    const u = t.push("link_open", "a", 1);
    u.attrs = [["href", l]], u.markup = "linkify", u.info = "auto";
    const c = t.push("text", "", 0);
    c.content = t.md.normalizeLinkText(a);
    const d = t.push("link_close", "a", -1);
    d.markup = "linkify", d.info = "auto";
  }
  return t.pos += a.length - s.length, !0;
}
function d7(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 10)
    return !1;
  const r = t.pending.length - 1, i = t.posMax;
  if (!e)
    if (r >= 0 && t.pending.charCodeAt(r) === 32)
      if (r >= 1 && t.pending.charCodeAt(r - 1) === 32) {
        let s = r - 1;
        for (; s >= 1 && t.pending.charCodeAt(s - 1) === 32; )
          s--;
        t.pending = t.pending.slice(0, s), t.push("hardbreak", "br", 0);
      } else
        t.pending = t.pending.slice(0, -1), t.push("softbreak", "br", 0);
    else
      t.push("softbreak", "br", 0);
  for (n++; n < i && Me(t.src.charCodeAt(n)); )
    n++;
  return t.pos = n, !0;
}
const Qc = [];
for (let t = 0; t < 256; t++)
  Qc.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(t) {
  Qc[t.charCodeAt(0)] = 1;
});
function f7(t, e) {
  let n = t.pos;
  const r = t.posMax;
  if (t.src.charCodeAt(n) !== 92 || (n++, n >= r))
    return !1;
  let i = t.src.charCodeAt(n);
  if (i === 10) {
    for (e || t.push("hardbreak", "br", 0), n++; n < r && (i = t.src.charCodeAt(n), !!Me(i)); )
      n++;
    return t.pos = n, !0;
  }
  let s = t.src[n];
  if (i >= 55296 && i <= 56319 && n + 1 < r) {
    const a = t.src.charCodeAt(n + 1);
    a >= 56320 && a <= 57343 && (s += t.src[n + 1], n++);
  }
  const o = "\\" + s;
  if (!e) {
    const a = t.push("text_special", "", 0);
    i < 256 && Qc[i] !== 0 ? a.content = s : a.content = o, a.markup = o, a.info = "escape";
  }
  return t.pos = n + 1, !0;
}
function h7(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 96)
    return !1;
  const i = n;
  n++;
  const s = t.posMax;
  for (; n < s && t.src.charCodeAt(n) === 96; )
    n++;
  const o = t.src.slice(i, n), a = o.length;
  if (t.backticksScanned && (t.backticks[a] || 0) <= i)
    return e || (t.pending += o), t.pos += a, !0;
  let l = n, u;
  for (; (u = t.src.indexOf("`", l)) !== -1; ) {
    for (l = u + 1; l < s && t.src.charCodeAt(l) === 96; )
      l++;
    const c = l - u;
    if (c === a) {
      if (!e) {
        const d = t.push("code_inline", "code", 0);
        d.markup = o, d.content = t.src.slice(n, u).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      return t.pos = l, !0;
    }
    t.backticks[c] = u;
  }
  return t.backticksScanned = !0, e || (t.pending += o), t.pos += a, !0;
}
function p7(t, e) {
  const n = t.pos, r = t.src.charCodeAt(n);
  if (e || r !== 126)
    return !1;
  const i = t.scanDelims(t.pos, !0);
  let s = i.length;
  const o = String.fromCharCode(r);
  if (s < 2)
    return !1;
  let a;
  s % 2 && (a = t.push("text", "", 0), a.content = o, s--);
  for (let l = 0; l < s; l += 2)
    a = t.push("text", "", 0), a.content = o + o, t.delimiters.push({
      marker: r,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: t.tokens.length - 1,
      end: -1,
      open: i.can_open,
      close: i.can_close
    });
  return t.pos += i.length, !0;
}
function kp(t, e) {
  let n;
  const r = [], i = e.length;
  for (let s = 0; s < i; s++) {
    const o = e[s];
    if (o.marker !== 126 || o.end === -1)
      continue;
    const a = e[o.end];
    n = t.tokens[o.token], n.type = "s_open", n.tag = "s", n.nesting = 1, n.markup = "~~", n.content = "", n = t.tokens[a.token], n.type = "s_close", n.tag = "s", n.nesting = -1, n.markup = "~~", n.content = "", t.tokens[a.token - 1].type === "text" && t.tokens[a.token - 1].content === "~" && r.push(a.token - 1);
  }
  for (; r.length; ) {
    const s = r.pop();
    let o = s + 1;
    for (; o < t.tokens.length && t.tokens[o].type === "s_close"; )
      o++;
    o--, s !== o && (n = t.tokens[o], t.tokens[o] = t.tokens[s], t.tokens[s] = n);
  }
}
function g7(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  kp(t, t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && kp(t, e[r].delimiters);
}
const Nm = {
  tokenize: p7,
  postProcess: g7
};
function m7(t, e) {
  const n = t.pos, r = t.src.charCodeAt(n);
  if (e || r !== 95 && r !== 42)
    return !1;
  const i = t.scanDelims(t.pos, r === 42);
  for (let s = 0; s < i.length; s++) {
    const o = t.push("text", "", 0);
    o.content = String.fromCharCode(r), t.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: r,
      // Total length of these series of delimiters.
      //
      length: i.length,
      // A position of the token this delimiter corresponds to.
      //
      token: t.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: i.can_open,
      close: i.can_close
    });
  }
  return t.pos += i.length, !0;
}
function vp(t, e) {
  const n = e.length;
  for (let r = n - 1; r >= 0; r--) {
    const i = e[r];
    if (i.marker !== 95 && i.marker !== 42 || i.end === -1)
      continue;
    const s = e[i.end], o = r > 0 && e[r - 1].end === i.end + 1 && // check that first two markers match and adjacent
    e[r - 1].marker === i.marker && e[r - 1].token === i.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e[i.end + 1].token === s.token + 1, a = String.fromCharCode(i.marker), l = t.tokens[i.token];
    l.type = o ? "strong_open" : "em_open", l.tag = o ? "strong" : "em", l.nesting = 1, l.markup = o ? a + a : a, l.content = "";
    const u = t.tokens[s.token];
    u.type = o ? "strong_close" : "em_close", u.tag = o ? "strong" : "em", u.nesting = -1, u.markup = o ? a + a : a, u.content = "", o && (t.tokens[e[r - 1].token].content = "", t.tokens[e[i.end + 1].token].content = "", r--);
  }
}
function b7(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  vp(t, t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && vp(t, e[r].delimiters);
}
const Lm = {
  tokenize: m7,
  postProcess: b7
};
function y7(t, e) {
  let n, r, i, s, o = "", a = "", l = t.pos, u = !0;
  if (t.src.charCodeAt(t.pos) !== 91)
    return !1;
  const c = t.pos, d = t.posMax, f = t.pos + 1, h = t.md.helpers.parseLinkLabel(t, t.pos, !0);
  if (h < 0)
    return !1;
  let p = h + 1;
  if (p < d && t.src.charCodeAt(p) === 40) {
    for (u = !1, p++; p < d && (n = t.src.charCodeAt(p), !(!Me(n) && n !== 10)); p++)
      ;
    if (p >= d)
      return !1;
    if (l = p, i = t.md.helpers.parseLinkDestination(t.src, p, t.posMax), i.ok) {
      for (o = t.md.normalizeLink(i.str), t.md.validateLink(o) ? p = i.pos : o = "", l = p; p < d && (n = t.src.charCodeAt(p), !(!Me(n) && n !== 10)); p++)
        ;
      if (i = t.md.helpers.parseLinkTitle(t.src, p, t.posMax), p < d && l !== p && i.ok)
        for (a = i.str, p = i.pos; p < d && (n = t.src.charCodeAt(p), !(!Me(n) && n !== 10)); p++)
          ;
    }
    (p >= d || t.src.charCodeAt(p) !== 41) && (u = !0), p++;
  }
  if (u) {
    if (typeof t.env.references > "u")
      return !1;
    if (p < d && t.src.charCodeAt(p) === 91 ? (l = p + 1, p = t.md.helpers.parseLinkLabel(t, p), p >= 0 ? r = t.src.slice(l, p++) : p = h + 1) : p = h + 1, r || (r = t.src.slice(f, h)), s = t.env.references[za(r)], !s)
      return t.pos = c, !1;
    o = s.href, a = s.title;
  }
  if (!e) {
    t.pos = f, t.posMax = h;
    const g = t.push("link_open", "a", 1), m = [["href", o]];
    g.attrs = m, a && m.push(["title", a]), t.linkLevel++, t.md.inline.tokenize(t), t.linkLevel--, t.push("link_close", "a", -1);
  }
  return t.pos = p, t.posMax = d, !0;
}
function x7(t, e) {
  let n, r, i, s, o, a, l, u, c = "";
  const d = t.pos, f = t.posMax;
  if (t.src.charCodeAt(t.pos) !== 33 || t.src.charCodeAt(t.pos + 1) !== 91)
    return !1;
  const h = t.pos + 2, p = t.md.helpers.parseLinkLabel(t, t.pos + 1, !1);
  if (p < 0)
    return !1;
  if (s = p + 1, s < f && t.src.charCodeAt(s) === 40) {
    for (s++; s < f && (n = t.src.charCodeAt(s), !(!Me(n) && n !== 10)); s++)
      ;
    if (s >= f)
      return !1;
    for (u = s, a = t.md.helpers.parseLinkDestination(t.src, s, t.posMax), a.ok && (c = t.md.normalizeLink(a.str), t.md.validateLink(c) ? s = a.pos : c = ""), u = s; s < f && (n = t.src.charCodeAt(s), !(!Me(n) && n !== 10)); s++)
      ;
    if (a = t.md.helpers.parseLinkTitle(t.src, s, t.posMax), s < f && u !== s && a.ok)
      for (l = a.str, s = a.pos; s < f && (n = t.src.charCodeAt(s), !(!Me(n) && n !== 10)); s++)
        ;
    else
      l = "";
    if (s >= f || t.src.charCodeAt(s) !== 41)
      return t.pos = d, !1;
    s++;
  } else {
    if (typeof t.env.references > "u")
      return !1;
    if (s < f && t.src.charCodeAt(s) === 91 ? (u = s + 1, s = t.md.helpers.parseLinkLabel(t, s), s >= 0 ? i = t.src.slice(u, s++) : s = p + 1) : s = p + 1, i || (i = t.src.slice(h, p)), o = t.env.references[za(i)], !o)
      return t.pos = d, !1;
    c = o.href, l = o.title;
  }
  if (!e) {
    r = t.src.slice(h, p);
    const g = [];
    t.md.inline.parse(
      r,
      t.md,
      t.env,
      g
    );
    const m = t.push("image", "img", 0), y = [["src", c], ["alt", ""]];
    m.attrs = y, m.children = g, m.content = r, l && y.push(["title", l]);
  }
  return t.pos = s, t.posMax = f, !0;
}
const k7 = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, v7 = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function E7(t, e) {
  let n = t.pos;
  if (t.src.charCodeAt(n) !== 60)
    return !1;
  const r = t.pos, i = t.posMax;
  for (; ; ) {
    if (++n >= i)
      return !1;
    const o = t.src.charCodeAt(n);
    if (o === 60)
      return !1;
    if (o === 62)
      break;
  }
  const s = t.src.slice(r + 1, n);
  if (v7.test(s)) {
    const o = t.md.normalizeLink(s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const u = t.push("link_close", "a", -1);
      u.markup = "autolink", u.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  if (k7.test(s)) {
    const o = t.md.normalizeLink("mailto:" + s);
    if (!t.md.validateLink(o))
      return !1;
    if (!e) {
      const a = t.push("link_open", "a", 1);
      a.attrs = [["href", o]], a.markup = "autolink", a.info = "auto";
      const l = t.push("text", "", 0);
      l.content = t.md.normalizeLinkText(s);
      const u = t.push("link_close", "a", -1);
      u.markup = "autolink", u.info = "auto";
    }
    return t.pos += s.length + 2, !0;
  }
  return !1;
}
function C7(t) {
  return /^<a[>\s]/i.test(t);
}
function _7(t) {
  return /^<\/a\s*>/i.test(t);
}
function w7(t) {
  const e = t | 32;
  return e >= 97 && e <= 122;
}
function S7(t, e) {
  if (!t.md.options.html)
    return !1;
  const n = t.posMax, r = t.pos;
  if (t.src.charCodeAt(r) !== 60 || r + 2 >= n)
    return !1;
  const i = t.src.charCodeAt(r + 1);
  if (i !== 33 && i !== 63 && i !== 47 && !w7(i))
    return !1;
  const s = t.src.slice(r).match(t7);
  if (!s)
    return !1;
  if (!e) {
    const o = t.push("html_inline", "", 0);
    o.content = s[0], C7(o.content) && t.linkLevel++, _7(o.content) && t.linkLevel--;
  }
  return t.pos += s[0].length, !0;
}
const A7 = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, M7 = /^&([a-z][a-z0-9]{1,31});/i;
function T7(t, e) {
  const n = t.pos, r = t.posMax;
  if (t.src.charCodeAt(n) !== 38 || n + 1 >= r)
    return !1;
  if (t.src.charCodeAt(n + 1) === 35) {
    const s = t.src.slice(n).match(A7);
    if (s) {
      if (!e) {
        const o = s[1][0].toLowerCase() === "x" ? parseInt(s[1].slice(1), 16) : parseInt(s[1], 10), a = t.push("text_special", "", 0);
        a.content = Yc(o) ? sa(o) : sa(65533), a.markup = s[0], a.info = "entity";
      }
      return t.pos += s[0].length, !0;
    }
  } else {
    const s = t.src.slice(n).match(M7);
    if (s) {
      const o = Ra(s[0]);
      if (o !== s[0]) {
        if (!e) {
          const a = t.push("text_special", "", 0);
          a.content = o, a.markup = s[0], a.info = "entity";
        }
        return t.pos += s[0].length, !0;
      }
    }
  }
  return !1;
}
function Ep(t) {
  const e = {}, n = t.length;
  if (!n)
    return;
  let r = 0, i = -2;
  const s = [];
  for (let o = 0; o < n; o++) {
    const a = t[o];
    if (s.push(0), (t[r].marker !== a.marker || i !== a.token - 1) && (r = o), i = a.token, a.length = a.length || 0, !a.close)
      continue;
    e.hasOwnProperty(a.marker) || (e[a.marker] = [-1, -1, -1, -1, -1, -1]);
    const l = e[a.marker][(a.open ? 3 : 0) + a.length % 3];
    let u = r - s[r] - 1, c = u;
    for (; u > l; u -= s[u] + 1) {
      const d = t[u];
      if (d.marker === a.marker && d.open && d.end < 0) {
        let f = !1;
        if ((d.close || a.open) && (d.length + a.length) % 3 === 0 && (d.length % 3 !== 0 || a.length % 3 !== 0) && (f = !0), !f) {
          const h = u > 0 && !t[u - 1].open ? s[u - 1] + 1 : 0;
          s[o] = o - u + h, s[u] = h, a.open = !1, d.end = o, d.close = !1, c = -1, i = -2;
          break;
        }
      }
    }
    c !== -1 && (e[a.marker][(a.open ? 3 : 0) + (a.length || 0) % 3] = c);
  }
}
function D7(t) {
  const e = t.tokens_meta, n = t.tokens_meta.length;
  Ep(t.delimiters);
  for (let r = 0; r < n; r++)
    e[r] && e[r].delimiters && Ep(e[r].delimiters);
}
function O7(t) {
  let e, n, r = 0;
  const i = t.tokens, s = t.tokens.length;
  for (e = n = 0; e < s; e++)
    i[e].nesting < 0 && r--, i[e].level = r, i[e].nesting > 0 && r++, i[e].type === "text" && e + 1 < s && i[e + 1].type === "text" ? i[e + 1].content = i[e].content + i[e + 1].content : (e !== n && (i[n] = i[e]), n++);
  e !== n && (i.length = n);
}
const Zl = [
  ["text", l7],
  ["linkify", c7],
  ["newline", d7],
  ["escape", f7],
  ["backticks", h7],
  ["strikethrough", Nm.tokenize],
  ["emphasis", Lm.tokenize],
  ["link", y7],
  ["image", x7],
  ["autolink", E7],
  ["html_inline", S7],
  ["entity", T7]
], Kl = [
  ["balance_pairs", D7],
  ["strikethrough", Nm.postProcess],
  ["emphasis", Lm.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", O7]
];
function Ts() {
  this.ruler = new bt();
  for (let t = 0; t < Zl.length; t++)
    this.ruler.push(Zl[t][0], Zl[t][1]);
  this.ruler2 = new bt();
  for (let t = 0; t < Kl.length; t++)
    this.ruler2.push(Kl[t][0], Kl[t][1]);
}
Ts.prototype.skipToken = function(t) {
  const e = t.pos, n = this.ruler.getRules(""), r = n.length, i = t.md.options.maxNesting, s = t.cache;
  if (typeof s[e] < "u") {
    t.pos = s[e];
    return;
  }
  let o = !1;
  if (t.level < i) {
    for (let a = 0; a < r; a++)
      if (t.level++, o = n[a](t, !0), t.level--, o) {
        if (e >= t.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    t.pos = t.posMax;
  o || t.pos++, s[e] = t.pos;
};
Ts.prototype.tokenize = function(t) {
  const e = this.ruler.getRules(""), n = e.length, r = t.posMax, i = t.md.options.maxNesting;
  for (; t.pos < r; ) {
    const s = t.pos;
    let o = !1;
    if (t.level < i) {
      for (let a = 0; a < n; a++)
        if (o = e[a](t, !1), o) {
          if (s >= t.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (o) {
      if (t.pos >= r)
        break;
      continue;
    }
    t.pending += t.src[t.pos++];
  }
  t.pending && t.pushPending();
};
Ts.prototype.parse = function(t, e, n, r) {
  const i = new this.State(t, e, n, r);
  this.tokenize(i);
  const s = this.ruler2.getRules(""), o = s.length;
  for (let a = 0; a < o; a++)
    s[a](i);
};
Ts.prototype.State = Ms;
function N7(t) {
  const e = {};
  t = t || {}, e.src_Any = Em.source, e.src_Cc = Cm.source, e.src_Z = wm.source, e.src_P = Gc.source, e.src_ZPCc = [e.src_Z, e.src_P, e.src_Cc].join("|"), e.src_ZCc = [e.src_Z, e.src_Cc].join("|");
  const n = "[><｜]";
  return e.src_pseudo_letter = "(?:(?!" + n + "|" + e.src_ZPCc + ")" + e.src_Any + ")", e.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e.src_auth = "(?:(?:(?!" + e.src_ZCc + "|[@/\\[\\]()]).)+@)?", e.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e.src_host_terminator = "(?=$|" + n + "|" + e.src_ZPCc + ")(?!" + (t["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e.src_ZPCc + "))", e.src_path = "(?:[/?#](?:(?!" + e.src_ZCc + "|" + n + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e.src_ZCc + "|[']).)+\\'|\\'(?=" + e.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e.src_ZCc + "|[.]|$)|" + (t["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + // allow `,,,` in paths
  ",(?!" + e.src_ZCc + "|$)|;(?!" + e.src_ZCc + "|$)|\\!+(?!" + e.src_ZCc + "|[!]|$)|\\?(?!" + e.src_ZCc + "|[?]|$))+|\\/)?", e.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e.src_xn = "xn--[a-z0-9\\-]{1,59}", e.src_domain_root = // Allow letters & digits (http://test1)
  "(?:" + e.src_xn + "|" + e.src_pseudo_letter + "{1,63})", e.src_domain = "(?:" + e.src_xn + "|(?:" + e.src_pseudo_letter + ")|(?:" + e.src_pseudo_letter + "(?:-|" + e.src_pseudo_letter + "){0,61}" + e.src_pseudo_letter + "))", e.src_host = "(?:(?:(?:(?:" + e.src_domain + ")\\.)*" + e.src_domain + "))", e.tpl_host_fuzzy = "(?:" + e.src_ip4 + "|(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%)))", e.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%))", e.src_host_strict = e.src_host + e.src_host_terminator, e.tpl_host_fuzzy_strict = e.tpl_host_fuzzy + e.src_host_terminator, e.src_host_port_strict = e.src_host + e.src_port + e.src_host_terminator, e.tpl_host_port_fuzzy_strict = e.tpl_host_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_port_no_ip_fuzzy_strict = e.tpl_host_no_ip_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e.src_ZPCc + "|>|$))", e.tpl_email_fuzzy = "(^|" + n + '|"|\\(|' + e.src_ZCc + ")(" + e.src_email_name + "@" + e.tpl_host_fuzzy_strict + ")", e.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_fuzzy_strict + e.src_path + ")", e.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_no_ip_fuzzy_strict + e.src_path + ")", e;
}
function Hu(t) {
  return Array.prototype.slice.call(arguments, 1).forEach(function(n) {
    n && Object.keys(n).forEach(function(r) {
      t[r] = n[r];
    });
  }), t;
}
function Ua(t) {
  return Object.prototype.toString.call(t);
}
function L7(t) {
  return Ua(t) === "[object String]";
}
function R7(t) {
  return Ua(t) === "[object Object]";
}
function I7(t) {
  return Ua(t) === "[object RegExp]";
}
function Cp(t) {
  return Ua(t) === "[object Function]";
}
function F7(t) {
  return t.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
const Rm = {
  fuzzyLink: !0,
  fuzzyEmail: !0,
  fuzzyIP: !1
};
function H7(t) {
  return Object.keys(t || {}).reduce(function(e, n) {
    return e || Rm.hasOwnProperty(n);
  }, !1);
}
const B7 = {
  "http:": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.http || (n.re.http = new RegExp(
        "^\\/\\/" + n.re.src_auth + n.re.src_host_port_strict + n.re.src_path,
        "i"
      )), n.re.http.test(r) ? r.match(n.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.no_http || (n.re.no_http = new RegExp(
        "^" + n.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + n.re.src_domain + ")\\.)+" + n.re.src_domain_root + ")" + n.re.src_port + n.re.src_host_terminator + n.re.src_path,
        "i"
      )), n.re.no_http.test(r) ? e >= 3 && t[e - 3] === ":" || e >= 3 && t[e - 3] === "/" ? 0 : r.match(n.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(t, e, n) {
      const r = t.slice(e);
      return n.re.mailto || (n.re.mailto = new RegExp(
        "^" + n.re.src_email_name + "@" + n.re.src_host_strict,
        "i"
      )), n.re.mailto.test(r) ? r.match(n.re.mailto)[0].length : 0;
    }
  }
}, P7 = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", $7 = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function z7(t) {
  t.__index__ = -1, t.__text_cache__ = "";
}
function V7(t) {
  return function(e, n) {
    const r = e.slice(n);
    return t.test(r) ? r.match(t)[0].length : 0;
  };
}
function _p() {
  return function(t, e) {
    e.normalize(t);
  };
}
function oa(t) {
  const e = t.re = N7(t.__opts__), n = t.__tlds__.slice();
  t.onCompile(), t.__tlds_replaced__ || n.push(P7), n.push(e.src_xn), e.src_tlds = n.join("|");
  function r(a) {
    return a.replace("%TLDS%", e.src_tlds);
  }
  e.email_fuzzy = RegExp(r(e.tpl_email_fuzzy), "i"), e.link_fuzzy = RegExp(r(e.tpl_link_fuzzy), "i"), e.link_no_ip_fuzzy = RegExp(r(e.tpl_link_no_ip_fuzzy), "i"), e.host_fuzzy_test = RegExp(r(e.tpl_host_fuzzy_test), "i");
  const i = [];
  t.__compiled__ = {};
  function s(a, l) {
    throw new Error('(LinkifyIt) Invalid schema "' + a + '": ' + l);
  }
  Object.keys(t.__schemas__).forEach(function(a) {
    const l = t.__schemas__[a];
    if (l === null)
      return;
    const u = { validate: null, link: null };
    if (t.__compiled__[a] = u, R7(l)) {
      I7(l.validate) ? u.validate = V7(l.validate) : Cp(l.validate) ? u.validate = l.validate : s(a, l), Cp(l.normalize) ? u.normalize = l.normalize : l.normalize ? s(a, l) : u.normalize = _p();
      return;
    }
    if (L7(l)) {
      i.push(a);
      return;
    }
    s(a, l);
  }), i.forEach(function(a) {
    t.__compiled__[t.__schemas__[a]] && (t.__compiled__[a].validate = t.__compiled__[t.__schemas__[a]].validate, t.__compiled__[a].normalize = t.__compiled__[t.__schemas__[a]].normalize);
  }), t.__compiled__[""] = { validate: null, normalize: _p() };
  const o = Object.keys(t.__compiled__).filter(function(a) {
    return a.length > 0 && t.__compiled__[a];
  }).map(F7).join("|");
  t.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "i"), t.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "ig"), t.re.schema_at_start = RegExp("^" + t.re.schema_search.source, "i"), t.re.pretest = RegExp(
    "(" + t.re.schema_test.source + ")|(" + t.re.host_fuzzy_test.source + ")|@",
    "i"
  ), z7(t);
}
function U7(t, e) {
  const n = t.__index__, r = t.__last_index__, i = t.__text_cache__.slice(n, r);
  this.schema = t.__schema__.toLowerCase(), this.index = n + e, this.lastIndex = r + e, this.raw = i, this.text = i, this.url = i;
}
function Bu(t, e) {
  const n = new U7(t, e);
  return t.__compiled__[n.schema].normalize(n, t), n;
}
function wt(t, e) {
  if (!(this instanceof wt))
    return new wt(t, e);
  e || H7(t) && (e = t, t = {}), this.__opts__ = Hu({}, Rm, e), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = Hu({}, B7, t), this.__compiled__ = {}, this.__tlds__ = $7, this.__tlds_replaced__ = !1, this.re = {}, oa(this);
}
wt.prototype.add = function(e, n) {
  return this.__schemas__[e] = n, oa(this), this;
};
wt.prototype.set = function(e) {
  return this.__opts__ = Hu(this.__opts__, e), this;
};
wt.prototype.test = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return !1;
  let n, r, i, s, o, a, l, u, c;
  if (this.re.schema_test.test(e)) {
    for (l = this.re.schema_search, l.lastIndex = 0; (n = l.exec(e)) !== null; )
      if (s = this.testSchemaAt(e, n[2], l.lastIndex), s) {
        this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + s;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (u = e.search(this.re.host_fuzzy_test), u >= 0 && (this.__index__ < 0 || u < this.__index__) && (r = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (o = r.index + r[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = "", this.__index__ = o, this.__last_index__ = r.index + r[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (c = e.indexOf("@"), c >= 0 && (i = e.match(this.re.email_fuzzy)) !== null && (o = i.index + i[1].length, a = i.index + i[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && a > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = o, this.__last_index__ = a))), this.__index__ >= 0;
};
wt.prototype.pretest = function(e) {
  return this.re.pretest.test(e);
};
wt.prototype.testSchemaAt = function(e, n, r) {
  return this.__compiled__[n.toLowerCase()] ? this.__compiled__[n.toLowerCase()].validate(e, r, this) : 0;
};
wt.prototype.match = function(e) {
  const n = [];
  let r = 0;
  this.__index__ >= 0 && this.__text_cache__ === e && (n.push(Bu(this, r)), r = this.__last_index__);
  let i = r ? e.slice(r) : e;
  for (; this.test(i); )
    n.push(Bu(this, r)), i = i.slice(this.__last_index__), r += this.__last_index__;
  return n.length ? n : null;
};
wt.prototype.matchAtStart = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return null;
  const n = this.re.schema_at_start.exec(e);
  if (!n)
    return null;
  const r = this.testSchemaAt(e, n[2], n[0].length);
  return r ? (this.__schema__ = n[2], this.__index__ = n.index + n[1].length, this.__last_index__ = n.index + n[0].length + r, Bu(this, 0)) : null;
};
wt.prototype.tlds = function(e, n) {
  return e = Array.isArray(e) ? e : [e], n ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function(r, i, s) {
    return r !== s[i - 1];
  }).reverse(), oa(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, oa(this), this);
};
wt.prototype.normalize = function(e) {
  e.schema || (e.url = "http://" + e.url), e.schema === "mailto:" && !/^mailto:/i.test(e.url) && (e.url = "mailto:" + e.url);
};
wt.prototype.onCompile = function() {
};
const q7 = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, Z7 = {
  options: {
    // Enable HTML tags in source
    html: !1,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !1,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, K7 = {
  options: {
    // Enable HTML tags in source
    html: !0,
    // Use '/' to close single tags (<br />)
    xhtmlOut: !0,
    // Convert '\n' in paragraphs into <br>
    breaks: !1,
    // CSS language prefix for fenced blocks
    langPrefix: "language-",
    // autoconvert URL-like texts to links
    linkify: !1,
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, W7 = {
  default: q7,
  zero: Z7,
  commonmark: K7
}, j7 = /^(vbscript|javascript|file|data):/, G7 = /^data:image\/(gif|png|jpeg|webp);/;
function J7(t) {
  const e = t.trim().toLowerCase();
  return j7.test(e) ? G7.test(e) : !0;
}
const Im = ["http:", "https:", "mailto:"];
function Y7(t) {
  const e = jc(t, !0);
  if (e.hostname && (!e.protocol || Im.indexOf(e.protocol) >= 0))
    try {
      e.hostname = Pa.toASCII(e.hostname);
    } catch {
    }
  return As(Wc(e));
}
function X7(t) {
  const e = jc(t, !0);
  if (e.hostname && (!e.protocol || Im.indexOf(e.protocol) >= 0))
    try {
      e.hostname = Pa.toUnicode(e.hostname);
    } catch {
    }
  return hi(Wc(e), hi.defaultChars + "%");
}
function St(t, e) {
  if (!(this instanceof St))
    return new St(t, e);
  e || Jc(t) || (e = t || {}, t = "default"), this.inline = new Ts(), this.block = new Va(), this.core = new Xc(), this.renderer = new xi(), this.linkify = new wt(), this.validateLink = J7, this.normalizeLink = Y7, this.normalizeLinkText = X7, this.utils = dM, this.helpers = $a({}, gM), this.options = {}, this.configure(t), e && this.set(e);
}
St.prototype.set = function(t) {
  return $a(this.options, t), this;
};
St.prototype.configure = function(t) {
  const e = this;
  if (Jc(t)) {
    const n = t;
    if (t = W7[n], !t)
      throw new Error('Wrong `markdown-it` preset "' + n + '", check name');
  }
  if (!t)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return t.options && e.set(t.options), t.components && Object.keys(t.components).forEach(function(n) {
    t.components[n].rules && e[n].ruler.enableOnly(t.components[n].rules), t.components[n].rules2 && e[n].ruler2.enableOnly(t.components[n].rules2);
  }), this;
};
St.prototype.enable = function(t, e) {
  let n = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    n = n.concat(this[i].ruler.enable(t, !0));
  }, this), n = n.concat(this.inline.ruler2.enable(t, !0));
  const r = t.filter(function(i) {
    return n.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + r);
  return this;
};
St.prototype.disable = function(t, e) {
  let n = [];
  Array.isArray(t) || (t = [t]), ["core", "block", "inline"].forEach(function(i) {
    n = n.concat(this[i].ruler.disable(t, !0));
  }, this), n = n.concat(this.inline.ruler2.disable(t, !0));
  const r = t.filter(function(i) {
    return n.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + r);
  return this;
};
St.prototype.use = function(t) {
  const e = [this].concat(Array.prototype.slice.call(arguments, 1));
  return t.apply(t, e), this;
};
St.prototype.parse = function(t, e) {
  if (typeof t != "string")
    throw new Error("Input data should be a String");
  const n = new this.core.State(t, this, e);
  return this.core.process(n), n.tokens;
};
St.prototype.render = function(t, e) {
  return e = e || {}, this.renderer.render(this.parse(t, e), this.options, e);
};
St.prototype.parseInline = function(t, e) {
  const n = new this.core.State(t, this, e);
  return n.inlineMode = !0, this.core.process(n), n.tokens;
};
St.prototype.renderInline = function(t, e) {
  return e = e || {}, this.renderer.render(this.parseInline(t, e), this.options, e);
};
var Pu = !0, Fm = !1, Hm = !1, Q7 = function(t, e) {
  e && (Pu = !e.enabled, Fm = !!e.label, Hm = !!e.labelAfter), t.core.ruler.after("inline", "github-task-lists", function(n) {
    for (var r = n.tokens, i = 2; i < r.length; i++)
      tT(r, i) && (nT(r[i], n.Token), wp(r[i - 2], "class", "task-list-item" + (Pu ? "" : " enabled")), wp(r[eT(r, i - 2)], "class", "contains-task-list"));
  });
};
function wp(t, e, n) {
  var r = t.attrIndex(e), i = [e, n];
  r < 0 ? t.attrPush(i) : t.attrs[r] = i;
}
function eT(t, e) {
  for (var n = t[e].level - 1, r = e - 1; r >= 0; r--)
    if (t[r].level === n)
      return r;
  return -1;
}
function tT(t, e) {
  return aT(t[e]) && lT(t[e - 1]) && uT(t[e - 2]) && cT(t[e]);
}
function nT(t, e) {
  if (t.children.unshift(rT(t, e)), t.children[1].content = t.children[1].content.slice(3), t.content = t.content.slice(3), Fm)
    if (Hm) {
      t.children.pop();
      var n = "task-item-" + Math.ceil(Math.random() * (1e4 * 1e3) - 1e3);
      t.children[0].content = t.children[0].content.slice(0, -1) + ' id="' + n + '">', t.children.push(oT(t.content, n, e));
    } else
      t.children.unshift(iT(e)), t.children.push(sT(e));
}
function rT(t, e) {
  var n = new e("html_inline", "", 0), r = Pu ? ' disabled="" ' : "";
  return t.content.indexOf("[ ] ") === 0 ? n.content = '<input class="task-list-item-checkbox"' + r + 'type="checkbox">' : (t.content.indexOf("[x] ") === 0 || t.content.indexOf("[X] ") === 0) && (n.content = '<input class="task-list-item-checkbox" checked=""' + r + 'type="checkbox">'), n;
}
function iT(t) {
  var e = new t("html_inline", "", 0);
  return e.content = "<label>", e;
}
function sT(t) {
  var e = new t("html_inline", "", 0);
  return e.content = "</label>", e;
}
function oT(t, e, n) {
  var r = new n("html_inline", "", 0);
  return r.content = '<label class="task-list-item-label" for="' + e + '">' + t + "</label>", r.attrs = [{ for: e }], r;
}
function aT(t) {
  return t.type === "inline";
}
function lT(t) {
  return t.type === "paragraph_open";
}
function uT(t) {
  return t.type === "list_item_open";
}
function cT(t) {
  return t.content.indexOf("[ ] ") === 0 || t.content.indexOf("[x] ") === 0 || t.content.indexOf("[X] ") === 0;
}
const dT = /* @__PURE__ */ Cs(Q7);
var fT = Object.defineProperty, hT = (t, e, n) => e in t ? fT(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, aa = (t, e, n) => (hT(t, typeof e != "symbol" ? e + "" : e, n), n);
const pT = xe.create({
  name: "markdownTightLists",
  addOptions: () => ({
    tight: !0,
    tightClass: "tight",
    listTypes: ["bulletList", "orderedList"]
  }),
  addGlobalAttributes() {
    return [{
      types: this.options.listTypes,
      attributes: {
        tight: {
          default: this.options.tight,
          parseHTML: (t) => t.getAttribute("data-tight") === "true" || !t.querySelector("p"),
          renderHTML: (t) => ({
            class: t.tight ? this.options.tightClass : null,
            "data-tight": t.tight ? "true" : null
          })
        }
      }
    }];
  },
  addCommands() {
    var t = this;
    return {
      toggleTight: function() {
        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        return (n) => {
          let {
            editor: r,
            commands: i
          } = n;
          function s(o) {
            if (!r.isActive(o))
              return !1;
            const a = r.getAttributes(o);
            return i.updateAttributes(o, {
              tight: e ?? !(a != null && a.tight)
            });
          }
          return t.options.listTypes.some((o) => s(o));
        };
      }
    };
  }
}), Sp = St();
function Bm(t, e) {
  return Sp.inline.State.prototype.scanDelims.call({
    src: t,
    posMax: t.length
  }), new Sp.inline.State(t, null, null, []).scanDelims(e, !0);
}
function Pm(t, e, n, r) {
  let i = t.substring(0, n) + t.substring(n + e.length);
  return i = i.substring(0, n + r) + e + i.substring(n + r), i;
}
function gT(t, e, n, r) {
  let i = n, s = t;
  for (; i < r && !Bm(s, i).can_open; )
    s = Pm(s, e, i, 1), i++;
  return {
    text: s,
    from: i,
    to: r
  };
}
function mT(t, e, n, r) {
  let i = r, s = t;
  for (; i > n && !Bm(s, i).can_close; )
    s = Pm(s, e, i, -1), i--;
  return {
    text: s,
    from: n,
    to: i
  };
}
function bT(t, e, n, r) {
  let i = {
    text: t,
    from: n,
    to: r
  };
  return i = gT(i.text, e, i.from, i.to), i = mT(i.text, e, i.from, i.to), i.to - i.from < e.length + 1 && (i.text = i.text.substring(0, i.from) + i.text.substring(i.to + e.length)), i.text;
}
class yT extends vm {
  constructor(e, n, r) {
    super(e, n, r ?? {}), aa(this, "inTable", !1), this.inlines = [];
  }
  render(e, n, r) {
    super.render(e, n, r);
    const i = this.inlines[this.inlines.length - 1];
    if (i != null && i.start && i !== null && i !== void 0 && i.end) {
      const {
        delimiter: s,
        start: o,
        end: a
      } = this.normalizeInline(i);
      this.out = bT(this.out, s, o, a), this.inlines.pop();
    }
  }
  markString(e, n, r, i) {
    const s = this.marks[e.type.name];
    if (s.expelEnclosingWhitespace)
      if (n)
        this.inlines.push({
          start: this.out.length,
          delimiter: s.open
        });
      else {
        const o = this.inlines.pop();
        this.inlines.push({
          ...o,
          end: this.out.length
        });
      }
    return super.markString(e, n, r, i);
  }
  normalizeInline(e) {
    let {
      start: n,
      end: r
    } = e;
    for (; this.out.charAt(n).match(/\s/); )
      n++;
    return {
      ...e,
      start: n
    };
  }
}
const $m = Ie.create({
  name: "markdownHTMLMark",
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: {
          open(t, e) {
            var n, r;
            return this.editor.storage.markdown.options.html ? (n = (r = Ap(e)) === null || r === void 0 ? void 0 : r[0]) !== null && n !== void 0 ? n : "" : (console.warn(`Tiptap Markdown: "${e.type.name}" mark is only available in html mode`), "");
          },
          close(t, e) {
            var n, r;
            return this.editor.storage.markdown.options.html && (n = (r = Ap(e)) === null || r === void 0 ? void 0 : r[1]) !== null && n !== void 0 ? n : "";
          }
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function Ap(t) {
  const e = t.type.schema, n = e.text(" ", [t]), i = sc(O.from(n), e).match(/^(<.*?>) (<\/.*?>)$/);
  return i ? [i[1], i[2]] : null;
}
function ed(t) {
  const e = `<body>${t}</body>`;
  return new window.DOMParser().parseFromString(e, "text/html").body;
}
function xT(t) {
  return t == null ? void 0 : t.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function kT(t) {
  const e = t.parentElement, n = e.cloneNode();
  for (; e.firstChild && e.firstChild !== t; )
    n.appendChild(e.firstChild);
  n.childNodes.length > 0 && e.parentElement.insertBefore(n, e), e.parentElement.insertBefore(t, e), e.childNodes.length === 0 && e.remove();
}
function vT(t) {
  const e = t.parentNode;
  for (; t.firstChild; )
    e.insertBefore(t.firstChild, t);
  e.removeChild(t);
}
const qa = ue.create({
  name: "markdownHTMLNode",
  addStorage() {
    return {
      markdown: {
        serialize(t, e, n) {
          this.editor.storage.markdown.options.html ? t.write(ET(e, n)) : (console.warn(`Tiptap Markdown: "${e.type.name}" node is only available in html mode`), t.write(`[${e.type.name}]`)), e.isBlock && t.closeBlock(e);
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function ET(t, e) {
  const n = t.type.schema, r = sc(O.from(t), n);
  return t.isBlock && (e instanceof O || e.type.name === n.topNodeType.name) ? CT(r) : r;
}
function CT(t) {
  const n = ed(t).firstElementChild;
  return n.innerHTML = n.innerHTML.trim() ? `
${n.innerHTML}
` : `
`, n.outerHTML;
}
const _T = ue.create({
  name: "blockquote"
}), wT = _T.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.blockquote,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), ST = ue.create({
  name: "bulletList"
}), zm = ST.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e) {
          return t.renderList(e, "  ", () => (this.editor.storage.markdown.options.bulletListMarker || "-") + " ");
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), AT = ue.create({
  name: "codeBlock"
}), MT = AT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e) {
          t.write("```" + (e.attrs.language || "") + `
`), t.text(e.textContent, !1), t.ensureNewLine(), t.write("```"), t.closeBlock(e);
        },
        parse: {
          setup(t) {
            var e;
            t.set({
              langPrefix: (e = this.options.languageClassPrefix) !== null && e !== void 0 ? e : "language-"
            });
          },
          updateDOM(t) {
            t.innerHTML = t.innerHTML.replace(/\n<\/code><\/pre>/g, "</code></pre>");
          }
        }
      }
    };
  }
}), TT = ue.create({
  name: "hardBreak"
}), Vm = TT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e, n, r) {
          for (let i = r + 1; i < n.childCount; i++)
            if (n.child(i).type != e.type) {
              t.write(t.inTable ? qa.storage.markdown.serialize.call(this, t, e, n) : `\\
`);
              return;
            }
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), DT = ue.create({
  name: "heading"
}), OT = DT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.heading,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), NT = ue.create({
  name: "horizontalRule"
}), LT = NT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.horizontal_rule,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), RT = ue.create({
  name: "image"
}), IT = RT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.image,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), FT = ue.create({
  name: "listItem"
}), HT = FT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.list_item,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), BT = ue.create({
  name: "orderedList"
});
function PT(t, e, n) {
  let r = 0;
  for (; n - r > 0 && e.child(n - r - 1).type.name === t.type.name; r++)
    ;
  return r;
}
const $T = BT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e, n, r) {
          const i = e.attrs.start || 1, s = String(i + e.childCount - 1).length, o = t.repeat(" ", s + 2), l = PT(e, n, r) % 2 ? ") " : ". ";
          t.renderList(e, o, (u) => {
            const c = String(i + u);
            return t.repeat(" ", s - c.length) + c + l;
          });
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), zT = ue.create({
  name: "paragraph"
}), VT = zT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.nodes.paragraph,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function Wl(t) {
  var e, n;
  return (e = t == null || (n = t.content) === null || n === void 0 ? void 0 : n.content) !== null && e !== void 0 ? e : [];
}
const UT = ue.create({
  name: "table"
}), qT = UT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e, n) {
          if (!ZT(e)) {
            qa.storage.markdown.serialize.call(this, t, e, n);
            return;
          }
          t.inTable = !0, e.forEach((r, i, s) => {
            if (t.write("| "), r.forEach((o, a, l) => {
              l && t.write(" | ");
              const u = o.firstChild;
              u.textContent.trim() && t.renderInline(u);
            }), t.write(" |"), t.ensureNewLine(), !s) {
              const o = Array.from({
                length: r.childCount
              }).map(() => "---").join(" | ");
              t.write(`| ${o} |`), t.ensureNewLine();
            }
          }), t.closeBlock(e), t.inTable = !1;
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function Mp(t) {
  return t.attrs.colspan > 1 || t.attrs.rowspan > 1;
}
function ZT(t) {
  const e = Wl(t), n = e[0], r = e.slice(1);
  return !(Wl(n).some((i) => i.type.name !== "tableHeader" || Mp(i) || i.childCount > 1) || r.some((i) => Wl(i).some((s) => s.type.name === "tableHeader" || Mp(s) || s.childCount > 1)));
}
const KT = ue.create({
  name: "taskItem"
}), WT = KT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e) {
          const n = e.attrs.checked ? "[x]" : "[ ]";
          t.write(`${n} `), t.renderContent(e);
        },
        parse: {
          updateDOM(t) {
            [...t.querySelectorAll(".task-list-item")].forEach((e) => {
              const n = e.querySelector("input");
              e.setAttribute("data-type", "taskItem"), n && (e.setAttribute("data-checked", n.checked), n.remove());
            });
          }
        }
      }
    };
  }
}), jT = ue.create({
  name: "taskList"
}), GT = jT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: zm.storage.markdown.serialize,
        parse: {
          setup(t) {
            t.use(dT);
          },
          updateDOM(t) {
            [...t.querySelectorAll(".contains-task-list")].forEach((e) => {
              e.setAttribute("data-type", "taskList");
            });
          }
        }
      }
    };
  }
}), JT = ue.create({
  name: "text"
}), YT = JT.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(t, e) {
          t.text(xT(e.text));
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), XT = Ie.create({
  name: "bold"
}), QT = XT.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.marks.strong,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), eD = Ie.create({
  name: "code"
}), tD = eD.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.marks.code,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), nD = Ie.create({
  name: "italic"
}), rD = nD.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.marks.em,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), iD = Ie.create({
  name: "link"
}), sD = iD.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: cn.marks.link,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), oD = Ie.create({
  name: "strike"
}), aD = oD.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: {
          open: "~~",
          close: "~~",
          expelEnclosingWhitespace: !0
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), lD = [wT, zm, MT, Vm, OT, LT, qa, IT, HT, $T, VT, qT, WT, GT, YT, QT, tD, $m, rD, sD, aD];
function la(t) {
  var e, n;
  const r = (e = t.storage) === null || e === void 0 ? void 0 : e.markdown, i = (n = lD.find((s) => s.name === t.name)) === null || n === void 0 ? void 0 : n.storage.markdown;
  return r || i ? {
    ...i,
    ...r
  } : null;
}
class uD {
  constructor(e) {
    aa(this, "editor", null), this.editor = e;
  }
  serialize(e) {
    const n = new yT(this.nodes, this.marks, {
      hardBreakNodeName: Vm.name
    });
    return n.renderContent(e), n.out;
  }
  get nodes() {
    var e;
    return {
      ...Object.fromEntries(Object.keys(this.editor.schema.nodes).map((n) => [n, this.serializeNode(qa)])),
      ...Object.fromEntries((e = this.editor.extensionManager.extensions.filter((n) => n.type === "node" && this.serializeNode(n)).map((n) => [n.name, this.serializeNode(n)])) !== null && e !== void 0 ? e : [])
    };
  }
  get marks() {
    var e;
    return {
      ...Object.fromEntries(Object.keys(this.editor.schema.marks).map((n) => [n, this.serializeMark($m)])),
      ...Object.fromEntries((e = this.editor.extensionManager.extensions.filter((n) => n.type === "mark" && this.serializeMark(n)).map((n) => [n.name, this.serializeMark(n)])) !== null && e !== void 0 ? e : [])
    };
  }
  serializeNode(e) {
    var n;
    return (n = la(e)) === null || n === void 0 || (n = n.serialize) === null || n === void 0 ? void 0 : n.bind({
      editor: this.editor,
      options: e.options
    });
  }
  serializeMark(e) {
    var n;
    const r = (n = la(e)) === null || n === void 0 ? void 0 : n.serialize;
    return r ? {
      ...r,
      open: typeof r.open == "function" ? r.open.bind({
        editor: this.editor,
        options: e.options
      }) : r.open,
      close: typeof r.close == "function" ? r.close.bind({
        editor: this.editor,
        options: e.options
      }) : r.close
    } : null;
  }
}
class cD {
  constructor(e, n) {
    aa(this, "editor", null), aa(this, "md", null);
    let {
      html: r,
      linkify: i,
      breaks: s
    } = n;
    this.editor = e, this.md = this.withPatchedRenderer(St({
      html: r,
      linkify: i,
      breaks: s
    }));
  }
  parse(e) {
    let {
      inline: n
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (typeof e == "string") {
      this.editor.extensionManager.extensions.forEach((s) => {
        var o;
        return (o = la(s)) === null || o === void 0 || (o = o.parse) === null || o === void 0 || (o = o.setup) === null || o === void 0 ? void 0 : o.call({
          editor: this.editor,
          options: s.options
        }, this.md);
      });
      const r = this.md.render(e), i = ed(r);
      return this.editor.extensionManager.extensions.forEach((s) => {
        var o;
        return (o = la(s)) === null || o === void 0 || (o = o.parse) === null || o === void 0 || (o = o.updateDOM) === null || o === void 0 ? void 0 : o.call({
          editor: this.editor,
          options: s.options
        }, i);
      }), this.normalizeDOM(i, {
        inline: n,
        content: e
      }), i.innerHTML;
    }
    return e;
  }
  normalizeDOM(e, n) {
    let {
      inline: r,
      content: i
    } = n;
    return this.normalizeBlocks(e), e.querySelectorAll("*").forEach((s) => {
      var o;
      ((o = s.nextSibling) === null || o === void 0 ? void 0 : o.nodeType) === Node.TEXT_NODE && !s.closest("pre") && (s.nextSibling.textContent = s.nextSibling.textContent.replace(/^\n/, ""));
    }), r && this.normalizeInline(e, i), e;
  }
  normalizeBlocks(e) {
    const r = Object.values(this.editor.schema.nodes).filter((i) => i.isBlock).map((i) => {
      var s;
      return (s = i.spec.parseDOM) === null || s === void 0 ? void 0 : s.map((o) => o.tag);
    }).flat().filter(Boolean).join(",");
    r && [...e.querySelectorAll(r)].forEach((i) => {
      i.parentElement.matches("p") && kT(i);
    });
  }
  normalizeInline(e, n) {
    var r;
    if ((r = e.firstElementChild) !== null && r !== void 0 && r.matches("p")) {
      var i, s, o, a;
      const l = e.firstElementChild, {
        nextElementSibling: u
      } = l, c = (i = (s = n.match(/^\s+/)) === null || s === void 0 ? void 0 : s[0]) !== null && i !== void 0 ? i : "", d = u ? "" : (o = (a = n.match(/\s+$/)) === null || a === void 0 ? void 0 : a[0]) !== null && o !== void 0 ? o : "";
      if (n.match(/^\n\n/)) {
        l.innerHTML = `${l.innerHTML}${d}`;
        return;
      }
      vT(l), e.innerHTML = `${c}${e.innerHTML}${d}`;
    }
  }
  /**
   * @param {markdownit} md
   */
  withPatchedRenderer(e) {
    const n = (r) => function() {
      const i = r(...arguments);
      return i === `
` ? i : i[i.length - 1] === `
` ? i.slice(0, -1) : i;
    };
    return e.renderer.rules.hardbreak = n(e.renderer.rules.hardbreak), e.renderer.rules.softbreak = n(e.renderer.rules.softbreak), e.renderer.rules.fence = n(e.renderer.rules.fence), e.renderer.rules.code_block = n(e.renderer.rules.code_block), e.renderer.renderToken = n(e.renderer.renderToken.bind(e.renderer)), e;
  }
}
const dD = xe.create({
  name: "markdownClipboard",
  addOptions() {
    return {
      transformPastedText: !1,
      transformCopiedText: !1
    };
  },
  addProseMirrorPlugins() {
    return [new we({
      key: new Te("markdownClipboard"),
      props: {
        clipboardTextParser: (t, e, n) => {
          if (n || !this.options.transformPastedText)
            return null;
          const r = this.editor.storage.markdown.parser.parse(t, {
            inline: !0
          });
          return ps.fromSchema(this.editor.schema).parseSlice(ed(r), {
            preserveWhitespace: !0,
            context: e
          });
        },
        /**
         * @param {import('prosemirror-model').Slice} slice
         */
        clipboardTextSerializer: (t) => this.options.transformCopiedText ? this.editor.storage.markdown.serializer.serialize(t.content) : null
      }
    })];
  }
}), fD = xe.create({
  name: "markdown",
  priority: 50,
  addOptions() {
    return {
      html: !0,
      tightLists: !0,
      tightListClass: "tight",
      bulletListMarker: "-",
      linkify: !1,
      breaks: !1,
      transformPastedText: !1,
      transformCopiedText: !1
    };
  },
  addCommands() {
    const t = T3.Commands.config.addCommands();
    return {
      setContent: (e, n, r) => (i) => t.setContent(i.editor.storage.markdown.parser.parse(e), n, r)(i),
      insertContentAt: (e, n, r) => (i) => t.insertContentAt(e, i.editor.storage.markdown.parser.parse(n, {
        inline: !0
      }), r)(i)
    };
  },
  onBeforeCreate() {
    this.editor.storage.markdown = {
      options: {
        ...this.options
      },
      parser: new cD(this.editor, this.options),
      serializer: new uD(this.editor),
      getMarkdown: () => this.editor.storage.markdown.serializer.serialize(this.editor.state.doc)
    }, this.editor.options.initialContent = this.editor.options.content, this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);
  },
  onCreate() {
    this.editor.options.content = this.editor.options.initialContent, delete this.editor.options.initialContent;
  },
  addStorage() {
    return {
      /// storage will be defined in onBeforeCreate() to prevent initial object overriding
    };
  },
  addExtensions() {
    return [pT.configure({
      tight: this.options.tightLists,
      tightClass: this.options.tightListClass
    }), dD.configure({
      transformPastedText: this.options.transformPastedText,
      transformCopiedText: this.options.transformCopiedText
    })];
  }
});
var hD = function(e, n, r) {
  function i(h) {
    return h.trim().split(" ", 2)[0] === n;
  }
  function s(h, p, g, m, y) {
    return h[p].nesting === 1 && h[p].attrJoin("class", n), y.renderToken(h, p, g, m, y);
  }
  r = r || {};
  var o = 3, a = r.marker || ":", l = a.charCodeAt(0), u = a.length, c = r.validate || i, d = r.render || s;
  function f(h, p, g, m) {
    var y, x, k, b, E, v, _, T, w = !1, N = h.bMarks[p] + h.tShift[p], $ = h.eMarks[p];
    if (l !== h.src.charCodeAt(N))
      return !1;
    for (y = N + 1; y <= $ && a[(y - N) % u] === h.src[y]; y++)
      ;
    if (k = Math.floor((y - N) / u), k < o || (y -= (y - N) % u, b = h.src.slice(N, y), E = h.src.slice(y, $), !c(E, b)))
      return !1;
    if (m)
      return !0;
    for (x = p; x++, !(x >= g || (N = h.bMarks[x] + h.tShift[x], $ = h.eMarks[x], N < $ && h.sCount[x] < h.blkIndent)); )
      if (l === h.src.charCodeAt(N) && !(h.sCount[x] - h.blkIndent >= 4)) {
        for (y = N + 1; y <= $ && a[(y - N) % u] === h.src[y]; y++)
          ;
        if (!(Math.floor((y - N) / u) < k) && (y -= (y - N) % u, y = h.skipSpaces(y), !(y < $))) {
          w = !0;
          break;
        }
      }
    return _ = h.parentType, T = h.lineMax, h.parentType = "container", h.lineMax = x, v = h.push("container_" + n + "_open", "div", 1), v.markup = b, v.block = !0, v.info = E, v.map = [p, x], h.md.block.tokenize(h, p + 1, x), v = h.push("container_" + n + "_close", "div", -1), v.markup = h.src.slice(N, y), v.block = !0, h.parentType = _, h.lineMax = T, h.line = x + (w ? 1 : 0), !0;
  }
  e.block.ruler.before("fence", "container_" + n, f, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  }), e.renderer.rules["container_" + n + "_open"] = d, e.renderer.rules["container_" + n + "_close"] = d;
};
const pD = /* @__PURE__ */ Cs(hD), gD = /^:::([a-z]+)?[\s\n]$/, mD = ue.create({
  name: "container",
  group: "block",
  content: "block+",
  defining: !0,
  addOptions() {
    return {
      classes: ["info", "warning", "danger"],
      HTMLAttributes: {
        class: "container-wrapper"
      }
    };
  },
  addStorage() {
    return {
      markdown: {
        serialize(t, e) {
          t.write("::: " + (e.attrs.containerClass || "") + `
`), t.renderContent(e), t.flushClose(1), t.write(":::"), t.closeBlock(e);
        },
        parse: {
          setup: (t) => {
            this.options.classes.forEach((e) => {
              t.use(pD, e);
            });
          }
        }
      }
    };
  },
  addAttributes() {
    return {
      containerClass: {
        default: null,
        parseHTML: (t) => [...t.classList].find((e) => this.options.classes.includes(e)),
        renderHTML: (t) => ({
          class: t.containerClass
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "div",
        getAttrs: (t) => {
          const e = t, n = ["container-wrapper"].concat(this.options.classes);
          return [...e.classList].find((r) => n.includes(r)) ? null : !1;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["div", le(this.options.HTMLAttributes, t), 0];
  },
  addCommands() {
    return {
      setContainer: (t) => ({ commands: e }) => e.wrapIn(this.name, { containerClass: t }),
      toggleContainer: (t) => ({ commands: e }) => e.toggleWrap(this.name, { containerClass: t }),
      unsetContainer: () => ({ commands: t }) => t.lift(this.name)
    };
  },
  addInputRules() {
    return [
      kr({
        find: gD,
        type: this.type,
        getAttributes: (t) => ({
          containerClass: t[1]
        })
      })
    ];
  }
}), bD = P1.extend({
  addAttributes() {
    var t;
    return {
      ...(t = this.parent) == null ? void 0 : t.call(this),
      id: {
        default: null
      }
    };
  }
}), yD = xe.create({
  name: "saveExt",
  addKeyboardShortcuts() {
    return {
      "Mod-s": ({ editor: t }) => this.options.onSave ? this.options.onSave(t.aiEditor) : !1
    };
  }
}), xD = ue.create({
  name: "figure",
  content: "block+",
  group: "block",
  defining: !0,
  draggable: !0,
  selectable: !0,
  addOptions() {
    return {
      HTMLAttributes: {
        dir: "auto"
      }
    };
  },
  parseHTML() {
    return [{ tag: "figure" }];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["figure", le(this.options.HTMLAttributes, t), 0];
  }
}), kD = ue.create({
  name: "figcaption",
  content: "inline*",
  group: "block",
  defining: !0,
  addOptions() {
    return {
      HTMLAttributes: {
        dir: "auto"
      }
    };
  },
  parseHTML() {
    return [{ tag: "figcaption" }];
  },
  renderHTML({ HTMLAttributes: t }) {
    return ["figcaption", le(this.options.HTMLAttributes, t), 0];
  }
}), vD = (t, e) => {
  var r, i, s, o, a, l, u, c, d, f, h, p, g, m, y, x, k, b, E, v, _, T, w, N, $, K;
  const n = [zC.configure({
    codeBlock: !1,
    heading: !1
  })];
  return n.push(
    VC,
    UC,
    qC,
    bD,
    jC.configure({
      uploadUrl: (r = e.attachment) == null ? void 0 : r.uploadUrl,
      uploadHeaders: (i = e.attachment) == null ? void 0 : i.uploadHeaders,
      uploadFormName: (s = e.attachment) == null ? void 0 : s.uploadFormName,
      uploader: ((o = e.attachment) == null ? void 0 : o.uploader) || e.uploader,
      uploaderEvent: (a = e.attachment) == null ? void 0 : a.uploaderEvent
    }),
    GC,
    qS,
    XC.configure({
      multicolor: !0
    }),
    QC,
    e_,
    t_,
    n_.configure({
      types: ["heading", "paragraph"]
    }),
    r_,
    o_.configure({
      allowBase64: typeof ((l = e.image) == null ? void 0 : l.allowBase64) > "u" ? !0 : (u = e.image) == null ? void 0 : u.allowBase64,
      defaultSize: ((c = e.image) == null ? void 0 : c.defaultSize) || 350,
      uploadUrl: (d = e.image) == null ? void 0 : d.uploadUrl,
      uploadHeaders: (f = e.image) == null ? void 0 : f.uploadHeaders,
      uploadFormName: (h = e.image) == null ? void 0 : h.uploadFormName,
      uploader: ((p = e.image) == null ? void 0 : p.uploader) || e.uploader,
      uploaderEvent: (g = e.image) == null ? void 0 : g.uploaderEvent
    }),
    cw.configure({
      resizable: !0,
      lastColumnResizable: !0,
      allowTableNodeSelection: !0
    }),
    dw,
    fw,
    hw,
    pw,
    Hw.configure({
      openOnClick: !1,
      autolink: typeof ((m = e.link) == null ? void 0 : m.autolink) > "u" ? !0 : (y = e.link) == null ? void 0 : y.autolink,
      HTMLAttributes: {
        ref: (x = e == null ? void 0 : e.link) == null ? void 0 : x.rel,
        class: (k = e == null ? void 0 : e.link) == null ? void 0 : k.class
      }
    }),
    Bw,
    Pw,
    $w,
    Vw.configure({
      nested: !0
    }),
    K4.configure({
      lowlight: rS(a5),
      defaultLanguage: "auto",
      languageClassPrefix: "language-",
      codeExplainAi: ((E = (b = e.ai) == null ? void 0 : b.codeBlock) == null ? void 0 : E.codeExplain) || {
        model: "auto",
        prompt: "帮我对这个代码进行解释，返回代码的解释内容，注意，不需要对代码的注释进行解释"
      },
      codeCommentsAi: ((_ = (v = e.ai) == null ? void 0 : v.codeBlock) == null ? void 0 : _.codeComments) || {
        model: "auto",
        prompt: "帮我对这个代码添加一些注释，并返回添加注释的代码，只返回代码"
      }
    }),
    oS.configure({
      uploadUrl: (T = e.video) == null ? void 0 : T.uploadUrl,
      uploadHeaders: (w = e.video) == null ? void 0 : w.uploadHeaders,
      uploadFormName: (N = e.video) == null ? void 0 : N.uploadFormName,
      uploader: (($ = e.video) == null ? void 0 : $.uploader) || e.uploader,
      uploaderEvent: (K = e.video) == null ? void 0 : K.uploaderEvent
    }),
    aS,
    xD,
    kD,
    yD.configure({
      onSave: e.onSave
    }),
    // PasteExt,
    fD.configure({
      html: !0,
      // Allow HTML input/output
      tightLists: !0,
      // No <p> inside <li> in markdown output
      tightListClass: "tight",
      // Add class to <ul> allowing you to remove <p> margins when tight
      bulletListMarker: "-",
      // <li> prefix in markdown output
      linkify: !0,
      // Create links from "https://..." text
      breaks: !0,
      // New lines (\n) in markdown input are converted to <br>
      transformPastedText: !0,
      // Allow to paste markdown text in the editor
      transformCopiedText: !1
      // Copied text is transformed to markdown
    }),
    mD,
    ...IS(t)
  ), e.placeholder && n.push(FS.configure({
    placeholder: e.placeholder
  })), n.push(US.configure({
    suggestion: {
      items: (U) => {
        var z;
        return ((z = e.ai) == null ? void 0 : z.commands) || VS;
      }
    }
  })), e.onMentionQuery && n.push(zS(e.onMentionQuery)), n;
};
const ED = {
  ////commons
  default: "默认",
  delete: "删除",
  confirm: "确定",
  //menu tips
  undo: "撤销",
  redo: "重做",
  brush: "格式刷",
  container: "高亮块",
  eraser: "清除格式",
  heading: "正文/标题",
  "font-family": "字体",
  "font-size": "字号",
  bold: "加粗",
  italic: "斜体",
  underline: "下划线",
  strike: "删除线",
  link: "链接",
  "source-code": "源代码",
  code: "行内代码",
  subscript: "下标",
  superscript: "上标",
  hr: "分割线",
  todo: "任务列表",
  emoji: "表情",
  highlight: "高亮",
  "font-color": "字体颜色",
  align: "对齐",
  "line-height": "行高",
  "bullet-list": "无序列表",
  "ordered-list": "有序列表",
  "indent-decrease": "减少缩进",
  "indent-increase": "增加缩进",
  break: "强制换行",
  image: "图片",
  video: "视频",
  attachment: "附件",
  quote: "引用",
  "code-block": "代码块",
  table: "表格",
  printer: "打印",
  fullscreen: "全屏",
  ai: "人工智能",
  /////
  paragraph: "正文",
  h1: "标题 1",
  h2: "标题 2",
  h3: "标题 3",
  h4: "标题 4",
  h5: "标题 5",
  h6: "标题 6",
  ////colors panel
  standardColors: "标准色",
  historyColors: "最近使用",
  ////table
  insertTable: "插入表格",
  row: "行",
  column: "列",
  ////alignment
  "align-left": "居左对齐",
  "align-right": "居右对齐",
  "align-center": "居中对齐",
  "align-justify": "两端对齐",
  ////table
  "insert-column-left": "左侧插入列",
  "insert-column-right": "右侧插入列",
  "insert-row-top": "上方插入行",
  "insert-row-bottom": "下方插入行",
  "delete-column": "删除当前列",
  "delete-row": "删除当前行",
  "merge-cells-horizontal": "合并单元格",
  "merge-cells-vertical": "合并单元格",
  "split-cells-horizontal": "解除合并单元格",
  "split-cells-vertical": "解除合并单元格",
  "delete-table": "上传表格",
  ////link
  "edit-link": "编辑链接",
  unlink: "取消链接",
  "visit-link": "访问链接",
  "link-address": "链接地址",
  "link-open-type": "打开方式",
  "link-open-blank": "新窗口",
  ////font
  "default-font-size": "字号",
  "default-font-family": "默认字体",
  ////code block
  "codeblock-ai-auto-comment": "自动注释",
  "codeblock-ai-code-explain": "代码解释"
}, CD = {
  ////commons
  default: "Default",
  delete: "Delete",
  confirm: "Confirm",
  //menu tips
  undo: "Undo",
  redo: "Redo",
  brush: "Format Painter",
  container: "Highlight container",
  eraser: "clear format",
  heading: "Paragraph/Heading",
  "font-family": "Font Family",
  "font-size": "Font Size",
  bold: "Bold",
  italic: "Italics",
  underline: "Underline",
  strike: "Strikethrough",
  link: "Link",
  "source-code": "Source code",
  code: "Inline code",
  subscript: "Subscript",
  superscript: "Superscript",
  hr: "Dividing line",
  todo: "Task list",
  emoji: "Emoji expression",
  highlight: "Highlight",
  "font-color": "Font color",
  align: "Alignment",
  "line-height": "Line height",
  "bullet-list": "Unordered list",
  "ordered-list": "Ordered list",
  "indent-decrease": "Decrease indent",
  "indent-increase": "Increase indent",
  break: "Force line break",
  image: "Image",
  video: "video",
  attachment: "Attachment",
  quote: "Quote",
  "code-block": "Code block",
  table: "Table",
  printer: "Print",
  fullscreen: "Full screen",
  ai: "AI",
  /////
  paragraph: "Paragraph",
  h1: "H1",
  h2: "H2",
  h3: "H3",
  h4: "H4",
  h5: "H5",
  h6: "H6",
  ////colors panel
  standardColors: "Standard colors",
  historyColors: "Recently used colors",
  ////table
  insertTable: "Insert Table",
  row: "Row",
  column: "Column",
  ////alignment
  "align-left": "Align left",
  "align-right": "Align right",
  "align-center": "Align center",
  "align-justify": "Align justify",
  ////table
  "insert-column-left": "Insert column left",
  "insert-column-right": "Insert column right",
  "insert-row-top": "Insert row top",
  "insert-row-bottom": "Insert row bottom",
  "delete-column": "Delete column",
  "delete-row": "Delete row",
  "merge-cells-horizontal": "Merge cells",
  "merge-cells-vertical": "Merge cells",
  "split-cells-horizontal": "Split cells",
  "split-cells-vertical": "Split cells",
  "delete-table": "Delete table",
  ///link
  "edit-link": "Edit link",
  unlink: "Unlink",
  "visit-link": "Visit link",
  "link-address": "Link address",
  "link-open-type": "Open type",
  "link-open-blank": "Blank",
  ////font
  "default-font-size": "Size",
  "default-font-family": "Default font",
  ////code block
  "codeblock-ai-auto-comment": "auto comment",
  "codeblock-ai-code-explain": "code explain"
};
se("aie-header", F1);
se("aie-footer", H1);
const _D = {
  theme: "light",
  lang: "zh",
  contentRetentionKey: "ai-editor-content",
  editable: !0,
  draggable: !0,
  placeholder: ""
};
class wD extends N3 {
  constructor(n, r, i = {}) {
    super(i);
    P(this, "aiEditor");
    P(this, "userOptions");
    this.aiEditor = n, this.userOptions = r;
  }
  parseHtml(n) {
    function r(s) {
      return new window.DOMParser().parseFromString(`<body>${s}</body>`, "text/html").body;
    }
    return ps.fromSchema(this.schema).parse(r(n), {}).content;
  }
  parseMarkdown(n) {
    var i, s, o;
    const r = (o = (s = (i = this.storage.markdown) == null ? void 0 : i.parser) == null ? void 0 : s.parse) == null ? void 0 : o.call(s, n, {
      inline: !1
    });
    return this.parseHtml(r);
  }
}
class XD {
  constructor(e) {
    P(this, "customLayout", !1);
    P(this, "innerEditor");
    P(this, "container");
    P(this, "header");
    P(this, "mainEl");
    P(this, "footer");
    P(this, "options");
    P(this, "eventComponents", []);
    this.options = { ..._D, ...e }, this.initI18nAndInnerEditor();
  }
  initI18nAndInnerEditor() {
    const e = this.options.i18n || {}, n = {
      en: { translation: { ...CD, ...e.en } },
      zh: { translation: { ...ED, ...e.zh } }
    };
    for (let r of Object.keys(e))
      r != "en" && r != "zh" && (n[r] = {
        translation: { ...e[r] }
      });
    Xe.init({
      lng: this.options.lang,
      resources: n
    }, (r, i) => {
      this.initInnerEditor();
    });
  }
  initInnerEditor() {
    const e = typeof this.options.element == "string" ? document.querySelector(this.options.element) : this.options.element;
    e.classList.add(`aie-theme-${this.options.theme}`), this.container = e.querySelector(".aie-container"), this.container ? this.customLayout = !0 : (this.container = document.createElement("div"), this.container.classList.add("aie-container")), e.appendChild(this.container), this.mainEl = document.createElement("div"), this.mainEl.style.flexGrow = "1", this.mainEl.style.overflow = "auto", this.header = new F1(), this.footer = new H1(), this.footer.initDraggable(this.options.draggable), this.eventComponents.push(this.header), this.eventComponents.push(this.footer);
    let n = this.options.content;
    if (this.options.contentRetention && this.options.contentRetentionKey) {
      const i = localStorage.getItem(this.options.contentRetentionKey);
      i && (n = JSON.parse(i));
    }
    let r = vD(this, this.options);
    if (this.options.onCreateBefore) {
      const i = this.options.onCreateBefore(this, r);
      i || (r = i);
    }
    this.innerEditor = new wD(this, this.options, {
      element: this.mainEl,
      content: n,
      editable: this.options.editable,
      extensions: r,
      onCreate: (i) => this.onCreate(i),
      onTransaction: (i) => this.onTransaction(i),
      onDestroy: () => this.onDestroy,
      editorProps: {
        attributes: {
          class: "aie-content"
        }
      }
    });
  }
  onCreate(e) {
    this.innerEditor.view.dom.style.height = "calc(100% - 20px)", this.eventComponents.forEach((s) => {
      s.onCreate && s.onCreate(e, this.options);
    }), (this.container.querySelector(".aie-container-header") || this.container).appendChild(this.header), (this.container.querySelector(".aie-container-main") || this.container).appendChild(this.mainEl), (this.container.querySelector(".aie-container-footer") || this.container).appendChild(this.footer), this.options.ai && Er.init(this.innerEditor, this.options.ai), this.options.onCreated && this.options.onCreated(this);
  }
  onTransaction(e) {
    if (this.eventComponents.forEach((n) => {
      n.onTransaction && n.onTransaction(e);
    }), !e.transaction.getMeta("ignoreChanged") && (e.transaction.docChanged && this.options.onChange && this.options.onChange(this), e.transaction.docChanged && this.options.contentRetention && this.options.contentRetentionKey)) {
      const n = this.innerEditor.getHTML();
      n === "<p></p>" || n === "" ? localStorage.removeItem(this.options.contentRetentionKey) : localStorage.setItem(this.options.contentRetentionKey, JSON.stringify(this.innerEditor.getJSON()));
    }
  }
  onDestroy() {
  }
  getHtml() {
    return this.innerEditor.getHTML();
  }
  getJson() {
    return this.innerEditor.getJSON();
  }
  getText() {
    return this.innerEditor.getText();
  }
  getSelectedText() {
    const e = this.innerEditor.state.selection;
    return e.empty ? "" : ka(this.innerEditor.state.doc, { from: e.from, to: e.to });
  }
  getMarkdown() {
    return this.innerEditor.storage.markdown.getMarkdown();
  }
  getOptions() {
    return this.options;
  }
  getOutline() {
    const e = this.innerEditor.state.doc, n = [];
    return e.descendants((r, i) => {
      if (r.type.name === "heading") {
        const s = `aie-heading-${n.length + 1}`;
        if (r.attrs.id !== s) {
          const { state: { tr: a }, view: { dispatch: l } } = this.innerEditor;
          l(a.setNodeMarkup(i, void 0, {
            ...r.attrs,
            id: s
          }).setMeta("ignoreChanged", !0));
        }
        let o = "";
        r.descendants((a) => {
          a.text && (o += a.text);
        }), n.push({
          id: s,
          text: o,
          level: r.attrs.level,
          pos: i,
          size: r.nodeSize
        });
      }
    }), n;
  }
  focus() {
    return this.innerEditor.commands.focus(), this;
  }
  focusPos(e) {
    return this.innerEditor.commands.focus(e), this;
  }
  focusStart() {
    return this.innerEditor.commands.focus("start"), this;
  }
  focusEnd() {
    return this.innerEditor.commands.focus("end"), this;
  }
  isFocused() {
    return this.innerEditor.isFocused;
  }
  blur() {
    return this.innerEditor.commands.blur(), this;
  }
  insert(e) {
    return this.innerEditor.commands.insertContent(e), this;
  }
  setEditable(e) {
    return this.innerEditor.setEditable(e, !0), this;
  }
  setContent(e) {
    return this.focus().clear().insert(e), this;
  }
  clear() {
    return this.innerEditor.commands.clearContent(!0), this;
  }
  isEmpty() {
    return this.innerEditor.isEmpty;
  }
  changeLang(e) {
    return this.destroy(), this.options.lang = e, Xe.changeLanguage(e), this.initInnerEditor(), this;
  }
  removeRetention() {
    return this.options.contentRetentionKey && localStorage.removeItem(this.options.contentRetentionKey), this;
  }
  destroy() {
    var e, n;
    (n = (e = this.options).onDestroy) == null || n.call(e, this), this.innerEditor.destroy(), this.eventComponents = [], this.customLayout ? (this.header.remove(), this.mainEl.remove(), this.footer.remove()) : this.container.remove();
  }
  isDestroyed() {
    return this.innerEditor.isDestroyed;
  }
}
export {
  XD as AiEditor,
  Er as AiModelManager,
  HE as CustomAiModel,
  wD as InnerEditor,
  BE as OpenaiAiModel,
  RE as SparkAiModel,
  FE as WenXinAiModel
};
